
Splat2DevBoard_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004674  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080049e8  080049e8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e8  080049e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  080049f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a48  24000078  08004a68  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004ac0  08004a68  00024ac0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af4f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ba  00000000  00000000  0003aff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0003e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  0003f160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039198  00000000  00000000  0003fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa3b  00000000  00000000  00079090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ca24  00000000  00000000  00088acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002054ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e5c  00000000  00000000  00205544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080048fc 	.word	0x080048fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	080048fc 	.word	0x080048fc

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <SystemInit+0x104>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <SystemInit+0x104>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b3b      	ldr	r3, [pc, #236]	; (80003e4 <SystemInit+0x104>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <SystemInit+0x104>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b39      	ldr	r3, [pc, #228]	; (80003e8 <SystemInit+0x108>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <SystemInit+0x108>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a34      	ldr	r2, [pc, #208]	; (80003e8 <SystemInit+0x108>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <SystemInit+0x10c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a32      	ldr	r2, [pc, #200]	; (80003ec <SystemInit+0x10c>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <SystemInit+0x10c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <SystemInit+0x10c>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492e      	ldr	r1, [pc, #184]	; (80003ec <SystemInit+0x10c>)
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <SystemInit+0x110>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <SystemInit+0x108>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <SystemInit+0x108>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <SystemInit+0x108>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemInit+0x10c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <SystemInit+0x10c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <SystemInit+0x10c>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036a:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <SystemInit+0x114>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <SystemInit+0x10c>)
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <SystemInit+0x118>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <SystemInit+0x10c>)
 8000376:	4a21      	ldr	r2, [pc, #132]	; (80003fc <SystemInit+0x11c>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <SystemInit+0x10c>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <SystemInit+0x10c>)
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <SystemInit+0x11c>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <SystemInit+0x10c>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <SystemInit+0x10c>)
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SystemInit+0x11c>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <SystemInit+0x10c>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <SystemInit+0x10c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <SystemInit+0x10c>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <SystemInit+0x10c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x120>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x120>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x124>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x128>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <SystemInit+0x12c>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <SystemInit+0x130>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SystemInit+0x104>)
 80003d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	52002000 	.word	0x52002000
 80003ec:	58024400 	.word	0x58024400
 80003f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003f4:	02020200 	.word	0x02020200
 80003f8:	01ff0000 	.word	0x01ff0000
 80003fc:	01010280 	.word	0x01010280
 8000400:	580000c0 	.word	0x580000c0
 8000404:	5c001000 	.word	0x5c001000
 8000408:	ffff0000 	.word	0xffff0000
 800040c:	51008108 	.word	0x51008108
 8000410:	52004000 	.word	0x52004000

08000414 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000418:	4807      	ldr	r0, [pc, #28]	; (8000438 <MX_FREERTOS_Init+0x24>)
 800041a:	f001 fbda 	bl	8001bd2 <osMutexNew>
 800041e:	4603      	mov	r3, r0
 8000420:	4a06      	ldr	r2, [pc, #24]	; (800043c <MX_FREERTOS_Init+0x28>)
 8000422:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000424:	4a06      	ldr	r2, [pc, #24]	; (8000440 <MX_FREERTOS_Init+0x2c>)
 8000426:	2100      	movs	r1, #0
 8000428:	4806      	ldr	r0, [pc, #24]	; (8000444 <MX_FREERTOS_Init+0x30>)
 800042a:	f001 fb25 	bl	8001a78 <osThreadNew>
 800042e:	4603      	mov	r3, r0
 8000430:	4a05      	ldr	r2, [pc, #20]	; (8000448 <MX_FREERTOS_Init+0x34>)
 8000432:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	08004978 	.word	0x08004978
 800043c:	24004a6c 	.word	0x24004a6c
 8000440:	08004954 	.word	0x08004954
 8000444:	0800044d 	.word	0x0800044d
 8000448:	24004a68 	.word	0x24004a68

0800044c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000454:	2001      	movs	r0, #1
 8000456:	f001 fba1 	bl	8001b9c <osDelay>
 800045a:	e7fb      	b.n	8000454 <StartDefaultTask+0x8>

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000466:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000468:	bf00      	nop
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <main+0x98>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000472:	2b00      	cmp	r3, #0
 8000474:	d004      	beq.n	8000480 <main+0x24>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	1e5a      	subs	r2, r3, #1
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	2b00      	cmp	r3, #0
 800047e:	dcf4      	bgt.n	800046a <main+0xe>
  if ( timeout < 0 )
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b00      	cmp	r3, #0
 8000484:	da01      	bge.n	800048a <main+0x2e>
  {
  Error_Handler();
 8000486:	f000 f8a1 	bl	80005cc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 f911 	bl	80006b0 <HAL_Init>
//  Integration::LCDController *lcd = new Integration::LCDController(1);
  //Integration::LCD::Page *p = lcd->AddPage("Title");
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f833 	bl	80004f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <main+0x98>)
 8000494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000498:	4a16      	ldr	r2, [pc, #88]	; (80004f4 <main+0x98>)
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <main+0x98>)
 80004a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fa7f 	bl	80009b4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004b6:	2100      	movs	r1, #0
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 fa95 	bl	80009e8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004c4:	bf00      	nop
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <main+0x98>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d104      	bne.n	80004dc <main+0x80>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	1e5a      	subs	r2, r3, #1
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	dcf4      	bgt.n	80004c6 <main+0x6a>
if ( timeout < 0 )
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	da01      	bge.n	80004e6 <main+0x8a>
{
Error_Handler();
 80004e2:	f000 f873 	bl	80005cc <Error_Handler>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80004e6:	f001 fa7d 	bl	80019e4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80004ea:	f7ff ff93 	bl	8000414 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80004ee:	f001 fa9d 	bl	8001a2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <main+0x96>
 80004f4:	58024400 	.word	0x58024400

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09c      	sub	sp, #112	; 0x70
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	224c      	movs	r2, #76	; 0x4c
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 f92a 	bl	8004760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2220      	movs	r2, #32
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f004 f924 	bl	8004760 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000518:	2004      	movs	r0, #4
 800051a:	f000 fa79 	bl	8000a10 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800051e:	2300      	movs	r3, #0
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xcc>)
 8000524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000526:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xcc>)
 8000528:	f023 0301 	bic.w	r3, r3, #1
 800052c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xcc>)
 8000530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <SystemClock_Config+0xd0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd0>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd0>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000554:	bf00      	nop
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <SystemClock_Config+0xd0>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000562:	d1f8      	bne.n	8000556 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000568:	2301      	movs	r3, #1
 800056a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000578:	4618      	mov	r0, r3
 800057a:	f000 faa3 	bl	8000ac4 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000584:	f000 f822 	bl	80005cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	233f      	movs	r3, #63	; 0x3f
 800058a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 feb5 	bl	800131c <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b8:	f000 f808 	bl	80005cc <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3770      	adds	r7, #112	; 0x70
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	58000400 	.word	0x58000400
 80005c8:	58024800 	.word	0x58024800

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x38>)
 80005e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_MspInit+0x38>)
 80005e6:	f043 0302 	orr.w	r3, r3, #2
 80005ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_MspInit+0x38>)
 80005f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	210f      	movs	r1, #15
 8000600:	f06f 0001 	mvn.w	r0, #1
 8000604:	f000 f9af 	bl	8000966 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	58024400 	.word	0x58024400

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <NMI_Handler+0x4>

0800061a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <HardFault_Handler+0x4>

08000620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <MemManage_Handler+0x4>

08000626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <BusFault_Handler+0x4>

0800062c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <UsageFault_Handler+0x4>

08000632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000644:	f000 f8a6 	bl	8000794 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000648:	f003 fc28 	bl	8003e9c <xTaskGetSchedulerState>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d001      	beq.n	8000656 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000652:	f001 ffd9 	bl	8002608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800065c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000694 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f7ff fe3e 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	; (800069c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	; (80006a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f004 f835 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800068e:	f7ff fee5 	bl	800045c <main>
  bx  lr
 8000692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000694:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000698:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800069c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80006a0:	080049f0 	.word	0x080049f0
  ldr r2, =_sbss
 80006a4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80006a8:	24004ac0 	.word	0x24004ac0

080006ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC3_IRQHandler>
	...

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b6:	2003      	movs	r0, #3
 80006b8:	f000 f94a 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006bc:	f000 ffe4 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_Init+0x68>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	f003 030f 	and.w	r3, r3, #15
 80006cc:	4913      	ldr	r1, [pc, #76]	; (800071c <HAL_Init+0x6c>)
 80006ce:	5ccb      	ldrb	r3, [r1, r3]
 80006d0:	f003 031f 	and.w	r3, r3, #31
 80006d4:	fa22 f303 	lsr.w	r3, r2, r3
 80006d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_Init+0x68>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_Init+0x6c>)
 80006e4:	5cd3      	ldrb	r3, [r2, r3]
 80006e6:	f003 031f 	and.w	r3, r3, #31
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	fa22 f303 	lsr.w	r3, r2, r3
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <HAL_Init+0x70>)
 80006f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <HAL_Init+0x74>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fa:	200f      	movs	r0, #15
 80006fc:	f000 f814 	bl	8000728 <HAL_InitTick>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	e002      	b.n	8000710 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800070a:	f7ff ff65 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58024400 	.word	0x58024400
 800071c:	08004944 	.word	0x08004944
 8000720:	24000004 	.word	0x24000004
 8000724:	24000000 	.word	0x24000000

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_InitTick+0x60>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	e021      	b.n	8000780 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_InitTick+0x64>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_InitTick+0x60>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f921 	bl	800099a <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e00e      	b.n	8000780 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d80a      	bhi.n	800077e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f000 f8f9 	bl	8000966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_InitTick+0x68>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2400000c 	.word	0x2400000c
 800078c:	24000000 	.word	0x24000000
 8000790:	24000008 	.word	0x24000008

08000794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_IncTick+0x20>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_IncTick+0x24>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_IncTick+0x24>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	2400000c 	.word	0x2400000c
 80007b8:	24004a70 	.word	0x24004a70

080007bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <HAL_GetTick+0x14>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	24004a70 	.word	0x24004a70

080007d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_GetREVID+0x14>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	0c1b      	lsrs	r3, r3, #16
}
 80007de:	4618      	mov	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	5c001000 	.word	0x5c001000

080007ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <__NVIC_SetPriorityGrouping+0x40>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 8000816:	4313      	orrs	r3, r2
 8000818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <__NVIC_SetPriorityGrouping+0x40>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00
 8000830:	05fa0000 	.word	0x05fa0000

08000834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <__NVIC_GetPriorityGrouping+0x18>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	f003 0307 	and.w	r3, r3, #7
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800085c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0a      	blt.n	800087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <__NVIC_SetPriority+0x4c>)
 800086a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000878:	e00a      	b.n	8000890 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <__NVIC_SetPriority+0x50>)
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	3b04      	subs	r3, #4
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	440b      	add	r3, r1
 800088e:	761a      	strb	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1c3 0307 	rsb	r3, r3, #7
 80008be:	2b04      	cmp	r3, #4
 80008c0:	bf28      	it	cs
 80008c2:	2304      	movcs	r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d902      	bls.n	80008d4 <NVIC_EncodePriority+0x30>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3b03      	subs	r3, #3
 80008d2:	e000      	b.n	80008d6 <NVIC_EncodePriority+0x32>
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43da      	mvns	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	401a      	ands	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	4313      	orrs	r3, r2
         );
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	; 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800091c:	d301      	bcc.n	8000922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091e:	2301      	movs	r3, #1
 8000920:	e00f      	b.n	8000942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <SysTick_Config+0x40>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092a:	210f      	movs	r1, #15
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f7ff ff8e 	bl	8000850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <SysTick_Config+0x40>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <SysTick_Config+0x40>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff47 	bl	80007ec <__NVIC_SetPriorityGrouping>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff5e 	bl	8000834 <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff90 	bl	80008a4 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5f 	bl	8000850 <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffb2 	bl	800090c <SysTick_Config>
 80009a8:	4603      	mov	r3, r0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80009bc:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_HSEM_FastTake+0x2c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3320      	adds	r3, #32
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_HSEM_FastTake+0x30>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d101      	bne.n	80009d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e000      	b.n	80009d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	58026400 	.word	0x58026400
 80009e4:	80000300 	.word	0x80000300

080009e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80009f2:	4906      	ldr	r1, [pc, #24]	; (8000a0c <HAL_HSEM_Release+0x24>)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	58026400 	.word	0x58026400

08000a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	f003 0307 	and.w	r3, r3, #7
 8000a20:	2b06      	cmp	r3, #6
 8000a22:	d00a      	beq.n	8000a3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000a24:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d001      	beq.n	8000a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e040      	b.n	8000ab8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e03e      	b.n	8000ab8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000a42:	491f      	ldr	r1, [pc, #124]	; (8000ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000a4a:	f7ff feb7 	bl	80007bc <HAL_GetTick>
 8000a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a50:	e009      	b.n	8000a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000a52:	f7ff feb3 	bl	80007bc <HAL_GetTick>
 8000a56:	4602      	mov	r2, r0
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a60:	d901      	bls.n	8000a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e028      	b.n	8000ab8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a72:	d1ee      	bne.n	8000a52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b1e      	cmp	r3, #30
 8000a78:	d008      	beq.n	8000a8c <HAL_PWREx_ConfigSupply+0x7c>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8000a7e:	d005      	beq.n	8000a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b1d      	cmp	r3, #29
 8000a84:	d002      	beq.n	8000a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b2d      	cmp	r3, #45	; 0x2d
 8000a8a:	d114      	bne.n	8000ab6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000a8c:	f7ff fe96 	bl	80007bc <HAL_GetTick>
 8000a90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000a92:	e009      	b.n	8000aa8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000a94:	f7ff fe92 	bl	80007bc <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000aa2:	d901      	bls.n	8000aa8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e007      	b.n	8000ab8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ab4:	d1ee      	bne.n	8000a94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	58024800 	.word	0x58024800

08000ac4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f000 bc1c 	b.w	8001310 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f000 8087 	beq.w	8000bf4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ae6:	4b9e      	ldr	r3, [pc, #632]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000af0:	4b9b      	ldr	r3, [pc, #620]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	2b10      	cmp	r3, #16
 8000afa:	d007      	beq.n	8000b0c <HAL_RCC_OscConfig+0x48>
 8000afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afe:	2b18      	cmp	r3, #24
 8000b00:	d110      	bne.n	8000b24 <HAL_RCC_OscConfig+0x60>
 8000b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d10b      	bne.n	8000b24 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0c:	4b94      	ldr	r3, [pc, #592]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d06c      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x12e>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d168      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e3f5      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b2c:	d106      	bne.n	8000b3c <HAL_RCC_OscConfig+0x78>
 8000b2e:	4b8c      	ldr	r3, [pc, #560]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a8b      	ldr	r2, [pc, #556]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e02e      	b.n	8000b9a <HAL_RCC_OscConfig+0xd6>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10c      	bne.n	8000b5e <HAL_RCC_OscConfig+0x9a>
 8000b44:	4b86      	ldr	r3, [pc, #536]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a85      	ldr	r2, [pc, #532]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4b83      	ldr	r3, [pc, #524]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a82      	ldr	r2, [pc, #520]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e01d      	b.n	8000b9a <HAL_RCC_OscConfig+0xd6>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b66:	d10c      	bne.n	8000b82 <HAL_RCC_OscConfig+0xbe>
 8000b68:	4b7d      	ldr	r3, [pc, #500]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a7c      	ldr	r2, [pc, #496]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a79      	ldr	r2, [pc, #484]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e00b      	b.n	8000b9a <HAL_RCC_OscConfig+0xd6>
 8000b82:	4b77      	ldr	r3, [pc, #476]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a76      	ldr	r2, [pc, #472]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a73      	ldr	r2, [pc, #460]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d013      	beq.n	8000bca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fe0b 	bl	80007bc <HAL_GetTick>
 8000ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ba8:	e008      	b.n	8000bbc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000baa:	f7ff fe07 	bl	80007bc <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b64      	cmp	r3, #100	; 0x64
 8000bb6:	d901      	bls.n	8000bbc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e3a9      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bbc:	4b68      	ldr	r3, [pc, #416]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f0      	beq.n	8000baa <HAL_RCC_OscConfig+0xe6>
 8000bc8:	e014      	b.n	8000bf4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bca:	f7ff fdf7 	bl	80007bc <HAL_GetTick>
 8000bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bd0:	e008      	b.n	8000be4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd2:	f7ff fdf3 	bl	80007bc <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b64      	cmp	r3, #100	; 0x64
 8000bde:	d901      	bls.n	8000be4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e395      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000be4:	4b5e      	ldr	r3, [pc, #376]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f0      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x10e>
 8000bf0:	e000      	b.n	8000bf4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 80ca 	beq.w	8000d96 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c02:	4b57      	ldr	r3, [pc, #348]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000c0a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c0c:	4b54      	ldr	r3, [pc, #336]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d007      	beq.n	8000c28 <HAL_RCC_OscConfig+0x164>
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	2b18      	cmp	r3, #24
 8000c1c:	d156      	bne.n	8000ccc <HAL_RCC_OscConfig+0x208>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d151      	bne.n	8000ccc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c28:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d005      	beq.n	8000c40 <HAL_RCC_OscConfig+0x17c>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e367      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c40:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 0219 	bic.w	r2, r3, #25
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	4944      	ldr	r1, [pc, #272]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000c52:	f7ff fdb3 	bl	80007bc <HAL_GetTick>
 8000c56:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c58:	e008      	b.n	8000c6c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5a:	f7ff fdaf 	bl	80007bc <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e351      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c6c:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f0      	beq.n	8000c5a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c78:	f7ff fdac 	bl	80007d4 <HAL_GetREVID>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d817      	bhi.n	8000cb6 <HAL_RCC_OscConfig+0x1f2>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	2b40      	cmp	r3, #64	; 0x40
 8000c8c:	d108      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x1dc>
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000c96:	4a32      	ldr	r2, [pc, #200]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c9e:	e07a      	b.n	8000d96 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	031b      	lsls	r3, r3, #12
 8000cae:	492c      	ldr	r1, [pc, #176]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cb4:	e06f      	b.n	8000d96 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	061b      	lsls	r3, r3, #24
 8000cc4:	4926      	ldr	r1, [pc, #152]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cca:	e064      	b.n	8000d96 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d047      	beq.n	8000d64 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f023 0219 	bic.w	r2, r3, #25
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	491f      	ldr	r1, [pc, #124]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fd69 	bl	80007bc <HAL_GetTick>
 8000cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cee:	f7ff fd65 	bl	80007bc <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e307      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f0      	beq.n	8000cee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0c:	f7ff fd62 	bl	80007d4 <HAL_GetREVID>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f241 0203 	movw	r2, #4099	; 0x1003
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d817      	bhi.n	8000d4a <HAL_RCC_OscConfig+0x286>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	2b40      	cmp	r3, #64	; 0x40
 8000d20:	d108      	bne.n	8000d34 <HAL_RCC_OscConfig+0x270>
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000d2a:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	6053      	str	r3, [r2, #4]
 8000d32:	e030      	b.n	8000d96 <HAL_RCC_OscConfig+0x2d2>
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	031b      	lsls	r3, r3, #12
 8000d42:	4907      	ldr	r1, [pc, #28]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	604b      	str	r3, [r1, #4]
 8000d48:	e025      	b.n	8000d96 <HAL_RCC_OscConfig+0x2d2>
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	061b      	lsls	r3, r3, #24
 8000d58:	4901      	ldr	r1, [pc, #4]	; (8000d60 <HAL_RCC_OscConfig+0x29c>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
 8000d5e:	e01a      	b.n	8000d96 <HAL_RCC_OscConfig+0x2d2>
 8000d60:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d64:	4b9e      	ldr	r3, [pc, #632]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a9d      	ldr	r2, [pc, #628]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d70:	f7ff fd24 	bl	80007bc <HAL_GetTick>
 8000d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fd20 	bl	80007bc <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e2c2      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d8a:	4b95      	ldr	r3, [pc, #596]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80a9 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000da4:	4b8e      	ldr	r3, [pc, #568]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000dac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000dae:	4b8c      	ldr	r3, [pc, #560]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d007      	beq.n	8000dca <HAL_RCC_OscConfig+0x306>
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b18      	cmp	r3, #24
 8000dbe:	d13a      	bne.n	8000e36 <HAL_RCC_OscConfig+0x372>
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d135      	bne.n	8000e36 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000dca:	4b85      	ldr	r3, [pc, #532]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <HAL_RCC_OscConfig+0x31e>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	2b80      	cmp	r3, #128	; 0x80
 8000ddc:	d001      	beq.n	8000de2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e296      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000de2:	f7ff fcf7 	bl	80007d4 <HAL_GetREVID>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f241 0203 	movw	r2, #4099	; 0x1003
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d817      	bhi.n	8000e20 <HAL_RCC_OscConfig+0x35c>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	2b20      	cmp	r3, #32
 8000df6:	d108      	bne.n	8000e0a <HAL_RCC_OscConfig+0x346>
 8000df8:	4b79      	ldr	r3, [pc, #484]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000e00:	4a77      	ldr	r2, [pc, #476]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e06:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000e08:	e075      	b.n	8000ef6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e0a:	4b75      	ldr	r3, [pc, #468]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	069b      	lsls	r3, r3, #26
 8000e18:	4971      	ldr	r1, [pc, #452]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000e1e:	e06a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e20:	4b6f      	ldr	r3, [pc, #444]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	061b      	lsls	r3, r3, #24
 8000e2e:	496c      	ldr	r1, [pc, #432]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000e34:	e05f      	b.n	8000ef6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d042      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000e3e:	4b68      	ldr	r3, [pc, #416]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a67      	ldr	r2, [pc, #412]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fcb7 	bl	80007bc <HAL_GetTick>
 8000e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000e52:	f7ff fcb3 	bl	80007bc <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e255      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000e64:	4b5e      	ldr	r3, [pc, #376]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e70:	f7ff fcb0 	bl	80007d4 <HAL_GetREVID>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f241 0203 	movw	r2, #4099	; 0x1003
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d817      	bhi.n	8000eae <HAL_RCC_OscConfig+0x3ea>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	d108      	bne.n	8000e98 <HAL_RCC_OscConfig+0x3d4>
 8000e86:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000e8e:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e94:	6053      	str	r3, [r2, #4]
 8000e96:	e02e      	b.n	8000ef6 <HAL_RCC_OscConfig+0x432>
 8000e98:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	069b      	lsls	r3, r3, #26
 8000ea6:	494e      	ldr	r1, [pc, #312]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
 8000eac:	e023      	b.n	8000ef6 <HAL_RCC_OscConfig+0x432>
 8000eae:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	061b      	lsls	r3, r3, #24
 8000ebc:	4948      	ldr	r1, [pc, #288]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60cb      	str	r3, [r1, #12]
 8000ec2:	e018      	b.n	8000ef6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000ec4:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a45      	ldr	r2, [pc, #276]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fc74 	bl	80007bc <HAL_GetTick>
 8000ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fc70 	bl	80007bc <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e212      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d036      	beq.n	8000f70 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d019      	beq.n	8000f3e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f0e:	4a34      	ldr	r2, [pc, #208]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f16:	f7ff fc51 	bl	80007bc <HAL_GetTick>
 8000f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fc4d 	bl	80007bc <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e1ef      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x45a>
 8000f3c:	e018      	b.n	8000f70 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f42:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fc37 	bl	80007bc <HAL_GetTick>
 8000f4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f52:	f7ff fc33 	bl	80007bc <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e1d5      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f0      	bne.n	8000f52 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0320 	and.w	r3, r3, #32
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d039      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d019      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000f8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000f90:	f7ff fc14 	bl	80007bc <HAL_GetTick>
 8000f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000f98:	f7ff fc10 	bl	80007bc <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1b2      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0x4d4>
 8000fb6:	e01b      	b.n	8000ff0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_RCC_OscConfig+0x51c>)
 8000fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fbfa 	bl	80007bc <HAL_GetTick>
 8000fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000fca:	e00b      	b.n	8000fe4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000fcc:	f7ff fbf6 	bl	80007bc <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d904      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e198      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
 8000fde:	bf00      	nop
 8000fe0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000fe4:	4ba3      	ldr	r3, [pc, #652]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1ed      	bne.n	8000fcc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 8081 	beq.w	8001100 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000ffe:	4b9e      	ldr	r3, [pc, #632]	; (8001278 <HAL_RCC_OscConfig+0x7b4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a9d      	ldr	r2, [pc, #628]	; (8001278 <HAL_RCC_OscConfig+0x7b4>)
 8001004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001008:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800100a:	f7ff fbd7 	bl	80007bc <HAL_GetTick>
 800100e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001012:	f7ff fbd3 	bl	80007bc <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b64      	cmp	r3, #100	; 0x64
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e175      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001024:	4b94      	ldr	r3, [pc, #592]	; (8001278 <HAL_RCC_OscConfig+0x7b4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x582>
 8001038:	4b8e      	ldr	r3, [pc, #568]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800103a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800103c:	4a8d      	ldr	r2, [pc, #564]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6713      	str	r3, [r2, #112]	; 0x70
 8001044:	e02d      	b.n	80010a2 <HAL_RCC_OscConfig+0x5de>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10c      	bne.n	8001068 <HAL_RCC_OscConfig+0x5a4>
 800104e:	4b89      	ldr	r3, [pc, #548]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001052:	4a88      	ldr	r2, [pc, #544]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6713      	str	r3, [r2, #112]	; 0x70
 800105a:	4b86      	ldr	r3, [pc, #536]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800105c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800105e:	4a85      	ldr	r2, [pc, #532]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	6713      	str	r3, [r2, #112]	; 0x70
 8001066:	e01c      	b.n	80010a2 <HAL_RCC_OscConfig+0x5de>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b05      	cmp	r3, #5
 800106e:	d10c      	bne.n	800108a <HAL_RCC_OscConfig+0x5c6>
 8001070:	4b80      	ldr	r3, [pc, #512]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001074:	4a7f      	ldr	r2, [pc, #508]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6713      	str	r3, [r2, #112]	; 0x70
 800107c:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800107e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001080:	4a7c      	ldr	r2, [pc, #496]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6713      	str	r3, [r2, #112]	; 0x70
 8001088:	e00b      	b.n	80010a2 <HAL_RCC_OscConfig+0x5de>
 800108a:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800108c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800108e:	4a79      	ldr	r2, [pc, #484]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	6713      	str	r3, [r2, #112]	; 0x70
 8001096:	4b77      	ldr	r3, [pc, #476]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800109a:	4a76      	ldr	r2, [pc, #472]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d015      	beq.n	80010d6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010aa:	f7ff fb87 	bl	80007bc <HAL_GetTick>
 80010ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b2:	f7ff fb83 	bl	80007bc <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e123      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80010ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0ee      	beq.n	80010b2 <HAL_RCC_OscConfig+0x5ee>
 80010d4:	e014      	b.n	8001100 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d6:	f7ff fb71 	bl	80007bc <HAL_GetTick>
 80010da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fb6d 	bl	80007bc <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e10d      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010f4:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80010f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1ee      	bne.n	80010de <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 8102 	beq.w	800130e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800110a:	4b5a      	ldr	r3, [pc, #360]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001112:	2b18      	cmp	r3, #24
 8001114:	f000 80bd 	beq.w	8001292 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	2b02      	cmp	r3, #2
 800111e:	f040 8095 	bne.w	800124c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a53      	ldr	r2, [pc, #332]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800112c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fb45 	bl	80007bc <HAL_GetTick>
 8001132:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff fb41 	bl	80007bc <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e0e3      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001154:	4b47      	ldr	r3, [pc, #284]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001158:	4b48      	ldr	r3, [pc, #288]	; (800127c <HAL_RCC_OscConfig+0x7b8>)
 800115a:	4013      	ands	r3, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	430a      	orrs	r2, r1
 8001168:	4942      	ldr	r1, [pc, #264]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800116a:	4313      	orrs	r3, r2
 800116c:	628b      	str	r3, [r1, #40]	; 0x28
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	3b01      	subs	r3, #1
 8001174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117c:	3b01      	subs	r3, #1
 800117e:	025b      	lsls	r3, r3, #9
 8001180:	b29b      	uxth	r3, r3
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001188:	3b01      	subs	r3, #1
 800118a:	041b      	lsls	r3, r3, #16
 800118c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001196:	3b01      	subs	r3, #1
 8001198:	061b      	lsls	r3, r3, #24
 800119a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800119e:	4935      	ldr	r1, [pc, #212]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	4a32      	ldr	r2, [pc, #200]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <HAL_RCC_OscConfig+0x7bc>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011bc:	00d2      	lsls	r2, r2, #3
 80011be:	492d      	ldr	r1, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	f023 020c 	bic.w	r2, r3, #12
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	4928      	ldr	r1, [pc, #160]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	f023 0202 	bic.w	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4924      	ldr	r1, [pc, #144]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	4a21      	ldr	r2, [pc, #132]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 80011fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	4a18      	ldr	r2, [pc, #96]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800121e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff faca 	bl	80007bc <HAL_GetTick>
 8001228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fac6 	bl	80007bc <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e068      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x768>
 800124a:	e060      	b.n	800130e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_RCC_OscConfig+0x7b0>)
 8001252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fab0 	bl	80007bc <HAL_GetTick>
 800125c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800125e:	e011      	b.n	8001284 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001260:	f7ff faac 	bl	80007bc <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d90a      	bls.n	8001284 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e04e      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
 8001272:	bf00      	nop
 8001274:	58024400 	.word	0x58024400
 8001278:	58024800 	.word	0x58024800
 800127c:	fffffc0c 	.word	0xfffffc0c
 8001280:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_RCC_OscConfig+0x854>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e7      	bne.n	8001260 <HAL_RCC_OscConfig+0x79c>
 8001290:	e03d      	b.n	800130e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_RCC_OscConfig+0x854>)
 8001294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001296:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_RCC_OscConfig+0x854>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d031      	beq.n	800130a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	f003 0203 	and.w	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d12a      	bne.n	800130a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d122      	bne.n	800130a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d11a      	bne.n	800130a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	0a5b      	lsrs	r3, r3, #9
 80012d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d111      	bne.n	800130a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d108      	bne.n	800130a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	0e1b      	lsrs	r3, r3, #24
 80012fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001304:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d001      	beq.n	800130e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3730      	adds	r7, #48	; 0x30
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58024400 	.word	0x58024400

0800131c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e19c      	b.n	800166a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b8a      	ldr	r3, [pc, #552]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d910      	bls.n	8001360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b87      	ldr	r3, [pc, #540]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 020f 	bic.w	r2, r3, #15
 8001346:	4985      	ldr	r1, [pc, #532]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134e:	4b83      	ldr	r3, [pc, #524]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e184      	b.n	800166a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d010      	beq.n	800138e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	4b7b      	ldr	r3, [pc, #492]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001378:	429a      	cmp	r2, r3
 800137a:	d908      	bls.n	800138e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800137c:	4b78      	ldr	r3, [pc, #480]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4975      	ldr	r1, [pc, #468]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 800138a:	4313      	orrs	r3, r2
 800138c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d010      	beq.n	80013bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	4b70      	ldr	r3, [pc, #448]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d908      	bls.n	80013bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80013aa:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	496a      	ldr	r1, [pc, #424]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d010      	beq.n	80013ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d908      	bls.n	80013ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80013d8:	4b61      	ldr	r3, [pc, #388]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	495e      	ldr	r1, [pc, #376]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d010      	beq.n	8001418 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001402:	429a      	cmp	r2, r3
 8001404:	d908      	bls.n	8001418 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4953      	ldr	r1, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001414:	4313      	orrs	r3, r2
 8001416:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d010      	beq.n	8001446 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	429a      	cmp	r2, r3
 8001432:	d908      	bls.n	8001446 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001434:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f023 020f 	bic.w	r2, r3, #15
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4947      	ldr	r1, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001442:	4313      	orrs	r3, r2
 8001444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d055      	beq.n	80014fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4940      	ldr	r1, [pc, #256]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001460:	4313      	orrs	r3, r2
 8001462:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d107      	bne.n	800147c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800146c:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d121      	bne.n	80014bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0f6      	b.n	800166a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d107      	bne.n	8001494 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d115      	bne.n	80014bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0ea      	b.n	800166a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d109      	bne.n	80014bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0de      	b.n	800166a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0d6      	b.n	800166a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	f023 0207 	bic.w	r2, r3, #7
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4925      	ldr	r1, [pc, #148]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff f975 	bl	80007bc <HAL_GetTick>
 80014d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d6:	f7ff f971 	bl	80007bc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0be      	b.n	800166a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d1eb      	bne.n	80014d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	429a      	cmp	r2, r3
 8001518:	d208      	bcs.n	800152c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f023 020f 	bic.w	r2, r3, #15
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x244>)
 8001528:	4313      	orrs	r3, r2
 800152a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d214      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 020f 	bic.w	r2, r3, #15
 8001542:	4906      	ldr	r1, [pc, #24]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d005      	beq.n	8001564 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e086      	b.n	800166a <HAL_RCC_ClockConfig+0x34e>
 800155c:	52002000 	.word	0x52002000
 8001560:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d010      	beq.n	8001592 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800157c:	429a      	cmp	r2, r3
 800157e:	d208      	bcs.n	8001592 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001580:	4b3c      	ldr	r3, [pc, #240]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4939      	ldr	r1, [pc, #228]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 800158e:	4313      	orrs	r3, r2
 8001590:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d208      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	492e      	ldr	r1, [pc, #184]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d010      	beq.n	80015ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015d8:	429a      	cmp	r2, r3
 80015da:	d208      	bcs.n	80015ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4922      	ldr	r1, [pc, #136]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d010      	beq.n	800161c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001606:	429a      	cmp	r2, r3
 8001608:	d208      	bcs.n	800161c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4917      	ldr	r1, [pc, #92]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 8001618:	4313      	orrs	r3, r2
 800161a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800161c:	f000 f834 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 8001620:	4602      	mov	r2, r0
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	4912      	ldr	r1, [pc, #72]	; (8001678 <HAL_RCC_ClockConfig+0x35c>)
 800162e:	5ccb      	ldrb	r3, [r1, r3]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
 8001638:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_RCC_ClockConfig+0x358>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_RCC_ClockConfig+0x35c>)
 8001644:	5cd3      	ldrb	r3, [r2, r3]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_RCC_ClockConfig+0x360>)
 8001652:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_RCC_ClockConfig+0x364>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RCC_ClockConfig+0x368>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff f862 	bl	8000728 <HAL_InitTick>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	58024400 	.word	0x58024400
 8001678:	08004944 	.word	0x08004944
 800167c:	24000004 	.word	0x24000004
 8001680:	24000000 	.word	0x24000000
 8001684:	24000008 	.word	0x24000008

08001688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800168e:	4bb3      	ldr	r3, [pc, #716]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001696:	2b18      	cmp	r3, #24
 8001698:	f200 8155 	bhi.w	8001946 <HAL_RCC_GetSysClockFreq+0x2be>
 800169c:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a2:	bf00      	nop
 80016a4:	08001709 	.word	0x08001709
 80016a8:	08001947 	.word	0x08001947
 80016ac:	08001947 	.word	0x08001947
 80016b0:	08001947 	.word	0x08001947
 80016b4:	08001947 	.word	0x08001947
 80016b8:	08001947 	.word	0x08001947
 80016bc:	08001947 	.word	0x08001947
 80016c0:	08001947 	.word	0x08001947
 80016c4:	0800172f 	.word	0x0800172f
 80016c8:	08001947 	.word	0x08001947
 80016cc:	08001947 	.word	0x08001947
 80016d0:	08001947 	.word	0x08001947
 80016d4:	08001947 	.word	0x08001947
 80016d8:	08001947 	.word	0x08001947
 80016dc:	08001947 	.word	0x08001947
 80016e0:	08001947 	.word	0x08001947
 80016e4:	08001735 	.word	0x08001735
 80016e8:	08001947 	.word	0x08001947
 80016ec:	08001947 	.word	0x08001947
 80016f0:	08001947 	.word	0x08001947
 80016f4:	08001947 	.word	0x08001947
 80016f8:	08001947 	.word	0x08001947
 80016fc:	08001947 	.word	0x08001947
 8001700:	08001947 	.word	0x08001947
 8001704:	0800173b 	.word	0x0800173b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001708:	4b94      	ldr	r3, [pc, #592]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d009      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001714:	4b91      	ldr	r3, [pc, #580]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	4a90      	ldr	r2, [pc, #576]	; (8001960 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001726:	e111      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001728:	4b8d      	ldr	r3, [pc, #564]	; (8001960 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800172a:	61bb      	str	r3, [r7, #24]
    break;
 800172c:	e10e      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800172e:	4b8d      	ldr	r3, [pc, #564]	; (8001964 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001730:	61bb      	str	r3, [r7, #24]
    break;
 8001732:	e10b      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001736:	61bb      	str	r3, [r7, #24]
    break;
 8001738:	e108      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800173a:	4b88      	ldr	r3, [pc, #544]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001744:	4b85      	ldr	r3, [pc, #532]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800174e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001750:	4b82      	ldr	r3, [pc, #520]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800175a:	4b80      	ldr	r3, [pc, #512]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001772:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80e1 	beq.w	8001940 <HAL_RCC_GetSysClockFreq+0x2b8>
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b02      	cmp	r3, #2
 8001782:	f000 8083 	beq.w	800188c <HAL_RCC_GetSysClockFreq+0x204>
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b02      	cmp	r3, #2
 800178a:	f200 80a1 	bhi.w	80018d0 <HAL_RCC_GetSysClockFreq+0x248>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x114>
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d056      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x1c0>
 800179a:	e099      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800179c:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d02d      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80017a8:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	4a6b      	ldr	r2, [pc, #428]	; (8001960 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80017e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800196c <HAL_RCC_GetSysClockFreq+0x2e4>
 80017ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001802:	e087      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800180e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001970 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001816:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001826:	ed97 6a02 	vldr	s12, [r7, #8]
 800182a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800196c <HAL_RCC_GetSysClockFreq+0x2e4>
 800182e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800183a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800183e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001846:	e065      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001852:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001974 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185a:	4b40      	ldr	r3, [pc, #256]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800186a:	ed97 6a02 	vldr	s12, [r7, #8]
 800186e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800196c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800187a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800187e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800188a:	e043      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001896:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001978 <HAL_RCC_GetSysClockFreq+0x2f0>
 800189a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80018b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800196c <HAL_RCC_GetSysClockFreq+0x2e4>
 80018b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80018ce:	e021      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001974 <HAL_RCC_GetSysClockFreq+0x2ec>
 80018de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80018f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800196c <HAL_RCC_GetSysClockFreq+0x2e4>
 80018fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001912:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	0a5b      	lsrs	r3, r3, #9
 800191a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800191e:	3301      	adds	r3, #1
 8001920:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800192c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001938:	ee17 3a90 	vmov	r3, s15
 800193c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800193e:	e005      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
    break;
 8001944:	e002      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001948:	61bb      	str	r3, [r7, #24]
    break;
 800194a:	bf00      	nop
  }

  return sysclockfreq;
 800194c:	69bb      	ldr	r3, [r7, #24]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	58024400 	.word	0x58024400
 8001960:	03d09000 	.word	0x03d09000
 8001964:	003d0900 	.word	0x003d0900
 8001968:	017d7840 	.word	0x017d7840
 800196c:	46000000 	.word	0x46000000
 8001970:	4c742400 	.word	0x4c742400
 8001974:	4a742400 	.word	0x4a742400
 8001978:	4bbebc20 	.word	0x4bbebc20

0800197c <__NVIC_SetPriority>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80019d4:	2100      	movs	r1, #0
 80019d6:	f06f 0004 	mvn.w	r0, #4
 80019da:	f7ff ffcf 	bl	800197c <__NVIC_SetPriority>
#endif
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019ea:	f3ef 8305 	mrs	r3, IPSR
 80019ee:	603b      	str	r3, [r7, #0]
  return(result);
 80019f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80019f6:	f06f 0305 	mvn.w	r3, #5
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	e00c      	b.n	8001a18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <osKernelInitialize+0x44>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <osKernelInitialize+0x44>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	e002      	b.n	8001a18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	24000094 	.word	0x24000094

08001a2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a32:	f3ef 8305 	mrs	r3, IPSR
 8001a36:	603b      	str	r3, [r7, #0]
  return(result);
 8001a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001a3e:	f06f 0305 	mvn.w	r3, #5
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	e010      	b.n	8001a68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <osKernelStart+0x48>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d109      	bne.n	8001a62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001a4e:	f7ff ffbf 	bl	80019d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <osKernelStart+0x48>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001a58:	f001 fdc4 	bl	80035e4 <vTaskStartScheduler>
      stat = osOK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	e002      	b.n	8001a68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	24000094 	.word	0x24000094

08001a78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af04      	add	r7, sp, #16
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a88:	f3ef 8305 	mrs	r3, IPSR
 8001a8c:	617b      	str	r3, [r7, #20]
  return(result);
 8001a8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d17e      	bne.n	8001b92 <osThreadNew+0x11a>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d07b      	beq.n	8001b92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001a9e:	2318      	movs	r3, #24
 8001aa0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d045      	beq.n	8001b3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <osThreadNew+0x48>
        name = attr->name;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <osThreadNew+0x6e>
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b38      	cmp	r3, #56	; 0x38
 8001ad8:	d805      	bhi.n	8001ae6 <osThreadNew+0x6e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <osThreadNew+0x72>
        return (NULL);
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e054      	b.n	8001b94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00e      	beq.n	8001b20 <osThreadNew+0xa8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2bbb      	cmp	r3, #187	; 0xbb
 8001b08:	d90a      	bls.n	8001b20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <osThreadNew+0xa8>
        mem = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	e010      	b.n	8001b42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10c      	bne.n	8001b42 <osThreadNew+0xca>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d108      	bne.n	8001b42 <osThreadNew+0xca>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d104      	bne.n	8001b42 <osThreadNew+0xca>
          mem = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	e001      	b.n	8001b42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d110      	bne.n	8001b6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b50:	9202      	str	r2, [sp, #8]
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f001 fb54 	bl	800320c <xTaskCreateStatic>
 8001b64:	4603      	mov	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	e013      	b.n	8001b92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d110      	bne.n	8001b92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f001 fb9f 	bl	80032c6 <xTaskCreate>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <osThreadNew+0x11a>
            hTask = NULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b92:	693b      	ldr	r3, [r7, #16]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ba4:	f3ef 8305 	mrs	r3, IPSR
 8001ba8:	60bb      	str	r3, [r7, #8]
  return(result);
 8001baa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <osDelay+0x1c>
    stat = osErrorISR;
 8001bb0:	f06f 0305 	mvn.w	r3, #5
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e007      	b.n	8001bc8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f001 fcda 	bl	800357c <vTaskDelay>
    }
  }

  return (stat);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b088      	sub	sp, #32
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bde:	f3ef 8305 	mrs	r3, IPSR
 8001be2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001be4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d174      	bne.n	8001cd4 <osMutexNew+0x102>
    if (attr != NULL) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	e001      	b.n	8001bfc <osMutexNew+0x2a>
    } else {
      type = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <osMutexNew+0x3a>
      rmtx = 1U;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e001      	b.n	8001c10 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d15c      	bne.n	8001cd4 <osMutexNew+0x102>
      mem = -1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d015      	beq.n	8001c52 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <osMutexNew+0x6a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b4f      	cmp	r3, #79	; 0x4f
 8001c34:	d902      	bls.n	8001c3c <osMutexNew+0x6a>
          mem = 1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	e00c      	b.n	8001c56 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d108      	bne.n	8001c56 <osMutexNew+0x84>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <osMutexNew+0x84>
            mem = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	e001      	b.n	8001c56 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d112      	bne.n	8001c82 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	4619      	mov	r1, r3
 8001c68:	2004      	movs	r0, #4
 8001c6a:	f000 fecc 	bl	8002a06 <xQueueCreateMutexStatic>
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	e016      	b.n	8001ca0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4619      	mov	r1, r3
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 fec4 	bl	8002a06 <xQueueCreateMutexStatic>
 8001c7e:	61f8      	str	r0, [r7, #28]
 8001c80:	e00e      	b.n	8001ca0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d004      	beq.n	8001c98 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8001c8e:	2004      	movs	r0, #4
 8001c90:	f000 fea1 	bl	80029d6 <xQueueCreateMutex>
 8001c94:	61f8      	str	r0, [r7, #28]
 8001c96:	e003      	b.n	8001ca0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f000 fe9c 	bl	80029d6 <xQueueCreateMutex>
 8001c9e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00c      	beq.n	8001cc0 <osMutexNew+0xee>
        if (attr != NULL) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <osMutexNew+0xe2>
          name = attr->name;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e001      	b.n	8001cb8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	69f8      	ldr	r0, [r7, #28]
 8001cbc:	f001 fa48 	bl	8003150 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <osMutexNew+0x102>
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3720      	adds	r7, #32
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <vApplicationGetIdleTaskMemory+0x2c>)
 8001cf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <vApplicationGetIdleTaskMemory+0x30>)
 8001cf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	601a      	str	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	24000098 	.word	0x24000098
 8001d10:	24000154 	.word	0x24000154

08001d14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <vApplicationGetTimerTaskMemory+0x30>)
 8001d2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d32:	601a      	str	r2, [r3, #0]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	24000354 	.word	0x24000354
 8001d44:	24000410 	.word	0x24000410

08001d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001d54:	f001 fcb6 	bl	80036c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001d58:	4b5b      	ldr	r3, [pc, #364]	; (8001ec8 <pvPortMalloc+0x180>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001d60:	f000 f920 	bl	8001fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <pvPortMalloc+0x184>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 8093 	bne.w	8001e98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01d      	beq.n	8001db4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001d78:	2208      	movs	r2, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d014      	beq.n	8001db4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f023 0307 	bic.w	r3, r3, #7
 8001d90:	3308      	adds	r3, #8
 8001d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001db0:	bf00      	nop
 8001db2:	e7fe      	b.n	8001db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d06e      	beq.n	8001e98 <pvPortMalloc+0x150>
 8001dba:	4b45      	ldr	r3, [pc, #276]	; (8001ed0 <pvPortMalloc+0x188>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d869      	bhi.n	8001e98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001dc4:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <pvPortMalloc+0x18c>)
 8001dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001dc8:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <pvPortMalloc+0x18c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dce:	e004      	b.n	8001dda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d903      	bls.n	8001dec <pvPortMalloc+0xa4>
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f1      	bne.n	8001dd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <pvPortMalloc+0x180>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d050      	beq.n	8001e98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	4413      	add	r3, r2
 8001dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	1ad2      	subs	r2, r2, r3
 8001e10:	2308      	movs	r3, #8
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d91f      	bls.n	8001e58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <pvPortMalloc+0xf8>
	__asm volatile
 8001e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	613b      	str	r3, [r7, #16]
}
 8001e3c:	bf00      	nop
 8001e3e:	e7fe      	b.n	8001e3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1ad2      	subs	r2, r2, r3
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e52:	69b8      	ldr	r0, [r7, #24]
 8001e54:	f000 f908 	bl	8002068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <pvPortMalloc+0x188>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <pvPortMalloc+0x188>)
 8001e64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <pvPortMalloc+0x188>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <pvPortMalloc+0x190>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d203      	bcs.n	8001e7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <pvPortMalloc+0x188>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <pvPortMalloc+0x190>)
 8001e78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <pvPortMalloc+0x184>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <pvPortMalloc+0x194>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <pvPortMalloc+0x194>)
 8001e96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001e98:	f001 fc22 	bl	80036e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <pvPortMalloc+0x174>
	__asm volatile
 8001ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eaa:	f383 8811 	msr	BASEPRI, r3
 8001eae:	f3bf 8f6f 	isb	sy
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	60fb      	str	r3, [r7, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	e7fe      	b.n	8001eba <pvPortMalloc+0x172>
	return pvReturn;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	24004418 	.word	0x24004418
 8001ecc:	2400442c 	.word	0x2400442c
 8001ed0:	2400441c 	.word	0x2400441c
 8001ed4:	24004410 	.word	0x24004410
 8001ed8:	24004420 	.word	0x24004420
 8001edc:	24004424 	.word	0x24004424

08001ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d04d      	beq.n	8001f8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4413      	add	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <vPortFree+0xb8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10a      	bne.n	8001f24 <vPortFree+0x44>
	__asm volatile
 8001f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f12:	f383 8811 	msr	BASEPRI, r3
 8001f16:	f3bf 8f6f 	isb	sy
 8001f1a:	f3bf 8f4f 	dsb	sy
 8001f1e:	60fb      	str	r3, [r7, #12]
}
 8001f20:	bf00      	nop
 8001f22:	e7fe      	b.n	8001f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <vPortFree+0x62>
	__asm volatile
 8001f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	60bb      	str	r3, [r7, #8]
}
 8001f3e:	bf00      	nop
 8001f40:	e7fe      	b.n	8001f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <vPortFree+0xb8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01e      	beq.n	8001f8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d11a      	bne.n	8001f8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <vPortFree+0xb8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001f68:	f001 fbac 	bl	80036c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <vPortFree+0xbc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <vPortFree+0xbc>)
 8001f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f7a:	6938      	ldr	r0, [r7, #16]
 8001f7c:	f000 f874 	bl	8002068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <vPortFree+0xc0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <vPortFree+0xc0>)
 8001f88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8001f8a:	f001 fba9 	bl	80036e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2400442c 	.word	0x2400442c
 8001f9c:	2400441c 	.word	0x2400441c
 8001fa0:	24004428 	.word	0x24004428

08001fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <prvHeapInit+0xac>)
 8001fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3307      	adds	r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0307 	bic.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <prvHeapInit+0xac>)
 8001fd4:	4413      	add	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <prvHeapInit+0xb0>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <prvHeapInit+0xb0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	4413      	add	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0307 	bic.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <prvHeapInit+0xb4>)
 8002004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <prvHeapInit+0xb4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <prvHeapInit+0xb4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	1ad2      	subs	r2, r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <prvHeapInit+0xb4>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a0a      	ldr	r2, [pc, #40]	; (800205c <prvHeapInit+0xb8>)
 8002032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a09      	ldr	r2, [pc, #36]	; (8002060 <prvHeapInit+0xbc>)
 800203a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <prvHeapInit+0xc0>)
 800203e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	24000810 	.word	0x24000810
 8002054:	24004410 	.word	0x24004410
 8002058:	24004418 	.word	0x24004418
 800205c:	24004420 	.word	0x24004420
 8002060:	2400441c 	.word	0x2400441c
 8002064:	2400442c 	.word	0x2400442c

08002068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <prvInsertBlockIntoFreeList+0xac>)
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e002      	b.n	800207c <prvInsertBlockIntoFreeList+0x14>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d8f7      	bhi.n	8002076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4413      	add	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d108      	bne.n	80020aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	441a      	add	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	441a      	add	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d118      	bne.n	80020f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <prvInsertBlockIntoFreeList+0xb0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d00d      	beq.n	80020e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	441a      	add	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e008      	b.n	80020f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <prvInsertBlockIntoFreeList+0xb0>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e003      	b.n	80020f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d002      	beq.n	8002106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	24004410 	.word	0x24004410
 8002118:	24004418 	.word	0x24004418

0800211c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 0208 	add.w	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f103 0208 	add.w	r2, r3, #8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f103 0208 	add.w	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	601a      	str	r2, [r3, #0]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d103      	bne.n	80021de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e00c      	b.n	80021f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3308      	adds	r3, #8
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e002      	b.n	80021ec <vListInsert+0x2e>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d2f6      	bcs.n	80021e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	601a      	str	r2, [r3, #0]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6892      	ldr	r2, [r2, #8]
 8002246:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6852      	ldr	r2, [r2, #4]
 8002250:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d103      	bne.n	8002264 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1e5a      	subs	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3b04      	subs	r3, #4
 8002294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800229c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3b04      	subs	r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f023 0201 	bic.w	r2, r3, #1
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3b04      	subs	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <pxPortInitialiseStack+0x64>)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3b14      	subs	r3, #20
 80022be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3b04      	subs	r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f06f 0202 	mvn.w	r2, #2
 80022d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3b20      	subs	r3, #32
 80022d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	080022ed 	.word	0x080022ed

080022ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <prvTaskExitError+0x54>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fe:	d00a      	beq.n	8002316 <prvTaskExitError+0x2a>
	__asm volatile
 8002300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	60fb      	str	r3, [r7, #12]
}
 8002312:	bf00      	nop
 8002314:	e7fe      	b.n	8002314 <prvTaskExitError+0x28>
	__asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	60bb      	str	r3, [r7, #8]
}
 8002328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800232a:	bf00      	nop
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0fc      	beq.n	800232c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002332:	bf00      	nop
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	24000010 	.word	0x24000010
	...

08002350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <pxCurrentTCBConst2>)
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	6808      	ldr	r0, [r1, #0]
 8002356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235a:	f380 8809 	msr	PSP, r0
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	f380 8811 	msr	BASEPRI, r0
 800236a:	4770      	bx	lr
 800236c:	f3af 8000 	nop.w

08002370 <pxCurrentTCBConst2>:
 8002370:	24004438 	.word	0x24004438
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop

08002378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002378:	4808      	ldr	r0, [pc, #32]	; (800239c <prvPortStartFirstTask+0x24>)
 800237a:	6800      	ldr	r0, [r0, #0]
 800237c:	6800      	ldr	r0, [r0, #0]
 800237e:	f380 8808 	msr	MSP, r0
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f380 8814 	msr	CONTROL, r0
 800238a:	b662      	cpsie	i
 800238c:	b661      	cpsie	f
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	df00      	svc	0
 8002398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800239a:	bf00      	nop
 800239c:	e000ed08 	.word	0xe000ed08

080023a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80023a6:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <xPortStartScheduler+0x120>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a46      	ldr	r2, [pc, #280]	; (80024c4 <xPortStartScheduler+0x124>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10a      	bne.n	80023c6 <xPortStartScheduler+0x26>
	__asm volatile
 80023b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b4:	f383 8811 	msr	BASEPRI, r3
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	613b      	str	r3, [r7, #16]
}
 80023c2:	bf00      	nop
 80023c4:	e7fe      	b.n	80023c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <xPortStartScheduler+0x120>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <xPortStartScheduler+0x128>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10a      	bne.n	80023e6 <xPortStartScheduler+0x46>
	__asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	60fb      	str	r3, [r7, #12]
}
 80023e2:	bf00      	nop
 80023e4:	e7fe      	b.n	80023e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80023e6:	4b39      	ldr	r3, [pc, #228]	; (80024cc <xPortStartScheduler+0x12c>)
 80023e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	22ff      	movs	r2, #255	; 0xff
 80023f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <xPortStartScheduler+0x130>)
 800240c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <xPortStartScheduler+0x134>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002414:	e009      	b.n	800242a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002416:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <xPortStartScheduler+0x134>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3b01      	subs	r3, #1
 800241c:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <xPortStartScheduler+0x134>)
 800241e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	2b80      	cmp	r3, #128	; 0x80
 8002434:	d0ef      	beq.n	8002416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002436:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <xPortStartScheduler+0x134>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	d00a      	beq.n	8002458 <xPortStartScheduler+0xb8>
	__asm volatile
 8002442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	60bb      	str	r3, [r7, #8]
}
 8002454:	bf00      	nop
 8002456:	e7fe      	b.n	8002456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <xPortStartScheduler+0x134>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <xPortStartScheduler+0x134>)
 8002460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <xPortStartScheduler+0x134>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <xPortStartScheduler+0x134>)
 800246c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <xPortStartScheduler+0x138>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <xPortStartScheduler+0x138>)
 800247c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <xPortStartScheduler+0x138>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <xPortStartScheduler+0x138>)
 8002488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800248c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800248e:	f000 f8dd 	bl	800264c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <xPortStartScheduler+0x13c>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002498:	f000 f8fc 	bl	8002694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <xPortStartScheduler+0x140>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <xPortStartScheduler+0x140>)
 80024a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80024a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80024a8:	f7ff ff66 	bl	8002378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80024ac:	f001 fa80 	bl	80039b0 <vTaskSwitchContext>
	prvTaskExitError();
 80024b0:	f7ff ff1c 	bl	80022ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00
 80024c4:	410fc271 	.word	0x410fc271
 80024c8:	410fc270 	.word	0x410fc270
 80024cc:	e000e400 	.word	0xe000e400
 80024d0:	24004430 	.word	0x24004430
 80024d4:	24004434 	.word	0x24004434
 80024d8:	e000ed20 	.word	0xe000ed20
 80024dc:	24000010 	.word	0x24000010
 80024e0:	e000ef34 	.word	0xe000ef34

080024e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
	__asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	607b      	str	r3, [r7, #4]
}
 80024fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <vPortEnterCritical+0x58>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <vPortEnterCritical+0x58>)
 8002506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <vPortEnterCritical+0x58>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10f      	bne.n	8002530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <vPortEnterCritical+0x5c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <vPortEnterCritical+0x4c>
	__asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	603b      	str	r3, [r7, #0]
}
 800252c:	bf00      	nop
 800252e:	e7fe      	b.n	800252e <vPortEnterCritical+0x4a>
	}
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	24000010 	.word	0x24000010
 8002540:	e000ed04 	.word	0xe000ed04

08002544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <vPortExitCritical+0x50>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <vPortExitCritical+0x24>
	__asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	607b      	str	r3, [r7, #4]
}
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <vPortExitCritical+0x50>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3b01      	subs	r3, #1
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <vPortExitCritical+0x50>)
 8002570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <vPortExitCritical+0x50>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <vPortExitCritical+0x42>
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	24000010 	.word	0x24000010
	...

080025a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80025a0:	f3ef 8009 	mrs	r0, PSP
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <pxCurrentTCBConst>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f01e 0f10 	tst.w	lr, #16
 80025b0:	bf08      	it	eq
 80025b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ba:	6010      	str	r0, [r2, #0]
 80025bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80025c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80025c4:	f380 8811 	msr	BASEPRI, r0
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f001 f9ee 	bl	80039b0 <vTaskSwitchContext>
 80025d4:	f04f 0000 	mov.w	r0, #0
 80025d8:	f380 8811 	msr	BASEPRI, r0
 80025dc:	bc09      	pop	{r0, r3}
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	6808      	ldr	r0, [r1, #0]
 80025e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e6:	f01e 0f10 	tst.w	lr, #16
 80025ea:	bf08      	it	eq
 80025ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80025f0:	f380 8809 	msr	PSP, r0
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	f3af 8000 	nop.w

08002600 <pxCurrentTCBConst>:
 8002600:	24004438 	.word	0x24004438
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop

08002608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
	__asm volatile
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	607b      	str	r3, [r7, #4]
}
 8002620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002622:	f001 f90b 	bl	800383c <xTaskIncrementTick>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <xPortSysTickHandler+0x40>)
 800262e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	2300      	movs	r3, #0
 8002636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f383 8811 	msr	BASEPRI, r3
}
 800263e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <vPortSetupTimerInterrupt+0x34>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <vPortSetupTimerInterrupt+0x38>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <vPortSetupTimerInterrupt+0x3c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <vPortSetupTimerInterrupt+0x40>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	4a09      	ldr	r2, [pc, #36]	; (8002690 <vPortSetupTimerInterrupt+0x44>)
 800266a:	3b01      	subs	r3, #1
 800266c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <vPortSetupTimerInterrupt+0x34>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010
 8002684:	e000e018 	.word	0xe000e018
 8002688:	24000000 	.word	0x24000000
 800268c:	10624dd3 	.word	0x10624dd3
 8002690:	e000e014 	.word	0xe000e014

08002694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026a4 <vPortEnableVFP+0x10>
 8002698:	6801      	ldr	r1, [r0, #0]
 800269a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800269e:	6001      	str	r1, [r0, #0]
 80026a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80026a2:	bf00      	nop
 80026a4:	e000ed88 	.word	0xe000ed88

080026a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80026ae:	f3ef 8305 	mrs	r3, IPSR
 80026b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	d914      	bls.n	80026e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <vPortValidateInterruptPriority+0x70>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <vPortValidateInterruptPriority+0x74>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	7afa      	ldrb	r2, [r7, #11]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d20a      	bcs.n	80026e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	607b      	str	r3, [r7, #4]
}
 80026e0:	bf00      	nop
 80026e2:	e7fe      	b.n	80026e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <vPortValidateInterruptPriority+0x78>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <vPortValidateInterruptPriority+0x7c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d90a      	bls.n	800270a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	603b      	str	r3, [r7, #0]
}
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <vPortValidateInterruptPriority+0x60>
	}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000e3f0 	.word	0xe000e3f0
 800271c:	24004430 	.word	0x24004430
 8002720:	e000ed0c 	.word	0xe000ed0c
 8002724:	24004434 	.word	0x24004434

08002728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <xQueueGenericReset+0x2a>
	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	60bb      	str	r3, [r7, #8]
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002752:	f7ff fec7 	bl	80024e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	441a      	add	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	3b01      	subs	r3, #1
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	441a      	add	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d114      	bne.n	80027d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01a      	beq.n	80027e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3310      	adds	r3, #16
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f9af 	bl	8003b18 <xTaskRemoveFromEventList>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d012      	beq.n	80027e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <xQueueGenericReset+0xcc>)
 80027c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	e009      	b.n	80027e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3310      	adds	r3, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fca0 	bl	800211c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fc9b 	bl	800211c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027e6:	f7ff fead 	bl	8002544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	e000ed04 	.word	0xe000ed04

080027f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	; 0x38
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
}
 800283a:	bf00      	nop
 800283c:	e7fe      	b.n	800283c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <xQueueGenericCreateStatic+0x52>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <xQueueGenericCreateStatic+0x56>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <xQueueGenericCreateStatic+0x58>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	623b      	str	r3, [r7, #32]
}
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <xQueueGenericCreateStatic+0x7e>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <xQueueGenericCreateStatic+0x82>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <xQueueGenericCreateStatic+0x84>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	61fb      	str	r3, [r7, #28]
}
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002896:	2350      	movs	r3, #80	; 0x50
 8002898:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d00a      	beq.n	80028b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	61bb      	str	r3, [r7, #24]
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f83f 	bl	800295c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3730      	adds	r7, #48	; 0x30
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <xQueueGenericCreate+0x2a>
	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	613b      	str	r3, [r7, #16]
}
 800290e:	bf00      	nop
 8002910:	e7fe      	b.n	8002910 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	3350      	adds	r3, #80	; 0x50
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fa11 	bl	8001d48 <pvPortMalloc>
 8002926:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d011      	beq.n	8002952 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3350      	adds	r3, #80	; 0x50
 8002936:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f805 	bl	800295c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002952:	69bb      	ldr	r3, [r7, #24]
	}
 8002954:	4618      	mov	r0, r3
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e002      	b.n	800297e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800298a:	2101      	movs	r1, #1
 800298c:	69b8      	ldr	r0, [r7, #24]
 800298e:	f7ff fecb 	bl	8002728 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80029c2:	2300      	movs	r3, #0
 80029c4:	2200      	movs	r2, #0
 80029c6:	2100      	movs	r1, #0
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f837 	bl	8002a3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80029e0:	2301      	movs	r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	461a      	mov	r2, r3
 80029ec:	6939      	ldr	r1, [r7, #16]
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7ff ff7a 	bl	80028e8 <xQueueGenericCreate>
 80029f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f7ff ffd3 	bl	80029a2 <prvInitialiseMutex>

		return xNewQueue;
 80029fc:	68fb      	ldr	r3, [r7, #12]
	}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b088      	sub	sp, #32
 8002a0a:	af02      	add	r7, sp, #8
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	6039      	str	r1, [r7, #0]
 8002a10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002a12:	2301      	movs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2200      	movs	r2, #0
 8002a22:	6939      	ldr	r1, [r7, #16]
 8002a24:	6978      	ldr	r0, [r7, #20]
 8002a26:	f7ff fee7 	bl	80027f8 <xQueueGenericCreateStatic>
 8002a2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff ffb8 	bl	80029a2 <prvInitialiseMutex>

		return xNewQueue;
 8002a32:	68fb      	ldr	r3, [r7, #12]
	}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08e      	sub	sp, #56	; 0x38
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <xQueueGenericSend+0x32>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <xQueueGenericSend+0x40>
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <xQueueGenericSend+0x44>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <xQueueGenericSend+0x46>
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <xQueueGenericSend+0x60>
	__asm volatile
 8002a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a98:	bf00      	nop
 8002a9a:	e7fe      	b.n	8002a9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d103      	bne.n	8002aaa <xQueueGenericSend+0x6e>
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <xQueueGenericSend+0x72>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <xQueueGenericSend+0x74>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <xQueueGenericSend+0x8e>
	__asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	623b      	str	r3, [r7, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aca:	f001 f9e7 	bl	8003e9c <xTaskGetSchedulerState>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <xQueueGenericSend+0x9e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <xQueueGenericSend+0xa2>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <xQueueGenericSend+0xa4>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <xQueueGenericSend+0xbe>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	61fb      	str	r3, [r7, #28]
}
 8002af6:	bf00      	nop
 8002af8:	e7fe      	b.n	8002af8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002afa:	f7ff fcf3 	bl	80024e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <xQueueGenericSend+0xd4>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d129      	bne.n	8002b64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b16:	f000 fa0b 	bl	8002f30 <prvCopyDataToQueue>
 8002b1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	3324      	adds	r3, #36	; 0x24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fff5 	bl	8003b18 <xTaskRemoveFromEventList>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b34:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <xQueueGenericSend+0x1f8>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	e00a      	b.n	8002b5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <xQueueGenericSend+0x1f8>)
 8002b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b5c:	f7ff fcf2 	bl	8002544 <vPortExitCritical>
				return pdPASS;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e063      	b.n	8002c2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d103      	bne.n	8002b72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b6a:	f7ff fceb 	bl	8002544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e05c      	b.n	8002c2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 f82f 	bl	8003be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b86:	f7ff fcdd 	bl	8002544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b8a:	f000 fd9b 	bl	80036c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b8e:	f7ff fca9 	bl	80024e4 <vPortEnterCritical>
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d103      	bne.n	8002ba8 <xQueueGenericSend+0x16c>
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bae:	b25b      	sxtb	r3, r3
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d103      	bne.n	8002bbe <xQueueGenericSend+0x182>
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bbe:	f7ff fcc1 	bl	8002544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bc2:	1d3a      	adds	r2, r7, #4
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 f81e 	bl	8003c0c <xTaskCheckForTimeOut>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d124      	bne.n	8002c20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd8:	f000 faa2 	bl	8003120 <prvIsQueueFull>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d018      	beq.n	8002c14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	3310      	adds	r3, #16
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 ff44 	bl	8003a78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf2:	f000 fa2d 	bl	8003050 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bf6:	f000 fd73 	bl	80036e0 <xTaskResumeAll>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f47f af7c 	bne.w	8002afa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <xQueueGenericSend+0x1f8>)
 8002c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	e772      	b.n	8002afa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c16:	f000 fa1b 	bl	8003050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c1a:	f000 fd61 	bl	80036e0 <xTaskResumeAll>
 8002c1e:	e76c      	b.n	8002afa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c22:	f000 fa15 	bl	8003050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c26:	f000 fd5b 	bl	80036e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3738      	adds	r7, #56	; 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b090      	sub	sp, #64	; 0x40
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <xQueueGenericSendFromISR+0x3c>
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <xQueueGenericSendFromISR+0x40>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <xQueueGenericSendFromISR+0x42>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c90:	bf00      	nop
 8002c92:	e7fe      	b.n	8002c92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d103      	bne.n	8002ca2 <xQueueGenericSendFromISR+0x6a>
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <xQueueGenericSendFromISR+0x6e>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <xQueueGenericSendFromISR+0x70>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	623b      	str	r3, [r7, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cc2:	f7ff fcf1 	bl	80026a8 <vPortValidateInterruptPriority>
	__asm volatile
 8002cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	61fa      	str	r2, [r7, #28]
 8002cdc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8002cde:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <xQueueGenericSendFromISR+0xbc>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d12f      	bne.n	8002d54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d0a:	f000 f911 	bl	8002f30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d112      	bne.n	8002d3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d016      	beq.n	8002d4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d22:	3324      	adds	r3, #36	; 0x24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fef7 	bl	8003b18 <xTaskRemoveFromEventList>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00e      	beq.n	8002d4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e007      	b.n	8002d4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d42:	3301      	adds	r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	b25a      	sxtb	r2, r3
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d52:	e001      	b.n	8002d58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f383 8811 	msr	BASEPRI, r3
}
 8002d62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3740      	adds	r7, #64	; 0x40
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	; 0x30
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <xQueueReceive+0x30>
	__asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	623b      	str	r3, [r7, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	e7fe      	b.n	8002d9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <xQueueReceive+0x3e>
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <xQueueReceive+0x42>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueReceive+0x44>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueReceive+0x5e>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	61fb      	str	r3, [r7, #28]
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dce:	f001 f865 	bl	8003e9c <xTaskGetSchedulerState>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <xQueueReceive+0x6e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <xQueueReceive+0x72>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <xQueueReceive+0x74>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueReceive+0x8e>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	61bb      	str	r3, [r7, #24]
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dfe:	f7ff fb71 	bl	80024e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01f      	beq.n	8002e4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e12:	f000 f8f7 	bl	8003004 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	1e5a      	subs	r2, r3, #1
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00f      	beq.n	8002e46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	3310      	adds	r3, #16
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fe74 	bl	8003b18 <xTaskRemoveFromEventList>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e36:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <xQueueReceive+0x1bc>)
 8002e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e46:	f7ff fb7d 	bl	8002544 <vPortExitCritical>
				return pdPASS;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e069      	b.n	8002f22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e54:	f7ff fb76 	bl	8002544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e062      	b.n	8002f22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e62:	f107 0310 	add.w	r3, r7, #16
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 feba 	bl	8003be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e70:	f7ff fb68 	bl	8002544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e74:	f000 fc26 	bl	80036c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e78:	f7ff fb34 	bl	80024e4 <vPortEnterCritical>
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d103      	bne.n	8002e92 <xQueueReceive+0x122>
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d103      	bne.n	8002ea8 <xQueueReceive+0x138>
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea8:	f7ff fb4c 	bl	8002544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eac:	1d3a      	adds	r2, r7, #4
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fea9 	bl	8003c0c <xTaskCheckForTimeOut>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d123      	bne.n	8002f08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec2:	f000 f917 	bl	80030f4 <prvIsQueueEmpty>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d017      	beq.n	8002efc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	3324      	adds	r3, #36	; 0x24
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fdcf 	bl	8003a78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002edc:	f000 f8b8 	bl	8003050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ee0:	f000 fbfe 	bl	80036e0 <xTaskResumeAll>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d189      	bne.n	8002dfe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <xQueueReceive+0x1bc>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	e780      	b.n	8002dfe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002efe:	f000 f8a7 	bl	8003050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f02:	f000 fbed 	bl	80036e0 <xTaskResumeAll>
 8002f06:	e77a      	b.n	8002dfe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0a:	f000 f8a1 	bl	8003050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f0e:	f000 fbe7 	bl	80036e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f14:	f000 f8ee 	bl	80030f4 <prvIsQueueEmpty>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f43f af6f 	beq.w	8002dfe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3730      	adds	r7, #48	; 0x30
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d14d      	bne.n	8002ff2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 ffbc 	bl	8003ed8 <xTaskPriorityDisinherit>
 8002f60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e043      	b.n	8002ff2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d119      	bne.n	8002fa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6858      	ldr	r0, [r3, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	f001 fbe2 	bl	8004744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	441a      	add	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d32b      	bcc.n	8002ff2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	e026      	b.n	8002ff2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68d8      	ldr	r0, [r3, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	461a      	mov	r2, r3
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	f001 fbc8 	bl	8004744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	425b      	negs	r3, r3
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d207      	bcs.n	8002fe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	425b      	negs	r3, r3
 8002fda:	441a      	add	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d105      	bne.n	8002ff2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ffa:	697b      	ldr	r3, [r7, #20]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d018      	beq.n	8003048 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	441a      	add	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d303      	bcc.n	8003038 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68d9      	ldr	r1, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	461a      	mov	r2, r3
 8003042:	6838      	ldr	r0, [r7, #0]
 8003044:	f001 fb7e 	bl	8004744 <memcpy>
	}
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003058:	f7ff fa44 	bl	80024e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003062:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003064:	e011      	b.n	800308a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d012      	beq.n	8003094 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3324      	adds	r3, #36	; 0x24
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fd50 	bl	8003b18 <xTaskRemoveFromEventList>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800307e:	f000 fe27 	bl	8003cd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	3b01      	subs	r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800308a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	dce9      	bgt.n	8003066 <prvUnlockQueue+0x16>
 8003092:	e000      	b.n	8003096 <prvUnlockQueue+0x46>
					break;
 8003094:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	22ff      	movs	r2, #255	; 0xff
 800309a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800309e:	f7ff fa51 	bl	8002544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030a2:	f7ff fa1f 	bl	80024e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ae:	e011      	b.n	80030d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d012      	beq.n	80030de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3310      	adds	r3, #16
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fd2b 	bl	8003b18 <xTaskRemoveFromEventList>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030c8:	f000 fe02 	bl	8003cd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030cc:	7bbb      	ldrb	r3, [r7, #14]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	dce9      	bgt.n	80030b0 <prvUnlockQueue+0x60>
 80030dc:	e000      	b.n	80030e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	22ff      	movs	r2, #255	; 0xff
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030e8:	f7ff fa2c 	bl	8002544 <vPortExitCritical>
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030fc:	f7ff f9f2 	bl	80024e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003108:	2301      	movs	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e001      	b.n	8003112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003112:	f7ff fa17 	bl	8002544 <vPortExitCritical>

	return xReturn;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003128:	f7ff f9dc 	bl	80024e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	429a      	cmp	r2, r3
 8003136:	d102      	bne.n	800313e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003138:	2301      	movs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e001      	b.n	8003142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003142:	f7ff f9ff 	bl	8002544 <vPortExitCritical>

	return xReturn;
 8003146:	68fb      	ldr	r3, [r7, #12]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e014      	b.n	800318a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003160:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <vQueueAddToRegistry+0x50>)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10b      	bne.n	8003184 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800316c:	490c      	ldr	r1, [pc, #48]	; (80031a0 <vQueueAddToRegistry+0x50>)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <vQueueAddToRegistry+0x50>)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003182:	e006      	b.n	8003192 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3301      	adds	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b07      	cmp	r3, #7
 800318e:	d9e7      	bls.n	8003160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	24004a74 	.word	0x24004a74

080031a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031b4:	f7ff f996 	bl	80024e4 <vPortEnterCritical>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d103      	bne.n	80031ce <vQueueWaitForMessageRestricted+0x2a>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d103      	bne.n	80031e4 <vQueueWaitForMessageRestricted+0x40>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e4:	f7ff f9ae 	bl	8002544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3324      	adds	r3, #36	; 0x24
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fc61 	bl	8003ac0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff26 	bl	8003050 <prvUnlockQueue>
	}
 8003204:	bf00      	nop
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08e      	sub	sp, #56	; 0x38
 8003210:	af04      	add	r7, sp, #16
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	623b      	str	r3, [r7, #32]
}
 8003232:	bf00      	nop
 8003234:	e7fe      	b.n	8003234 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xTaskCreateStatic+0x46>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	61fb      	str	r3, [r7, #28]
}
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003252:	23bc      	movs	r3, #188	; 0xbc
 8003254:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2bbc      	cmp	r3, #188	; 0xbc
 800325a:	d00a      	beq.n	8003272 <xTaskCreateStatic+0x66>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	61bb      	str	r3, [r7, #24]
}
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003272:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01e      	beq.n	80032b8 <xTaskCreateStatic+0xac>
 800327a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01b      	beq.n	80032b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003288:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	2202      	movs	r2, #2
 800328e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003292:	2300      	movs	r3, #0
 8003294:	9303      	str	r3, [sp, #12]
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	9302      	str	r3, [sp, #8]
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f850 	bl	8003350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032b2:	f000 f8f3 	bl	800349c <prvAddNewTaskToReadyList>
 80032b6:	e001      	b.n	80032bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032bc:	697b      	ldr	r3, [r7, #20]
	}
 80032be:	4618      	mov	r0, r3
 80032c0:	3728      	adds	r7, #40	; 0x28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b08c      	sub	sp, #48	; 0x30
 80032ca:	af04      	add	r7, sp, #16
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fd34 	bl	8001d48 <pvPortMalloc>
 80032e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032e8:	20bc      	movs	r0, #188	; 0xbc
 80032ea:	f7fe fd2d 	bl	8001d48 <pvPortMalloc>
 80032ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
 80032fc:	e005      	b.n	800330a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032fe:	6978      	ldr	r0, [r7, #20]
 8003300:	f7fe fdee 	bl	8001ee0 <vPortFree>
 8003304:	e001      	b.n	800330a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d017      	beq.n	8003340 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	2300      	movs	r3, #0
 800331c:	9303      	str	r3, [sp, #12]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	9302      	str	r3, [sp, #8]
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f80e 	bl	8003350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003334:	69f8      	ldr	r0, [r7, #28]
 8003336:	f000 f8b1 	bl	800349c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800333a:	2301      	movs	r3, #1
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e002      	b.n	8003346 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
 8003344:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003346:	69bb      	ldr	r3, [r7, #24]
	}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	461a      	mov	r2, r3
 8003368:	21a5      	movs	r1, #165	; 0xa5
 800336a:	f001 f9f9 	bl	8004760 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003378:	440b      	add	r3, r1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f023 0307 	bic.w	r3, r3, #7
 8003386:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	617b      	str	r3, [r7, #20]
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01f      	beq.n	80033ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e012      	b.n	80033da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	7819      	ldrb	r1, [r3, #0]
 80033bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	3334      	adds	r3, #52	; 0x34
 80033c4:	460a      	mov	r2, r1
 80033c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	3301      	adds	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b0f      	cmp	r3, #15
 80033de:	d9e9      	bls.n	80033b4 <prvInitialiseNewTask+0x64>
 80033e0:	e000      	b.n	80033e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80033e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033ec:	e003      	b.n	80033f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	2b37      	cmp	r3, #55	; 0x37
 80033fa:	d901      	bls.n	8003400 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033fc:	2337      	movs	r3, #55	; 0x37
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800340a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	2200      	movs	r2, #0
 8003410:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	3304      	adds	r3, #4
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fea0 	bl	800215c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	3318      	adds	r3, #24
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fe9b 	bl	800215c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	2200      	movs	r2, #0
 8003440:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	2200      	movs	r2, #0
 8003448:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	3354      	adds	r3, #84	; 0x54
 8003450:	2260      	movs	r2, #96	; 0x60
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f001 f983 	bl	8004760 <memset>
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <prvInitialiseNewTask+0x140>)
 800345e:	659a      	str	r2, [r3, #88]	; 0x58
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <prvInitialiseNewTask+0x144>)
 8003464:	65da      	str	r2, [r3, #92]	; 0x5c
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <prvInitialiseNewTask+0x148>)
 800346a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	69b8      	ldr	r0, [r7, #24]
 8003472:	f7fe ff07 	bl	8002284 <pxPortInitialiseStack>
 8003476:	4602      	mov	r2, r0
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003488:	bf00      	nop
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	080049a8 	.word	0x080049a8
 8003494:	080049c8 	.word	0x080049c8
 8003498:	08004988 	.word	0x08004988

0800349c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034a4:	f7ff f81e 	bl	80024e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034a8:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <prvAddNewTaskToReadyList+0xc4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	4a2c      	ldr	r2, [pc, #176]	; (8003560 <prvAddNewTaskToReadyList+0xc4>)
 80034b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034b2:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <prvAddNewTaskToReadyList+0xc8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ba:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <prvAddNewTaskToReadyList+0xc8>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <prvAddNewTaskToReadyList+0xc4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d110      	bne.n	80034ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034c8:	f000 fc26 	bl	8003d18 <prvInitialiseTaskLists>
 80034cc:	e00d      	b.n	80034ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <prvAddNewTaskToReadyList+0xcc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034d6:	4b23      	ldr	r3, [pc, #140]	; (8003564 <prvAddNewTaskToReadyList+0xc8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d802      	bhi.n	80034ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034e4:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <prvAddNewTaskToReadyList+0xc8>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <prvAddNewTaskToReadyList+0xd0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a1e      	ldr	r2, [pc, #120]	; (800356c <prvAddNewTaskToReadyList+0xd0>)
 80034f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <prvAddNewTaskToReadyList+0xd0>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <prvAddNewTaskToReadyList+0xd4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d903      	bls.n	8003510 <prvAddNewTaskToReadyList+0x74>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4a18      	ldr	r2, [pc, #96]	; (8003570 <prvAddNewTaskToReadyList+0xd4>)
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <prvAddNewTaskToReadyList+0xd8>)
 800351e:	441a      	add	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f7fe fe25 	bl	8002176 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800352c:	f7ff f80a 	bl	8002544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <prvAddNewTaskToReadyList+0xcc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <prvAddNewTaskToReadyList+0xc8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	429a      	cmp	r2, r3
 8003544:	d207      	bcs.n	8003556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <prvAddNewTaskToReadyList+0xdc>)
 8003548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	2400490c 	.word	0x2400490c
 8003564:	24004438 	.word	0x24004438
 8003568:	24004918 	.word	0x24004918
 800356c:	24004928 	.word	0x24004928
 8003570:	24004914 	.word	0x24004914
 8003574:	2400443c 	.word	0x2400443c
 8003578:	e000ed04 	.word	0xe000ed04

0800357c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d017      	beq.n	80035be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <vTaskDelay+0x60>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <vTaskDelay+0x30>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60bb      	str	r3, [r7, #8]
}
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035ac:	f000 f88a 	bl	80036c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035b0:	2100      	movs	r1, #0
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fcfe 	bl	8003fb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035b8:	f000 f892 	bl	80036e0 <xTaskResumeAll>
 80035bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d107      	bne.n	80035d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <vTaskDelay+0x64>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	24004934 	.word	0x24004934
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035f2:	463a      	mov	r2, r7
 80035f4:	1d39      	adds	r1, r7, #4
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fb70 	bl	8001ce0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	9202      	str	r2, [sp, #8]
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	2300      	movs	r3, #0
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	2300      	movs	r3, #0
 8003610:	460a      	mov	r2, r1
 8003612:	4924      	ldr	r1, [pc, #144]	; (80036a4 <vTaskStartScheduler+0xc0>)
 8003614:	4824      	ldr	r0, [pc, #144]	; (80036a8 <vTaskStartScheduler+0xc4>)
 8003616:	f7ff fdf9 	bl	800320c <xTaskCreateStatic>
 800361a:	4603      	mov	r3, r0
 800361c:	4a23      	ldr	r2, [pc, #140]	; (80036ac <vTaskStartScheduler+0xc8>)
 800361e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003620:	4b22      	ldr	r3, [pc, #136]	; (80036ac <vTaskStartScheduler+0xc8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e001      	b.n	8003632 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003638:	f000 fd10 	bl	800405c <xTimerCreateTimerTask>
 800363c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d11b      	bne.n	800367c <vTaskStartScheduler+0x98>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	613b      	str	r3, [r7, #16]
}
 8003656:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <vTaskStartScheduler+0xcc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3354      	adds	r3, #84	; 0x54
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <vTaskStartScheduler+0xd0>)
 8003660:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <vTaskStartScheduler+0xd4>)
 8003664:	f04f 32ff 	mov.w	r2, #4294967295
 8003668:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <vTaskStartScheduler+0xd8>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003670:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <vTaskStartScheduler+0xdc>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003676:	f7fe fe93 	bl	80023a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800367a:	e00e      	b.n	800369a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d10a      	bne.n	800369a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	60fb      	str	r3, [r7, #12]
}
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <vTaskStartScheduler+0xb4>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	0800492c 	.word	0x0800492c
 80036a8:	08003ce9 	.word	0x08003ce9
 80036ac:	24004930 	.word	0x24004930
 80036b0:	24004438 	.word	0x24004438
 80036b4:	24000014 	.word	0x24000014
 80036b8:	2400492c 	.word	0x2400492c
 80036bc:	24004918 	.word	0x24004918
 80036c0:	24004910 	.word	0x24004910

080036c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <vTaskSuspendAll+0x18>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	4a03      	ldr	r2, [pc, #12]	; (80036dc <vTaskSuspendAll+0x18>)
 80036d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036d2:	bf00      	nop
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	24004934 	.word	0x24004934

080036e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036ee:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <xTaskResumeAll+0x118>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <xTaskResumeAll+0x2c>
	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	603b      	str	r3, [r7, #0]
}
 8003708:	bf00      	nop
 800370a:	e7fe      	b.n	800370a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800370c:	f7fe feea 	bl	80024e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003710:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <xTaskResumeAll+0x118>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3b01      	subs	r3, #1
 8003716:	4a38      	ldr	r2, [pc, #224]	; (80037f8 <xTaskResumeAll+0x118>)
 8003718:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800371a:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <xTaskResumeAll+0x118>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d162      	bne.n	80037e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <xTaskResumeAll+0x11c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d05e      	beq.n	80037e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800372a:	e02f      	b.n	800378c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	4b34      	ldr	r3, [pc, #208]	; (8003800 <xTaskResumeAll+0x120>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3318      	adds	r3, #24
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe fd79 	bl	8002230 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3304      	adds	r3, #4
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fd74 	bl	8002230 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <xTaskResumeAll+0x124>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d903      	bls.n	800375c <xTaskResumeAll+0x7c>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <xTaskResumeAll+0x124>)
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <xTaskResumeAll+0x128>)
 800376a:	441a      	add	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7fe fcff 	bl	8002176 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	4b23      	ldr	r3, [pc, #140]	; (800380c <xTaskResumeAll+0x12c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <xTaskResumeAll+0x130>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800378c:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <xTaskResumeAll+0x120>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1cb      	bne.n	800372c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800379a:	f000 fb5f 	bl	8003e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <xTaskResumeAll+0x134>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037aa:	f000 f847 	bl	800383c <xTaskIncrementTick>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <xTaskResumeAll+0x130>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3b01      	subs	r3, #1
 80037be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f1      	bne.n	80037aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <xTaskResumeAll+0x134>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <xTaskResumeAll+0x130>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <xTaskResumeAll+0x138>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037e8:	f7fe feac 	bl	8002544 <vPortExitCritical>

	return xAlreadyYielded;
 80037ec:	68bb      	ldr	r3, [r7, #8]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	24004934 	.word	0x24004934
 80037fc:	2400490c 	.word	0x2400490c
 8003800:	240048cc 	.word	0x240048cc
 8003804:	24004914 	.word	0x24004914
 8003808:	2400443c 	.word	0x2400443c
 800380c:	24004438 	.word	0x24004438
 8003810:	24004920 	.word	0x24004920
 8003814:	2400491c 	.word	0x2400491c
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <xTaskGetTickCount+0x1c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003828:	687b      	ldr	r3, [r7, #4]
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	24004910 	.word	0x24004910

0800383c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003846:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <xTaskIncrementTick+0x148>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 808f 	bne.w	800396e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003850:	4b4d      	ldr	r3, [pc, #308]	; (8003988 <xTaskIncrementTick+0x14c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003858:	4a4b      	ldr	r2, [pc, #300]	; (8003988 <xTaskIncrementTick+0x14c>)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d120      	bne.n	80038a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003864:	4b49      	ldr	r3, [pc, #292]	; (800398c <xTaskIncrementTick+0x150>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <xTaskIncrementTick+0x48>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	603b      	str	r3, [r7, #0]
}
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <xTaskIncrementTick+0x46>
 8003884:	4b41      	ldr	r3, [pc, #260]	; (800398c <xTaskIncrementTick+0x150>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <xTaskIncrementTick+0x154>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a3f      	ldr	r2, [pc, #252]	; (800398c <xTaskIncrementTick+0x150>)
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4a3f      	ldr	r2, [pc, #252]	; (8003990 <xTaskIncrementTick+0x154>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b3e      	ldr	r3, [pc, #248]	; (8003994 <xTaskIncrementTick+0x158>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	4a3d      	ldr	r2, [pc, #244]	; (8003994 <xTaskIncrementTick+0x158>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	f000 fadb 	bl	8003e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <xTaskIncrementTick+0x15c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d349      	bcc.n	8003944 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b0:	4b36      	ldr	r3, [pc, #216]	; (800398c <xTaskIncrementTick+0x150>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ba:	4b37      	ldr	r3, [pc, #220]	; (8003998 <xTaskIncrementTick+0x15c>)
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	601a      	str	r2, [r3, #0]
					break;
 80038c2:	e03f      	b.n	8003944 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c4:	4b31      	ldr	r3, [pc, #196]	; (800398c <xTaskIncrementTick+0x150>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d203      	bcs.n	80038e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038dc:	4a2e      	ldr	r2, [pc, #184]	; (8003998 <xTaskIncrementTick+0x15c>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038e2:	e02f      	b.n	8003944 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fca1 	bl	8002230 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3318      	adds	r3, #24
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fc98 	bl	8002230 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <xTaskIncrementTick+0x160>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d903      	bls.n	8003914 <xTaskIncrementTick+0xd8>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	4a22      	ldr	r2, [pc, #136]	; (800399c <xTaskIncrementTick+0x160>)
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <xTaskIncrementTick+0x164>)
 8003922:	441a      	add	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3304      	adds	r3, #4
 8003928:	4619      	mov	r1, r3
 800392a:	4610      	mov	r0, r2
 800392c:	f7fe fc23 	bl	8002176 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <xTaskIncrementTick+0x168>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	429a      	cmp	r2, r3
 800393c:	d3b8      	bcc.n	80038b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800393e:	2301      	movs	r3, #1
 8003940:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003942:	e7b5      	b.n	80038b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <xTaskIncrementTick+0x168>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	4915      	ldr	r1, [pc, #84]	; (80039a0 <xTaskIncrementTick+0x164>)
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d901      	bls.n	8003960 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <xTaskIncrementTick+0x16c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	e004      	b.n	8003978 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <xTaskIncrementTick+0x170>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <xTaskIncrementTick+0x170>)
 8003976:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003978:	697b      	ldr	r3, [r7, #20]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	24004934 	.word	0x24004934
 8003988:	24004910 	.word	0x24004910
 800398c:	240048c4 	.word	0x240048c4
 8003990:	240048c8 	.word	0x240048c8
 8003994:	24004924 	.word	0x24004924
 8003998:	2400492c 	.word	0x2400492c
 800399c:	24004914 	.word	0x24004914
 80039a0:	2400443c 	.word	0x2400443c
 80039a4:	24004438 	.word	0x24004438
 80039a8:	24004920 	.word	0x24004920
 80039ac:	2400491c 	.word	0x2400491c

080039b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039b6:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <vTaskSwitchContext+0xb0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <vTaskSwitchContext+0xb4>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039c4:	e046      	b.n	8003a54 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <vTaskSwitchContext+0xb4>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039cc:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <vTaskSwitchContext+0xb8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	e010      	b.n	80039f6 <vTaskSwitchContext+0x46>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	607b      	str	r3, [r7, #4]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <vTaskSwitchContext+0x3e>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	491d      	ldr	r1, [pc, #116]	; (8003a6c <vTaskSwitchContext+0xbc>)
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0e4      	beq.n	80039d4 <vTaskSwitchContext+0x24>
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <vTaskSwitchContext+0xbc>)
 8003a16:	4413      	add	r3, r2
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d104      	bne.n	8003a3a <vTaskSwitchContext+0x8a>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <vTaskSwitchContext+0xc0>)
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <vTaskSwitchContext+0xb8>)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <vTaskSwitchContext+0xc0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3354      	adds	r3, #84	; 0x54
 8003a50:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <vTaskSwitchContext+0xc4>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	24004934 	.word	0x24004934
 8003a64:	24004920 	.word	0x24004920
 8003a68:	24004914 	.word	0x24004914
 8003a6c:	2400443c 	.word	0x2400443c
 8003a70:	24004438 	.word	0x24004438
 8003a74:	24000014 	.word	0x24000014

08003a78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60fb      	str	r3, [r7, #12]
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <vTaskPlaceOnEventList+0x44>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3318      	adds	r3, #24
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe fb89 	bl	80021be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003aac:	2101      	movs	r1, #1
 8003aae:	6838      	ldr	r0, [r7, #0]
 8003ab0:	f000 fa80 	bl	8003fb4 <prvAddCurrentTaskToDelayedList>
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	24004438 	.word	0x24004438

08003ac0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	617b      	str	r3, [r7, #20]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <vTaskPlaceOnEventListRestricted+0x54>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3318      	adds	r3, #24
 8003aee:	4619      	mov	r1, r3
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7fe fb40 	bl	8002176 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
 8003b00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	68b8      	ldr	r0, [r7, #8]
 8003b06:	f000 fa55 	bl	8003fb4 <prvAddCurrentTaskToDelayedList>
	}
 8003b0a:	bf00      	nop
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	24004438 	.word	0x24004438

08003b18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	60fb      	str	r3, [r7, #12]
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	3318      	adds	r3, #24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe fb71 	bl	8002230 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <xTaskRemoveFromEventList+0xb0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11d      	bne.n	8003b92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fb68 	bl	8002230 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <xTaskRemoveFromEventList+0xb4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d903      	bls.n	8003b74 <xTaskRemoveFromEventList+0x5c>
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <xTaskRemoveFromEventList+0xb4>)
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <xTaskRemoveFromEventList+0xb8>)
 8003b82:	441a      	add	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f7fe faf3 	bl	8002176 <vListInsertEnd>
 8003b90:	e005      	b.n	8003b9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	3318      	adds	r3, #24
 8003b96:	4619      	mov	r1, r3
 8003b98:	480e      	ldr	r0, [pc, #56]	; (8003bd4 <xTaskRemoveFromEventList+0xbc>)
 8003b9a:	f7fe faec 	bl	8002176 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <xTaskRemoveFromEventList+0xc0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d905      	bls.n	8003bb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <xTaskRemoveFromEventList+0xc4>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e001      	b.n	8003bbc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bbc:	697b      	ldr	r3, [r7, #20]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	24004934 	.word	0x24004934
 8003bcc:	24004914 	.word	0x24004914
 8003bd0:	2400443c 	.word	0x2400443c
 8003bd4:	240048cc 	.word	0x240048cc
 8003bd8:	24004438 	.word	0x24004438
 8003bdc:	24004920 	.word	0x24004920

08003be0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <vTaskInternalSetTimeOutState+0x24>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <vTaskInternalSetTimeOutState+0x28>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	605a      	str	r2, [r3, #4]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	24004924 	.word	0x24004924
 8003c08:	24004910 	.word	0x24004910

08003c0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	613b      	str	r3, [r7, #16]
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60fb      	str	r3, [r7, #12]
}
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c4e:	f7fe fc49 	bl	80024e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <xTaskCheckForTimeOut+0xbc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d102      	bne.n	8003c72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e023      	b.n	8003cba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <xTaskCheckForTimeOut+0xc0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d007      	beq.n	8003c8e <xTaskCheckForTimeOut+0x82>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	e015      	b.n	8003cba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d20b      	bcs.n	8003cb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff9b 	bl	8003be0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	e004      	b.n	8003cba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cba:	f7fe fc43 	bl	8002544 <vPortExitCritical>

	return xReturn;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	24004910 	.word	0x24004910
 8003ccc:	24004924 	.word	0x24004924

08003cd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <vTaskMissedYield+0x14>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	24004920 	.word	0x24004920

08003ce8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cf0:	f000 f852 	bl	8003d98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <prvIdleTask+0x28>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d9f9      	bls.n	8003cf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <prvIdleTask+0x2c>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d0c:	e7f0      	b.n	8003cf0 <prvIdleTask+0x8>
 8003d0e:	bf00      	nop
 8003d10:	2400443c 	.word	0x2400443c
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e00c      	b.n	8003d3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <prvInitialiseTaskLists+0x60>)
 8003d30:	4413      	add	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe f9f2 	bl	800211c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b37      	cmp	r3, #55	; 0x37
 8003d42:	d9ef      	bls.n	8003d24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d44:	480d      	ldr	r0, [pc, #52]	; (8003d7c <prvInitialiseTaskLists+0x64>)
 8003d46:	f7fe f9e9 	bl	800211c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d4a:	480d      	ldr	r0, [pc, #52]	; (8003d80 <prvInitialiseTaskLists+0x68>)
 8003d4c:	f7fe f9e6 	bl	800211c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d50:	480c      	ldr	r0, [pc, #48]	; (8003d84 <prvInitialiseTaskLists+0x6c>)
 8003d52:	f7fe f9e3 	bl	800211c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d56:	480c      	ldr	r0, [pc, #48]	; (8003d88 <prvInitialiseTaskLists+0x70>)
 8003d58:	f7fe f9e0 	bl	800211c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d5c:	480b      	ldr	r0, [pc, #44]	; (8003d8c <prvInitialiseTaskLists+0x74>)
 8003d5e:	f7fe f9dd 	bl	800211c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <prvInitialiseTaskLists+0x78>)
 8003d64:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <prvInitialiseTaskLists+0x64>)
 8003d66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <prvInitialiseTaskLists+0x7c>)
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <prvInitialiseTaskLists+0x68>)
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2400443c 	.word	0x2400443c
 8003d7c:	2400489c 	.word	0x2400489c
 8003d80:	240048b0 	.word	0x240048b0
 8003d84:	240048cc 	.word	0x240048cc
 8003d88:	240048e0 	.word	0x240048e0
 8003d8c:	240048f8 	.word	0x240048f8
 8003d90:	240048c4 	.word	0x240048c4
 8003d94:	240048c8 	.word	0x240048c8

08003d98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d9e:	e019      	b.n	8003dd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003da0:	f7fe fba0 	bl	80024e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da4:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <prvCheckTasksWaitingTermination+0x50>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fa3d 	bl	8002230 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <prvCheckTasksWaitingTermination+0x54>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <prvCheckTasksWaitingTermination+0x54>)
 8003dbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dca:	f7fe fbbb 	bl	8002544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f810 	bl	8003df4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <prvCheckTasksWaitingTermination+0x58>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e1      	bne.n	8003da0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	240048e0 	.word	0x240048e0
 8003dec:	2400490c 	.word	0x2400490c
 8003df0:	240048f4 	.word	0x240048f4

08003df4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3354      	adds	r3, #84	; 0x54
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fd13 	bl	800482c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d108      	bne.n	8003e22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe f863 	bl	8001ee0 <vPortFree>
				vPortFree( pxTCB );
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe f860 	bl	8001ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e20:	e018      	b.n	8003e54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d103      	bne.n	8003e34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fe f857 	bl	8001ee0 <vPortFree>
	}
 8003e32:	e00f      	b.n	8003e54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d00a      	beq.n	8003e54 <prvDeleteTCB+0x60>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	60fb      	str	r3, [r7, #12]
}
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <prvDeleteTCB+0x5e>
	}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <prvResetNextTaskUnblockTime+0x38>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <prvResetNextTaskUnblockTime+0x3c>)
 8003e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e74:	e008      	b.n	8003e88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <prvResetNextTaskUnblockTime+0x38>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <prvResetNextTaskUnblockTime+0x3c>)
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	240048c4 	.word	0x240048c4
 8003e98:	2400492c 	.word	0x2400492c

08003e9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <xTaskGetSchedulerState+0x34>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	e008      	b.n	8003ec2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <xTaskGetSchedulerState+0x38>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	e001      	b.n	8003ec2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ec2:	687b      	ldr	r3, [r7, #4]
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	24004918 	.word	0x24004918
 8003ed4:	24004934 	.word	0x24004934

08003ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d056      	beq.n	8003f9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <xTaskPriorityDisinherit+0xd0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d00a      	beq.n	8003f0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	60fb      	str	r3, [r7, #12]
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60bb      	str	r3, [r7, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d02c      	beq.n	8003f9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d128      	bne.n	8003f9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f96e 	bl	8002230 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <xTaskPriorityDisinherit+0xd4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d903      	bls.n	8003f7c <xTaskPriorityDisinherit+0xa4>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <xTaskPriorityDisinherit+0xd4>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <xTaskPriorityDisinherit+0xd8>)
 8003f8a:	441a      	add	r2, r3
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f7fe f8ef 	bl	8002176 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f9c:	697b      	ldr	r3, [r7, #20]
	}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	24004438 	.word	0x24004438
 8003fac:	24004914 	.word	0x24004914
 8003fb0:	2400443c 	.word	0x2400443c

08003fb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe f930 	bl	8002230 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d10a      	bne.n	8003fee <prvAddCurrentTaskToDelayedList+0x3a>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4819      	ldr	r0, [pc, #100]	; (800404c <prvAddCurrentTaskToDelayedList+0x98>)
 8003fe8:	f7fe f8c5 	bl	8002176 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fec:	e026      	b.n	800403c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	429a      	cmp	r2, r3
 8004004:	d209      	bcs.n	800401a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7fe f8d3 	bl	80021be <vListInsert>
}
 8004018:	e010      	b.n	800403c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <prvAddCurrentTaskToDelayedList+0xa0>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <prvAddCurrentTaskToDelayedList+0x94>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3304      	adds	r3, #4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f7fe f8c9 	bl	80021be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <prvAddCurrentTaskToDelayedList+0xa4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	d202      	bcs.n	800403c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6013      	str	r3, [r2, #0]
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	24004910 	.word	0x24004910
 8004048:	24004438 	.word	0x24004438
 800404c:	240048f8 	.word	0x240048f8
 8004050:	240048c8 	.word	0x240048c8
 8004054:	240048c4 	.word	0x240048c4
 8004058:	2400492c 	.word	0x2400492c

0800405c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004066:	f000 fb07 	bl	8004678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <xTimerCreateTimerTask+0x80>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d021      	beq.n	80040b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800407a:	1d3a      	adds	r2, r7, #4
 800407c:	f107 0108 	add.w	r1, r7, #8
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	4618      	mov	r0, r3
 8004086:	f7fd fe45 	bl	8001d14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	9202      	str	r2, [sp, #8]
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	2302      	movs	r3, #2
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	460a      	mov	r2, r1
 800409c:	4910      	ldr	r1, [pc, #64]	; (80040e0 <xTimerCreateTimerTask+0x84>)
 800409e:	4811      	ldr	r0, [pc, #68]	; (80040e4 <xTimerCreateTimerTask+0x88>)
 80040a0:	f7ff f8b4 	bl	800320c <xTaskCreateStatic>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <xTimerCreateTimerTask+0x8c>)
 80040a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <xTimerCreateTimerTask+0x8c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040b2:	2301      	movs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	613b      	str	r3, [r7, #16]
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	24004968 	.word	0x24004968
 80040e0:	08004934 	.word	0x08004934
 80040e4:	08004221 	.word	0x08004221
 80040e8:	2400496c 	.word	0x2400496c

080040ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	623b      	str	r3, [r7, #32]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <xTimerGenericCommand+0x98>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02a      	beq.n	8004178 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b05      	cmp	r3, #5
 8004132:	dc18      	bgt.n	8004166 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004134:	f7ff feb2 	bl	8003e9c <xTaskGetSchedulerState>
 8004138:	4603      	mov	r3, r0
 800413a:	2b02      	cmp	r3, #2
 800413c:	d109      	bne.n	8004152 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <xTimerGenericCommand+0x98>)
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f107 0110 	add.w	r1, r7, #16
 8004146:	2300      	movs	r3, #0
 8004148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414a:	f7fe fc77 	bl	8002a3c <xQueueGenericSend>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24
 8004150:	e012      	b.n	8004178 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <xTimerGenericCommand+0x98>)
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	f107 0110 	add.w	r1, r7, #16
 800415a:	2300      	movs	r3, #0
 800415c:	2200      	movs	r2, #0
 800415e:	f7fe fc6d 	bl	8002a3c <xQueueGenericSend>
 8004162:	6278      	str	r0, [r7, #36]	; 0x24
 8004164:	e008      	b.n	8004178 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <xTimerGenericCommand+0x98>)
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	f107 0110 	add.w	r1, r7, #16
 800416e:	2300      	movs	r3, #0
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	f7fe fd61 	bl	8002c38 <xQueueGenericSendFromISR>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800417a:	4618      	mov	r0, r3
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	24004968 	.word	0x24004968

08004188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <prvProcessExpiredTimer+0x94>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3304      	adds	r3, #4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe f845 	bl	8002230 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d022      	beq.n	80041fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	18d1      	adds	r1, r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f000 f8d1 	bl	8004368 <prvInsertTimerInActiveList>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01f      	beq.n	800420c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041cc:	2300      	movs	r3, #0
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2300      	movs	r3, #0
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	2100      	movs	r1, #0
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7ff ff88 	bl	80040ec <xTimerGenericCommand>
 80041dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d113      	bne.n	800420c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	60fb      	str	r3, [r7, #12]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	b2da      	uxtb	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	6978      	ldr	r0, [r7, #20]
 8004212:	4798      	blx	r3
}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	24004960 	.word	0x24004960

08004220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004228:	f107 0308 	add.w	r3, r7, #8
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f857 	bl	80042e0 <prvGetNextExpireTime>
 8004232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4619      	mov	r1, r3
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f803 	bl	8004244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800423e:	f000 f8d5 	bl	80043ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004242:	e7f1      	b.n	8004228 <prvTimerTask+0x8>

08004244 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800424e:	f7ff fa39 	bl	80036c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f866 	bl	8004328 <prvSampleTimeNow>
 800425c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d130      	bne.n	80042c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <prvProcessTimerOrBlockTask+0x3c>
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	429a      	cmp	r2, r3
 8004270:	d806      	bhi.n	8004280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004272:	f7ff fa35 	bl	80036e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff85 	bl	8004188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800427e:	e024      	b.n	80042ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d008      	beq.n	8004298 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <prvProcessTimerOrBlockTask+0x90>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <prvProcessTimerOrBlockTask+0x50>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <prvProcessTimerOrBlockTask+0x52>
 8004294:	2300      	movs	r3, #0
 8004296:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <prvProcessTimerOrBlockTask+0x94>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	f7fe ff7d 	bl	80031a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042aa:	f7ff fa19 	bl	80036e0 <xTaskResumeAll>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <prvProcessTimerOrBlockTask+0x98>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	f3bf 8f6f 	isb	sy
}
 80042c4:	e001      	b.n	80042ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042c6:	f7ff fa0b 	bl	80036e0 <xTaskResumeAll>
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	24004964 	.word	0x24004964
 80042d8:	24004968 	.word	0x24004968
 80042dc:	e000ed04 	.word	0xe000ed04

080042e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <prvGetNextExpireTime+0x44>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <prvGetNextExpireTime+0x16>
 80042f2:	2201      	movs	r2, #1
 80042f4:	e000      	b.n	80042f8 <prvGetNextExpireTime+0x18>
 80042f6:	2200      	movs	r2, #0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <prvGetNextExpireTime+0x44>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e001      	b.n	8004314 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004314:	68fb      	ldr	r3, [r7, #12]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	24004960 	.word	0x24004960

08004328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004330:	f7ff fa74 	bl	800381c <xTaskGetTickCount>
 8004334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004336:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <prvSampleTimeNow+0x3c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d205      	bcs.n	800434c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004340:	f000 f936 	bl	80045b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	e002      	b.n	8004352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004352:	4a04      	ldr	r2, [pc, #16]	; (8004364 <prvSampleTimeNow+0x3c>)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	24004970 	.word	0x24004970

08004368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d812      	bhi.n	80043b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	429a      	cmp	r2, r3
 800439a:	d302      	bcc.n	80043a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e01b      	b.n	80043da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <prvInsertTimerInActiveList+0x7c>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f7fd ff06 	bl	80021be <vListInsert>
 80043b2:	e012      	b.n	80043da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d206      	bcs.n	80043ca <prvInsertTimerInActiveList+0x62>
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e007      	b.n	80043da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <prvInsertTimerInActiveList+0x80>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7fd fef2 	bl	80021be <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043da:	697b      	ldr	r3, [r7, #20]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	24004964 	.word	0x24004964
 80043e8:	24004960 	.word	0x24004960

080043ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043f2:	e0ca      	b.n	800458a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da18      	bge.n	800442c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	3304      	adds	r3, #4
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	61fb      	str	r3, [r7, #28]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004422:	6850      	ldr	r0, [r2, #4]
 8004424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	4611      	mov	r1, r2
 800442a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f2c0 80aa 	blt.w	8004588 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7fd fef3 	bl	8002230 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800444a:	463b      	mov	r3, r7
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ff6b 	bl	8004328 <prvSampleTimeNow>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b09      	cmp	r3, #9
 8004458:	f200 8097 	bhi.w	800458a <prvProcessReceivedCommands+0x19e>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <prvProcessReceivedCommands+0x78>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	0800448d 	.word	0x0800448d
 8004468:	0800448d 	.word	0x0800448d
 800446c:	0800448d 	.word	0x0800448d
 8004470:	08004501 	.word	0x08004501
 8004474:	08004515 	.word	0x08004515
 8004478:	0800455f 	.word	0x0800455f
 800447c:	0800448d 	.word	0x0800448d
 8004480:	0800448d 	.word	0x0800448d
 8004484:	08004501 	.word	0x08004501
 8004488:	08004515 	.word	0x08004515
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	18d1      	adds	r1, r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ac:	f7ff ff5c 	bl	8004368 <prvInsertTimerInActiveList>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d069      	beq.n	800458a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d05e      	beq.n	800458a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	441a      	add	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	2100      	movs	r1, #0
 80044dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044de:	f7ff fe05 	bl	80040ec <xTimerGenericCommand>
 80044e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d14f      	bne.n	800458a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	61bb      	str	r3, [r7, #24]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	b2da      	uxtb	r2, r3
 800450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004512:	e03a      	b.n	800458a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	617b      	str	r3, [r7, #20]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	18d1      	adds	r1, r2, r3
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004558:	f7ff ff06 	bl	8004368 <prvInsertTimerInActiveList>
					break;
 800455c:	e015      	b.n	800458a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800456c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456e:	f7fd fcb7 	bl	8001ee0 <vPortFree>
 8004572:	e00a      	b.n	800458a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004586:	e000      	b.n	800458a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004588:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <prvProcessReceivedCommands+0x1c0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1d39      	adds	r1, r7, #4
 8004590:	2200      	movs	r2, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fbec 	bl	8002d70 <xQueueReceive>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	f47f af2a 	bne.w	80043f4 <prvProcessReceivedCommands+0x8>
	}
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	3730      	adds	r7, #48	; 0x30
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	24004968 	.word	0x24004968

080045b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045b6:	e048      	b.n	800464a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <prvSwitchTimerLists+0xc0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c2:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <prvSwitchTimerLists+0xc0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fd fe2d 	bl	8002230 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02e      	beq.n	800464a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d90e      	bls.n	800461c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <prvSwitchTimerLists+0xc0>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fd fdd2 	bl	80021be <vListInsert>
 800461a:	e016      	b.n	800464a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800461c:	2300      	movs	r3, #0
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	2100      	movs	r1, #0
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff fd60 	bl	80040ec <xTimerGenericCommand>
 800462c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	603b      	str	r3, [r7, #0]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <prvSwitchTimerLists+0xc0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1b1      	bne.n	80045b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <prvSwitchTimerLists+0xc0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <prvSwitchTimerLists+0xc4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <prvSwitchTimerLists+0xc0>)
 8004660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004662:	4a04      	ldr	r2, [pc, #16]	; (8004674 <prvSwitchTimerLists+0xc4>)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	6013      	str	r3, [r2, #0]
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	24004960 	.word	0x24004960
 8004674:	24004964 	.word	0x24004964

08004678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800467e:	f7fd ff31 	bl	80024e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <prvCheckForValidListAndQueue+0x60>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d120      	bne.n	80046cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800468a:	4814      	ldr	r0, [pc, #80]	; (80046dc <prvCheckForValidListAndQueue+0x64>)
 800468c:	f7fd fd46 	bl	800211c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004690:	4813      	ldr	r0, [pc, #76]	; (80046e0 <prvCheckForValidListAndQueue+0x68>)
 8004692:	f7fd fd43 	bl	800211c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <prvCheckForValidListAndQueue+0x6c>)
 8004698:	4a10      	ldr	r2, [pc, #64]	; (80046dc <prvCheckForValidListAndQueue+0x64>)
 800469a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <prvCheckForValidListAndQueue+0x70>)
 800469e:	4a10      	ldr	r2, [pc, #64]	; (80046e0 <prvCheckForValidListAndQueue+0x68>)
 80046a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046a2:	2300      	movs	r3, #0
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <prvCheckForValidListAndQueue+0x74>)
 80046a8:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <prvCheckForValidListAndQueue+0x78>)
 80046aa:	2110      	movs	r1, #16
 80046ac:	200a      	movs	r0, #10
 80046ae:	f7fe f8a3 	bl	80027f8 <xQueueGenericCreateStatic>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <prvCheckForValidListAndQueue+0x60>)
 80046b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046b8:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <prvCheckForValidListAndQueue+0x60>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <prvCheckForValidListAndQueue+0x60>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	490b      	ldr	r1, [pc, #44]	; (80046f4 <prvCheckForValidListAndQueue+0x7c>)
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fd42 	bl	8003150 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046cc:	f7fd ff3a 	bl	8002544 <vPortExitCritical>
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	24004968 	.word	0x24004968
 80046dc:	24004938 	.word	0x24004938
 80046e0:	2400494c 	.word	0x2400494c
 80046e4:	24004960 	.word	0x24004960
 80046e8:	24004964 	.word	0x24004964
 80046ec:	24004a14 	.word	0x24004a14
 80046f0:	24004974 	.word	0x24004974
 80046f4:	0800493c 	.word	0x0800493c

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4d0d      	ldr	r5, [pc, #52]	; (8004730 <__libc_init_array+0x38>)
 80046fc:	4c0d      	ldr	r4, [pc, #52]	; (8004734 <__libc_init_array+0x3c>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	2600      	movs	r6, #0
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	4d0b      	ldr	r5, [pc, #44]	; (8004738 <__libc_init_array+0x40>)
 800470a:	4c0c      	ldr	r4, [pc, #48]	; (800473c <__libc_init_array+0x44>)
 800470c:	f000 f8f6 	bl	80048fc <_init>
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	2600      	movs	r6, #0
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	080049e8 	.word	0x080049e8
 8004734:	080049e8 	.word	0x080049e8
 8004738:	080049e8 	.word	0x080049e8
 800473c:	080049ec 	.word	0x080049ec

08004740 <__retarget_lock_acquire_recursive>:
 8004740:	4770      	bx	lr

08004742 <__retarget_lock_release_recursive>:
 8004742:	4770      	bx	lr

08004744 <memcpy>:
 8004744:	440a      	add	r2, r1
 8004746:	4291      	cmp	r1, r2
 8004748:	f100 33ff 	add.w	r3, r0, #4294967295
 800474c:	d100      	bne.n	8004750 <memcpy+0xc>
 800474e:	4770      	bx	lr
 8004750:	b510      	push	{r4, lr}
 8004752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800475a:	4291      	cmp	r1, r2
 800475c:	d1f9      	bne.n	8004752 <memcpy+0xe>
 800475e:	bd10      	pop	{r4, pc}

08004760 <memset>:
 8004760:	4402      	add	r2, r0
 8004762:	4603      	mov	r3, r0
 8004764:	4293      	cmp	r3, r2
 8004766:	d100      	bne.n	800476a <memset+0xa>
 8004768:	4770      	bx	lr
 800476a:	f803 1b01 	strb.w	r1, [r3], #1
 800476e:	e7f9      	b.n	8004764 <memset+0x4>

08004770 <_free_r>:
 8004770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004772:	2900      	cmp	r1, #0
 8004774:	d048      	beq.n	8004808 <_free_r+0x98>
 8004776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477a:	9001      	str	r0, [sp, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f1a1 0404 	sub.w	r4, r1, #4
 8004782:	bfb8      	it	lt
 8004784:	18e4      	addlt	r4, r4, r3
 8004786:	f000 f8ad 	bl	80048e4 <__malloc_lock>
 800478a:	4a20      	ldr	r2, [pc, #128]	; (800480c <_free_r+0x9c>)
 800478c:	9801      	ldr	r0, [sp, #4]
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	4615      	mov	r5, r2
 8004792:	b933      	cbnz	r3, 80047a2 <_free_r+0x32>
 8004794:	6063      	str	r3, [r4, #4]
 8004796:	6014      	str	r4, [r2, #0]
 8004798:	b003      	add	sp, #12
 800479a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800479e:	f000 b8a7 	b.w	80048f0 <__malloc_unlock>
 80047a2:	42a3      	cmp	r3, r4
 80047a4:	d90b      	bls.n	80047be <_free_r+0x4e>
 80047a6:	6821      	ldr	r1, [r4, #0]
 80047a8:	1862      	adds	r2, r4, r1
 80047aa:	4293      	cmp	r3, r2
 80047ac:	bf04      	itt	eq
 80047ae:	681a      	ldreq	r2, [r3, #0]
 80047b0:	685b      	ldreq	r3, [r3, #4]
 80047b2:	6063      	str	r3, [r4, #4]
 80047b4:	bf04      	itt	eq
 80047b6:	1852      	addeq	r2, r2, r1
 80047b8:	6022      	streq	r2, [r4, #0]
 80047ba:	602c      	str	r4, [r5, #0]
 80047bc:	e7ec      	b.n	8004798 <_free_r+0x28>
 80047be:	461a      	mov	r2, r3
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b10b      	cbz	r3, 80047c8 <_free_r+0x58>
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	d9fa      	bls.n	80047be <_free_r+0x4e>
 80047c8:	6811      	ldr	r1, [r2, #0]
 80047ca:	1855      	adds	r5, r2, r1
 80047cc:	42a5      	cmp	r5, r4
 80047ce:	d10b      	bne.n	80047e8 <_free_r+0x78>
 80047d0:	6824      	ldr	r4, [r4, #0]
 80047d2:	4421      	add	r1, r4
 80047d4:	1854      	adds	r4, r2, r1
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	6011      	str	r1, [r2, #0]
 80047da:	d1dd      	bne.n	8004798 <_free_r+0x28>
 80047dc:	681c      	ldr	r4, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	6053      	str	r3, [r2, #4]
 80047e2:	4421      	add	r1, r4
 80047e4:	6011      	str	r1, [r2, #0]
 80047e6:	e7d7      	b.n	8004798 <_free_r+0x28>
 80047e8:	d902      	bls.n	80047f0 <_free_r+0x80>
 80047ea:	230c      	movs	r3, #12
 80047ec:	6003      	str	r3, [r0, #0]
 80047ee:	e7d3      	b.n	8004798 <_free_r+0x28>
 80047f0:	6825      	ldr	r5, [r4, #0]
 80047f2:	1961      	adds	r1, r4, r5
 80047f4:	428b      	cmp	r3, r1
 80047f6:	bf04      	itt	eq
 80047f8:	6819      	ldreq	r1, [r3, #0]
 80047fa:	685b      	ldreq	r3, [r3, #4]
 80047fc:	6063      	str	r3, [r4, #4]
 80047fe:	bf04      	itt	eq
 8004800:	1949      	addeq	r1, r1, r5
 8004802:	6021      	streq	r1, [r4, #0]
 8004804:	6054      	str	r4, [r2, #4]
 8004806:	e7c7      	b.n	8004798 <_free_r+0x28>
 8004808:	b003      	add	sp, #12
 800480a:	bd30      	pop	{r4, r5, pc}
 800480c:	24004a64 	.word	0x24004a64

08004810 <cleanup_glue>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	460c      	mov	r4, r1
 8004814:	6809      	ldr	r1, [r1, #0]
 8004816:	4605      	mov	r5, r0
 8004818:	b109      	cbz	r1, 800481e <cleanup_glue+0xe>
 800481a:	f7ff fff9 	bl	8004810 <cleanup_glue>
 800481e:	4621      	mov	r1, r4
 8004820:	4628      	mov	r0, r5
 8004822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004826:	f7ff bfa3 	b.w	8004770 <_free_r>
	...

0800482c <_reclaim_reent>:
 800482c:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <_reclaim_reent+0xb4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4283      	cmp	r3, r0
 8004832:	b570      	push	{r4, r5, r6, lr}
 8004834:	4604      	mov	r4, r0
 8004836:	d051      	beq.n	80048dc <_reclaim_reent+0xb0>
 8004838:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800483a:	b143      	cbz	r3, 800484e <_reclaim_reent+0x22>
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d14a      	bne.n	80048d8 <_reclaim_reent+0xac>
 8004842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	b111      	cbz	r1, 800484e <_reclaim_reent+0x22>
 8004848:	4620      	mov	r0, r4
 800484a:	f7ff ff91 	bl	8004770 <_free_r>
 800484e:	6961      	ldr	r1, [r4, #20]
 8004850:	b111      	cbz	r1, 8004858 <_reclaim_reent+0x2c>
 8004852:	4620      	mov	r0, r4
 8004854:	f7ff ff8c 	bl	8004770 <_free_r>
 8004858:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800485a:	b111      	cbz	r1, 8004862 <_reclaim_reent+0x36>
 800485c:	4620      	mov	r0, r4
 800485e:	f7ff ff87 	bl	8004770 <_free_r>
 8004862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004864:	b111      	cbz	r1, 800486c <_reclaim_reent+0x40>
 8004866:	4620      	mov	r0, r4
 8004868:	f7ff ff82 	bl	8004770 <_free_r>
 800486c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800486e:	b111      	cbz	r1, 8004876 <_reclaim_reent+0x4a>
 8004870:	4620      	mov	r0, r4
 8004872:	f7ff ff7d 	bl	8004770 <_free_r>
 8004876:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004878:	b111      	cbz	r1, 8004880 <_reclaim_reent+0x54>
 800487a:	4620      	mov	r0, r4
 800487c:	f7ff ff78 	bl	8004770 <_free_r>
 8004880:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004882:	b111      	cbz	r1, 800488a <_reclaim_reent+0x5e>
 8004884:	4620      	mov	r0, r4
 8004886:	f7ff ff73 	bl	8004770 <_free_r>
 800488a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800488c:	b111      	cbz	r1, 8004894 <_reclaim_reent+0x68>
 800488e:	4620      	mov	r0, r4
 8004890:	f7ff ff6e 	bl	8004770 <_free_r>
 8004894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004896:	b111      	cbz	r1, 800489e <_reclaim_reent+0x72>
 8004898:	4620      	mov	r0, r4
 800489a:	f7ff ff69 	bl	8004770 <_free_r>
 800489e:	69a3      	ldr	r3, [r4, #24]
 80048a0:	b1e3      	cbz	r3, 80048dc <_reclaim_reent+0xb0>
 80048a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048a4:	4620      	mov	r0, r4
 80048a6:	4798      	blx	r3
 80048a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80048aa:	b1b9      	cbz	r1, 80048dc <_reclaim_reent+0xb0>
 80048ac:	4620      	mov	r0, r4
 80048ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80048b2:	f7ff bfad 	b.w	8004810 <cleanup_glue>
 80048b6:	5949      	ldr	r1, [r1, r5]
 80048b8:	b941      	cbnz	r1, 80048cc <_reclaim_reent+0xa0>
 80048ba:	3504      	adds	r5, #4
 80048bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048be:	2d80      	cmp	r5, #128	; 0x80
 80048c0:	68d9      	ldr	r1, [r3, #12]
 80048c2:	d1f8      	bne.n	80048b6 <_reclaim_reent+0x8a>
 80048c4:	4620      	mov	r0, r4
 80048c6:	f7ff ff53 	bl	8004770 <_free_r>
 80048ca:	e7ba      	b.n	8004842 <_reclaim_reent+0x16>
 80048cc:	680e      	ldr	r6, [r1, #0]
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7ff ff4e 	bl	8004770 <_free_r>
 80048d4:	4631      	mov	r1, r6
 80048d6:	e7ef      	b.n	80048b8 <_reclaim_reent+0x8c>
 80048d8:	2500      	movs	r5, #0
 80048da:	e7ef      	b.n	80048bc <_reclaim_reent+0x90>
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	bf00      	nop
 80048e0:	24000014 	.word	0x24000014

080048e4 <__malloc_lock>:
 80048e4:	4801      	ldr	r0, [pc, #4]	; (80048ec <__malloc_lock+0x8>)
 80048e6:	f7ff bf2b 	b.w	8004740 <__retarget_lock_acquire_recursive>
 80048ea:	bf00      	nop
 80048ec:	24004ab8 	.word	0x24004ab8

080048f0 <__malloc_unlock>:
 80048f0:	4801      	ldr	r0, [pc, #4]	; (80048f8 <__malloc_unlock+0x8>)
 80048f2:	f7ff bf26 	b.w	8004742 <__retarget_lock_release_recursive>
 80048f6:	bf00      	nop
 80048f8:	24004ab8 	.word	0x24004ab8

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
