
Splat2DevBoard_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb20  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0810cdc0  0810cdc0  0001cdc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d030  0810d030  0001d030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d038  0810d038  0001d038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d03c  0810d03c  0001d03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c0  10000000  0810d040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d6c  100000c0  0810d100  000200c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10004e2c  0810d100  00024e2c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f64b  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005825  00000000  00000000  0004f73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001950  00000000  00000000  00054f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017c0  00000000  00000000  000568b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c6e3  00000000  00000000  00058070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e975  00000000  00000000  00094753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00184c61  00000000  00000000  000b30c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00237d29  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a94  00000000  00000000  00237d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100000c0 	.word	0x100000c0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810cda8 	.word	0x0810cda8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100000c4 	.word	0x100000c4
 81002dc:	0810cda8 	.word	0x0810cda8

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <__aeabi_uldivmod>:
 81002f0:	b953      	cbnz	r3, 8100308 <__aeabi_uldivmod+0x18>
 81002f2:	b94a      	cbnz	r2, 8100308 <__aeabi_uldivmod+0x18>
 81002f4:	2900      	cmp	r1, #0
 81002f6:	bf08      	it	eq
 81002f8:	2800      	cmpeq	r0, #0
 81002fa:	bf1c      	itt	ne
 81002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8100300:	f04f 30ff 	movne.w	r0, #4294967295
 8100304:	f000 b96e 	b.w	81005e4 <__aeabi_idiv0>
 8100308:	f1ad 0c08 	sub.w	ip, sp, #8
 810030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100310:	f000 f806 	bl	8100320 <__udivmoddi4>
 8100314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810031c:	b004      	add	sp, #16
 810031e:	4770      	bx	lr

08100320 <__udivmoddi4>:
 8100320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100324:	9d08      	ldr	r5, [sp, #32]
 8100326:	4604      	mov	r4, r0
 8100328:	468c      	mov	ip, r1
 810032a:	2b00      	cmp	r3, #0
 810032c:	f040 8083 	bne.w	8100436 <__udivmoddi4+0x116>
 8100330:	428a      	cmp	r2, r1
 8100332:	4617      	mov	r7, r2
 8100334:	d947      	bls.n	81003c6 <__udivmoddi4+0xa6>
 8100336:	fab2 f282 	clz	r2, r2
 810033a:	b142      	cbz	r2, 810034e <__udivmoddi4+0x2e>
 810033c:	f1c2 0020 	rsb	r0, r2, #32
 8100340:	fa24 f000 	lsr.w	r0, r4, r0
 8100344:	4091      	lsls	r1, r2
 8100346:	4097      	lsls	r7, r2
 8100348:	ea40 0c01 	orr.w	ip, r0, r1
 810034c:	4094      	lsls	r4, r2
 810034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100352:	0c23      	lsrs	r3, r4, #16
 8100354:	fbbc f6f8 	udiv	r6, ip, r8
 8100358:	fa1f fe87 	uxth.w	lr, r7
 810035c:	fb08 c116 	mls	r1, r8, r6, ip
 8100360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100364:	fb06 f10e 	mul.w	r1, r6, lr
 8100368:	4299      	cmp	r1, r3
 810036a:	d909      	bls.n	8100380 <__udivmoddi4+0x60>
 810036c:	18fb      	adds	r3, r7, r3
 810036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8100372:	f080 8119 	bcs.w	81005a8 <__udivmoddi4+0x288>
 8100376:	4299      	cmp	r1, r3
 8100378:	f240 8116 	bls.w	81005a8 <__udivmoddi4+0x288>
 810037c:	3e02      	subs	r6, #2
 810037e:	443b      	add	r3, r7
 8100380:	1a5b      	subs	r3, r3, r1
 8100382:	b2a4      	uxth	r4, r4
 8100384:	fbb3 f0f8 	udiv	r0, r3, r8
 8100388:	fb08 3310 	mls	r3, r8, r0, r3
 810038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100390:	fb00 fe0e 	mul.w	lr, r0, lr
 8100394:	45a6      	cmp	lr, r4
 8100396:	d909      	bls.n	81003ac <__udivmoddi4+0x8c>
 8100398:	193c      	adds	r4, r7, r4
 810039a:	f100 33ff 	add.w	r3, r0, #4294967295
 810039e:	f080 8105 	bcs.w	81005ac <__udivmoddi4+0x28c>
 81003a2:	45a6      	cmp	lr, r4
 81003a4:	f240 8102 	bls.w	81005ac <__udivmoddi4+0x28c>
 81003a8:	3802      	subs	r0, #2
 81003aa:	443c      	add	r4, r7
 81003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 81003b0:	eba4 040e 	sub.w	r4, r4, lr
 81003b4:	2600      	movs	r6, #0
 81003b6:	b11d      	cbz	r5, 81003c0 <__udivmoddi4+0xa0>
 81003b8:	40d4      	lsrs	r4, r2
 81003ba:	2300      	movs	r3, #0
 81003bc:	e9c5 4300 	strd	r4, r3, [r5]
 81003c0:	4631      	mov	r1, r6
 81003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003c6:	b902      	cbnz	r2, 81003ca <__udivmoddi4+0xaa>
 81003c8:	deff      	udf	#255	; 0xff
 81003ca:	fab2 f282 	clz	r2, r2
 81003ce:	2a00      	cmp	r2, #0
 81003d0:	d150      	bne.n	8100474 <__udivmoddi4+0x154>
 81003d2:	1bcb      	subs	r3, r1, r7
 81003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003d8:	fa1f f887 	uxth.w	r8, r7
 81003dc:	2601      	movs	r6, #1
 81003de:	fbb3 fcfe 	udiv	ip, r3, lr
 81003e2:	0c21      	lsrs	r1, r4, #16
 81003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 81003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81003ec:	fb08 f30c 	mul.w	r3, r8, ip
 81003f0:	428b      	cmp	r3, r1
 81003f2:	d907      	bls.n	8100404 <__udivmoddi4+0xe4>
 81003f4:	1879      	adds	r1, r7, r1
 81003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 81003fa:	d202      	bcs.n	8100402 <__udivmoddi4+0xe2>
 81003fc:	428b      	cmp	r3, r1
 81003fe:	f200 80e9 	bhi.w	81005d4 <__udivmoddi4+0x2b4>
 8100402:	4684      	mov	ip, r0
 8100404:	1ac9      	subs	r1, r1, r3
 8100406:	b2a3      	uxth	r3, r4
 8100408:	fbb1 f0fe 	udiv	r0, r1, lr
 810040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8100410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100414:	fb08 f800 	mul.w	r8, r8, r0
 8100418:	45a0      	cmp	r8, r4
 810041a:	d907      	bls.n	810042c <__udivmoddi4+0x10c>
 810041c:	193c      	adds	r4, r7, r4
 810041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8100422:	d202      	bcs.n	810042a <__udivmoddi4+0x10a>
 8100424:	45a0      	cmp	r8, r4
 8100426:	f200 80d9 	bhi.w	81005dc <__udivmoddi4+0x2bc>
 810042a:	4618      	mov	r0, r3
 810042c:	eba4 0408 	sub.w	r4, r4, r8
 8100430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100434:	e7bf      	b.n	81003b6 <__udivmoddi4+0x96>
 8100436:	428b      	cmp	r3, r1
 8100438:	d909      	bls.n	810044e <__udivmoddi4+0x12e>
 810043a:	2d00      	cmp	r5, #0
 810043c:	f000 80b1 	beq.w	81005a2 <__udivmoddi4+0x282>
 8100440:	2600      	movs	r6, #0
 8100442:	e9c5 0100 	strd	r0, r1, [r5]
 8100446:	4630      	mov	r0, r6
 8100448:	4631      	mov	r1, r6
 810044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810044e:	fab3 f683 	clz	r6, r3
 8100452:	2e00      	cmp	r6, #0
 8100454:	d14a      	bne.n	81004ec <__udivmoddi4+0x1cc>
 8100456:	428b      	cmp	r3, r1
 8100458:	d302      	bcc.n	8100460 <__udivmoddi4+0x140>
 810045a:	4282      	cmp	r2, r0
 810045c:	f200 80b8 	bhi.w	81005d0 <__udivmoddi4+0x2b0>
 8100460:	1a84      	subs	r4, r0, r2
 8100462:	eb61 0103 	sbc.w	r1, r1, r3
 8100466:	2001      	movs	r0, #1
 8100468:	468c      	mov	ip, r1
 810046a:	2d00      	cmp	r5, #0
 810046c:	d0a8      	beq.n	81003c0 <__udivmoddi4+0xa0>
 810046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8100472:	e7a5      	b.n	81003c0 <__udivmoddi4+0xa0>
 8100474:	f1c2 0320 	rsb	r3, r2, #32
 8100478:	fa20 f603 	lsr.w	r6, r0, r3
 810047c:	4097      	lsls	r7, r2
 810047e:	fa01 f002 	lsl.w	r0, r1, r2
 8100482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100486:	40d9      	lsrs	r1, r3
 8100488:	4330      	orrs	r0, r6
 810048a:	0c03      	lsrs	r3, r0, #16
 810048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8100490:	fa1f f887 	uxth.w	r8, r7
 8100494:	fb0e 1116 	mls	r1, lr, r6, r1
 8100498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810049c:	fb06 f108 	mul.w	r1, r6, r8
 81004a0:	4299      	cmp	r1, r3
 81004a2:	fa04 f402 	lsl.w	r4, r4, r2
 81004a6:	d909      	bls.n	81004bc <__udivmoddi4+0x19c>
 81004a8:	18fb      	adds	r3, r7, r3
 81004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 81004ae:	f080 808d 	bcs.w	81005cc <__udivmoddi4+0x2ac>
 81004b2:	4299      	cmp	r1, r3
 81004b4:	f240 808a 	bls.w	81005cc <__udivmoddi4+0x2ac>
 81004b8:	3e02      	subs	r6, #2
 81004ba:	443b      	add	r3, r7
 81004bc:	1a5b      	subs	r3, r3, r1
 81004be:	b281      	uxth	r1, r0
 81004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 81004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 81004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004cc:	fb00 f308 	mul.w	r3, r0, r8
 81004d0:	428b      	cmp	r3, r1
 81004d2:	d907      	bls.n	81004e4 <__udivmoddi4+0x1c4>
 81004d4:	1879      	adds	r1, r7, r1
 81004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 81004da:	d273      	bcs.n	81005c4 <__udivmoddi4+0x2a4>
 81004dc:	428b      	cmp	r3, r1
 81004de:	d971      	bls.n	81005c4 <__udivmoddi4+0x2a4>
 81004e0:	3802      	subs	r0, #2
 81004e2:	4439      	add	r1, r7
 81004e4:	1acb      	subs	r3, r1, r3
 81004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81004ea:	e778      	b.n	81003de <__udivmoddi4+0xbe>
 81004ec:	f1c6 0c20 	rsb	ip, r6, #32
 81004f0:	fa03 f406 	lsl.w	r4, r3, r6
 81004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 81004f8:	431c      	orrs	r4, r3
 81004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 81004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8100502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100506:	fa21 f10c 	lsr.w	r1, r1, ip
 810050a:	431f      	orrs	r7, r3
 810050c:	0c3b      	lsrs	r3, r7, #16
 810050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8100512:	fa1f f884 	uxth.w	r8, r4
 8100516:	fb0e 1119 	mls	r1, lr, r9, r1
 810051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 810051e:	fb09 fa08 	mul.w	sl, r9, r8
 8100522:	458a      	cmp	sl, r1
 8100524:	fa02 f206 	lsl.w	r2, r2, r6
 8100528:	fa00 f306 	lsl.w	r3, r0, r6
 810052c:	d908      	bls.n	8100540 <__udivmoddi4+0x220>
 810052e:	1861      	adds	r1, r4, r1
 8100530:	f109 30ff 	add.w	r0, r9, #4294967295
 8100534:	d248      	bcs.n	81005c8 <__udivmoddi4+0x2a8>
 8100536:	458a      	cmp	sl, r1
 8100538:	d946      	bls.n	81005c8 <__udivmoddi4+0x2a8>
 810053a:	f1a9 0902 	sub.w	r9, r9, #2
 810053e:	4421      	add	r1, r4
 8100540:	eba1 010a 	sub.w	r1, r1, sl
 8100544:	b2bf      	uxth	r7, r7
 8100546:	fbb1 f0fe 	udiv	r0, r1, lr
 810054a:	fb0e 1110 	mls	r1, lr, r0, r1
 810054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100552:	fb00 f808 	mul.w	r8, r0, r8
 8100556:	45b8      	cmp	r8, r7
 8100558:	d907      	bls.n	810056a <__udivmoddi4+0x24a>
 810055a:	19e7      	adds	r7, r4, r7
 810055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100560:	d22e      	bcs.n	81005c0 <__udivmoddi4+0x2a0>
 8100562:	45b8      	cmp	r8, r7
 8100564:	d92c      	bls.n	81005c0 <__udivmoddi4+0x2a0>
 8100566:	3802      	subs	r0, #2
 8100568:	4427      	add	r7, r4
 810056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810056e:	eba7 0708 	sub.w	r7, r7, r8
 8100572:	fba0 8902 	umull	r8, r9, r0, r2
 8100576:	454f      	cmp	r7, r9
 8100578:	46c6      	mov	lr, r8
 810057a:	4649      	mov	r1, r9
 810057c:	d31a      	bcc.n	81005b4 <__udivmoddi4+0x294>
 810057e:	d017      	beq.n	81005b0 <__udivmoddi4+0x290>
 8100580:	b15d      	cbz	r5, 810059a <__udivmoddi4+0x27a>
 8100582:	ebb3 020e 	subs.w	r2, r3, lr
 8100586:	eb67 0701 	sbc.w	r7, r7, r1
 810058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 810058e:	40f2      	lsrs	r2, r6
 8100590:	ea4c 0202 	orr.w	r2, ip, r2
 8100594:	40f7      	lsrs	r7, r6
 8100596:	e9c5 2700 	strd	r2, r7, [r5]
 810059a:	2600      	movs	r6, #0
 810059c:	4631      	mov	r1, r6
 810059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005a2:	462e      	mov	r6, r5
 81005a4:	4628      	mov	r0, r5
 81005a6:	e70b      	b.n	81003c0 <__udivmoddi4+0xa0>
 81005a8:	4606      	mov	r6, r0
 81005aa:	e6e9      	b.n	8100380 <__udivmoddi4+0x60>
 81005ac:	4618      	mov	r0, r3
 81005ae:	e6fd      	b.n	81003ac <__udivmoddi4+0x8c>
 81005b0:	4543      	cmp	r3, r8
 81005b2:	d2e5      	bcs.n	8100580 <__udivmoddi4+0x260>
 81005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 81005b8:	eb69 0104 	sbc.w	r1, r9, r4
 81005bc:	3801      	subs	r0, #1
 81005be:	e7df      	b.n	8100580 <__udivmoddi4+0x260>
 81005c0:	4608      	mov	r0, r1
 81005c2:	e7d2      	b.n	810056a <__udivmoddi4+0x24a>
 81005c4:	4660      	mov	r0, ip
 81005c6:	e78d      	b.n	81004e4 <__udivmoddi4+0x1c4>
 81005c8:	4681      	mov	r9, r0
 81005ca:	e7b9      	b.n	8100540 <__udivmoddi4+0x220>
 81005cc:	4666      	mov	r6, ip
 81005ce:	e775      	b.n	81004bc <__udivmoddi4+0x19c>
 81005d0:	4630      	mov	r0, r6
 81005d2:	e74a      	b.n	810046a <__udivmoddi4+0x14a>
 81005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005d8:	4439      	add	r1, r7
 81005da:	e713      	b.n	8100404 <__udivmoddi4+0xe4>
 81005dc:	3802      	subs	r0, #2
 81005de:	443c      	add	r4, r7
 81005e0:	e724      	b.n	810042c <__udivmoddi4+0x10c>
 81005e2:	bf00      	nop

081005e4 <__aeabi_idiv0>:
 81005e4:	4770      	bx	lr
 81005e6:	bf00      	nop

081005e8 <resetEditor>:
short prgSize;
static short maxProgSize;
static char lineSpacePos;
char lastInput;

void resetEditor(void) {
 81005e8:	b480      	push	{r7}
 81005ea:	af00      	add	r7, sp, #0
    ((prgline*)prgStore)->num = 0;
 81005ec:	4b08      	ldr	r3, [pc, #32]	; (8100610 <resetEditor+0x28>)
 81005ee:	681b      	ldr	r3, [r3, #0]
 81005f0:	2200      	movs	r2, #0
 81005f2:	701a      	strb	r2, [r3, #0]
 81005f4:	2200      	movs	r2, #0
 81005f6:	705a      	strb	r2, [r3, #1]
    prgSize = 2;
 81005f8:	4b06      	ldr	r3, [pc, #24]	; (8100614 <resetEditor+0x2c>)
 81005fa:	2202      	movs	r2, #2
 81005fc:	801a      	strh	r2, [r3, #0]
    lineSpacePos = 0;
 81005fe:	4b06      	ldr	r3, [pc, #24]	; (8100618 <resetEditor+0x30>)
 8100600:	2200      	movs	r2, #0
 8100602:	701a      	strb	r2, [r3, #0]
}
 8100604:	bf00      	nop
 8100606:	46bd      	mov	sp, r7
 8100608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810060c:	4770      	bx	lr
 810060e:	bf00      	nop
 8100610:	10004b40 	.word	0x10004b40
 8100614:	10004ac4 	.word	0x10004ac4
 8100618:	100000de 	.word	0x100000de

0810061c <readLine>:
    maxProgSize = progSpaceSize;
    prgStore = prgBody;
    resetEditor();
}
char lineSpace[40 * 3];
char readLine() {
 810061c:	b580      	push	{r7, lr}
 810061e:	af00      	add	r7, sp, #0
    if (lastInput == '\r' || lastInput == '\n') {
 8100620:	4b22      	ldr	r3, [pc, #136]	; (81006ac <readLine+0x90>)
 8100622:	781b      	ldrb	r3, [r3, #0]
 8100624:	2b0d      	cmp	r3, #13
 8100626:	d003      	beq.n	8100630 <readLine+0x14>
 8100628:	4b20      	ldr	r3, [pc, #128]	; (81006ac <readLine+0x90>)
 810062a:	781b      	ldrb	r3, [r3, #0]
 810062c:	2b0a      	cmp	r3, #10
 810062e:	d110      	bne.n	8100652 <readLine+0x36>
        trim(lineSpace);
 8100630:	481f      	ldr	r0, [pc, #124]	; (81006b0 <readLine+0x94>)
 8100632:	f003 f8c9 	bl	81037c8 <trim>
        lineSpace[lineSpacePos] = 0;
 8100636:	4b1f      	ldr	r3, [pc, #124]	; (81006b4 <readLine+0x98>)
 8100638:	781b      	ldrb	r3, [r3, #0]
 810063a:	461a      	mov	r2, r3
 810063c:	4b1c      	ldr	r3, [pc, #112]	; (81006b0 <readLine+0x94>)
 810063e:	2100      	movs	r1, #0
 8100640:	5499      	strb	r1, [r3, r2]
        lineSpacePos = 0;
 8100642:	4b1c      	ldr	r3, [pc, #112]	; (81006b4 <readLine+0x98>)
 8100644:	2200      	movs	r2, #0
 8100646:	701a      	strb	r2, [r3, #0]
        sysEcho('\n');
 8100648:	200a      	movs	r0, #10
 810064a:	f003 fc3f 	bl	8103ecc <sysEcho>
        return 1;
 810064e:	2301      	movs	r3, #1
 8100650:	e02a      	b.n	81006a8 <readLine+0x8c>
    } else if (lastInput == '\b' || lastInput == 127) {
 8100652:	4b16      	ldr	r3, [pc, #88]	; (81006ac <readLine+0x90>)
 8100654:	781b      	ldrb	r3, [r3, #0]
 8100656:	2b08      	cmp	r3, #8
 8100658:	d003      	beq.n	8100662 <readLine+0x46>
 810065a:	4b14      	ldr	r3, [pc, #80]	; (81006ac <readLine+0x90>)
 810065c:	781b      	ldrb	r3, [r3, #0]
 810065e:	2b7f      	cmp	r3, #127	; 0x7f
 8100660:	d10d      	bne.n	810067e <readLine+0x62>
        if (lineSpacePos > 0) {
 8100662:	4b14      	ldr	r3, [pc, #80]	; (81006b4 <readLine+0x98>)
 8100664:	781b      	ldrb	r3, [r3, #0]
 8100666:	2b00      	cmp	r3, #0
 8100668:	d018      	beq.n	810069c <readLine+0x80>
            lastInput = '\b';
 810066a:	4b10      	ldr	r3, [pc, #64]	; (81006ac <readLine+0x90>)
 810066c:	2208      	movs	r2, #8
 810066e:	701a      	strb	r2, [r3, #0]
            lineSpacePos -= 1;
 8100670:	4b10      	ldr	r3, [pc, #64]	; (81006b4 <readLine+0x98>)
 8100672:	781b      	ldrb	r3, [r3, #0]
 8100674:	3b01      	subs	r3, #1
 8100676:	b2da      	uxtb	r2, r3
 8100678:	4b0e      	ldr	r3, [pc, #56]	; (81006b4 <readLine+0x98>)
 810067a:	701a      	strb	r2, [r3, #0]
        if (lineSpacePos > 0) {
 810067c:	e00e      	b.n	810069c <readLine+0x80>
        }
    } else if (lastInput >= ' ') {
 810067e:	4b0b      	ldr	r3, [pc, #44]	; (81006ac <readLine+0x90>)
 8100680:	781b      	ldrb	r3, [r3, #0]
 8100682:	2b1f      	cmp	r3, #31
 8100684:	d90a      	bls.n	810069c <readLine+0x80>
        lineSpace[lineSpacePos++] = lastInput;
 8100686:	4b0b      	ldr	r3, [pc, #44]	; (81006b4 <readLine+0x98>)
 8100688:	781b      	ldrb	r3, [r3, #0]
 810068a:	1c5a      	adds	r2, r3, #1
 810068c:	b2d1      	uxtb	r1, r2
 810068e:	4a09      	ldr	r2, [pc, #36]	; (81006b4 <readLine+0x98>)
 8100690:	7011      	strb	r1, [r2, #0]
 8100692:	461a      	mov	r2, r3
 8100694:	4b05      	ldr	r3, [pc, #20]	; (81006ac <readLine+0x90>)
 8100696:	7819      	ldrb	r1, [r3, #0]
 8100698:	4b05      	ldr	r3, [pc, #20]	; (81006b0 <readLine+0x94>)
 810069a:	5499      	strb	r1, [r3, r2]
    }
    sysEcho(lastInput);
 810069c:	4b03      	ldr	r3, [pc, #12]	; (81006ac <readLine+0x90>)
 810069e:	781b      	ldrb	r3, [r3, #0]
 81006a0:	4618      	mov	r0, r3
 81006a2:	f003 fc13 	bl	8103ecc <sysEcho>
    return 0;
 81006a6:	2300      	movs	r3, #0
}
 81006a8:	4618      	mov	r0, r3
 81006aa:	bd80      	pop	{r7, pc}
 81006ac:	10004b44 	.word	0x10004b44
 81006b0:	10004ac8 	.word	0x10004ac8
 81006b4:	100000de 	.word	0x100000de

081006b8 <lineSize>:

short lineSize(prgline* p) {
 81006b8:	b480      	push	{r7}
 81006ba:	b083      	sub	sp, #12
 81006bc:	af00      	add	r7, sp, #0
 81006be:	6078      	str	r0, [r7, #4]
    return p->str.len + 3;
 81006c0:	687b      	ldr	r3, [r7, #4]
 81006c2:	789b      	ldrb	r3, [r3, #2]
 81006c4:	b29b      	uxth	r3, r3
 81006c6:	3303      	adds	r3, #3
 81006c8:	b29b      	uxth	r3, r3
 81006ca:	b21b      	sxth	r3, r3
}
 81006cc:	4618      	mov	r0, r3
 81006ce:	370c      	adds	r7, #12
 81006d0:	46bd      	mov	sp, r7
 81006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d6:	4770      	bx	lr

081006d8 <nextLine>:

prgline* nextLine(prgline* p) {
 81006d8:	b580      	push	{r7, lr}
 81006da:	b082      	sub	sp, #8
 81006dc:	af00      	add	r7, sp, #0
 81006de:	6078      	str	r0, [r7, #4]
    return (prgline*)(void*)((char*)(void*)p + lineSize(p));
 81006e0:	6878      	ldr	r0, [r7, #4]
 81006e2:	f7ff ffe9 	bl	81006b8 <lineSize>
 81006e6:	4603      	mov	r3, r0
 81006e8:	461a      	mov	r2, r3
 81006ea:	687b      	ldr	r3, [r7, #4]
 81006ec:	4413      	add	r3, r2
}
 81006ee:	4618      	mov	r0, r3
 81006f0:	3708      	adds	r7, #8
 81006f2:	46bd      	mov	sp, r7
 81006f4:	bd80      	pop	{r7, pc}
	...

081006f8 <findLine>:

prgline* findLine(short num) {
 81006f8:	b580      	push	{r7, lr}
 81006fa:	b084      	sub	sp, #16
 81006fc:	af00      	add	r7, sp, #0
 81006fe:	4603      	mov	r3, r0
 8100700:	80fb      	strh	r3, [r7, #6]
    prgline* p = (prgline*)(void*)prgStore;
 8100702:	4b0d      	ldr	r3, [pc, #52]	; (8100738 <findLine+0x40>)
 8100704:	681b      	ldr	r3, [r3, #0]
 8100706:	60fb      	str	r3, [r7, #12]
    while (p->num != 0 && p->num < num) {
 8100708:	e003      	b.n	8100712 <findLine+0x1a>
        p = nextLine(p);
 810070a:	68f8      	ldr	r0, [r7, #12]
 810070c:	f7ff ffe4 	bl	81006d8 <nextLine>
 8100710:	60f8      	str	r0, [r7, #12]
    while (p->num != 0 && p->num < num) {
 8100712:	68fb      	ldr	r3, [r7, #12]
 8100714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100718:	b21b      	sxth	r3, r3
 810071a:	2b00      	cmp	r3, #0
 810071c:	d007      	beq.n	810072e <findLine+0x36>
 810071e:	68fb      	ldr	r3, [r7, #12]
 8100720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100724:	b21b      	sxth	r3, r3
 8100726:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 810072a:	429a      	cmp	r2, r3
 810072c:	dced      	bgt.n	810070a <findLine+0x12>
    }
    return p;
 810072e:	68fb      	ldr	r3, [r7, #12]
}
 8100730:	4618      	mov	r0, r3
 8100732:	3710      	adds	r7, #16
 8100734:	46bd      	mov	sp, r7
 8100736:	bd80      	pop	{r7, pc}
 8100738:	10004b40 	.word	0x10004b40

0810073c <injectLine>:

void injectLine(char* s, short num) {
 810073c:	b5b0      	push	{r4, r5, r7, lr}
 810073e:	b084      	sub	sp, #16
 8100740:	af00      	add	r7, sp, #0
 8100742:	6078      	str	r0, [r7, #4]
 8100744:	460b      	mov	r3, r1
 8100746:	807b      	strh	r3, [r7, #2]
    unsigned char len;
    prgline* p = findLine(num);
 8100748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810074c:	4618      	mov	r0, r3
 810074e:	f7ff ffd3 	bl	81006f8 <findLine>
 8100752:	60f8      	str	r0, [r7, #12]
    if (p->num == num) {
 8100754:	68fb      	ldr	r3, [r7, #12]
 8100756:	f9b3 3000 	ldrsh.w	r3, [r3]
 810075a:	b21b      	sxth	r3, r3
 810075c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8100760:	429a      	cmp	r2, r3
 8100762:	d125      	bne.n	81007b0 <injectLine+0x74>
        len = (char*)(void*)nextLine(p) - (char*)(void*)p;
 8100764:	68f8      	ldr	r0, [r7, #12]
 8100766:	f7ff ffb7 	bl	81006d8 <nextLine>
 810076a:	4602      	mov	r2, r0
 810076c:	68fb      	ldr	r3, [r7, #12]
 810076e:	1ad3      	subs	r3, r2, r3
 8100770:	72fb      	strb	r3, [r7, #11]
        memmove(p, nextLine(p), prgStore + prgSize - (char*)(void*)nextLine(p));
 8100772:	68f8      	ldr	r0, [r7, #12]
 8100774:	f7ff ffb0 	bl	81006d8 <nextLine>
 8100778:	4605      	mov	r5, r0
 810077a:	4b33      	ldr	r3, [pc, #204]	; (8100848 <injectLine+0x10c>)
 810077c:	681b      	ldr	r3, [r3, #0]
 810077e:	4a33      	ldr	r2, [pc, #204]	; (810084c <injectLine+0x110>)
 8100780:	f9b2 2000 	ldrsh.w	r2, [r2]
 8100784:	189c      	adds	r4, r3, r2
 8100786:	68f8      	ldr	r0, [r7, #12]
 8100788:	f7ff ffa6 	bl	81006d8 <nextLine>
 810078c:	4603      	mov	r3, r0
 810078e:	1ae3      	subs	r3, r4, r3
 8100790:	461a      	mov	r2, r3
 8100792:	4629      	mov	r1, r5
 8100794:	68f8      	ldr	r0, [r7, #12]
 8100796:	f00c fa1f 	bl	810cbd8 <memmove>
        prgSize -= len;
 810079a:	4b2c      	ldr	r3, [pc, #176]	; (810084c <injectLine+0x110>)
 810079c:	f9b3 3000 	ldrsh.w	r3, [r3]
 81007a0:	b29a      	uxth	r2, r3
 81007a2:	7afb      	ldrb	r3, [r7, #11]
 81007a4:	b29b      	uxth	r3, r3
 81007a6:	1ad3      	subs	r3, r2, r3
 81007a8:	b29b      	uxth	r3, r3
 81007aa:	b21a      	sxth	r2, r3
 81007ac:	4b27      	ldr	r3, [pc, #156]	; (810084c <injectLine+0x110>)
 81007ae:	801a      	strh	r2, [r3, #0]
    }
    len = strlen(s);
 81007b0:	6878      	ldr	r0, [r7, #4]
 81007b2:	f7ff fd95 	bl	81002e0 <strlen>
 81007b6:	4603      	mov	r3, r0
 81007b8:	72fb      	strb	r3, [r7, #11]
    if (prgSize + len + 3 >= maxProgSize) {
 81007ba:	4b24      	ldr	r3, [pc, #144]	; (810084c <injectLine+0x110>)
 81007bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 81007c0:	461a      	mov	r2, r3
 81007c2:	7afb      	ldrb	r3, [r7, #11]
 81007c4:	4413      	add	r3, r2
 81007c6:	3303      	adds	r3, #3
 81007c8:	4a21      	ldr	r2, [pc, #132]	; (8100850 <injectLine+0x114>)
 81007ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 81007ce:	4293      	cmp	r3, r2
 81007d0:	db09      	blt.n	81007e6 <injectLine+0xaa>
        outputCr();
 81007d2:	f003 f95b 	bl	8103a8c <outputCr>
        outputConstStr(ID_COMMON_STRINGS, 13, NULL);
 81007d6:	2200      	movs	r2, #0
 81007d8:	210d      	movs	r1, #13
 81007da:	2000      	movs	r0, #0
 81007dc:	f003 fc44 	bl	8104068 <outputConstStr>
        outputCr();
 81007e0:	f003 f954 	bl	8103a8c <outputCr>
        return;
 81007e4:	e02c      	b.n	8100840 <injectLine+0x104>
    }
    if (len > 0) {
 81007e6:	7afb      	ldrb	r3, [r7, #11]
 81007e8:	2b00      	cmp	r3, #0
 81007ea:	d029      	beq.n	8100840 <injectLine+0x104>
        memmove((char*)(void*)p + len + 3, p, prgStore + prgSize - (char*)(void*)p);
 81007ec:	7afb      	ldrb	r3, [r7, #11]
 81007ee:	3303      	adds	r3, #3
 81007f0:	68fa      	ldr	r2, [r7, #12]
 81007f2:	18d0      	adds	r0, r2, r3
 81007f4:	4b14      	ldr	r3, [pc, #80]	; (8100848 <injectLine+0x10c>)
 81007f6:	681b      	ldr	r3, [r3, #0]
 81007f8:	4a14      	ldr	r2, [pc, #80]	; (810084c <injectLine+0x110>)
 81007fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 81007fe:	441a      	add	r2, r3
 8100800:	68fb      	ldr	r3, [r7, #12]
 8100802:	1ad3      	subs	r3, r2, r3
 8100804:	461a      	mov	r2, r3
 8100806:	68f9      	ldr	r1, [r7, #12]
 8100808:	f00c f9e6 	bl	810cbd8 <memmove>
        prgSize += len + 3;
 810080c:	7afb      	ldrb	r3, [r7, #11]
 810080e:	b29a      	uxth	r2, r3
 8100810:	4b0e      	ldr	r3, [pc, #56]	; (810084c <injectLine+0x110>)
 8100812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100816:	b29b      	uxth	r3, r3
 8100818:	4413      	add	r3, r2
 810081a:	b29b      	uxth	r3, r3
 810081c:	3303      	adds	r3, #3
 810081e:	b29b      	uxth	r3, r3
 8100820:	b21a      	sxth	r2, r3
 8100822:	4b0a      	ldr	r3, [pc, #40]	; (810084c <injectLine+0x110>)
 8100824:	801a      	strh	r2, [r3, #0]
        p->num = num;
 8100826:	68fb      	ldr	r3, [r7, #12]
 8100828:	887a      	ldrh	r2, [r7, #2]
 810082a:	801a      	strh	r2, [r3, #0]
        p->str.len = len;
 810082c:	68fb      	ldr	r3, [r7, #12]
 810082e:	7afa      	ldrb	r2, [r7, #11]
 8100830:	709a      	strb	r2, [r3, #2]
        memcpy(p->str.text, s, len);
 8100832:	68fb      	ldr	r3, [r7, #12]
 8100834:	3303      	adds	r3, #3
 8100836:	7afa      	ldrb	r2, [r7, #11]
 8100838:	6879      	ldr	r1, [r7, #4]
 810083a:	4618      	mov	r0, r3
 810083c:	f00c f9be 	bl	810cbbc <memcpy>
    }
}
 8100840:	3710      	adds	r7, #16
 8100842:	46bd      	mov	sp, r7
 8100844:	bdb0      	pop	{r4, r5, r7, pc}
 8100846:	bf00      	nop
 8100848:	10004b40 	.word	0x10004b40
 810084c:	10004ac4 	.word	0x10004ac4
 8100850:	100000dc 	.word	0x100000dc

08100854 <editorSave>:

char editorSave(void) {
 8100854:	b580      	push	{r7, lr}
 8100856:	af00      	add	r7, sp, #0
    if (!storageOperation(NULL, 1)) {
 8100858:	2101      	movs	r1, #1
 810085a:	2000      	movs	r0, #0
 810085c:	f003 fd24 	bl	81042a8 <storageOperation>
 8100860:	4603      	mov	r3, r0
 8100862:	2b00      	cmp	r3, #0
 8100864:	d101      	bne.n	810086a <editorSave+0x16>
        return 0;
 8100866:	2300      	movs	r3, #0
 8100868:	e011      	b.n	810088e <editorSave+0x3a>
    }
    storageOperation(&prgSize, sizeof(prgSize));
 810086a:	2102      	movs	r1, #2
 810086c:	4809      	ldr	r0, [pc, #36]	; (8100894 <editorSave+0x40>)
 810086e:	f003 fd1b 	bl	81042a8 <storageOperation>
    storageOperation(prgStore, prgSize);
 8100872:	4b09      	ldr	r3, [pc, #36]	; (8100898 <editorSave+0x44>)
 8100874:	681b      	ldr	r3, [r3, #0]
 8100876:	4a07      	ldr	r2, [pc, #28]	; (8100894 <editorSave+0x40>)
 8100878:	f9b2 2000 	ldrsh.w	r2, [r2]
 810087c:	4611      	mov	r1, r2
 810087e:	4618      	mov	r0, r3
 8100880:	f003 fd12 	bl	81042a8 <storageOperation>
    storageOperation(NULL, 0);
 8100884:	2100      	movs	r1, #0
 8100886:	2000      	movs	r0, #0
 8100888:	f003 fd0e 	bl	81042a8 <storageOperation>
    return 1;
 810088c:	2301      	movs	r3, #1
}
 810088e:	4618      	mov	r0, r3
 8100890:	bd80      	pop	{r7, pc}
 8100892:	bf00      	nop
 8100894:	10004ac4 	.word	0x10004ac4
 8100898:	10004b40 	.word	0x10004b40

0810089c <editorLoad>:

char editorLoad(void) {
 810089c:	b580      	push	{r7, lr}
 810089e:	af00      	add	r7, sp, #0
    if (!storageOperation(NULL, -1)) {
 81008a0:	f04f 31ff 	mov.w	r1, #4294967295
 81008a4:	2000      	movs	r0, #0
 81008a6:	f003 fcff 	bl	81042a8 <storageOperation>
 81008aa:	4603      	mov	r3, r0
 81008ac:	2b00      	cmp	r3, #0
 81008ae:	d101      	bne.n	81008b4 <editorLoad+0x18>
        return 0;
 81008b0:	2300      	movs	r3, #0
 81008b2:	e016      	b.n	81008e2 <editorLoad+0x46>
    }
    storageOperation(&prgSize, (short) -sizeof(prgSize));
 81008b4:	f06f 0101 	mvn.w	r1, #1
 81008b8:	480b      	ldr	r0, [pc, #44]	; (81008e8 <editorLoad+0x4c>)
 81008ba:	f003 fcf5 	bl	81042a8 <storageOperation>
    storageOperation(prgStore, -prgSize);
 81008be:	4b0b      	ldr	r3, [pc, #44]	; (81008ec <editorLoad+0x50>)
 81008c0:	681b      	ldr	r3, [r3, #0]
 81008c2:	4a09      	ldr	r2, [pc, #36]	; (81008e8 <editorLoad+0x4c>)
 81008c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 81008c8:	b292      	uxth	r2, r2
 81008ca:	4252      	negs	r2, r2
 81008cc:	b292      	uxth	r2, r2
 81008ce:	b212      	sxth	r2, r2
 81008d0:	4611      	mov	r1, r2
 81008d2:	4618      	mov	r0, r3
 81008d4:	f003 fce8 	bl	81042a8 <storageOperation>
    storageOperation(NULL, 0);
 81008d8:	2100      	movs	r1, #0
 81008da:	2000      	movs	r0, #0
 81008dc:	f003 fce4 	bl	81042a8 <storageOperation>
    return 1;
 81008e0:	2301      	movs	r3, #1
}
 81008e2:	4618      	mov	r0, r3
 81008e4:	bd80      	pop	{r7, pc}
 81008e6:	bf00      	nop
 81008e8:	10004ac4 	.word	0x10004ac4
 81008ec:	10004b40 	.word	0x10004b40

081008f0 <editorLoadParsed>:

char editorLoadParsed() {
 81008f0:	b580      	push	{r7, lr}
 81008f2:	b082      	sub	sp, #8
 81008f4:	af00      	add	r7, sp, #0
    void* p = prgStore;
 81008f6:	4b36      	ldr	r3, [pc, #216]	; (81009d0 <editorLoadParsed+0xe0>)
 81008f8:	681b      	ldr	r3, [r3, #0]
 81008fa:	607b      	str	r3, [r7, #4]
    unsigned char len;
    if (!storageOperation(NULL, -1)) {
 81008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8100900:	2000      	movs	r0, #0
 8100902:	f003 fcd1 	bl	81042a8 <storageOperation>
 8100906:	4603      	mov	r3, r0
 8100908:	2b00      	cmp	r3, #0
 810090a:	d101      	bne.n	8100910 <editorLoadParsed+0x20>
        return 0;
 810090c:	2300      	movs	r3, #0
 810090e:	e05a      	b.n	81009c6 <editorLoadParsed+0xd6>
    }
    storageOperation(lineSpace, -2);
 8100910:	f06f 0101 	mvn.w	r1, #1
 8100914:	482f      	ldr	r0, [pc, #188]	; (81009d4 <editorLoadParsed+0xe4>)
 8100916:	f003 fcc7 	bl	81042a8 <storageOperation>
    while (1) {
        storageOperation(p, (short) -sizeof(short));
 810091a:	f06f 0101 	mvn.w	r1, #1
 810091e:	6878      	ldr	r0, [r7, #4]
 8100920:	f003 fcc2 	bl	81042a8 <storageOperation>
        if (*((short*)p) == 0) {
 8100924:	687b      	ldr	r3, [r7, #4]
 8100926:	f9b3 3000 	ldrsh.w	r3, [r3]
 810092a:	2b00      	cmp	r3, #0
 810092c:	d03b      	beq.n	81009a6 <editorLoadParsed+0xb6>
            break;
        }
        parseLine(lineSpace, toksBody);
 810092e:	4b2a      	ldr	r3, [pc, #168]	; (81009d8 <editorLoadParsed+0xe8>)
 8100930:	681b      	ldr	r3, [r3, #0]
 8100932:	4619      	mov	r1, r3
 8100934:	4827      	ldr	r0, [pc, #156]	; (81009d4 <editorLoadParsed+0xe4>)
 8100936:	f002 fed7 	bl	81036e8 <parseLine>
        p = (char*)p + sizeof(short);
 810093a:	687b      	ldr	r3, [r7, #4]
 810093c:	3302      	adds	r3, #2
 810093e:	607b      	str	r3, [r7, #4]
        storageOperation(&len, (short) -sizeof(len));
 8100940:	1cfb      	adds	r3, r7, #3
 8100942:	f04f 31ff 	mov.w	r1, #4294967295
 8100946:	4618      	mov	r0, r3
 8100948:	f003 fcae 	bl	81042a8 <storageOperation>
        storageOperation(lineSpace, -len);
 810094c:	78fb      	ldrb	r3, [r7, #3]
 810094e:	b29b      	uxth	r3, r3
 8100950:	425b      	negs	r3, r3
 8100952:	b29b      	uxth	r3, r3
 8100954:	b21b      	sxth	r3, r3
 8100956:	4619      	mov	r1, r3
 8100958:	481e      	ldr	r0, [pc, #120]	; (81009d4 <editorLoadParsed+0xe4>)
 810095a:	f003 fca5 	bl	81042a8 <storageOperation>
        lineSpace[len] = 0;
 810095e:	78fb      	ldrb	r3, [r7, #3]
 8100960:	461a      	mov	r2, r3
 8100962:	4b1c      	ldr	r3, [pc, #112]	; (81009d4 <editorLoadParsed+0xe4>)
 8100964:	2100      	movs	r1, #0
 8100966:	5499      	strb	r1, [r3, r2]
        parseLine(lineSpace, toksBody);
 8100968:	4b1b      	ldr	r3, [pc, #108]	; (81009d8 <editorLoadParsed+0xe8>)
 810096a:	681b      	ldr	r3, [r3, #0]
 810096c:	4619      	mov	r1, r3
 810096e:	4819      	ldr	r0, [pc, #100]	; (81009d4 <editorLoadParsed+0xe4>)
 8100970:	f002 feba 	bl	81036e8 <parseLine>
        len = tokenChainSize(toksBody);
 8100974:	4b18      	ldr	r3, [pc, #96]	; (81009d8 <editorLoadParsed+0xe8>)
 8100976:	681b      	ldr	r3, [r3, #0]
 8100978:	4618      	mov	r0, r3
 810097a:	f002 f8b5 	bl	8102ae8 <tokenChainSize>
 810097e:	4603      	mov	r3, r0
 8100980:	b2db      	uxtb	r3, r3
 8100982:	70fb      	strb	r3, [r7, #3]
        *((char*)p) = len;
 8100984:	78fa      	ldrb	r2, [r7, #3]
 8100986:	687b      	ldr	r3, [r7, #4]
 8100988:	701a      	strb	r2, [r3, #0]
        memcpy((char*)p + 1, toksBody, len);
 810098a:	687b      	ldr	r3, [r7, #4]
 810098c:	3301      	adds	r3, #1
 810098e:	4a12      	ldr	r2, [pc, #72]	; (81009d8 <editorLoadParsed+0xe8>)
 8100990:	6811      	ldr	r1, [r2, #0]
 8100992:	78fa      	ldrb	r2, [r7, #3]
 8100994:	4618      	mov	r0, r3
 8100996:	f00c f911 	bl	810cbbc <memcpy>
        p = (char*)p + len + 1;
 810099a:	78fb      	ldrb	r3, [r7, #3]
 810099c:	3301      	adds	r3, #1
 810099e:	687a      	ldr	r2, [r7, #4]
 81009a0:	4413      	add	r3, r2
 81009a2:	607b      	str	r3, [r7, #4]
        storageOperation(p, (short) -sizeof(short));
 81009a4:	e7b9      	b.n	810091a <editorLoadParsed+0x2a>
            break;
 81009a6:	bf00      	nop
    }
    storageOperation(NULL, 0);
 81009a8:	2100      	movs	r1, #0
 81009aa:	2000      	movs	r0, #0
 81009ac:	f003 fc7c 	bl	81042a8 <storageOperation>
    prgSize = ((char*)p - (char*)(void*)prgStore) + sizeof(short);
 81009b0:	4b07      	ldr	r3, [pc, #28]	; (81009d0 <editorLoadParsed+0xe0>)
 81009b2:	681b      	ldr	r3, [r3, #0]
 81009b4:	687a      	ldr	r2, [r7, #4]
 81009b6:	1ad3      	subs	r3, r2, r3
 81009b8:	b29b      	uxth	r3, r3
 81009ba:	3302      	adds	r3, #2
 81009bc:	b29b      	uxth	r3, r3
 81009be:	b21a      	sxth	r2, r3
 81009c0:	4b06      	ldr	r3, [pc, #24]	; (81009dc <editorLoadParsed+0xec>)
 81009c2:	801a      	strh	r2, [r3, #0]
    return 1;
 81009c4:	2301      	movs	r3, #1
}
 81009c6:	4618      	mov	r0, r3
 81009c8:	3708      	adds	r7, #8
 81009ca:	46bd      	mov	sp, r7
 81009cc:	bd80      	pop	{r7, pc}
 81009ce:	bf00      	nop
 81009d0:	10004b40 	.word	0x10004b40
 81009d4:	10004ac8 	.word	0x10004ac8
 81009d8:	10004b98 	.word	0x10004b98
 81009dc:	10004ac4 	.word	0x10004ac4

081009e0 <resetTokenExecutor>:
    execDelay,
    execData,
    execEmit,
};

void resetTokenExecutor(void) {
 81009e0:	b480      	push	{r7}
 81009e2:	af00      	add	r7, sp, #0
    numVars = 0;
 81009e4:	4b0a      	ldr	r3, [pc, #40]	; (8100a10 <resetTokenExecutor+0x30>)
 81009e6:	2200      	movs	r2, #0
 81009e8:	701a      	strb	r2, [r3, #0]
    arrayBytes = 0;
 81009ea:	4b0a      	ldr	r3, [pc, #40]	; (8100a14 <resetTokenExecutor+0x34>)
 81009ec:	2200      	movs	r2, #0
 81009ee:	801a      	strh	r2, [r3, #0]
    sp = spInit;
 81009f0:	4b09      	ldr	r3, [pc, #36]	; (8100a18 <resetTokenExecutor+0x38>)
 81009f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 81009f6:	4b09      	ldr	r3, [pc, #36]	; (8100a1c <resetTokenExecutor+0x3c>)
 81009f8:	801a      	strh	r2, [r3, #0]
    vars[0].name = 0;
 81009fa:	4b09      	ldr	r3, [pc, #36]	; (8100a20 <resetTokenExecutor+0x40>)
 81009fc:	681b      	ldr	r3, [r3, #0]
 81009fe:	2200      	movs	r2, #0
 8100a00:	701a      	strb	r2, [r3, #0]
 8100a02:	2200      	movs	r2, #0
 8100a04:	705a      	strb	r2, [r3, #1]
}
 8100a06:	bf00      	nop
 8100a08:	46bd      	mov	sp, r7
 8100a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a0e:	4770      	bx	lr
 8100a10:	10004b5e 	.word	0x10004b5e
 8100a14:	10004b52 	.word	0x10004b52
 8100a18:	10004b50 	.word	0x10004b50
 8100a1c:	10004b5c 	.word	0x10004b5c
 8100a20:	10004b58 	.word	0x10004b58

08100a24 <varSize>:

short varSize(void) {
 8100a24:	b480      	push	{r7}
 8100a26:	af00      	add	r7, sp, #0
    return numVars * sizeof(varHolder) + arrayBytes;
 8100a28:	4b09      	ldr	r3, [pc, #36]	; (8100a50 <varSize+0x2c>)
 8100a2a:	781b      	ldrb	r3, [r3, #0]
 8100a2c:	b29b      	uxth	r3, r3
 8100a2e:	461a      	mov	r2, r3
 8100a30:	0052      	lsls	r2, r2, #1
 8100a32:	4413      	add	r3, r2
 8100a34:	005b      	lsls	r3, r3, #1
 8100a36:	b29a      	uxth	r2, r3
 8100a38:	4b06      	ldr	r3, [pc, #24]	; (8100a54 <varSize+0x30>)
 8100a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100a3e:	b29b      	uxth	r3, r3
 8100a40:	4413      	add	r3, r2
 8100a42:	b29b      	uxth	r3, r3
 8100a44:	b21b      	sxth	r3, r3
}
 8100a46:	4618      	mov	r0, r3
 8100a48:	46bd      	mov	sp, r7
 8100a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a4e:	4770      	bx	lr
 8100a50:	10004b5e 	.word	0x10004b5e
 8100a54:	10004b52 	.word	0x10004b52

08100a58 <shortVarName>:
    vars = (varHolder*)(void*)space;
    calcStack = (numeric*)(void*)space;
    resetTokenExecutor();
}

short shortVarName(nstring* name) {
 8100a58:	b480      	push	{r7}
 8100a5a:	b085      	sub	sp, #20
 8100a5c:	af00      	add	r7, sp, #0
 8100a5e:	6078      	str	r0, [r7, #4]
    short n = name->text[0];
 8100a60:	687b      	ldr	r3, [r7, #4]
 8100a62:	785b      	ldrb	r3, [r3, #1]
 8100a64:	81fb      	strh	r3, [r7, #14]
    if (name->len > 1) {
 8100a66:	687b      	ldr	r3, [r7, #4]
 8100a68:	781b      	ldrb	r3, [r3, #0]
 8100a6a:	2b01      	cmp	r3, #1
 8100a6c:	d90a      	bls.n	8100a84 <shortVarName+0x2c>
        n += name->text[1] * 127;
 8100a6e:	687b      	ldr	r3, [r7, #4]
 8100a70:	789b      	ldrb	r3, [r3, #2]
 8100a72:	b29b      	uxth	r3, r3
 8100a74:	461a      	mov	r2, r3
 8100a76:	01d2      	lsls	r2, r2, #7
 8100a78:	1ad3      	subs	r3, r2, r3
 8100a7a:	b29a      	uxth	r2, r3
 8100a7c:	89fb      	ldrh	r3, [r7, #14]
 8100a7e:	4413      	add	r3, r2
 8100a80:	b29b      	uxth	r3, r3
 8100a82:	81fb      	strh	r3, [r7, #14]
    }
    return n;
 8100a84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8100a88:	4618      	mov	r0, r3
 8100a8a:	3714      	adds	r7, #20
 8100a8c:	46bd      	mov	sp, r7
 8100a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a92:	4770      	bx	lr

08100a94 <shortArrayName>:

short shortArrayName(char letter) {
 8100a94:	b480      	push	{r7}
 8100a96:	b083      	sub	sp, #12
 8100a98:	af00      	add	r7, sp, #0
 8100a9a:	4603      	mov	r3, r0
 8100a9c:	71fb      	strb	r3, [r7, #7]
    return 0x7F00 | letter;
 8100a9e:	79fb      	ldrb	r3, [r7, #7]
 8100aa0:	b21b      	sxth	r3, r3
 8100aa2:	f443 43fe 	orr.w	r3, r3, #32512	; 0x7f00
 8100aa6:	b21b      	sxth	r3, r3
}
 8100aa8:	4618      	mov	r0, r3
 8100aaa:	370c      	adds	r7, #12
 8100aac:	46bd      	mov	sp, r7
 8100aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ab2:	4770      	bx	lr

08100ab4 <findVar>:

char findVar(short name) {
 8100ab4:	b480      	push	{r7}
 8100ab6:	b085      	sub	sp, #20
 8100ab8:	af00      	add	r7, sp, #0
 8100aba:	4603      	mov	r3, r0
 8100abc:	80fb      	strh	r3, [r7, #6]
    short hi = numVars;
 8100abe:	4b1a      	ldr	r3, [pc, #104]	; (8100b28 <findVar+0x74>)
 8100ac0:	781b      	ldrb	r3, [r3, #0]
 8100ac2:	81fb      	strh	r3, [r7, #14]
    short lo = 0;
 8100ac4:	2300      	movs	r3, #0
 8100ac6:	81bb      	strh	r3, [r7, #12]
    short mid;
    while (hi > lo) {
 8100ac8:	e01f      	b.n	8100b0a <findVar+0x56>
        mid = (hi + lo) / 2;
 8100aca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8100ace:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8100ad2:	4413      	add	r3, r2
 8100ad4:	0fda      	lsrs	r2, r3, #31
 8100ad6:	4413      	add	r3, r2
 8100ad8:	105b      	asrs	r3, r3, #1
 8100ada:	817b      	strh	r3, [r7, #10]
        if (vars[mid].name < name) {
 8100adc:	4b13      	ldr	r3, [pc, #76]	; (8100b2c <findVar+0x78>)
 8100ade:	6819      	ldr	r1, [r3, #0]
 8100ae0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8100ae4:	4613      	mov	r3, r2
 8100ae6:	005b      	lsls	r3, r3, #1
 8100ae8:	4413      	add	r3, r2
 8100aea:	005b      	lsls	r3, r3, #1
 8100aec:	440b      	add	r3, r1
 8100aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100af2:	b21b      	sxth	r3, r3
 8100af4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8100af8:	429a      	cmp	r2, r3
 8100afa:	dd04      	ble.n	8100b06 <findVar+0x52>
            lo = mid + 1;
 8100afc:	897b      	ldrh	r3, [r7, #10]
 8100afe:	3301      	adds	r3, #1
 8100b00:	b29b      	uxth	r3, r3
 8100b02:	81bb      	strh	r3, [r7, #12]
 8100b04:	e001      	b.n	8100b0a <findVar+0x56>
        } else {
            hi = mid;
 8100b06:	897b      	ldrh	r3, [r7, #10]
 8100b08:	81fb      	strh	r3, [r7, #14]
    while (hi > lo) {
 8100b0a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8100b0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8100b12:	429a      	cmp	r2, r3
 8100b14:	dcd9      	bgt.n	8100aca <findVar+0x16>
        }
    }
    return lo;
 8100b16:	89bb      	ldrh	r3, [r7, #12]
 8100b18:	b2db      	uxtb	r3, r3
}
 8100b1a:	4618      	mov	r0, r3
 8100b1c:	3714      	adds	r7, #20
 8100b1e:	46bd      	mov	sp, r7
 8100b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b24:	4770      	bx	lr
 8100b26:	bf00      	nop
 8100b28:	10004b5e 	.word	0x10004b5e
 8100b2c:	10004b58 	.word	0x10004b58

08100b30 <getVar>:

numeric getVar(short name) {
 8100b30:	b580      	push	{r7, lr}
 8100b32:	b084      	sub	sp, #16
 8100b34:	af00      	add	r7, sp, #0
 8100b36:	4603      	mov	r3, r0
 8100b38:	80fb      	strh	r3, [r7, #6]
    char i = findVar(name);
 8100b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b3e:	4618      	mov	r0, r3
 8100b40:	f7ff ffb8 	bl	8100ab4 <findVar>
 8100b44:	4603      	mov	r3, r0
 8100b46:	73fb      	strb	r3, [r7, #15]
    return (vars[i].name == name) ? vars[i].value : 0;
 8100b48:	4b0f      	ldr	r3, [pc, #60]	; (8100b88 <getVar+0x58>)
 8100b4a:	6819      	ldr	r1, [r3, #0]
 8100b4c:	7bfa      	ldrb	r2, [r7, #15]
 8100b4e:	4613      	mov	r3, r2
 8100b50:	005b      	lsls	r3, r3, #1
 8100b52:	4413      	add	r3, r2
 8100b54:	005b      	lsls	r3, r3, #1
 8100b56:	440b      	add	r3, r1
 8100b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100b5c:	b21b      	sxth	r3, r3
 8100b5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8100b62:	429a      	cmp	r2, r3
 8100b64:	d10a      	bne.n	8100b7c <getVar+0x4c>
 8100b66:	4b08      	ldr	r3, [pc, #32]	; (8100b88 <getVar+0x58>)
 8100b68:	6819      	ldr	r1, [r3, #0]
 8100b6a:	7bfa      	ldrb	r2, [r7, #15]
 8100b6c:	4613      	mov	r3, r2
 8100b6e:	005b      	lsls	r3, r3, #1
 8100b70:	4413      	add	r3, r2
 8100b72:	005b      	lsls	r3, r3, #1
 8100b74:	440b      	add	r3, r1
 8100b76:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8100b7a:	e000      	b.n	8100b7e <getVar+0x4e>
 8100b7c:	2300      	movs	r3, #0
}
 8100b7e:	4618      	mov	r0, r3
 8100b80:	3710      	adds	r7, #16
 8100b82:	46bd      	mov	sp, r7
 8100b84:	bd80      	pop	{r7, pc}
 8100b86:	bf00      	nop
 8100b88:	10004b58 	.word	0x10004b58

08100b8c <getArrayOffset>:

short getArrayOffset(char letter) {
 8100b8c:	b580      	push	{r7, lr}
 8100b8e:	b084      	sub	sp, #16
 8100b90:	af00      	add	r7, sp, #0
 8100b92:	4603      	mov	r3, r0
 8100b94:	71fb      	strb	r3, [r7, #7]
    short name = shortArrayName(letter);
 8100b96:	79fb      	ldrb	r3, [r7, #7]
 8100b98:	4618      	mov	r0, r3
 8100b9a:	f7ff ff7b 	bl	8100a94 <shortArrayName>
 8100b9e:	4603      	mov	r3, r0
 8100ba0:	81fb      	strh	r3, [r7, #14]
    char i = findVar(name);
 8100ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100ba6:	4618      	mov	r0, r3
 8100ba8:	f7ff ff84 	bl	8100ab4 <findVar>
 8100bac:	4603      	mov	r3, r0
 8100bae:	737b      	strb	r3, [r7, #13]
    return (vars[i].name == name) ? vars[i].value : -1;
 8100bb0:	4b10      	ldr	r3, [pc, #64]	; (8100bf4 <getArrayOffset+0x68>)
 8100bb2:	6819      	ldr	r1, [r3, #0]
 8100bb4:	7b7a      	ldrb	r2, [r7, #13]
 8100bb6:	4613      	mov	r3, r2
 8100bb8:	005b      	lsls	r3, r3, #1
 8100bba:	4413      	add	r3, r2
 8100bbc:	005b      	lsls	r3, r3, #1
 8100bbe:	440b      	add	r3, r1
 8100bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100bc4:	b21b      	sxth	r3, r3
 8100bc6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8100bca:	429a      	cmp	r2, r3
 8100bcc:	d10b      	bne.n	8100be6 <getArrayOffset+0x5a>
 8100bce:	4b09      	ldr	r3, [pc, #36]	; (8100bf4 <getArrayOffset+0x68>)
 8100bd0:	6819      	ldr	r1, [r3, #0]
 8100bd2:	7b7a      	ldrb	r2, [r7, #13]
 8100bd4:	4613      	mov	r3, r2
 8100bd6:	005b      	lsls	r3, r3, #1
 8100bd8:	4413      	add	r3, r2
 8100bda:	005b      	lsls	r3, r3, #1
 8100bdc:	440b      	add	r3, r1
 8100bde:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8100be2:	b21b      	sxth	r3, r3
 8100be4:	e001      	b.n	8100bea <getArrayOffset+0x5e>
 8100be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100bea:	4618      	mov	r0, r3
 8100bec:	3710      	adds	r7, #16
 8100bee:	46bd      	mov	sp, r7
 8100bf0:	bd80      	pop	{r7, pc}
 8100bf2:	bf00      	nop
 8100bf4:	10004b58 	.word	0x10004b58

08100bf8 <checkLowVarsMemory>:

char checkLowVarsMemory(short toAddBytes) {
 8100bf8:	b580      	push	{r7, lr}
 8100bfa:	b082      	sub	sp, #8
 8100bfc:	af00      	add	r7, sp, #0
 8100bfe:	4603      	mov	r3, r0
 8100c00:	80fb      	strh	r3, [r7, #6]
    if (((char*)(vars + numVars)) + arrayBytes + toAddBytes >= (char*)(calcStack + spInit - 5)) {
 8100c02:	4b17      	ldr	r3, [pc, #92]	; (8100c60 <checkLowVarsMemory+0x68>)
 8100c04:	681a      	ldr	r2, [r3, #0]
 8100c06:	4b17      	ldr	r3, [pc, #92]	; (8100c64 <checkLowVarsMemory+0x6c>)
 8100c08:	781b      	ldrb	r3, [r3, #0]
 8100c0a:	4619      	mov	r1, r3
 8100c0c:	460b      	mov	r3, r1
 8100c0e:	005b      	lsls	r3, r3, #1
 8100c10:	440b      	add	r3, r1
 8100c12:	005b      	lsls	r3, r3, #1
 8100c14:	441a      	add	r2, r3
 8100c16:	4b14      	ldr	r3, [pc, #80]	; (8100c68 <checkLowVarsMemory+0x70>)
 8100c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100c1c:	4619      	mov	r1, r3
 8100c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c22:	440b      	add	r3, r1
 8100c24:	441a      	add	r2, r3
 8100c26:	4b11      	ldr	r3, [pc, #68]	; (8100c6c <checkLowVarsMemory+0x74>)
 8100c28:	6819      	ldr	r1, [r3, #0]
 8100c2a:	4b11      	ldr	r3, [pc, #68]	; (8100c70 <checkLowVarsMemory+0x78>)
 8100c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100c30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8100c34:	3b05      	subs	r3, #5
 8100c36:	009b      	lsls	r3, r3, #2
 8100c38:	440b      	add	r3, r1
 8100c3a:	429a      	cmp	r2, r3
 8100c3c:	d30a      	bcc.n	8100c54 <checkLowVarsMemory+0x5c>
        outputCr();
 8100c3e:	f002 ff25 	bl	8103a8c <outputCr>
        outputConstStr(ID_COMMON_STRINGS, 12, NULL);
 8100c42:	2200      	movs	r2, #0
 8100c44:	210c      	movs	r1, #12
 8100c46:	2000      	movs	r0, #0
 8100c48:	f003 fa0e 	bl	8104068 <outputConstStr>
        outputCr();
 8100c4c:	f002 ff1e 	bl	8103a8c <outputCr>
        return 1;
 8100c50:	2301      	movs	r3, #1
 8100c52:	e000      	b.n	8100c56 <checkLowVarsMemory+0x5e>
    }
    return 0;
 8100c54:	2300      	movs	r3, #0
}
 8100c56:	4618      	mov	r0, r3
 8100c58:	3708      	adds	r7, #8
 8100c5a:	46bd      	mov	sp, r7
 8100c5c:	bd80      	pop	{r7, pc}
 8100c5e:	bf00      	nop
 8100c60:	10004b58 	.word	0x10004b58
 8100c64:	10004b5e 	.word	0x10004b5e
 8100c68:	10004b52 	.word	0x10004b52
 8100c6c:	10004b54 	.word	0x10004b54
 8100c70:	10004b50 	.word	0x10004b50

08100c74 <setVar>:

void setVar(short name, numeric value) {
 8100c74:	b580      	push	{r7, lr}
 8100c76:	b084      	sub	sp, #16
 8100c78:	af00      	add	r7, sp, #0
 8100c7a:	4603      	mov	r3, r0
 8100c7c:	6039      	str	r1, [r7, #0]
 8100c7e:	80fb      	strh	r3, [r7, #6]
    char i = findVar(name);
 8100c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c84:	4618      	mov	r0, r3
 8100c86:	f7ff ff15 	bl	8100ab4 <findVar>
 8100c8a:	4603      	mov	r3, r0
 8100c8c:	73fb      	strb	r3, [r7, #15]
    if (vars[i].name != name) {
 8100c8e:	4b2e      	ldr	r3, [pc, #184]	; (8100d48 <setVar+0xd4>)
 8100c90:	6819      	ldr	r1, [r3, #0]
 8100c92:	7bfa      	ldrb	r2, [r7, #15]
 8100c94:	4613      	mov	r3, r2
 8100c96:	005b      	lsls	r3, r3, #1
 8100c98:	4413      	add	r3, r2
 8100c9a:	005b      	lsls	r3, r3, #1
 8100c9c:	440b      	add	r3, r1
 8100c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100ca2:	b21b      	sxth	r3, r3
 8100ca4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8100ca8:	429a      	cmp	r2, r3
 8100caa:	d03d      	beq.n	8100d28 <setVar+0xb4>
        if (checkLowVarsMemory(sizeof(varHolder))) {
 8100cac:	2006      	movs	r0, #6
 8100cae:	f7ff ffa3 	bl	8100bf8 <checkLowVarsMemory>
 8100cb2:	4603      	mov	r3, r0
 8100cb4:	2b00      	cmp	r3, #0
 8100cb6:	d143      	bne.n	8100d40 <setVar+0xcc>
            return;
        }
        if (i < numVars) {
 8100cb8:	4b24      	ldr	r3, [pc, #144]	; (8100d4c <setVar+0xd8>)
 8100cba:	781b      	ldrb	r3, [r3, #0]
 8100cbc:	7bfa      	ldrb	r2, [r7, #15]
 8100cbe:	429a      	cmp	r2, r3
 8100cc0:	d222      	bcs.n	8100d08 <setVar+0x94>
            memmove(vars + i + 1, vars + i, sizeof(varHolder) * (numVars - i) + arrayBytes);
 8100cc2:	4b21      	ldr	r3, [pc, #132]	; (8100d48 <setVar+0xd4>)
 8100cc4:	6819      	ldr	r1, [r3, #0]
 8100cc6:	7bfb      	ldrb	r3, [r7, #15]
 8100cc8:	1c5a      	adds	r2, r3, #1
 8100cca:	4613      	mov	r3, r2
 8100ccc:	005b      	lsls	r3, r3, #1
 8100cce:	4413      	add	r3, r2
 8100cd0:	005b      	lsls	r3, r3, #1
 8100cd2:	18c8      	adds	r0, r1, r3
 8100cd4:	4b1c      	ldr	r3, [pc, #112]	; (8100d48 <setVar+0xd4>)
 8100cd6:	6819      	ldr	r1, [r3, #0]
 8100cd8:	7bfa      	ldrb	r2, [r7, #15]
 8100cda:	4613      	mov	r3, r2
 8100cdc:	005b      	lsls	r3, r3, #1
 8100cde:	4413      	add	r3, r2
 8100ce0:	005b      	lsls	r3, r3, #1
 8100ce2:	4419      	add	r1, r3
 8100ce4:	4b19      	ldr	r3, [pc, #100]	; (8100d4c <setVar+0xd8>)
 8100ce6:	781b      	ldrb	r3, [r3, #0]
 8100ce8:	461a      	mov	r2, r3
 8100cea:	7bfb      	ldrb	r3, [r7, #15]
 8100cec:	1ad3      	subs	r3, r2, r3
 8100cee:	461a      	mov	r2, r3
 8100cf0:	4613      	mov	r3, r2
 8100cf2:	005b      	lsls	r3, r3, #1
 8100cf4:	4413      	add	r3, r2
 8100cf6:	005b      	lsls	r3, r3, #1
 8100cf8:	461a      	mov	r2, r3
 8100cfa:	4b15      	ldr	r3, [pc, #84]	; (8100d50 <setVar+0xdc>)
 8100cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100d00:	4413      	add	r3, r2
 8100d02:	461a      	mov	r2, r3
 8100d04:	f00b ff68 	bl	810cbd8 <memmove>
        }
        vars[i].name = name;
 8100d08:	4b0f      	ldr	r3, [pc, #60]	; (8100d48 <setVar+0xd4>)
 8100d0a:	6819      	ldr	r1, [r3, #0]
 8100d0c:	7bfa      	ldrb	r2, [r7, #15]
 8100d0e:	4613      	mov	r3, r2
 8100d10:	005b      	lsls	r3, r3, #1
 8100d12:	4413      	add	r3, r2
 8100d14:	005b      	lsls	r3, r3, #1
 8100d16:	440b      	add	r3, r1
 8100d18:	88fa      	ldrh	r2, [r7, #6]
 8100d1a:	801a      	strh	r2, [r3, #0]
        numVars += 1;
 8100d1c:	4b0b      	ldr	r3, [pc, #44]	; (8100d4c <setVar+0xd8>)
 8100d1e:	781b      	ldrb	r3, [r3, #0]
 8100d20:	3301      	adds	r3, #1
 8100d22:	b2da      	uxtb	r2, r3
 8100d24:	4b09      	ldr	r3, [pc, #36]	; (8100d4c <setVar+0xd8>)
 8100d26:	701a      	strb	r2, [r3, #0]
    }
    vars[i].value = value;
 8100d28:	4b07      	ldr	r3, [pc, #28]	; (8100d48 <setVar+0xd4>)
 8100d2a:	6819      	ldr	r1, [r3, #0]
 8100d2c:	7bfa      	ldrb	r2, [r7, #15]
 8100d2e:	4613      	mov	r3, r2
 8100d30:	005b      	lsls	r3, r3, #1
 8100d32:	4413      	add	r3, r2
 8100d34:	005b      	lsls	r3, r3, #1
 8100d36:	440b      	add	r3, r1
 8100d38:	683a      	ldr	r2, [r7, #0]
 8100d3a:	f8c3 2002 	str.w	r2, [r3, #2]
 8100d3e:	e000      	b.n	8100d42 <setVar+0xce>
            return;
 8100d40:	bf00      	nop
}
 8100d42:	3710      	adds	r7, #16
 8100d44:	46bd      	mov	sp, r7
 8100d46:	bd80      	pop	{r7, pc}
 8100d48:	10004b58 	.word	0x10004b58
 8100d4c:	10004b5e 	.word	0x10004b5e
 8100d50:	10004b52 	.word	0x10004b52

08100d54 <findLabel>:

short findLabel(short num) {
 8100d54:	b480      	push	{r7}
 8100d56:	b085      	sub	sp, #20
 8100d58:	af00      	add	r7, sp, #0
 8100d5a:	4603      	mov	r3, r0
 8100d5c:	80fb      	strh	r3, [r7, #6]
    short hi = labelsCached;
 8100d5e:	4b18      	ldr	r3, [pc, #96]	; (8100dc0 <findLabel+0x6c>)
 8100d60:	881b      	ldrh	r3, [r3, #0]
 8100d62:	81fb      	strh	r3, [r7, #14]
    short lo = 0;
 8100d64:	2300      	movs	r3, #0
 8100d66:	81bb      	strh	r3, [r7, #12]
    short mid;
    while (hi > lo) {
 8100d68:	e01c      	b.n	8100da4 <findLabel+0x50>
        mid = (hi + lo) / 2;
 8100d6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8100d6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8100d72:	4413      	add	r3, r2
 8100d74:	0fda      	lsrs	r2, r3, #31
 8100d76:	4413      	add	r3, r2
 8100d78:	105b      	asrs	r3, r3, #1
 8100d7a:	817b      	strh	r3, [r7, #10]
        if (labelCache[mid].num < num) {
 8100d7c:	4b11      	ldr	r3, [pc, #68]	; (8100dc4 <findLabel+0x70>)
 8100d7e:	681a      	ldr	r2, [r3, #0]
 8100d80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8100d84:	009b      	lsls	r3, r3, #2
 8100d86:	4413      	add	r3, r2
 8100d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100d8c:	b21b      	sxth	r3, r3
 8100d8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8100d92:	429a      	cmp	r2, r3
 8100d94:	dd04      	ble.n	8100da0 <findLabel+0x4c>
            lo = mid + 1;
 8100d96:	897b      	ldrh	r3, [r7, #10]
 8100d98:	3301      	adds	r3, #1
 8100d9a:	b29b      	uxth	r3, r3
 8100d9c:	81bb      	strh	r3, [r7, #12]
 8100d9e:	e001      	b.n	8100da4 <findLabel+0x50>
        } else {
            hi = mid;
 8100da0:	897b      	ldrh	r3, [r7, #10]
 8100da2:	81fb      	strh	r3, [r7, #14]
    while (hi > lo) {
 8100da4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8100da8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8100dac:	429a      	cmp	r2, r3
 8100dae:	dcdc      	bgt.n	8100d6a <findLabel+0x16>
        }
    }
    return lo;
 8100db0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8100db4:	4618      	mov	r0, r3
 8100db6:	3714      	adds	r7, #20
 8100db8:	46bd      	mov	sp, r7
 8100dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dbe:	4770      	bx	lr
 8100dc0:	10004b48 	.word	0x10004b48
 8100dc4:	10004b4c 	.word	0x10004b4c

08100dc8 <getCachedLabel>:

prgline* getCachedLabel(short num) {
 8100dc8:	b580      	push	{r7, lr}
 8100dca:	b084      	sub	sp, #16
 8100dcc:	af00      	add	r7, sp, #0
 8100dce:	4603      	mov	r3, r0
 8100dd0:	80fb      	strh	r3, [r7, #6]
    short i = findLabel(num);
 8100dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100dd6:	4618      	mov	r0, r3
 8100dd8:	f7ff ffbc 	bl	8100d54 <findLabel>
 8100ddc:	4603      	mov	r3, r0
 8100dde:	81fb      	strh	r3, [r7, #14]
    return labelCache[i].num == num ? (prgline*)(void*)(prgStore + labelCache[i].offset) : NULL;
 8100de0:	4b0f      	ldr	r3, [pc, #60]	; (8100e20 <getCachedLabel+0x58>)
 8100de2:	681a      	ldr	r2, [r3, #0]
 8100de4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100de8:	009b      	lsls	r3, r3, #2
 8100dea:	4413      	add	r3, r2
 8100dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100df0:	b21b      	sxth	r3, r3
 8100df2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8100df6:	429a      	cmp	r2, r3
 8100df8:	d10c      	bne.n	8100e14 <getCachedLabel+0x4c>
 8100dfa:	4b0a      	ldr	r3, [pc, #40]	; (8100e24 <getCachedLabel+0x5c>)
 8100dfc:	681b      	ldr	r3, [r3, #0]
 8100dfe:	4a08      	ldr	r2, [pc, #32]	; (8100e20 <getCachedLabel+0x58>)
 8100e00:	6811      	ldr	r1, [r2, #0]
 8100e02:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8100e06:	0092      	lsls	r2, r2, #2
 8100e08:	440a      	add	r2, r1
 8100e0a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8100e0e:	b212      	sxth	r2, r2
 8100e10:	4413      	add	r3, r2
 8100e12:	e000      	b.n	8100e16 <getCachedLabel+0x4e>
 8100e14:	2300      	movs	r3, #0
}
 8100e16:	4618      	mov	r0, r3
 8100e18:	3710      	adds	r7, #16
 8100e1a:	46bd      	mov	sp, r7
 8100e1c:	bd80      	pop	{r7, pc}
 8100e1e:	bf00      	nop
 8100e20:	10004b4c 	.word	0x10004b4c
 8100e24:	10004b40 	.word	0x10004b40

08100e28 <addCachedLabel>:

void addCachedLabel(short num, short offset) {
 8100e28:	b580      	push	{r7, lr}
 8100e2a:	b084      	sub	sp, #16
 8100e2c:	af00      	add	r7, sp, #0
 8100e2e:	4603      	mov	r3, r0
 8100e30:	460a      	mov	r2, r1
 8100e32:	80fb      	strh	r3, [r7, #6]
 8100e34:	4613      	mov	r3, r2
 8100e36:	80bb      	strh	r3, [r7, #4]
    short idx = findLabel(num);
 8100e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e3c:	4618      	mov	r0, r3
 8100e3e:	f7ff ff89 	bl	8100d54 <findLabel>
 8100e42:	4603      	mov	r3, r0
 8100e44:	81fb      	strh	r3, [r7, #14]
    if (idx < labelsCached) {
 8100e46:	4b1e      	ldr	r3, [pc, #120]	; (8100ec0 <addCachedLabel+0x98>)
 8100e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100e4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8100e50:	429a      	cmp	r2, r3
 8100e52:	da17      	bge.n	8100e84 <addCachedLabel+0x5c>
        memmove(labelCache + idx + 1, labelCache + idx, sizeof(labelCacheElem) * (labelsCached - idx));
 8100e54:	4b1b      	ldr	r3, [pc, #108]	; (8100ec4 <addCachedLabel+0x9c>)
 8100e56:	681a      	ldr	r2, [r3, #0]
 8100e58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100e5c:	3301      	adds	r3, #1
 8100e5e:	009b      	lsls	r3, r3, #2
 8100e60:	18d0      	adds	r0, r2, r3
 8100e62:	4b18      	ldr	r3, [pc, #96]	; (8100ec4 <addCachedLabel+0x9c>)
 8100e64:	681a      	ldr	r2, [r3, #0]
 8100e66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100e6a:	009b      	lsls	r3, r3, #2
 8100e6c:	18d1      	adds	r1, r2, r3
 8100e6e:	4b14      	ldr	r3, [pc, #80]	; (8100ec0 <addCachedLabel+0x98>)
 8100e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100e74:	461a      	mov	r2, r3
 8100e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100e7a:	1ad3      	subs	r3, r2, r3
 8100e7c:	009b      	lsls	r3, r3, #2
 8100e7e:	461a      	mov	r2, r3
 8100e80:	f00b feaa 	bl	810cbd8 <memmove>
    }
    labelCache[idx].num = num;
 8100e84:	4b0f      	ldr	r3, [pc, #60]	; (8100ec4 <addCachedLabel+0x9c>)
 8100e86:	681a      	ldr	r2, [r3, #0]
 8100e88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100e8c:	009b      	lsls	r3, r3, #2
 8100e8e:	4413      	add	r3, r2
 8100e90:	88fa      	ldrh	r2, [r7, #6]
 8100e92:	801a      	strh	r2, [r3, #0]
    labelCache[idx].offset = offset;
 8100e94:	4b0b      	ldr	r3, [pc, #44]	; (8100ec4 <addCachedLabel+0x9c>)
 8100e96:	681a      	ldr	r2, [r3, #0]
 8100e98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100e9c:	009b      	lsls	r3, r3, #2
 8100e9e:	4413      	add	r3, r2
 8100ea0:	88ba      	ldrh	r2, [r7, #4]
 8100ea2:	805a      	strh	r2, [r3, #2]
    labelsCached += 1;
 8100ea4:	4b06      	ldr	r3, [pc, #24]	; (8100ec0 <addCachedLabel+0x98>)
 8100ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100eaa:	b29b      	uxth	r3, r3
 8100eac:	3301      	adds	r3, #1
 8100eae:	b29b      	uxth	r3, r3
 8100eb0:	b21a      	sxth	r2, r3
 8100eb2:	4b03      	ldr	r3, [pc, #12]	; (8100ec0 <addCachedLabel+0x98>)
 8100eb4:	801a      	strh	r2, [r3, #0]
}
 8100eb6:	bf00      	nop
 8100eb8:	3710      	adds	r7, #16
 8100eba:	46bd      	mov	sp, r7
 8100ebc:	bd80      	pop	{r7, pc}
 8100ebe:	bf00      	nop
 8100ec0:	10004b48 	.word	0x10004b48
 8100ec4:	10004b4c 	.word	0x10004b4c

08100ec8 <advance>:

static void advance(void) {
 8100ec8:	b580      	push	{r7, lr}
 8100eca:	af00      	add	r7, sp, #0
    if (curTok->type != TT_NONE) {
 8100ecc:	4b07      	ldr	r3, [pc, #28]	; (8100eec <advance+0x24>)
 8100ece:	681b      	ldr	r3, [r3, #0]
 8100ed0:	781b      	ldrb	r3, [r3, #0]
 8100ed2:	2b00      	cmp	r3, #0
 8100ed4:	d007      	beq.n	8100ee6 <advance+0x1e>
        curTok = nextToken(curTok);
 8100ed6:	4b05      	ldr	r3, [pc, #20]	; (8100eec <advance+0x24>)
 8100ed8:	681b      	ldr	r3, [r3, #0]
 8100eda:	4618      	mov	r0, r3
 8100edc:	f001 fe4c 	bl	8102b78 <nextToken>
 8100ee0:	4603      	mov	r3, r0
 8100ee2:	4a02      	ldr	r2, [pc, #8]	; (8100eec <advance+0x24>)
 8100ee4:	6013      	str	r3, [r2, #0]
    }
}
 8100ee6:	bf00      	nop
 8100ee8:	bd80      	pop	{r7, pc}
 8100eea:	bf00      	nop
 8100eec:	10004b6c 	.word	0x10004b6c

08100ef0 <calcOperation>:

void calcOperation(char op) {
 8100ef0:	b480      	push	{r7}
 8100ef2:	b085      	sub	sp, #20
 8100ef4:	af00      	add	r7, sp, #0
 8100ef6:	4603      	mov	r3, r0
 8100ef8:	71fb      	strb	r3, [r7, #7]
    numeric top = calcStack[sp++];
 8100efa:	4bc0      	ldr	r3, [pc, #768]	; (81011fc <calcOperation+0x30c>)
 8100efc:	681a      	ldr	r2, [r3, #0]
 8100efe:	4bc0      	ldr	r3, [pc, #768]	; (8101200 <calcOperation+0x310>)
 8100f00:	f9b3 1000 	ldrsh.w	r1, [r3]
 8100f04:	b28b      	uxth	r3, r1
 8100f06:	3301      	adds	r3, #1
 8100f08:	b29b      	uxth	r3, r3
 8100f0a:	b218      	sxth	r0, r3
 8100f0c:	4bbc      	ldr	r3, [pc, #752]	; (8101200 <calcOperation+0x310>)
 8100f0e:	8018      	strh	r0, [r3, #0]
 8100f10:	460b      	mov	r3, r1
 8100f12:	009b      	lsls	r3, r3, #2
 8100f14:	4413      	add	r3, r2
 8100f16:	681b      	ldr	r3, [r3, #0]
 8100f18:	60fb      	str	r3, [r7, #12]
    switch (op) {
 8100f1a:	79fb      	ldrb	r3, [r7, #7]
 8100f1c:	3b21      	subs	r3, #33	; 0x21
 8100f1e:	2b5d      	cmp	r3, #93	; 0x5d
 8100f20:	f200 822d 	bhi.w	810137e <calcOperation+0x48e>
 8100f24:	a201      	add	r2, pc, #4	; (adr r2, 8100f2c <calcOperation+0x3c>)
 8100f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100f2a:	bf00      	nop
 8100f2c:	08101199 	.word	0x08101199
 8100f30:	0810137f 	.word	0x0810137f
 8100f34:	081012c5 	.word	0x081012c5
 8100f38:	0810137f 	.word	0x0810137f
 8100f3c:	08101141 	.word	0x08101141
 8100f40:	081012f5 	.word	0x081012f5
 8100f44:	0810137f 	.word	0x0810137f
 8100f48:	0810137f 	.word	0x0810137f
 8100f4c:	0810137f 	.word	0x0810137f
 8100f50:	081010f1 	.word	0x081010f1
 8100f54:	081010a5 	.word	0x081010a5
 8100f58:	0810137f 	.word	0x0810137f
 8100f5c:	081010cb 	.word	0x081010cb
 8100f60:	0810137f 	.word	0x0810137f
 8100f64:	08101119 	.word	0x08101119
 8100f68:	0810137f 	.word	0x0810137f
 8100f6c:	0810137f 	.word	0x0810137f
 8100f70:	0810137f 	.word	0x0810137f
 8100f74:	0810137f 	.word	0x0810137f
 8100f78:	0810137f 	.word	0x0810137f
 8100f7c:	0810137f 	.word	0x0810137f
 8100f80:	0810137f 	.word	0x0810137f
 8100f84:	0810137f 	.word	0x0810137f
 8100f88:	0810137f 	.word	0x0810137f
 8100f8c:	0810137f 	.word	0x0810137f
 8100f90:	0810137f 	.word	0x0810137f
 8100f94:	0810137f 	.word	0x0810137f
 8100f98:	081011cb 	.word	0x081011cb
 8100f9c:	08101235 	.word	0x08101235
 8100fa0:	08101205 	.word	0x08101205
 8100fa4:	0810137f 	.word	0x0810137f
 8100fa8:	0810137f 	.word	0x0810137f
 8100fac:	0810137f 	.word	0x0810137f
 8100fb0:	0810137f 	.word	0x0810137f
 8100fb4:	0810137f 	.word	0x0810137f
 8100fb8:	0810137f 	.word	0x0810137f
 8100fbc:	0810137f 	.word	0x0810137f
 8100fc0:	0810137f 	.word	0x0810137f
 8100fc4:	0810137f 	.word	0x0810137f
 8100fc8:	0810137f 	.word	0x0810137f
 8100fcc:	0810137f 	.word	0x0810137f
 8100fd0:	0810137f 	.word	0x0810137f
 8100fd4:	0810137f 	.word	0x0810137f
 8100fd8:	0810137f 	.word	0x0810137f
 8100fdc:	0810137f 	.word	0x0810137f
 8100fe0:	0810137f 	.word	0x0810137f
 8100fe4:	0810137f 	.word	0x0810137f
 8100fe8:	0810137f 	.word	0x0810137f
 8100fec:	0810137f 	.word	0x0810137f
 8100ff0:	0810137f 	.word	0x0810137f
 8100ff4:	0810137f 	.word	0x0810137f
 8100ff8:	0810137f 	.word	0x0810137f
 8100ffc:	0810137f 	.word	0x0810137f
 8101000:	0810137f 	.word	0x0810137f
 8101004:	0810137f 	.word	0x0810137f
 8101008:	0810137f 	.word	0x0810137f
 810100c:	0810137f 	.word	0x0810137f
 8101010:	0810137f 	.word	0x0810137f
 8101014:	0810137f 	.word	0x0810137f
 8101018:	0810137f 	.word	0x0810137f
 810101c:	0810137f 	.word	0x0810137f
 8101020:	08101359 	.word	0x08101359
 8101024:	0810137f 	.word	0x0810137f
 8101028:	0810137f 	.word	0x0810137f
 810102c:	0810137f 	.word	0x0810137f
 8101030:	0810137f 	.word	0x0810137f
 8101034:	0810137f 	.word	0x0810137f
 8101038:	0810137f 	.word	0x0810137f
 810103c:	0810137f 	.word	0x0810137f
 8101040:	0810137f 	.word	0x0810137f
 8101044:	0810137f 	.word	0x0810137f
 8101048:	0810137f 	.word	0x0810137f
 810104c:	0810137f 	.word	0x0810137f
 8101050:	0810137f 	.word	0x0810137f
 8101054:	0810137f 	.word	0x0810137f
 8101058:	0810137f 	.word	0x0810137f
 810105c:	0810137f 	.word	0x0810137f
 8101060:	0810137f 	.word	0x0810137f
 8101064:	0810137f 	.word	0x0810137f
 8101068:	0810137f 	.word	0x0810137f
 810106c:	0810137f 	.word	0x0810137f
 8101070:	0810137f 	.word	0x0810137f
 8101074:	0810137f 	.word	0x0810137f
 8101078:	0810137f 	.word	0x0810137f
 810107c:	0810137f 	.word	0x0810137f
 8101080:	0810137f 	.word	0x0810137f
 8101084:	0810137f 	.word	0x0810137f
 8101088:	0810137f 	.word	0x0810137f
 810108c:	0810137f 	.word	0x0810137f
 8101090:	0810137f 	.word	0x0810137f
 8101094:	08101265 	.word	0x08101265
 8101098:	08101327 	.word	0x08101327
 810109c:	08101295 	.word	0x08101295
 81010a0:	08101171 	.word	0x08101171
        case '+':
            calcStack[sp] += top;
 81010a4:	4b55      	ldr	r3, [pc, #340]	; (81011fc <calcOperation+0x30c>)
 81010a6:	681a      	ldr	r2, [r3, #0]
 81010a8:	4b55      	ldr	r3, [pc, #340]	; (8101200 <calcOperation+0x310>)
 81010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 81010ae:	009b      	lsls	r3, r3, #2
 81010b0:	4413      	add	r3, r2
 81010b2:	6819      	ldr	r1, [r3, #0]
 81010b4:	4b51      	ldr	r3, [pc, #324]	; (81011fc <calcOperation+0x30c>)
 81010b6:	681a      	ldr	r2, [r3, #0]
 81010b8:	4b51      	ldr	r3, [pc, #324]	; (8101200 <calcOperation+0x310>)
 81010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 81010be:	009b      	lsls	r3, r3, #2
 81010c0:	4413      	add	r3, r2
 81010c2:	68fa      	ldr	r2, [r7, #12]
 81010c4:	440a      	add	r2, r1
 81010c6:	601a      	str	r2, [r3, #0]
            break;
 81010c8:	e159      	b.n	810137e <calcOperation+0x48e>
        case '-':
            calcStack[sp] -= top;
 81010ca:	4b4c      	ldr	r3, [pc, #304]	; (81011fc <calcOperation+0x30c>)
 81010cc:	681a      	ldr	r2, [r3, #0]
 81010ce:	4b4c      	ldr	r3, [pc, #304]	; (8101200 <calcOperation+0x310>)
 81010d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 81010d4:	009b      	lsls	r3, r3, #2
 81010d6:	4413      	add	r3, r2
 81010d8:	6819      	ldr	r1, [r3, #0]
 81010da:	4b48      	ldr	r3, [pc, #288]	; (81011fc <calcOperation+0x30c>)
 81010dc:	681a      	ldr	r2, [r3, #0]
 81010de:	4b48      	ldr	r3, [pc, #288]	; (8101200 <calcOperation+0x310>)
 81010e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 81010e4:	009b      	lsls	r3, r3, #2
 81010e6:	4413      	add	r3, r2
 81010e8:	68fa      	ldr	r2, [r7, #12]
 81010ea:	1a8a      	subs	r2, r1, r2
 81010ec:	601a      	str	r2, [r3, #0]
            break;
 81010ee:	e146      	b.n	810137e <calcOperation+0x48e>
        case '*':
            calcStack[sp] *= top;
 81010f0:	4b42      	ldr	r3, [pc, #264]	; (81011fc <calcOperation+0x30c>)
 81010f2:	681a      	ldr	r2, [r3, #0]
 81010f4:	4b42      	ldr	r3, [pc, #264]	; (8101200 <calcOperation+0x310>)
 81010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 81010fa:	009b      	lsls	r3, r3, #2
 81010fc:	4413      	add	r3, r2
 81010fe:	681a      	ldr	r2, [r3, #0]
 8101100:	4b3e      	ldr	r3, [pc, #248]	; (81011fc <calcOperation+0x30c>)
 8101102:	6819      	ldr	r1, [r3, #0]
 8101104:	4b3e      	ldr	r3, [pc, #248]	; (8101200 <calcOperation+0x310>)
 8101106:	f9b3 3000 	ldrsh.w	r3, [r3]
 810110a:	009b      	lsls	r3, r3, #2
 810110c:	440b      	add	r3, r1
 810110e:	68f9      	ldr	r1, [r7, #12]
 8101110:	fb01 f202 	mul.w	r2, r1, r2
 8101114:	601a      	str	r2, [r3, #0]
            break;
 8101116:	e132      	b.n	810137e <calcOperation+0x48e>
        case '/':
            calcStack[sp] /= top;
 8101118:	4b38      	ldr	r3, [pc, #224]	; (81011fc <calcOperation+0x30c>)
 810111a:	681a      	ldr	r2, [r3, #0]
 810111c:	4b38      	ldr	r3, [pc, #224]	; (8101200 <calcOperation+0x310>)
 810111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101122:	009b      	lsls	r3, r3, #2
 8101124:	4413      	add	r3, r2
 8101126:	6819      	ldr	r1, [r3, #0]
 8101128:	4b34      	ldr	r3, [pc, #208]	; (81011fc <calcOperation+0x30c>)
 810112a:	681a      	ldr	r2, [r3, #0]
 810112c:	4b34      	ldr	r3, [pc, #208]	; (8101200 <calcOperation+0x310>)
 810112e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101132:	009b      	lsls	r3, r3, #2
 8101134:	4413      	add	r3, r2
 8101136:	68fa      	ldr	r2, [r7, #12]
 8101138:	fb91 f2f2 	sdiv	r2, r1, r2
 810113c:	601a      	str	r2, [r3, #0]
            break;
 810113e:	e11e      	b.n	810137e <calcOperation+0x48e>
        case '%':
            calcStack[sp] %= top;
 8101140:	4b2e      	ldr	r3, [pc, #184]	; (81011fc <calcOperation+0x30c>)
 8101142:	681a      	ldr	r2, [r3, #0]
 8101144:	4b2e      	ldr	r3, [pc, #184]	; (8101200 <calcOperation+0x310>)
 8101146:	f9b3 3000 	ldrsh.w	r3, [r3]
 810114a:	009b      	lsls	r3, r3, #2
 810114c:	4413      	add	r3, r2
 810114e:	681b      	ldr	r3, [r3, #0]
 8101150:	4a2a      	ldr	r2, [pc, #168]	; (81011fc <calcOperation+0x30c>)
 8101152:	6811      	ldr	r1, [r2, #0]
 8101154:	4a2a      	ldr	r2, [pc, #168]	; (8101200 <calcOperation+0x310>)
 8101156:	f9b2 2000 	ldrsh.w	r2, [r2]
 810115a:	0092      	lsls	r2, r2, #2
 810115c:	440a      	add	r2, r1
 810115e:	68f9      	ldr	r1, [r7, #12]
 8101160:	fb93 f1f1 	sdiv	r1, r3, r1
 8101164:	68f8      	ldr	r0, [r7, #12]
 8101166:	fb00 f101 	mul.w	r1, r0, r1
 810116a:	1a5b      	subs	r3, r3, r1
 810116c:	6013      	str	r3, [r2, #0]
            break;
 810116e:	e106      	b.n	810137e <calcOperation+0x48e>
        case '~':
            calcStack[--sp] = -top;
 8101170:	4b22      	ldr	r3, [pc, #136]	; (81011fc <calcOperation+0x30c>)
 8101172:	681a      	ldr	r2, [r3, #0]
 8101174:	4b22      	ldr	r3, [pc, #136]	; (8101200 <calcOperation+0x310>)
 8101176:	f9b3 3000 	ldrsh.w	r3, [r3]
 810117a:	b29b      	uxth	r3, r3
 810117c:	3b01      	subs	r3, #1
 810117e:	b29b      	uxth	r3, r3
 8101180:	b219      	sxth	r1, r3
 8101182:	4b1f      	ldr	r3, [pc, #124]	; (8101200 <calcOperation+0x310>)
 8101184:	8019      	strh	r1, [r3, #0]
 8101186:	4b1e      	ldr	r3, [pc, #120]	; (8101200 <calcOperation+0x310>)
 8101188:	f9b3 3000 	ldrsh.w	r3, [r3]
 810118c:	009b      	lsls	r3, r3, #2
 810118e:	4413      	add	r3, r2
 8101190:	68fa      	ldr	r2, [r7, #12]
 8101192:	4252      	negs	r2, r2
 8101194:	601a      	str	r2, [r3, #0]
            break;
 8101196:	e0f2      	b.n	810137e <calcOperation+0x48e>
        case '!':
            calcStack[--sp] = !top;
 8101198:	68fb      	ldr	r3, [r7, #12]
 810119a:	2b00      	cmp	r3, #0
 810119c:	bf0c      	ite	eq
 810119e:	2301      	moveq	r3, #1
 81011a0:	2300      	movne	r3, #0
 81011a2:	b2d9      	uxtb	r1, r3
 81011a4:	4b15      	ldr	r3, [pc, #84]	; (81011fc <calcOperation+0x30c>)
 81011a6:	681a      	ldr	r2, [r3, #0]
 81011a8:	4b15      	ldr	r3, [pc, #84]	; (8101200 <calcOperation+0x310>)
 81011aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 81011ae:	b29b      	uxth	r3, r3
 81011b0:	3b01      	subs	r3, #1
 81011b2:	b29b      	uxth	r3, r3
 81011b4:	b218      	sxth	r0, r3
 81011b6:	4b12      	ldr	r3, [pc, #72]	; (8101200 <calcOperation+0x310>)
 81011b8:	8018      	strh	r0, [r3, #0]
 81011ba:	4b11      	ldr	r3, [pc, #68]	; (8101200 <calcOperation+0x310>)
 81011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 81011c0:	009b      	lsls	r3, r3, #2
 81011c2:	4413      	add	r3, r2
 81011c4:	460a      	mov	r2, r1
 81011c6:	601a      	str	r2, [r3, #0]
            break;
 81011c8:	e0d9      	b.n	810137e <calcOperation+0x48e>
        case '<':
            calcStack[sp] = calcStack[sp] < top;
 81011ca:	4b0c      	ldr	r3, [pc, #48]	; (81011fc <calcOperation+0x30c>)
 81011cc:	681a      	ldr	r2, [r3, #0]
 81011ce:	4b0c      	ldr	r3, [pc, #48]	; (8101200 <calcOperation+0x310>)
 81011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 81011d4:	009b      	lsls	r3, r3, #2
 81011d6:	4413      	add	r3, r2
 81011d8:	681b      	ldr	r3, [r3, #0]
 81011da:	68fa      	ldr	r2, [r7, #12]
 81011dc:	429a      	cmp	r2, r3
 81011de:	bfcc      	ite	gt
 81011e0:	2301      	movgt	r3, #1
 81011e2:	2300      	movle	r3, #0
 81011e4:	b2d9      	uxtb	r1, r3
 81011e6:	4b05      	ldr	r3, [pc, #20]	; (81011fc <calcOperation+0x30c>)
 81011e8:	681a      	ldr	r2, [r3, #0]
 81011ea:	4b05      	ldr	r3, [pc, #20]	; (8101200 <calcOperation+0x310>)
 81011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 81011f0:	009b      	lsls	r3, r3, #2
 81011f2:	4413      	add	r3, r2
 81011f4:	460a      	mov	r2, r1
 81011f6:	601a      	str	r2, [r3, #0]
            break;
 81011f8:	e0c1      	b.n	810137e <calcOperation+0x48e>
 81011fa:	bf00      	nop
 81011fc:	10004b54 	.word	0x10004b54
 8101200:	10004b5c 	.word	0x10004b5c
        case '>':
            calcStack[sp] = calcStack[sp] > top;
 8101204:	4b61      	ldr	r3, [pc, #388]	; (810138c <calcOperation+0x49c>)
 8101206:	681a      	ldr	r2, [r3, #0]
 8101208:	4b61      	ldr	r3, [pc, #388]	; (8101390 <calcOperation+0x4a0>)
 810120a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810120e:	009b      	lsls	r3, r3, #2
 8101210:	4413      	add	r3, r2
 8101212:	681b      	ldr	r3, [r3, #0]
 8101214:	68fa      	ldr	r2, [r7, #12]
 8101216:	429a      	cmp	r2, r3
 8101218:	bfb4      	ite	lt
 810121a:	2301      	movlt	r3, #1
 810121c:	2300      	movge	r3, #0
 810121e:	b2d9      	uxtb	r1, r3
 8101220:	4b5a      	ldr	r3, [pc, #360]	; (810138c <calcOperation+0x49c>)
 8101222:	681a      	ldr	r2, [r3, #0]
 8101224:	4b5a      	ldr	r3, [pc, #360]	; (8101390 <calcOperation+0x4a0>)
 8101226:	f9b3 3000 	ldrsh.w	r3, [r3]
 810122a:	009b      	lsls	r3, r3, #2
 810122c:	4413      	add	r3, r2
 810122e:	460a      	mov	r2, r1
 8101230:	601a      	str	r2, [r3, #0]
            break;
 8101232:	e0a4      	b.n	810137e <calcOperation+0x48e>
        case '=':
            calcStack[sp] = calcStack[sp] == top;
 8101234:	4b55      	ldr	r3, [pc, #340]	; (810138c <calcOperation+0x49c>)
 8101236:	681a      	ldr	r2, [r3, #0]
 8101238:	4b55      	ldr	r3, [pc, #340]	; (8101390 <calcOperation+0x4a0>)
 810123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810123e:	009b      	lsls	r3, r3, #2
 8101240:	4413      	add	r3, r2
 8101242:	681b      	ldr	r3, [r3, #0]
 8101244:	68fa      	ldr	r2, [r7, #12]
 8101246:	429a      	cmp	r2, r3
 8101248:	bf0c      	ite	eq
 810124a:	2301      	moveq	r3, #1
 810124c:	2300      	movne	r3, #0
 810124e:	b2d9      	uxtb	r1, r3
 8101250:	4b4e      	ldr	r3, [pc, #312]	; (810138c <calcOperation+0x49c>)
 8101252:	681a      	ldr	r2, [r3, #0]
 8101254:	4b4e      	ldr	r3, [pc, #312]	; (8101390 <calcOperation+0x4a0>)
 8101256:	f9b3 3000 	ldrsh.w	r3, [r3]
 810125a:	009b      	lsls	r3, r3, #2
 810125c:	4413      	add	r3, r2
 810125e:	460a      	mov	r2, r1
 8101260:	601a      	str	r2, [r3, #0]
            break;
 8101262:	e08c      	b.n	810137e <calcOperation+0x48e>
        case '{':
            calcStack[sp] = calcStack[sp] <= top;
 8101264:	4b49      	ldr	r3, [pc, #292]	; (810138c <calcOperation+0x49c>)
 8101266:	681a      	ldr	r2, [r3, #0]
 8101268:	4b49      	ldr	r3, [pc, #292]	; (8101390 <calcOperation+0x4a0>)
 810126a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810126e:	009b      	lsls	r3, r3, #2
 8101270:	4413      	add	r3, r2
 8101272:	681b      	ldr	r3, [r3, #0]
 8101274:	68fa      	ldr	r2, [r7, #12]
 8101276:	429a      	cmp	r2, r3
 8101278:	bfac      	ite	ge
 810127a:	2301      	movge	r3, #1
 810127c:	2300      	movlt	r3, #0
 810127e:	b2d9      	uxtb	r1, r3
 8101280:	4b42      	ldr	r3, [pc, #264]	; (810138c <calcOperation+0x49c>)
 8101282:	681a      	ldr	r2, [r3, #0]
 8101284:	4b42      	ldr	r3, [pc, #264]	; (8101390 <calcOperation+0x4a0>)
 8101286:	f9b3 3000 	ldrsh.w	r3, [r3]
 810128a:	009b      	lsls	r3, r3, #2
 810128c:	4413      	add	r3, r2
 810128e:	460a      	mov	r2, r1
 8101290:	601a      	str	r2, [r3, #0]
            break;
 8101292:	e074      	b.n	810137e <calcOperation+0x48e>
        case '}':
            calcStack[sp] = calcStack[sp] >= top;
 8101294:	4b3d      	ldr	r3, [pc, #244]	; (810138c <calcOperation+0x49c>)
 8101296:	681a      	ldr	r2, [r3, #0]
 8101298:	4b3d      	ldr	r3, [pc, #244]	; (8101390 <calcOperation+0x4a0>)
 810129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810129e:	009b      	lsls	r3, r3, #2
 81012a0:	4413      	add	r3, r2
 81012a2:	681b      	ldr	r3, [r3, #0]
 81012a4:	68fa      	ldr	r2, [r7, #12]
 81012a6:	429a      	cmp	r2, r3
 81012a8:	bfd4      	ite	le
 81012aa:	2301      	movle	r3, #1
 81012ac:	2300      	movgt	r3, #0
 81012ae:	b2d9      	uxtb	r1, r3
 81012b0:	4b36      	ldr	r3, [pc, #216]	; (810138c <calcOperation+0x49c>)
 81012b2:	681a      	ldr	r2, [r3, #0]
 81012b4:	4b36      	ldr	r3, [pc, #216]	; (8101390 <calcOperation+0x4a0>)
 81012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 81012ba:	009b      	lsls	r3, r3, #2
 81012bc:	4413      	add	r3, r2
 81012be:	460a      	mov	r2, r1
 81012c0:	601a      	str	r2, [r3, #0]
            break;
 81012c2:	e05c      	b.n	810137e <calcOperation+0x48e>
        case '#':
            calcStack[sp] = calcStack[sp] != top;
 81012c4:	4b31      	ldr	r3, [pc, #196]	; (810138c <calcOperation+0x49c>)
 81012c6:	681a      	ldr	r2, [r3, #0]
 81012c8:	4b31      	ldr	r3, [pc, #196]	; (8101390 <calcOperation+0x4a0>)
 81012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 81012ce:	009b      	lsls	r3, r3, #2
 81012d0:	4413      	add	r3, r2
 81012d2:	681b      	ldr	r3, [r3, #0]
 81012d4:	68fa      	ldr	r2, [r7, #12]
 81012d6:	429a      	cmp	r2, r3
 81012d8:	bf14      	ite	ne
 81012da:	2301      	movne	r3, #1
 81012dc:	2300      	moveq	r3, #0
 81012de:	b2d9      	uxtb	r1, r3
 81012e0:	4b2a      	ldr	r3, [pc, #168]	; (810138c <calcOperation+0x49c>)
 81012e2:	681a      	ldr	r2, [r3, #0]
 81012e4:	4b2a      	ldr	r3, [pc, #168]	; (8101390 <calcOperation+0x4a0>)
 81012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 81012ea:	009b      	lsls	r3, r3, #2
 81012ec:	4413      	add	r3, r2
 81012ee:	460a      	mov	r2, r1
 81012f0:	601a      	str	r2, [r3, #0]
            break;
 81012f2:	e044      	b.n	810137e <calcOperation+0x48e>
        case '&':
            calcStack[sp] = calcStack[sp] && top;
 81012f4:	4b25      	ldr	r3, [pc, #148]	; (810138c <calcOperation+0x49c>)
 81012f6:	681a      	ldr	r2, [r3, #0]
 81012f8:	4b25      	ldr	r3, [pc, #148]	; (8101390 <calcOperation+0x4a0>)
 81012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 81012fe:	009b      	lsls	r3, r3, #2
 8101300:	4413      	add	r3, r2
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	2b00      	cmp	r3, #0
 8101306:	d004      	beq.n	8101312 <calcOperation+0x422>
 8101308:	68fb      	ldr	r3, [r7, #12]
 810130a:	2b00      	cmp	r3, #0
 810130c:	d001      	beq.n	8101312 <calcOperation+0x422>
 810130e:	2201      	movs	r2, #1
 8101310:	e000      	b.n	8101314 <calcOperation+0x424>
 8101312:	2200      	movs	r2, #0
 8101314:	4b1d      	ldr	r3, [pc, #116]	; (810138c <calcOperation+0x49c>)
 8101316:	6819      	ldr	r1, [r3, #0]
 8101318:	4b1d      	ldr	r3, [pc, #116]	; (8101390 <calcOperation+0x4a0>)
 810131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810131e:	009b      	lsls	r3, r3, #2
 8101320:	440b      	add	r3, r1
 8101322:	601a      	str	r2, [r3, #0]
            break;
 8101324:	e02b      	b.n	810137e <calcOperation+0x48e>
        case '|':
            calcStack[sp] = calcStack[sp] || top;
 8101326:	4b19      	ldr	r3, [pc, #100]	; (810138c <calcOperation+0x49c>)
 8101328:	681a      	ldr	r2, [r3, #0]
 810132a:	4b19      	ldr	r3, [pc, #100]	; (8101390 <calcOperation+0x4a0>)
 810132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101330:	009b      	lsls	r3, r3, #2
 8101332:	4413      	add	r3, r2
 8101334:	681b      	ldr	r3, [r3, #0]
 8101336:	2b00      	cmp	r3, #0
 8101338:	d102      	bne.n	8101340 <calcOperation+0x450>
 810133a:	68fb      	ldr	r3, [r7, #12]
 810133c:	2b00      	cmp	r3, #0
 810133e:	d001      	beq.n	8101344 <calcOperation+0x454>
 8101340:	2201      	movs	r2, #1
 8101342:	e000      	b.n	8101346 <calcOperation+0x456>
 8101344:	2200      	movs	r2, #0
 8101346:	4b11      	ldr	r3, [pc, #68]	; (810138c <calcOperation+0x49c>)
 8101348:	6819      	ldr	r1, [r3, #0]
 810134a:	4b11      	ldr	r3, [pc, #68]	; (8101390 <calcOperation+0x4a0>)
 810134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101350:	009b      	lsls	r3, r3, #2
 8101352:	440b      	add	r3, r1
 8101354:	601a      	str	r2, [r3, #0]
            break;
 8101356:	e012      	b.n	810137e <calcOperation+0x48e>
        case '^':
            calcStack[sp] = calcStack[sp] ^ top;
 8101358:	4b0c      	ldr	r3, [pc, #48]	; (810138c <calcOperation+0x49c>)
 810135a:	681a      	ldr	r2, [r3, #0]
 810135c:	4b0c      	ldr	r3, [pc, #48]	; (8101390 <calcOperation+0x4a0>)
 810135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101362:	009b      	lsls	r3, r3, #2
 8101364:	4413      	add	r3, r2
 8101366:	6819      	ldr	r1, [r3, #0]
 8101368:	4b08      	ldr	r3, [pc, #32]	; (810138c <calcOperation+0x49c>)
 810136a:	681a      	ldr	r2, [r3, #0]
 810136c:	4b08      	ldr	r3, [pc, #32]	; (8101390 <calcOperation+0x4a0>)
 810136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101372:	009b      	lsls	r3, r3, #2
 8101374:	4413      	add	r3, r2
 8101376:	68fa      	ldr	r2, [r7, #12]
 8101378:	404a      	eors	r2, r1
 810137a:	601a      	str	r2, [r3, #0]
            break;
 810137c:	bf00      	nop
    }
}
 810137e:	bf00      	nop
 8101380:	3714      	adds	r7, #20
 8101382:	46bd      	mov	sp, r7
 8101384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101388:	4770      	bx	lr
 810138a:	bf00      	nop
 810138c:	10004b54 	.word	0x10004b54
 8101390:	10004b5c 	.word	0x10004b5c

08101394 <calcFunction>:

void calcFunction(nstring* name) {
 8101394:	b580      	push	{r7, lr}
 8101396:	b086      	sub	sp, #24
 8101398:	af00      	add	r7, sp, #0
 810139a:	6078      	str	r0, [r7, #4]
    short i;
    numeric r;
    numeric h = hashOfNStr(name);
 810139c:	6878      	ldr	r0, [r7, #4]
 810139e:	f002 fc41 	bl	8103c24 <hashOfNStr>
 81013a2:	6178      	str	r0, [r7, #20]
    if (h == 0x1FF) { // KEY
 81013a4:	697b      	ldr	r3, [r7, #20]
 81013a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 81013aa:	4293      	cmp	r3, r2
 81013ac:	d11b      	bne.n	81013e6 <calcFunction+0x52>
        i = calcStack[sp];
 81013ae:	4b45      	ldr	r3, [pc, #276]	; (81014c4 <calcFunction+0x130>)
 81013b0:	681a      	ldr	r2, [r3, #0]
 81013b2:	4b45      	ldr	r3, [pc, #276]	; (81014c8 <calcFunction+0x134>)
 81013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 81013b8:	009b      	lsls	r3, r3, #2
 81013ba:	4413      	add	r3, r2
 81013bc:	681b      	ldr	r3, [r3, #0]
 81013be:	827b      	strh	r3, [r7, #18]
        calcStack[sp] = lastInput;
 81013c0:	4b42      	ldr	r3, [pc, #264]	; (81014cc <calcFunction+0x138>)
 81013c2:	7819      	ldrb	r1, [r3, #0]
 81013c4:	4b3f      	ldr	r3, [pc, #252]	; (81014c4 <calcFunction+0x130>)
 81013c6:	681a      	ldr	r2, [r3, #0]
 81013c8:	4b3f      	ldr	r3, [pc, #252]	; (81014c8 <calcFunction+0x134>)
 81013ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 81013ce:	009b      	lsls	r3, r3, #2
 81013d0:	4413      	add	r3, r2
 81013d2:	460a      	mov	r2, r1
 81013d4:	601a      	str	r2, [r3, #0]
        if (i != 0) {
 81013d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81013da:	2b00      	cmp	r3, #0
 81013dc:	d06b      	beq.n	81014b6 <calcFunction+0x122>
            lastInput = 0;
 81013de:	4b3b      	ldr	r3, [pc, #236]	; (81014cc <calcFunction+0x138>)
 81013e0:	2200      	movs	r2, #0
 81013e2:	701a      	strb	r2, [r3, #0]
        }
        return;
 81013e4:	e067      	b.n	81014b6 <calcFunction+0x122>
    }
    if (h == 0xC9) { // MS
 81013e6:	697b      	ldr	r3, [r7, #20]
 81013e8:	2bc9      	cmp	r3, #201	; 0xc9
 81013ea:	d109      	bne.n	8101400 <calcFunction+0x6c>
        calcStack[sp] = 0; // sysMillis(calcStack[sp]);
 81013ec:	4b35      	ldr	r3, [pc, #212]	; (81014c4 <calcFunction+0x130>)
 81013ee:	681a      	ldr	r2, [r3, #0]
 81013f0:	4b35      	ldr	r3, [pc, #212]	; (81014c8 <calcFunction+0x134>)
 81013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 81013f6:	009b      	lsls	r3, r3, #2
 81013f8:	4413      	add	r3, r2
 81013fa:	2200      	movs	r2, #0
 81013fc:	601a      	str	r2, [r3, #0]
        return;
 81013fe:	e05d      	b.n	81014bc <calcFunction+0x128>
    }
    if (h == 0x1D3) { // ABS
 8101400:	697b      	ldr	r3, [r7, #20]
 8101402:	f240 12d3 	movw	r2, #467	; 0x1d3
 8101406:	4293      	cmp	r3, r2
 8101408:	d11b      	bne.n	8101442 <calcFunction+0xae>
        if (calcStack[sp] < 0) {
 810140a:	4b2e      	ldr	r3, [pc, #184]	; (81014c4 <calcFunction+0x130>)
 810140c:	681a      	ldr	r2, [r3, #0]
 810140e:	4b2e      	ldr	r3, [pc, #184]	; (81014c8 <calcFunction+0x134>)
 8101410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101414:	009b      	lsls	r3, r3, #2
 8101416:	4413      	add	r3, r2
 8101418:	681b      	ldr	r3, [r3, #0]
 810141a:	2b00      	cmp	r3, #0
 810141c:	da4d      	bge.n	81014ba <calcFunction+0x126>
            calcStack[sp] = -calcStack[sp];
 810141e:	4b29      	ldr	r3, [pc, #164]	; (81014c4 <calcFunction+0x130>)
 8101420:	681a      	ldr	r2, [r3, #0]
 8101422:	4b29      	ldr	r3, [pc, #164]	; (81014c8 <calcFunction+0x134>)
 8101424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101428:	009b      	lsls	r3, r3, #2
 810142a:	4413      	add	r3, r2
 810142c:	681a      	ldr	r2, [r3, #0]
 810142e:	4b25      	ldr	r3, [pc, #148]	; (81014c4 <calcFunction+0x130>)
 8101430:	6819      	ldr	r1, [r3, #0]
 8101432:	4b25      	ldr	r3, [pc, #148]	; (81014c8 <calcFunction+0x134>)
 8101434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101438:	009b      	lsls	r3, r3, #2
 810143a:	440b      	add	r3, r1
 810143c:	4252      	negs	r2, r2
 810143e:	601a      	str	r2, [r3, #0]
        }
        return;
 8101440:	e03b      	b.n	81014ba <calcFunction+0x126>
    }
    i = extraFunctionByHash(h);
 8101442:	6978      	ldr	r0, [r7, #20]
 8101444:	f002 fe89 	bl	810415a <extraFunctionByHash>
 8101448:	4603      	mov	r3, r0
 810144a:	827b      	strh	r3, [r7, #18]
    if (i >= 0) {
 810144c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8101450:	2b00      	cmp	r3, #0
 8101452:	db26      	blt.n	81014a2 <calcFunction+0x10e>
        // arguments will appear in reverse order
        r = extraFunction(i, calcStack + sp);
 8101454:	8a7b      	ldrh	r3, [r7, #18]
 8101456:	b2d8      	uxtb	r0, r3
 8101458:	4b1a      	ldr	r3, [pc, #104]	; (81014c4 <calcFunction+0x130>)
 810145a:	681a      	ldr	r2, [r3, #0]
 810145c:	4b1a      	ldr	r3, [pc, #104]	; (81014c8 <calcFunction+0x134>)
 810145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101462:	009b      	lsls	r3, r3, #2
 8101464:	4413      	add	r3, r2
 8101466:	4619      	mov	r1, r3
 8101468:	f002 fef0 	bl	810424c <extraFunction>
 810146c:	60f8      	str	r0, [r7, #12]
        sp += extraFuncArgCnt[i] - 1;
 810146e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8101472:	4a17      	ldr	r2, [pc, #92]	; (81014d0 <calcFunction+0x13c>)
 8101474:	5cd3      	ldrb	r3, [r2, r3]
 8101476:	b29a      	uxth	r2, r3
 8101478:	4b13      	ldr	r3, [pc, #76]	; (81014c8 <calcFunction+0x134>)
 810147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810147e:	b29b      	uxth	r3, r3
 8101480:	4413      	add	r3, r2
 8101482:	b29b      	uxth	r3, r3
 8101484:	3b01      	subs	r3, #1
 8101486:	b29b      	uxth	r3, r3
 8101488:	b21a      	sxth	r2, r3
 810148a:	4b0f      	ldr	r3, [pc, #60]	; (81014c8 <calcFunction+0x134>)
 810148c:	801a      	strh	r2, [r3, #0]
        calcStack[sp] = r;
 810148e:	4b0d      	ldr	r3, [pc, #52]	; (81014c4 <calcFunction+0x130>)
 8101490:	681a      	ldr	r2, [r3, #0]
 8101492:	4b0d      	ldr	r3, [pc, #52]	; (81014c8 <calcFunction+0x134>)
 8101494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101498:	009b      	lsls	r3, r3, #2
 810149a:	4413      	add	r3, r2
 810149c:	68fa      	ldr	r2, [r7, #12]
 810149e:	601a      	str	r2, [r3, #0]
        return;
 81014a0:	e00c      	b.n	81014bc <calcFunction+0x128>
    }
    calcStack[sp] = 0;
 81014a2:	4b08      	ldr	r3, [pc, #32]	; (81014c4 <calcFunction+0x130>)
 81014a4:	681a      	ldr	r2, [r3, #0]
 81014a6:	4b08      	ldr	r3, [pc, #32]	; (81014c8 <calcFunction+0x134>)
 81014a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 81014ac:	009b      	lsls	r3, r3, #2
 81014ae:	4413      	add	r3, r2
 81014b0:	2200      	movs	r2, #0
 81014b2:	601a      	str	r2, [r3, #0]
 81014b4:	e002      	b.n	81014bc <calcFunction+0x128>
        return;
 81014b6:	bf00      	nop
 81014b8:	e000      	b.n	81014bc <calcFunction+0x128>
        return;
 81014ba:	bf00      	nop
}
 81014bc:	3718      	adds	r7, #24
 81014be:	46bd      	mov	sp, r7
 81014c0:	bd80      	pop	{r7, pc}
 81014c2:	bf00      	nop
 81014c4:	10004b54 	.word	0x10004b54
 81014c8:	10004b5c 	.word	0x10004b5c
 81014cc:	10004b44 	.word	0x10004b44
 81014d0:	10000048 	.word	0x10000048

081014d4 <calcArray>:

void calcArray(char letter) {
 81014d4:	b580      	push	{r7, lr}
 81014d6:	b084      	sub	sp, #16
 81014d8:	af00      	add	r7, sp, #0
 81014da:	4603      	mov	r3, r0
 81014dc:	71fb      	strb	r3, [r7, #7]
    short offset = getArrayOffset(letter);
 81014de:	79fb      	ldrb	r3, [r7, #7]
 81014e0:	4618      	mov	r0, r3
 81014e2:	f7ff fb53 	bl	8100b8c <getArrayOffset>
 81014e6:	4603      	mov	r3, r0
 81014e8:	81fb      	strh	r3, [r7, #14]
    if (offset == -1) {
 81014ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81014ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 81014f2:	d109      	bne.n	8101508 <calcArray+0x34>
        calcStack[sp] = 0;
 81014f4:	4b28      	ldr	r3, [pc, #160]	; (8101598 <calcArray+0xc4>)
 81014f6:	681a      	ldr	r2, [r3, #0]
 81014f8:	4b28      	ldr	r3, [pc, #160]	; (810159c <calcArray+0xc8>)
 81014fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 81014fe:	009b      	lsls	r3, r3, #2
 8101500:	4413      	add	r3, r2
 8101502:	2200      	movs	r2, #0
 8101504:	601a      	str	r2, [r3, #0]
        return;
 8101506:	e044      	b.n	8101592 <calcArray+0xbe>
    }
    char b = (offset & 0x8000) ? 1 : sizeof(numeric);
 8101508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810150c:	2b00      	cmp	r3, #0
 810150e:	da01      	bge.n	8101514 <calcArray+0x40>
 8101510:	2301      	movs	r3, #1
 8101512:	e000      	b.n	8101516 <calcArray+0x42>
 8101514:	2304      	movs	r3, #4
 8101516:	737b      	strb	r3, [r7, #13]
    offset = (offset & 0x7FFF) + b * calcStack[sp];
 8101518:	89fb      	ldrh	r3, [r7, #14]
 810151a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 810151e:	b29a      	uxth	r2, r3
 8101520:	7b7b      	ldrb	r3, [r7, #13]
 8101522:	b299      	uxth	r1, r3
 8101524:	4b1c      	ldr	r3, [pc, #112]	; (8101598 <calcArray+0xc4>)
 8101526:	6818      	ldr	r0, [r3, #0]
 8101528:	4b1c      	ldr	r3, [pc, #112]	; (810159c <calcArray+0xc8>)
 810152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810152e:	009b      	lsls	r3, r3, #2
 8101530:	4403      	add	r3, r0
 8101532:	681b      	ldr	r3, [r3, #0]
 8101534:	b29b      	uxth	r3, r3
 8101536:	fb11 f303 	smulbb	r3, r1, r3
 810153a:	b29b      	uxth	r3, r3
 810153c:	4413      	add	r3, r2
 810153e:	b29b      	uxth	r3, r3
 8101540:	81fb      	strh	r3, [r7, #14]
    char* p = ((char*)(void*)vars) + sizeof(varHolder) * numVars + offset;
 8101542:	4b17      	ldr	r3, [pc, #92]	; (81015a0 <calcArray+0xcc>)
 8101544:	681a      	ldr	r2, [r3, #0]
 8101546:	4b17      	ldr	r3, [pc, #92]	; (81015a4 <calcArray+0xd0>)
 8101548:	781b      	ldrb	r3, [r3, #0]
 810154a:	4619      	mov	r1, r3
 810154c:	460b      	mov	r3, r1
 810154e:	005b      	lsls	r3, r3, #1
 8101550:	440b      	add	r3, r1
 8101552:	005b      	lsls	r3, r3, #1
 8101554:	4619      	mov	r1, r3
 8101556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810155a:	440b      	add	r3, r1
 810155c:	4413      	add	r3, r2
 810155e:	60bb      	str	r3, [r7, #8]
    if (b > 1) {
 8101560:	7b7b      	ldrb	r3, [r7, #13]
 8101562:	2b01      	cmp	r3, #1
 8101564:	d90a      	bls.n	810157c <calcArray+0xa8>
        calcStack[sp] = *((numeric*)(void*)p);
 8101566:	4b0c      	ldr	r3, [pc, #48]	; (8101598 <calcArray+0xc4>)
 8101568:	681a      	ldr	r2, [r3, #0]
 810156a:	4b0c      	ldr	r3, [pc, #48]	; (810159c <calcArray+0xc8>)
 810156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101570:	009b      	lsls	r3, r3, #2
 8101572:	4413      	add	r3, r2
 8101574:	68ba      	ldr	r2, [r7, #8]
 8101576:	6812      	ldr	r2, [r2, #0]
 8101578:	601a      	str	r2, [r3, #0]
 810157a:	e00a      	b.n	8101592 <calcArray+0xbe>
    } else {
        calcStack[sp] = *((unsigned char*)(void*)p);
 810157c:	68bb      	ldr	r3, [r7, #8]
 810157e:	7819      	ldrb	r1, [r3, #0]
 8101580:	4b05      	ldr	r3, [pc, #20]	; (8101598 <calcArray+0xc4>)
 8101582:	681a      	ldr	r2, [r3, #0]
 8101584:	4b05      	ldr	r3, [pc, #20]	; (810159c <calcArray+0xc8>)
 8101586:	f9b3 3000 	ldrsh.w	r3, [r3]
 810158a:	009b      	lsls	r3, r3, #2
 810158c:	4413      	add	r3, r2
 810158e:	460a      	mov	r2, r1
 8101590:	601a      	str	r2, [r3, #0]
    }
}
 8101592:	3710      	adds	r7, #16
 8101594:	46bd      	mov	sp, r7
 8101596:	bd80      	pop	{r7, pc}
 8101598:	10004b54 	.word	0x10004b54
 810159c:	10004b5c 	.word	0x10004b5c
 81015a0:	10004b58 	.word	0x10004b58
 81015a4:	10004b5e 	.word	0x10004b5e

081015a8 <calcExpression>:

numeric calcExpression(void) {
 81015a8:	b598      	push	{r3, r4, r7, lr}
 81015aa:	af00      	add	r7, sp, #0
    while (1) {
        switch (curTok->type) {
 81015ac:	4b67      	ldr	r3, [pc, #412]	; (810174c <calcExpression+0x1a4>)
 81015ae:	681b      	ldr	r3, [r3, #0]
 81015b0:	781b      	ldrb	r3, [r3, #0]
 81015b2:	2b33      	cmp	r3, #51	; 0x33
 81015b4:	f200 80c4 	bhi.w	8101740 <calcExpression+0x198>
 81015b8:	a201      	add	r2, pc, #4	; (adr r2, 81015c0 <calcExpression+0x18>)
 81015ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81015be:	bf00      	nop
 81015c0:	08101691 	.word	0x08101691
 81015c4:	08101741 	.word	0x08101741
 81015c8:	08101741 	.word	0x08101741
 81015cc:	08101741 	.word	0x08101741
 81015d0:	08101741 	.word	0x08101741
 81015d4:	08101741 	.word	0x08101741
 81015d8:	08101741 	.word	0x08101741
 81015dc:	08101741 	.word	0x08101741
 81015e0:	08101741 	.word	0x08101741
 81015e4:	08101741 	.word	0x08101741
 81015e8:	08101741 	.word	0x08101741
 81015ec:	08101741 	.word	0x08101741
 81015f0:	08101741 	.word	0x08101741
 81015f4:	08101741 	.word	0x08101741
 81015f8:	08101741 	.word	0x08101741
 81015fc:	08101741 	.word	0x08101741
 8101600:	081016b1 	.word	0x081016b1
 8101604:	08101741 	.word	0x08101741
 8101608:	08101741 	.word	0x08101741
 810160c:	08101741 	.word	0x08101741
 8101610:	08101741 	.word	0x08101741
 8101614:	08101741 	.word	0x08101741
 8101618:	08101741 	.word	0x08101741
 810161c:	08101741 	.word	0x08101741
 8101620:	08101741 	.word	0x08101741
 8101624:	08101741 	.word	0x08101741
 8101628:	08101741 	.word	0x08101741
 810162c:	08101741 	.word	0x08101741
 8101630:	08101741 	.word	0x08101741
 8101634:	08101741 	.word	0x08101741
 8101638:	08101741 	.word	0x08101741
 810163c:	08101741 	.word	0x08101741
 8101640:	08101741 	.word	0x08101741
 8101644:	08101741 	.word	0x08101741
 8101648:	081016dd 	.word	0x081016dd
 810164c:	08101725 	.word	0x08101725
 8101650:	08101741 	.word	0x08101741
 8101654:	08101741 	.word	0x08101741
 8101658:	08101741 	.word	0x08101741
 810165c:	08101741 	.word	0x08101741
 8101660:	08101741 	.word	0x08101741
 8101664:	08101741 	.word	0x08101741
 8101668:	08101741 	.word	0x08101741
 810166c:	08101741 	.word	0x08101741
 8101670:	08101741 	.word	0x08101741
 8101674:	08101741 	.word	0x08101741
 8101678:	08101741 	.word	0x08101741
 810167c:	08101741 	.word	0x08101741
 8101680:	08101717 	.word	0x08101717
 8101684:	08101741 	.word	0x08101741
 8101688:	08101691 	.word	0x08101691
 810168c:	08101733 	.word	0x08101733
            case TT_NONE:
            case TT_SEPARATOR:
                return calcStack[sp++];
 8101690:	4b2f      	ldr	r3, [pc, #188]	; (8101750 <calcExpression+0x1a8>)
 8101692:	681a      	ldr	r2, [r3, #0]
 8101694:	4b2f      	ldr	r3, [pc, #188]	; (8101754 <calcExpression+0x1ac>)
 8101696:	f9b3 1000 	ldrsh.w	r1, [r3]
 810169a:	b28b      	uxth	r3, r1
 810169c:	3301      	adds	r3, #1
 810169e:	b29b      	uxth	r3, r3
 81016a0:	b218      	sxth	r0, r3
 81016a2:	4b2c      	ldr	r3, [pc, #176]	; (8101754 <calcExpression+0x1ac>)
 81016a4:	8018      	strh	r0, [r3, #0]
 81016a6:	460b      	mov	r3, r1
 81016a8:	009b      	lsls	r3, r3, #2
 81016aa:	4413      	add	r3, r2
 81016ac:	681b      	ldr	r3, [r3, #0]
 81016ae:	e04a      	b.n	8101746 <calcExpression+0x19e>
            case TT_NUMBER:
                calcStack[--sp] = curTok->body.integer;
 81016b0:	4b26      	ldr	r3, [pc, #152]	; (810174c <calcExpression+0x1a4>)
 81016b2:	681a      	ldr	r2, [r3, #0]
 81016b4:	4b26      	ldr	r3, [pc, #152]	; (8101750 <calcExpression+0x1a8>)
 81016b6:	6819      	ldr	r1, [r3, #0]
 81016b8:	4b26      	ldr	r3, [pc, #152]	; (8101754 <calcExpression+0x1ac>)
 81016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 81016be:	b29b      	uxth	r3, r3
 81016c0:	3b01      	subs	r3, #1
 81016c2:	b29b      	uxth	r3, r3
 81016c4:	b218      	sxth	r0, r3
 81016c6:	4b23      	ldr	r3, [pc, #140]	; (8101754 <calcExpression+0x1ac>)
 81016c8:	8018      	strh	r0, [r3, #0]
 81016ca:	4b22      	ldr	r3, [pc, #136]	; (8101754 <calcExpression+0x1ac>)
 81016cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 81016d0:	009b      	lsls	r3, r3, #2
 81016d2:	440b      	add	r3, r1
 81016d4:	f8d2 2001 	ldr.w	r2, [r2, #1]
 81016d8:	601a      	str	r2, [r3, #0]
                break;
 81016da:	e031      	b.n	8101740 <calcExpression+0x198>
            case TT_VARIABLE:
                calcStack[--sp] = getVar(shortVarName(&(curTok->body.str)));
 81016dc:	4b1b      	ldr	r3, [pc, #108]	; (810174c <calcExpression+0x1a4>)
 81016de:	681b      	ldr	r3, [r3, #0]
 81016e0:	3301      	adds	r3, #1
 81016e2:	4618      	mov	r0, r3
 81016e4:	f7ff f9b8 	bl	8100a58 <shortVarName>
 81016e8:	4603      	mov	r3, r0
 81016ea:	4618      	mov	r0, r3
 81016ec:	4b18      	ldr	r3, [pc, #96]	; (8101750 <calcExpression+0x1a8>)
 81016ee:	681a      	ldr	r2, [r3, #0]
 81016f0:	4b18      	ldr	r3, [pc, #96]	; (8101754 <calcExpression+0x1ac>)
 81016f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 81016f6:	b29b      	uxth	r3, r3
 81016f8:	3b01      	subs	r3, #1
 81016fa:	b29b      	uxth	r3, r3
 81016fc:	b219      	sxth	r1, r3
 81016fe:	4b15      	ldr	r3, [pc, #84]	; (8101754 <calcExpression+0x1ac>)
 8101700:	8019      	strh	r1, [r3, #0]
 8101702:	4b14      	ldr	r3, [pc, #80]	; (8101754 <calcExpression+0x1ac>)
 8101704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101708:	009b      	lsls	r3, r3, #2
 810170a:	18d4      	adds	r4, r2, r3
 810170c:	f7ff fa10 	bl	8100b30 <getVar>
 8101710:	4603      	mov	r3, r0
 8101712:	6023      	str	r3, [r4, #0]
                break;
 8101714:	e014      	b.n	8101740 <calcExpression+0x198>
            case TT_SYMBOL:
                calcOperation(curTok->body.symbol);
 8101716:	4b0d      	ldr	r3, [pc, #52]	; (810174c <calcExpression+0x1a4>)
 8101718:	681b      	ldr	r3, [r3, #0]
 810171a:	785b      	ldrb	r3, [r3, #1]
 810171c:	4618      	mov	r0, r3
 810171e:	f7ff fbe7 	bl	8100ef0 <calcOperation>
                break;
 8101722:	e00d      	b.n	8101740 <calcExpression+0x198>
            case TT_FUNCTION:
                calcFunction(&(curTok->body.str));
 8101724:	4b09      	ldr	r3, [pc, #36]	; (810174c <calcExpression+0x1a4>)
 8101726:	681b      	ldr	r3, [r3, #0]
 8101728:	3301      	adds	r3, #1
 810172a:	4618      	mov	r0, r3
 810172c:	f7ff fe32 	bl	8101394 <calcFunction>
                break;
 8101730:	e006      	b.n	8101740 <calcExpression+0x198>
            case TT_ARRAY:
                calcArray(curTok->body.symbol);
 8101732:	4b06      	ldr	r3, [pc, #24]	; (810174c <calcExpression+0x1a4>)
 8101734:	681b      	ldr	r3, [r3, #0]
 8101736:	785b      	ldrb	r3, [r3, #1]
 8101738:	4618      	mov	r0, r3
 810173a:	f7ff fecb 	bl	81014d4 <calcArray>
                break;
 810173e:	bf00      	nop
        }
        advance();
 8101740:	f7ff fbc2 	bl	8100ec8 <advance>
        switch (curTok->type) {
 8101744:	e732      	b.n	81015ac <calcExpression+0x4>
    }
}
 8101746:	4618      	mov	r0, r3
 8101748:	bd98      	pop	{r3, r4, r7, pc}
 810174a:	bf00      	nop
 810174c:	10004b6c 	.word	0x10004b6c
 8101750:	10004b54 	.word	0x10004b54
 8101754:	10004b5c 	.word	0x10004b5c

08101758 <execLet>:

void execLet(void) {
 8101758:	b580      	push	{r7, lr}
 810175a:	b082      	sub	sp, #8
 810175c:	af00      	add	r7, sp, #0
    short varname = shortVarName(&(curTok->body.str));
 810175e:	4b0b      	ldr	r3, [pc, #44]	; (810178c <execLet+0x34>)
 8101760:	681b      	ldr	r3, [r3, #0]
 8101762:	3301      	adds	r3, #1
 8101764:	4618      	mov	r0, r3
 8101766:	f7ff f977 	bl	8100a58 <shortVarName>
 810176a:	4603      	mov	r3, r0
 810176c:	80fb      	strh	r3, [r7, #6]
    advance();
 810176e:	f7ff fbab 	bl	8100ec8 <advance>
    setVar(varname, calcExpression());
 8101772:	f7ff ff19 	bl	81015a8 <calcExpression>
 8101776:	4602      	mov	r2, r0
 8101778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810177c:	4611      	mov	r1, r2
 810177e:	4618      	mov	r0, r3
 8101780:	f7ff fa78 	bl	8100c74 <setVar>
}
 8101784:	bf00      	nop
 8101786:	3708      	adds	r7, #8
 8101788:	46bd      	mov	sp, r7
 810178a:	bd80      	pop	{r7, pc}
 810178c:	10004b6c 	.word	0x10004b6c

08101790 <setArray>:

void setArray(char symbol, short idx, numeric value) {
 8101790:	b580      	push	{r7, lr}
 8101792:	b084      	sub	sp, #16
 8101794:	af00      	add	r7, sp, #0
 8101796:	4603      	mov	r3, r0
 8101798:	603a      	str	r2, [r7, #0]
 810179a:	71fb      	strb	r3, [r7, #7]
 810179c:	460b      	mov	r3, r1
 810179e:	80bb      	strh	r3, [r7, #4]
    short offset = getArrayOffset(symbol);
 81017a0:	79fb      	ldrb	r3, [r7, #7]
 81017a2:	4618      	mov	r0, r3
 81017a4:	f7ff f9f2 	bl	8100b8c <getArrayOffset>
 81017a8:	4603      	mov	r3, r0
 81017aa:	81fb      	strh	r3, [r7, #14]
    if (offset == -1) {
 81017ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81017b4:	d02f      	beq.n	8101816 <setArray+0x86>
        return;
    }
    char b = (offset & 0x8000) ? 1 : sizeof(numeric);
 81017b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81017ba:	2b00      	cmp	r3, #0
 81017bc:	da01      	bge.n	81017c2 <setArray+0x32>
 81017be:	2301      	movs	r3, #1
 81017c0:	e000      	b.n	81017c4 <setArray+0x34>
 81017c2:	2304      	movs	r3, #4
 81017c4:	737b      	strb	r3, [r7, #13]
    offset = (offset & 0x7FFF) + b * idx;
 81017c6:	89fb      	ldrh	r3, [r7, #14]
 81017c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 81017cc:	b29a      	uxth	r2, r3
 81017ce:	7b7b      	ldrb	r3, [r7, #13]
 81017d0:	b299      	uxth	r1, r3
 81017d2:	88bb      	ldrh	r3, [r7, #4]
 81017d4:	fb11 f303 	smulbb	r3, r1, r3
 81017d8:	b29b      	uxth	r3, r3
 81017da:	4413      	add	r3, r2
 81017dc:	b29b      	uxth	r3, r3
 81017de:	81fb      	strh	r3, [r7, #14]
    char* p = ((char*)(void*)vars) + sizeof(varHolder) * numVars + offset;
 81017e0:	4b0f      	ldr	r3, [pc, #60]	; (8101820 <setArray+0x90>)
 81017e2:	681a      	ldr	r2, [r3, #0]
 81017e4:	4b0f      	ldr	r3, [pc, #60]	; (8101824 <setArray+0x94>)
 81017e6:	781b      	ldrb	r3, [r3, #0]
 81017e8:	4619      	mov	r1, r3
 81017ea:	460b      	mov	r3, r1
 81017ec:	005b      	lsls	r3, r3, #1
 81017ee:	440b      	add	r3, r1
 81017f0:	005b      	lsls	r3, r3, #1
 81017f2:	4619      	mov	r1, r3
 81017f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81017f8:	440b      	add	r3, r1
 81017fa:	4413      	add	r3, r2
 81017fc:	60bb      	str	r3, [r7, #8]
    if (b > 1) {
 81017fe:	7b7b      	ldrb	r3, [r7, #13]
 8101800:	2b01      	cmp	r3, #1
 8101802:	d903      	bls.n	810180c <setArray+0x7c>
        *((numeric*)(void*)p) = value;
 8101804:	68bb      	ldr	r3, [r7, #8]
 8101806:	683a      	ldr	r2, [r7, #0]
 8101808:	601a      	str	r2, [r3, #0]
 810180a:	e005      	b.n	8101818 <setArray+0x88>
    } else {
        *((unsigned char*)(void*)p) = (value & 0xFF);
 810180c:	683b      	ldr	r3, [r7, #0]
 810180e:	b2da      	uxtb	r2, r3
 8101810:	68bb      	ldr	r3, [r7, #8]
 8101812:	701a      	strb	r2, [r3, #0]
 8101814:	e000      	b.n	8101818 <setArray+0x88>
        return;
 8101816:	bf00      	nop
    }
}
 8101818:	3710      	adds	r7, #16
 810181a:	46bd      	mov	sp, r7
 810181c:	bd80      	pop	{r7, pc}
 810181e:	bf00      	nop
 8101820:	10004b58 	.word	0x10004b58
 8101824:	10004b5e 	.word	0x10004b5e

08101828 <execLeta>:

void execLeta(void) {
 8101828:	b580      	push	{r7, lr}
 810182a:	b082      	sub	sp, #8
 810182c:	af00      	add	r7, sp, #0
    char a = curTok->body.symbol;
 810182e:	4b0c      	ldr	r3, [pc, #48]	; (8101860 <execLeta+0x38>)
 8101830:	681b      	ldr	r3, [r3, #0]
 8101832:	785b      	ldrb	r3, [r3, #1]
 8101834:	71fb      	strb	r3, [r7, #7]
    advance();
 8101836:	f7ff fb47 	bl	8100ec8 <advance>
    short idx = calcExpression();
 810183a:	f7ff feb5 	bl	81015a8 <calcExpression>
 810183e:	4603      	mov	r3, r0
 8101840:	80bb      	strh	r3, [r7, #4]
    advance();
 8101842:	f7ff fb41 	bl	8100ec8 <advance>
    setArray(a, idx, calcExpression());
 8101846:	f7ff feaf 	bl	81015a8 <calcExpression>
 810184a:	4602      	mov	r2, r0
 810184c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8101850:	79fb      	ldrb	r3, [r7, #7]
 8101852:	4618      	mov	r0, r3
 8101854:	f7ff ff9c 	bl	8101790 <setArray>
}
 8101858:	bf00      	nop
 810185a:	3708      	adds	r7, #8
 810185c:	46bd      	mov	sp, r7
 810185e:	bd80      	pop	{r7, pc}
 8101860:	10004b6c 	.word	0x10004b6c

08101864 <execDim>:

void execDim(void) {
 8101864:	b580      	push	{r7, lr}
 8101866:	b082      	sub	sp, #8
 8101868:	af00      	add	r7, sp, #0
    short name = shortArrayName(curTok->body.symbol);
 810186a:	4b38      	ldr	r3, [pc, #224]	; (810194c <execDim+0xe8>)
 810186c:	681b      	ldr	r3, [r3, #0]
 810186e:	785b      	ldrb	r3, [r3, #1]
 8101870:	4618      	mov	r0, r3
 8101872:	f7ff f90f 	bl	8100a94 <shortArrayName>
 8101876:	4603      	mov	r3, r0
 8101878:	80bb      	strh	r3, [r7, #4]
    lastDim = curTok->body.symbol & 0x1F;
 810187a:	4b34      	ldr	r3, [pc, #208]	; (810194c <execDim+0xe8>)
 810187c:	681b      	ldr	r3, [r3, #0]
 810187e:	785b      	ldrb	r3, [r3, #1]
 8101880:	f003 031f 	and.w	r3, r3, #31
 8101884:	4a32      	ldr	r2, [pc, #200]	; (8101950 <execDim+0xec>)
 8101886:	6013      	str	r3, [r2, #0]
    advance();
 8101888:	f7ff fb1e 	bl	8100ec8 <advance>
    short len = curTok->body.integer;
 810188c:	4b2f      	ldr	r3, [pc, #188]	; (810194c <execDim+0xe8>)
 810188e:	681b      	ldr	r3, [r3, #0]
 8101890:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8101894:	807b      	strh	r3, [r7, #2]
    advance();
 8101896:	f7ff fb17 	bl	8100ec8 <advance>
    char itemSize;
    if (curTok->type == TT_NONE) {
 810189a:	4b2c      	ldr	r3, [pc, #176]	; (810194c <execDim+0xe8>)
 810189c:	681b      	ldr	r3, [r3, #0]
 810189e:	781b      	ldrb	r3, [r3, #0]
 81018a0:	2b00      	cmp	r3, #0
 81018a2:	d102      	bne.n	81018aa <execDim+0x46>
        itemSize = sizeof(numeric);
 81018a4:	2304      	movs	r3, #4
 81018a6:	71fb      	strb	r3, [r7, #7]
 81018a8:	e003      	b.n	81018b2 <execDim+0x4e>
    } else {
        advance();
 81018aa:	f7ff fb0d 	bl	8100ec8 <advance>
        itemSize = 1;
 81018ae:	2301      	movs	r3, #1
 81018b0:	71fb      	strb	r3, [r7, #7]
    }
    char pos = findVar(name);
 81018b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 81018b6:	4618      	mov	r0, r3
 81018b8:	f7ff f8fc 	bl	8100ab4 <findVar>
 81018bc:	4603      	mov	r3, r0
 81018be:	707b      	strb	r3, [r7, #1]
    if (vars[pos].name == name) {
 81018c0:	4b24      	ldr	r3, [pc, #144]	; (8101954 <execDim+0xf0>)
 81018c2:	6819      	ldr	r1, [r3, #0]
 81018c4:	787a      	ldrb	r2, [r7, #1]
 81018c6:	4613      	mov	r3, r2
 81018c8:	005b      	lsls	r3, r3, #1
 81018ca:	4413      	add	r3, r2
 81018cc:	005b      	lsls	r3, r3, #1
 81018ce:	440b      	add	r3, r1
 81018d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 81018d4:	b21b      	sxth	r3, r3
 81018d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 81018da:	429a      	cmp	r2, r3
 81018dc:	d030      	beq.n	8101940 <execDim+0xdc>
        return;
    }
    if (checkLowVarsMemory(sizeof(varHolder) + len * itemSize)) {
 81018de:	79fb      	ldrb	r3, [r7, #7]
 81018e0:	b29a      	uxth	r2, r3
 81018e2:	887b      	ldrh	r3, [r7, #2]
 81018e4:	fb12 f303 	smulbb	r3, r2, r3
 81018e8:	b29b      	uxth	r3, r3
 81018ea:	3306      	adds	r3, #6
 81018ec:	b29b      	uxth	r3, r3
 81018ee:	b21b      	sxth	r3, r3
 81018f0:	4618      	mov	r0, r3
 81018f2:	f7ff f981 	bl	8100bf8 <checkLowVarsMemory>
 81018f6:	4603      	mov	r3, r0
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d123      	bne.n	8101944 <execDim+0xe0>
        return;
    }
    setVar(name, arrayBytes | (itemSize == 1 ? 0x8000 : 0));
 81018fc:	4b16      	ldr	r3, [pc, #88]	; (8101958 <execDim+0xf4>)
 81018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101902:	461a      	mov	r2, r3
 8101904:	79fb      	ldrb	r3, [r7, #7]
 8101906:	2b01      	cmp	r3, #1
 8101908:	d102      	bne.n	8101910 <execDim+0xac>
 810190a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810190e:	e000      	b.n	8101912 <execDim+0xae>
 8101910:	2300      	movs	r3, #0
 8101912:	431a      	orrs	r2, r3
 8101914:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8101918:	4611      	mov	r1, r2
 810191a:	4618      	mov	r0, r3
 810191c:	f7ff f9aa 	bl	8100c74 <setVar>
    arrayBytes += len * itemSize;
 8101920:	79fb      	ldrb	r3, [r7, #7]
 8101922:	b29a      	uxth	r2, r3
 8101924:	887b      	ldrh	r3, [r7, #2]
 8101926:	fb12 f303 	smulbb	r3, r2, r3
 810192a:	b29a      	uxth	r2, r3
 810192c:	4b0a      	ldr	r3, [pc, #40]	; (8101958 <execDim+0xf4>)
 810192e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101932:	b29b      	uxth	r3, r3
 8101934:	4413      	add	r3, r2
 8101936:	b29b      	uxth	r3, r3
 8101938:	b21a      	sxth	r2, r3
 810193a:	4b07      	ldr	r3, [pc, #28]	; (8101958 <execDim+0xf4>)
 810193c:	801a      	strh	r2, [r3, #0]
 810193e:	e002      	b.n	8101946 <execDim+0xe2>
        return;
 8101940:	bf00      	nop
 8101942:	e000      	b.n	8101946 <execDim+0xe2>
        return;
 8101944:	bf00      	nop
}
 8101946:	3708      	adds	r7, #8
 8101948:	46bd      	mov	sp, r7
 810194a:	bd80      	pop	{r7, pc}
 810194c:	10004b6c 	.word	0x10004b6c
 8101950:	10004b60 	.word	0x10004b60
 8101954:	10004b58 	.word	0x10004b58
 8101958:	10004b52 	.word	0x10004b52

0810195c <execData>:

void execData(void) {
 810195c:	b580      	push	{r7, lr}
 810195e:	b082      	sub	sp, #8
 8101960:	af00      	add	r7, sp, #0
    char a = (lastDim & 0x1F) | 0x40; // capital letter
 8101962:	4b29      	ldr	r3, [pc, #164]	; (8101a08 <execData+0xac>)
 8101964:	681b      	ldr	r3, [r3, #0]
 8101966:	b25b      	sxtb	r3, r3
 8101968:	f003 031f 	and.w	r3, r3, #31
 810196c:	b25b      	sxtb	r3, r3
 810196e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101972:	b25b      	sxtb	r3, r3
 8101974:	71bb      	strb	r3, [r7, #6]
    char i;
    if (a < 'A' || a > 'Z') {
 8101976:	79bb      	ldrb	r3, [r7, #6]
 8101978:	2b40      	cmp	r3, #64	; 0x40
 810197a:	d940      	bls.n	81019fe <execData+0xa2>
 810197c:	79bb      	ldrb	r3, [r7, #6]
 810197e:	2b5a      	cmp	r3, #90	; 0x5a
 8101980:	d83d      	bhi.n	81019fe <execData+0xa2>
        return;
    }
    do {
        if (curTok->type == TT_NUMBER) {
 8101982:	4b22      	ldr	r3, [pc, #136]	; (8101a0c <execData+0xb0>)
 8101984:	681b      	ldr	r3, [r3, #0]
 8101986:	781b      	ldrb	r3, [r3, #0]
 8101988:	2b10      	cmp	r3, #16
 810198a:	d111      	bne.n	81019b0 <execData+0x54>
            setArray(a, lastDim >> 5, curTok->body.integer);
 810198c:	4b1e      	ldr	r3, [pc, #120]	; (8101a08 <execData+0xac>)
 810198e:	681b      	ldr	r3, [r3, #0]
 8101990:	115b      	asrs	r3, r3, #5
 8101992:	b219      	sxth	r1, r3
 8101994:	4b1d      	ldr	r3, [pc, #116]	; (8101a0c <execData+0xb0>)
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	f8d3 2001 	ldr.w	r2, [r3, #1]
 810199c:	79bb      	ldrb	r3, [r7, #6]
 810199e:	4618      	mov	r0, r3
 81019a0:	f7ff fef6 	bl	8101790 <setArray>
            lastDim += (1 << 5);
 81019a4:	4b18      	ldr	r3, [pc, #96]	; (8101a08 <execData+0xac>)
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	3320      	adds	r3, #32
 81019aa:	4a17      	ldr	r2, [pc, #92]	; (8101a08 <execData+0xac>)
 81019ac:	6013      	str	r3, [r2, #0]
 81019ae:	e01e      	b.n	81019ee <execData+0x92>
        } else {
            for (i = 0; i < curTok->body.str.len; i += 1) {
 81019b0:	2300      	movs	r3, #0
 81019b2:	71fb      	strb	r3, [r7, #7]
 81019b4:	e015      	b.n	81019e2 <execData+0x86>
                setArray(a, lastDim >> 5, curTok->body.str.text[i]);
 81019b6:	4b14      	ldr	r3, [pc, #80]	; (8101a08 <execData+0xac>)
 81019b8:	681b      	ldr	r3, [r3, #0]
 81019ba:	115b      	asrs	r3, r3, #5
 81019bc:	b219      	sxth	r1, r3
 81019be:	4b13      	ldr	r3, [pc, #76]	; (8101a0c <execData+0xb0>)
 81019c0:	681a      	ldr	r2, [r3, #0]
 81019c2:	79fb      	ldrb	r3, [r7, #7]
 81019c4:	4413      	add	r3, r2
 81019c6:	789b      	ldrb	r3, [r3, #2]
 81019c8:	461a      	mov	r2, r3
 81019ca:	79bb      	ldrb	r3, [r7, #6]
 81019cc:	4618      	mov	r0, r3
 81019ce:	f7ff fedf 	bl	8101790 <setArray>
                lastDim += (1 << 5);
 81019d2:	4b0d      	ldr	r3, [pc, #52]	; (8101a08 <execData+0xac>)
 81019d4:	681b      	ldr	r3, [r3, #0]
 81019d6:	3320      	adds	r3, #32
 81019d8:	4a0b      	ldr	r2, [pc, #44]	; (8101a08 <execData+0xac>)
 81019da:	6013      	str	r3, [r2, #0]
            for (i = 0; i < curTok->body.str.len; i += 1) {
 81019dc:	79fb      	ldrb	r3, [r7, #7]
 81019de:	3301      	adds	r3, #1
 81019e0:	71fb      	strb	r3, [r7, #7]
 81019e2:	4b0a      	ldr	r3, [pc, #40]	; (8101a0c <execData+0xb0>)
 81019e4:	681b      	ldr	r3, [r3, #0]
 81019e6:	785b      	ldrb	r3, [r3, #1]
 81019e8:	79fa      	ldrb	r2, [r7, #7]
 81019ea:	429a      	cmp	r2, r3
 81019ec:	d3e3      	bcc.n	81019b6 <execData+0x5a>
            }
        }
        advance();
 81019ee:	f7ff fa6b 	bl	8100ec8 <advance>
    } while (curTok->type != TT_NONE);
 81019f2:	4b06      	ldr	r3, [pc, #24]	; (8101a0c <execData+0xb0>)
 81019f4:	681b      	ldr	r3, [r3, #0]
 81019f6:	781b      	ldrb	r3, [r3, #0]
 81019f8:	2b00      	cmp	r3, #0
 81019fa:	d1c2      	bne.n	8101982 <execData+0x26>
 81019fc:	e000      	b.n	8101a00 <execData+0xa4>
        return;
 81019fe:	bf00      	nop
}
 8101a00:	3708      	adds	r7, #8
 8101a02:	46bd      	mov	sp, r7
 8101a04:	bd80      	pop	{r7, pc}
 8101a06:	bf00      	nop
 8101a08:	10004b60 	.word	0x10004b60
 8101a0c:	10004b6c 	.word	0x10004b6c

08101a10 <setDelay>:

void setDelay(numeric millis) {
 8101a10:	b480      	push	{r7}
 8101a12:	b083      	sub	sp, #12
 8101a14:	af00      	add	r7, sp, #0
 8101a16:	6078      	str	r0, [r7, #4]
    delayT0 = 1; //sysMillis(1);
 8101a18:	4b05      	ldr	r3, [pc, #20]	; (8101a30 <setDelay+0x20>)
 8101a1a:	2201      	movs	r2, #1
 8101a1c:	601a      	str	r2, [r3, #0]
    delayLimit = millis;
 8101a1e:	4a05      	ldr	r2, [pc, #20]	; (8101a34 <setDelay+0x24>)
 8101a20:	687b      	ldr	r3, [r7, #4]
 8101a22:	6013      	str	r3, [r2, #0]
}
 8101a24:	bf00      	nop
 8101a26:	370c      	adds	r7, #12
 8101a28:	46bd      	mov	sp, r7
 8101a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a2e:	4770      	bx	lr
 8101a30:	100000e8 	.word	0x100000e8
 8101a34:	100000ec 	.word	0x100000ec

08101a38 <execDelay>:

void execDelay(void) {
 8101a38:	b580      	push	{r7, lr}
 8101a3a:	af00      	add	r7, sp, #0
    setDelay(calcExpression());
 8101a3c:	f7ff fdb4 	bl	81015a8 <calcExpression>
 8101a40:	4603      	mov	r3, r0
 8101a42:	4618      	mov	r0, r3
 8101a44:	f7ff ffe4 	bl	8101a10 <setDelay>
    mainState |= STATE_DELAY;
 8101a48:	4b04      	ldr	r3, [pc, #16]	; (8101a5c <execDelay+0x24>)
 8101a4a:	781b      	ldrb	r3, [r3, #0]
 8101a4c:	f043 0301 	orr.w	r3, r3, #1
 8101a50:	b2da      	uxtb	r2, r3
 8101a52:	4b02      	ldr	r3, [pc, #8]	; (8101a5c <execDelay+0x24>)
 8101a54:	701a      	strb	r2, [r3, #0]
}
 8101a56:	bf00      	nop
 8101a58:	bd80      	pop	{r7, pc}
 8101a5a:	bf00      	nop
 8101a5c:	10004b94 	.word	0x10004b94

08101a60 <checkDelay>:

char checkDelay() {
 8101a60:	b480      	push	{r7}
 8101a62:	af00      	add	r7, sp, #0
    return 1;
 8101a64:	2301      	movs	r3, #1
	//return sysMillis(1) - delayT0 > delayLimit;

}
 8101a66:	4618      	mov	r0, r3
 8101a68:	46bd      	mov	sp, r7
 8101a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a6e:	4770      	bx	lr

08101a70 <dispatchDelay>:

void dispatchDelay() {
 8101a70:	b580      	push	{r7, lr}
 8101a72:	af00      	add	r7, sp, #0
    if (checkDelay()) {
 8101a74:	f7ff fff4 	bl	8101a60 <checkDelay>
 8101a78:	4603      	mov	r3, r0
 8101a7a:	2b00      	cmp	r3, #0
 8101a7c:	d006      	beq.n	8101a8c <dispatchDelay+0x1c>
        mainState &= ~STATE_DELAY;
 8101a7e:	4b04      	ldr	r3, [pc, #16]	; (8101a90 <dispatchDelay+0x20>)
 8101a80:	781b      	ldrb	r3, [r3, #0]
 8101a82:	f023 0301 	bic.w	r3, r3, #1
 8101a86:	b2da      	uxtb	r2, r3
 8101a88:	4b01      	ldr	r3, [pc, #4]	; (8101a90 <dispatchDelay+0x20>)
 8101a8a:	701a      	strb	r2, [r3, #0]
    }
}
 8101a8c:	bf00      	nop
 8101a8e:	bd80      	pop	{r7, pc}
 8101a90:	10004b94 	.word	0x10004b94

08101a94 <execRem>:

void execRem(void) {
 8101a94:	b580      	push	{r7, lr}
 8101a96:	af00      	add	r7, sp, #0
    while (curTok->type != TT_NONE) {
 8101a98:	e001      	b.n	8101a9e <execRem+0xa>
        advance();
 8101a9a:	f7ff fa15 	bl	8100ec8 <advance>
    while (curTok->type != TT_NONE) {
 8101a9e:	4b04      	ldr	r3, [pc, #16]	; (8101ab0 <execRem+0x1c>)
 8101aa0:	681b      	ldr	r3, [r3, #0]
 8101aa2:	781b      	ldrb	r3, [r3, #0]
 8101aa4:	2b00      	cmp	r3, #0
 8101aa6:	d1f8      	bne.n	8101a9a <execRem+0x6>
    }
}
 8101aa8:	bf00      	nop
 8101aaa:	bf00      	nop
 8101aac:	bd80      	pop	{r7, pc}
 8101aae:	bf00      	nop
 8101ab0:	10004b6c 	.word	0x10004b6c

08101ab4 <execPrint>:

void execPrint(void) {
 8101ab4:	b580      	push	{r7, lr}
 8101ab6:	af00      	add	r7, sp, #0
    while (1) {
        switch (curTok->type) {
 8101ab8:	4b10      	ldr	r3, [pc, #64]	; (8101afc <execPrint+0x48>)
 8101aba:	681b      	ldr	r3, [r3, #0]
 8101abc:	781b      	ldrb	r3, [r3, #0]
 8101abe:	2b40      	cmp	r3, #64	; 0x40
 8101ac0:	d009      	beq.n	8101ad6 <execPrint+0x22>
 8101ac2:	2b40      	cmp	r3, #64	; 0x40
 8101ac4:	dc0e      	bgt.n	8101ae4 <execPrint+0x30>
 8101ac6:	2b00      	cmp	r3, #0
 8101ac8:	d002      	beq.n	8101ad0 <execPrint+0x1c>
 8101aca:	2b32      	cmp	r3, #50	; 0x32
 8101acc:	d011      	beq.n	8101af2 <execPrint+0x3e>
 8101ace:	e009      	b.n	8101ae4 <execPrint+0x30>
            case TT_NONE:
                outputCr();
 8101ad0:	f001 ffdc 	bl	8103a8c <outputCr>
                return;
 8101ad4:	e011      	b.n	8101afa <execPrint+0x46>
            case TT_SEPARATOR:
                break;
            case TT_LITERAL:
                outputNStr(&(curTok->body.str));
 8101ad6:	4b09      	ldr	r3, [pc, #36]	; (8101afc <execPrint+0x48>)
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	3301      	adds	r3, #1
 8101adc:	4618      	mov	r0, r3
 8101ade:	f001 ff11 	bl	8103904 <outputNStr>
                break;
 8101ae2:	e007      	b.n	8101af4 <execPrint+0x40>
            default:
                outputInt(calcExpression());
 8101ae4:	f7ff fd60 	bl	81015a8 <calcExpression>
 8101ae8:	4603      	mov	r3, r0
 8101aea:	4618      	mov	r0, r3
 8101aec:	f001 ff2a 	bl	8103944 <outputInt>
                break;
 8101af0:	e000      	b.n	8101af4 <execPrint+0x40>
                break;
 8101af2:	bf00      	nop
        }
        advance();
 8101af4:	f7ff f9e8 	bl	8100ec8 <advance>
        switch (curTok->type) {
 8101af8:	e7de      	b.n	8101ab8 <execPrint+0x4>
    }
}
 8101afa:	bd80      	pop	{r7, pc}
 8101afc:	10004b6c 	.word	0x10004b6c

08101b00 <execInput>:

void execInput(void) {
 8101b00:	b580      	push	{r7, lr}
 8101b02:	af00      	add	r7, sp, #0
    mainState |= STATE_INPUT;
 8101b04:	4b0a      	ldr	r3, [pc, #40]	; (8101b30 <execInput+0x30>)
 8101b06:	781b      	ldrb	r3, [r3, #0]
 8101b08:	f043 0302 	orr.w	r3, r3, #2
 8101b0c:	b2da      	uxtb	r2, r3
 8101b0e:	4b08      	ldr	r3, [pc, #32]	; (8101b30 <execInput+0x30>)
 8101b10:	701a      	strb	r2, [r3, #0]
    outputChar('?');
 8101b12:	203f      	movs	r0, #63	; 0x3f
 8101b14:	f001 fed4 	bl	81038c0 <outputChar>
    outputChar(curTok->body.str.text[0]);
 8101b18:	4b06      	ldr	r3, [pc, #24]	; (8101b34 <execInput+0x34>)
 8101b1a:	681b      	ldr	r3, [r3, #0]
 8101b1c:	789b      	ldrb	r3, [r3, #2]
 8101b1e:	4618      	mov	r0, r3
 8101b20:	f001 fece 	bl	81038c0 <outputChar>
    outputChar('=');
 8101b24:	203d      	movs	r0, #61	; 0x3d
 8101b26:	f001 fecb 	bl	81038c0 <outputChar>
}
 8101b2a:	bf00      	nop
 8101b2c:	bd80      	pop	{r7, pc}
 8101b2e:	bf00      	nop
 8101b30:	10004b94 	.word	0x10004b94
 8101b34:	10004b6c 	.word	0x10004b6c

08101b38 <dispatchInput>:

void dispatchInput() {
 8101b38:	b598      	push	{r3, r4, r7, lr}
 8101b3a:	af00      	add	r7, sp, #0
    if (lastInput == 0) {
 8101b3c:	4b13      	ldr	r3, [pc, #76]	; (8101b8c <dispatchInput+0x54>)
 8101b3e:	781b      	ldrb	r3, [r3, #0]
 8101b40:	2b00      	cmp	r3, #0
 8101b42:	d01e      	beq.n	8101b82 <dispatchInput+0x4a>
        return;
    }
    if (!readLine()) {
 8101b44:	f7fe fd6a 	bl	810061c <readLine>
 8101b48:	4603      	mov	r3, r0
 8101b4a:	2b00      	cmp	r3, #0
 8101b4c:	d01b      	beq.n	8101b86 <dispatchInput+0x4e>
        return;
    }
    setVar(shortVarName(&(curTok->body.str)), decFromStr(lineSpace));
 8101b4e:	4b10      	ldr	r3, [pc, #64]	; (8101b90 <dispatchInput+0x58>)
 8101b50:	681b      	ldr	r3, [r3, #0]
 8101b52:	3301      	adds	r3, #1
 8101b54:	4618      	mov	r0, r3
 8101b56:	f7fe ff7f 	bl	8100a58 <shortVarName>
 8101b5a:	4603      	mov	r3, r0
 8101b5c:	461c      	mov	r4, r3
 8101b5e:	480d      	ldr	r0, [pc, #52]	; (8101b94 <dispatchInput+0x5c>)
 8101b60:	f001 ff38 	bl	81039d4 <decFromStr>
 8101b64:	4603      	mov	r3, r0
 8101b66:	4619      	mov	r1, r3
 8101b68:	4620      	mov	r0, r4
 8101b6a:	f7ff f883 	bl	8100c74 <setVar>
    advance();
 8101b6e:	f7ff f9ab 	bl	8100ec8 <advance>
    mainState &= ~STATE_INPUT;
 8101b72:	4b09      	ldr	r3, [pc, #36]	; (8101b98 <dispatchInput+0x60>)
 8101b74:	781b      	ldrb	r3, [r3, #0]
 8101b76:	f023 0302 	bic.w	r3, r3, #2
 8101b7a:	b2da      	uxtb	r2, r3
 8101b7c:	4b06      	ldr	r3, [pc, #24]	; (8101b98 <dispatchInput+0x60>)
 8101b7e:	701a      	strb	r2, [r3, #0]
 8101b80:	e002      	b.n	8101b88 <dispatchInput+0x50>
        return;
 8101b82:	bf00      	nop
 8101b84:	e000      	b.n	8101b88 <dispatchInput+0x50>
        return;
 8101b86:	bf00      	nop
}
 8101b88:	bd98      	pop	{r3, r4, r7, pc}
 8101b8a:	bf00      	nop
 8101b8c:	10004b44 	.word	0x10004b44
 8101b90:	10004b6c 	.word	0x10004b6c
 8101b94:	10004ac8 	.word	0x10004ac8
 8101b98:	10004b94 	.word	0x10004b94

08101b9c <execEmit>:

void execEmit(void) {
 8101b9c:	b580      	push	{r7, lr}
 8101b9e:	af00      	add	r7, sp, #0
    while (1) {
        switch (curTok->type) {
 8101ba0:	4b0a      	ldr	r3, [pc, #40]	; (8101bcc <execEmit+0x30>)
 8101ba2:	681b      	ldr	r3, [r3, #0]
 8101ba4:	781b      	ldrb	r3, [r3, #0]
 8101ba6:	2b00      	cmp	r3, #0
 8101ba8:	d00d      	beq.n	8101bc6 <execEmit+0x2a>
 8101baa:	2b32      	cmp	r3, #50	; 0x32
 8101bac:	d007      	beq.n	8101bbe <execEmit+0x22>
            case TT_NONE:
                return;
            case TT_SEPARATOR:
                break;
            default:
                outputChar(calcExpression() & 0xFF);
 8101bae:	f7ff fcfb 	bl	81015a8 <calcExpression>
 8101bb2:	4603      	mov	r3, r0
 8101bb4:	b2db      	uxtb	r3, r3
 8101bb6:	4618      	mov	r0, r3
 8101bb8:	f001 fe82 	bl	81038c0 <outputChar>
                break;
 8101bbc:	e000      	b.n	8101bc0 <execEmit+0x24>
                break;
 8101bbe:	bf00      	nop
        }
        advance();
 8101bc0:	f7ff f982 	bl	8100ec8 <advance>
        switch (curTok->type) {
 8101bc4:	e7ec      	b.n	8101ba0 <execEmit+0x4>
                return;
 8101bc6:	bf00      	nop
    }
}
 8101bc8:	bd80      	pop	{r7, pc}
 8101bca:	bf00      	nop
 8101bcc:	10004b6c 	.word	0x10004b6c

08101bd0 <execIf>:

void execIf(void) {
 8101bd0:	b580      	push	{r7, lr}
 8101bd2:	af00      	add	r7, sp, #0
    if (calcExpression() == 0) {
 8101bd4:	f7ff fce8 	bl	81015a8 <calcExpression>
 8101bd8:	4603      	mov	r3, r0
 8101bda:	2b00      	cmp	r3, #0
 8101bdc:	d108      	bne.n	8101bf0 <execIf+0x20>
        while (curTok->type != TT_NONE) {
 8101bde:	e001      	b.n	8101be4 <execIf+0x14>
            advance();
 8101be0:	f7ff f972 	bl	8100ec8 <advance>
        while (curTok->type != TT_NONE) {
 8101be4:	4b04      	ldr	r3, [pc, #16]	; (8101bf8 <execIf+0x28>)
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	781b      	ldrb	r3, [r3, #0]
 8101bea:	2b00      	cmp	r3, #0
 8101bec:	d1f8      	bne.n	8101be0 <execIf+0x10>
        }
    } else {
        advance();
    }
}
 8101bee:	e001      	b.n	8101bf4 <execIf+0x24>
        advance();
 8101bf0:	f7ff f96a 	bl	8100ec8 <advance>
}
 8101bf4:	bf00      	nop
 8101bf6:	bd80      	pop	{r7, pc}
 8101bf8:	10004b6c 	.word	0x10004b6c

08101bfc <execGoto>:

void execGoto(void) {
 8101bfc:	b580      	push	{r7, lr}
 8101bfe:	af00      	add	r7, sp, #0
    nextLineNum = curTok->body.integer;
 8101c00:	4b05      	ldr	r3, [pc, #20]	; (8101c18 <execGoto+0x1c>)
 8101c02:	681b      	ldr	r3, [r3, #0]
 8101c04:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8101c08:	b21a      	sxth	r2, r3
 8101c0a:	4b04      	ldr	r3, [pc, #16]	; (8101c1c <execGoto+0x20>)
 8101c0c:	801a      	strh	r2, [r3, #0]
    advance();
 8101c0e:	f7ff f95b 	bl	8100ec8 <advance>
}
 8101c12:	bf00      	nop
 8101c14:	bd80      	pop	{r7, pc}
 8101c16:	bf00      	nop
 8101c18:	10004b6c 	.word	0x10004b6c
 8101c1c:	10000000 	.word	0x10000000

08101c20 <execGosub>:

void execGosub(void) {
 8101c20:	b580      	push	{r7, lr}
 8101c22:	af00      	add	r7, sp, #0
    calcStack[--sp] = nextLineNum;
 8101c24:	4b0f      	ldr	r3, [pc, #60]	; (8101c64 <execGosub+0x44>)
 8101c26:	f9b3 1000 	ldrsh.w	r1, [r3]
 8101c2a:	4b0f      	ldr	r3, [pc, #60]	; (8101c68 <execGosub+0x48>)
 8101c2c:	681a      	ldr	r2, [r3, #0]
 8101c2e:	4b0f      	ldr	r3, [pc, #60]	; (8101c6c <execGosub+0x4c>)
 8101c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101c34:	b29b      	uxth	r3, r3
 8101c36:	3b01      	subs	r3, #1
 8101c38:	b29b      	uxth	r3, r3
 8101c3a:	b218      	sxth	r0, r3
 8101c3c:	4b0b      	ldr	r3, [pc, #44]	; (8101c6c <execGosub+0x4c>)
 8101c3e:	8018      	strh	r0, [r3, #0]
 8101c40:	4b0a      	ldr	r3, [pc, #40]	; (8101c6c <execGosub+0x4c>)
 8101c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101c46:	009b      	lsls	r3, r3, #2
 8101c48:	4413      	add	r3, r2
 8101c4a:	460a      	mov	r2, r1
 8101c4c:	601a      	str	r2, [r3, #0]
    nextLineNum = curTok->body.integer;
 8101c4e:	4b08      	ldr	r3, [pc, #32]	; (8101c70 <execGosub+0x50>)
 8101c50:	681b      	ldr	r3, [r3, #0]
 8101c52:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8101c56:	b21a      	sxth	r2, r3
 8101c58:	4b02      	ldr	r3, [pc, #8]	; (8101c64 <execGosub+0x44>)
 8101c5a:	801a      	strh	r2, [r3, #0]
    advance();
 8101c5c:	f7ff f934 	bl	8100ec8 <advance>
}
 8101c60:	bf00      	nop
 8101c62:	bd80      	pop	{r7, pc}
 8101c64:	10000000 	.word	0x10000000
 8101c68:	10004b54 	.word	0x10004b54
 8101c6c:	10004b5c 	.word	0x10004b5c
 8101c70:	10004b6c 	.word	0x10004b6c

08101c74 <execReturn>:

void execReturn(void) {
 8101c74:	b480      	push	{r7}
 8101c76:	af00      	add	r7, sp, #0
    nextLineNum = calcStack[sp++];
 8101c78:	4b0b      	ldr	r3, [pc, #44]	; (8101ca8 <execReturn+0x34>)
 8101c7a:	681a      	ldr	r2, [r3, #0]
 8101c7c:	4b0b      	ldr	r3, [pc, #44]	; (8101cac <execReturn+0x38>)
 8101c7e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8101c82:	b28b      	uxth	r3, r1
 8101c84:	3301      	adds	r3, #1
 8101c86:	b29b      	uxth	r3, r3
 8101c88:	b218      	sxth	r0, r3
 8101c8a:	4b08      	ldr	r3, [pc, #32]	; (8101cac <execReturn+0x38>)
 8101c8c:	8018      	strh	r0, [r3, #0]
 8101c8e:	460b      	mov	r3, r1
 8101c90:	009b      	lsls	r3, r3, #2
 8101c92:	4413      	add	r3, r2
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	b21a      	sxth	r2, r3
 8101c98:	4b05      	ldr	r3, [pc, #20]	; (8101cb0 <execReturn+0x3c>)
 8101c9a:	801a      	strh	r2, [r3, #0]
}
 8101c9c:	bf00      	nop
 8101c9e:	46bd      	mov	sp, r7
 8101ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ca4:	4770      	bx	lr
 8101ca6:	bf00      	nop
 8101ca8:	10004b54 	.word	0x10004b54
 8101cac:	10004b5c 	.word	0x10004b5c
 8101cb0:	10000000 	.word	0x10000000

08101cb4 <execEnd>:

void execEnd(void) {
 8101cb4:	b480      	push	{r7}
 8101cb6:	af00      	add	r7, sp, #0
    nextLineNum = 32767;
 8101cb8:	4b04      	ldr	r3, [pc, #16]	; (8101ccc <execEnd+0x18>)
 8101cba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8101cbe:	801a      	strh	r2, [r3, #0]
}
 8101cc0:	bf00      	nop
 8101cc2:	46bd      	mov	sp, r7
 8101cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cc8:	4770      	bx	lr
 8101cca:	bf00      	nop
 8101ccc:	10000000 	.word	0x10000000

08101cd0 <execExtra>:

void execExtra(char cmd) {
 8101cd0:	b590      	push	{r4, r7, lr}
 8101cd2:	b085      	sub	sp, #20
 8101cd4:	af00      	add	r7, sp, #0
 8101cd6:	4603      	mov	r3, r0
 8101cd8:	71fb      	strb	r3, [r7, #7]
    char n = extraCmdArgCnt[cmd];
 8101cda:	79fb      	ldrb	r3, [r7, #7]
 8101cdc:	4a21      	ldr	r2, [pc, #132]	; (8101d64 <execExtra+0x94>)
 8101cde:	5cd3      	ldrb	r3, [r2, r3]
 8101ce0:	73bb      	strb	r3, [r7, #14]
    char i;
    sp -= n;
 8101ce2:	4b21      	ldr	r3, [pc, #132]	; (8101d68 <execExtra+0x98>)
 8101ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101ce8:	b29a      	uxth	r2, r3
 8101cea:	7bbb      	ldrb	r3, [r7, #14]
 8101cec:	b29b      	uxth	r3, r3
 8101cee:	1ad3      	subs	r3, r2, r3
 8101cf0:	b29b      	uxth	r3, r3
 8101cf2:	b21a      	sxth	r2, r3
 8101cf4:	4b1c      	ldr	r3, [pc, #112]	; (8101d68 <execExtra+0x98>)
 8101cf6:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < n; i++) {
 8101cf8:	2300      	movs	r3, #0
 8101cfa:	73fb      	strb	r3, [r7, #15]
 8101cfc:	e012      	b.n	8101d24 <execExtra+0x54>
        calcStack[sp + i] = calcExpression();
 8101cfe:	4b1b      	ldr	r3, [pc, #108]	; (8101d6c <execExtra+0x9c>)
 8101d00:	681a      	ldr	r2, [r3, #0]
 8101d02:	4b19      	ldr	r3, [pc, #100]	; (8101d68 <execExtra+0x98>)
 8101d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101d08:	4619      	mov	r1, r3
 8101d0a:	7bfb      	ldrb	r3, [r7, #15]
 8101d0c:	440b      	add	r3, r1
 8101d0e:	009b      	lsls	r3, r3, #2
 8101d10:	18d4      	adds	r4, r2, r3
 8101d12:	f7ff fc49 	bl	81015a8 <calcExpression>
 8101d16:	4603      	mov	r3, r0
 8101d18:	6023      	str	r3, [r4, #0]
        advance();
 8101d1a:	f7ff f8d5 	bl	8100ec8 <advance>
    for (i = 0; i < n; i++) {
 8101d1e:	7bfb      	ldrb	r3, [r7, #15]
 8101d20:	3301      	adds	r3, #1
 8101d22:	73fb      	strb	r3, [r7, #15]
 8101d24:	7bfa      	ldrb	r2, [r7, #15]
 8101d26:	7bbb      	ldrb	r3, [r7, #14]
 8101d28:	429a      	cmp	r2, r3
 8101d2a:	d3e8      	bcc.n	8101cfe <execExtra+0x2e>
    }
    extraCommand(cmd, calcStack + sp);
 8101d2c:	4b0f      	ldr	r3, [pc, #60]	; (8101d6c <execExtra+0x9c>)
 8101d2e:	681a      	ldr	r2, [r3, #0]
 8101d30:	4b0d      	ldr	r3, [pc, #52]	; (8101d68 <execExtra+0x98>)
 8101d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101d36:	009b      	lsls	r3, r3, #2
 8101d38:	441a      	add	r2, r3
 8101d3a:	79fb      	ldrb	r3, [r7, #7]
 8101d3c:	4611      	mov	r1, r2
 8101d3e:	4618      	mov	r0, r3
 8101d40:	f002 fa48 	bl	81041d4 <extraCommand>
    sp += n;
 8101d44:	7bbb      	ldrb	r3, [r7, #14]
 8101d46:	b29a      	uxth	r2, r3
 8101d48:	4b07      	ldr	r3, [pc, #28]	; (8101d68 <execExtra+0x98>)
 8101d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101d4e:	b29b      	uxth	r3, r3
 8101d50:	4413      	add	r3, r2
 8101d52:	b29b      	uxth	r3, r3
 8101d54:	b21a      	sxth	r2, r3
 8101d56:	4b04      	ldr	r3, [pc, #16]	; (8101d68 <execExtra+0x98>)
 8101d58:	801a      	strh	r2, [r3, #0]
}
 8101d5a:	bf00      	nop
 8101d5c:	3714      	adds	r7, #20
 8101d5e:	46bd      	mov	sp, r7
 8101d60:	bd90      	pop	{r4, r7, pc}
 8101d62:	bf00      	nop
 8101d64:	10000044 	.word	0x10000044
 8101d68:	10004b5c 	.word	0x10004b5c
 8101d6c:	10004b54 	.word	0x10004b54

08101d70 <executeTokens>:

void executeTokens(token* t) {
 8101d70:	b580      	push	{r7, lr}
 8101d72:	b082      	sub	sp, #8
 8101d74:	af00      	add	r7, sp, #0
 8101d76:	6078      	str	r0, [r7, #4]
    curTok = t;
 8101d78:	4a14      	ldr	r2, [pc, #80]	; (8101dcc <executeTokens+0x5c>)
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	6013      	str	r3, [r2, #0]
    while (t->type != TT_NONE) {
 8101d7e:	e01b      	b.n	8101db8 <executeTokens+0x48>
        advance();
 8101d80:	f7ff f8a2 	bl	8100ec8 <advance>
        if (t->body.command < CMD_EXTRA) {
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	785b      	ldrb	r3, [r3, #1]
 8101d88:	2b3f      	cmp	r3, #63	; 0x3f
 8101d8a:	d80b      	bhi.n	8101da4 <executeTokens+0x34>
            executors[t->body.command]();
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	785b      	ldrb	r3, [r3, #1]
 8101d90:	461a      	mov	r2, r3
 8101d92:	4b0f      	ldr	r3, [pc, #60]	; (8101dd0 <executeTokens+0x60>)
 8101d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101d98:	4798      	blx	r3
            if (t->body.command == CMD_INPUT) {
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	785b      	ldrb	r3, [r3, #1]
 8101d9e:	2b02      	cmp	r3, #2
 8101da0:	d107      	bne.n	8101db2 <executeTokens+0x42>
                break;
 8101da2:	e00e      	b.n	8101dc2 <executeTokens+0x52>
            }
        } else {
            execExtra(t->body.command - CMD_EXTRA);
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	785b      	ldrb	r3, [r3, #1]
 8101da8:	3b40      	subs	r3, #64	; 0x40
 8101daa:	b2db      	uxtb	r3, r3
 8101dac:	4618      	mov	r0, r3
 8101dae:	f7ff ff8f 	bl	8101cd0 <execExtra>
        }
        t = curTok;
 8101db2:	4b06      	ldr	r3, [pc, #24]	; (8101dcc <executeTokens+0x5c>)
 8101db4:	681b      	ldr	r3, [r3, #0]
 8101db6:	607b      	str	r3, [r7, #4]
    while (t->type != TT_NONE) {
 8101db8:	687b      	ldr	r3, [r7, #4]
 8101dba:	781b      	ldrb	r3, [r3, #0]
 8101dbc:	2b00      	cmp	r3, #0
 8101dbe:	d1df      	bne.n	8101d80 <executeTokens+0x10>
    }
}
 8101dc0:	bf00      	nop
 8101dc2:	bf00      	nop
 8101dc4:	3708      	adds	r7, #8
 8101dc6:	46bd      	mov	sp, r7
 8101dc8:	bd80      	pop	{r7, pc}
 8101dca:	bf00      	nop
 8101dcc:	10004b6c 	.word	0x10004b6c
 8101dd0:	10000004 	.word	0x10000004

08101dd4 <signalEndOfCode>:

void signalEndOfCode(void) {
 8101dd4:	b580      	push	{r7, lr}
 8101dd6:	af00      	add	r7, sp, #0
    outputConstStr(ID_COMMON_STRINGS, 5, NULL);
 8101dd8:	2200      	movs	r2, #0
 8101dda:	2105      	movs	r1, #5
 8101ddc:	2000      	movs	r0, #0
 8101dde:	f002 f943 	bl	8104068 <outputConstStr>
    outputCr();
 8101de2:	f001 fe53 	bl	8103a8c <outputCr>
}
 8101de6:	bf00      	nop
 8101de8:	bd80      	pop	{r7, pc}
	...

08101dec <stopExecution>:

void stopExecution() {
 8101dec:	b580      	push	{r7, lr}
 8101dee:	af00      	add	r7, sp, #0
    if ((mainState & STATE_RUN) != 0) {
 8101df0:	4b08      	ldr	r3, [pc, #32]	; (8101e14 <stopExecution+0x28>)
 8101df2:	781b      	ldrb	r3, [r3, #0]
 8101df4:	f003 0310 	and.w	r3, r3, #16
 8101df8:	2b00      	cmp	r3, #0
 8101dfa:	d001      	beq.n	8101e00 <stopExecution+0x14>
        editorLoad();
 8101dfc:	f7fe fd4e 	bl	810089c <editorLoad>
    }
    mainState &= ~(STATE_RUN | STATE_STEPS | STATE_BREAK);
 8101e00:	4b04      	ldr	r3, [pc, #16]	; (8101e14 <stopExecution+0x28>)
 8101e02:	781b      	ldrb	r3, [r3, #0]
 8101e04:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8101e08:	b2da      	uxtb	r2, r3
 8101e0a:	4b02      	ldr	r3, [pc, #8]	; (8101e14 <stopExecution+0x28>)
 8101e0c:	701a      	strb	r2, [r3, #0]
}
 8101e0e:	bf00      	nop
 8101e10:	bd80      	pop	{r7, pc}
 8101e12:	bf00      	nop
 8101e14:	10004b94 	.word	0x10004b94

08101e18 <executeStep>:

char executeStep() {
 8101e18:	b580      	push	{r7, lr}
 8101e1a:	b082      	sub	sp, #8
 8101e1c:	af00      	add	r7, sp, #0
    prgline* p = findLine(nextLineNum);
 8101e1e:	4b1d      	ldr	r3, [pc, #116]	; (8101e94 <executeStep+0x7c>)
 8101e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101e24:	4618      	mov	r0, r3
 8101e26:	f7fe fc67 	bl	81006f8 <findLine>
 8101e2a:	6078      	str	r0, [r7, #4]
    if (p->num == 0) {
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101e32:	b21b      	sxth	r3, r3
 8101e34:	2b00      	cmp	r3, #0
 8101e36:	d105      	bne.n	8101e44 <executeStep+0x2c>
        stopExecution();
 8101e38:	f7ff ffd8 	bl	8101dec <stopExecution>
        signalEndOfCode();
 8101e3c:	f7ff ffca 	bl	8101dd4 <signalEndOfCode>
        return 1;
 8101e40:	2301      	movs	r3, #1
 8101e42:	e023      	b.n	8101e8c <executeStep+0x74>
    }
    nextLineNum = p->num + 1;
 8101e44:	687b      	ldr	r3, [r7, #4]
 8101e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101e4a:	b21b      	sxth	r3, r3
 8101e4c:	b29b      	uxth	r3, r3
 8101e4e:	3301      	adds	r3, #1
 8101e50:	b29b      	uxth	r3, r3
 8101e52:	b21a      	sxth	r2, r3
 8101e54:	4b0f      	ldr	r3, [pc, #60]	; (8101e94 <executeStep+0x7c>)
 8101e56:	801a      	strh	r2, [r3, #0]
    memcpy(lineSpace, p->str.text, p->str.len);
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	1cd9      	adds	r1, r3, #3
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	789b      	ldrb	r3, [r3, #2]
 8101e60:	461a      	mov	r2, r3
 8101e62:	480d      	ldr	r0, [pc, #52]	; (8101e98 <executeStep+0x80>)
 8101e64:	f00a feaa 	bl	810cbbc <memcpy>
    lineSpace[p->str.len] = 0;
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	789b      	ldrb	r3, [r3, #2]
 8101e6c:	461a      	mov	r2, r3
 8101e6e:	4b0a      	ldr	r3, [pc, #40]	; (8101e98 <executeStep+0x80>)
 8101e70:	2100      	movs	r1, #0
 8101e72:	5499      	strb	r1, [r3, r2]
    parseLine(lineSpace, toksBody);
 8101e74:	4b09      	ldr	r3, [pc, #36]	; (8101e9c <executeStep+0x84>)
 8101e76:	681b      	ldr	r3, [r3, #0]
 8101e78:	4619      	mov	r1, r3
 8101e7a:	4807      	ldr	r0, [pc, #28]	; (8101e98 <executeStep+0x80>)
 8101e7c:	f001 fc34 	bl	81036e8 <parseLine>
    executeTokens(toksBody);
 8101e80:	4b06      	ldr	r3, [pc, #24]	; (8101e9c <executeStep+0x84>)
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	4618      	mov	r0, r3
 8101e86:	f7ff ff73 	bl	8101d70 <executeTokens>
    return 0;
 8101e8a:	2300      	movs	r3, #0
}
 8101e8c:	4618      	mov	r0, r3
 8101e8e:	3708      	adds	r7, #8
 8101e90:	46bd      	mov	sp, r7
 8101e92:	bd80      	pop	{r7, pc}
 8101e94:	10000000 	.word	0x10000000
 8101e98:	10004ac8 	.word	0x10004ac8
 8101e9c:	10004b98 	.word	0x10004b98

08101ea0 <dispatchBreak>:

void dispatchBreak() {
 8101ea0:	b580      	push	{r7, lr}
 8101ea2:	af00      	add	r7, sp, #0
    stopExecution();
 8101ea4:	f7ff ffa2 	bl	8101dec <stopExecution>
    execStepsCount = 0;
 8101ea8:	4b08      	ldr	r3, [pc, #32]	; (8101ecc <dispatchBreak+0x2c>)
 8101eaa:	2200      	movs	r2, #0
 8101eac:	601a      	str	r2, [r3, #0]
    sp = spInit;
 8101eae:	4b08      	ldr	r3, [pc, #32]	; (8101ed0 <dispatchBreak+0x30>)
 8101eb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8101eb4:	4b07      	ldr	r3, [pc, #28]	; (8101ed4 <dispatchBreak+0x34>)
 8101eb6:	801a      	strh	r2, [r3, #0]
    outputConstStr(ID_COMMON_STRINGS, 4, NULL); // BREAK
 8101eb8:	2200      	movs	r2, #0
 8101eba:	2104      	movs	r1, #4
 8101ebc:	2000      	movs	r0, #0
 8101ebe:	f002 f8d3 	bl	8104068 <outputConstStr>
    outputCr();
 8101ec2:	f001 fde3 	bl	8103a8c <outputCr>
}
 8101ec6:	bf00      	nop
 8101ec8:	bd80      	pop	{r7, pc}
 8101eca:	bf00      	nop
 8101ecc:	100000e4 	.word	0x100000e4
 8101ed0:	10004b50 	.word	0x10004b50
 8101ed4:	10004b5c 	.word	0x10004b5c

08101ed8 <executeNonParsed>:

void executeNonParsed(numeric count) {
 8101ed8:	b580      	push	{r7, lr}
 8101eda:	b082      	sub	sp, #8
 8101edc:	af00      	add	r7, sp, #0
 8101ede:	6078      	str	r0, [r7, #4]
    if (count != 0) {
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	2b00      	cmp	r3, #0
 8101ee4:	d003      	beq.n	8101eee <executeNonParsed+0x16>
        execStepsCount = count;
 8101ee6:	4a0f      	ldr	r2, [pc, #60]	; (8101f24 <executeNonParsed+0x4c>)
 8101ee8:	687b      	ldr	r3, [r7, #4]
 8101eea:	6013      	str	r3, [r2, #0]
        return;
 8101eec:	e017      	b.n	8101f1e <executeNonParsed+0x46>
    }
    if (execStepsCount != -1) {
 8101eee:	4b0d      	ldr	r3, [pc, #52]	; (8101f24 <executeNonParsed+0x4c>)
 8101ef0:	681b      	ldr	r3, [r3, #0]
 8101ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ef6:	d004      	beq.n	8101f02 <executeNonParsed+0x2a>
        execStepsCount -= 1;
 8101ef8:	4b0a      	ldr	r3, [pc, #40]	; (8101f24 <executeNonParsed+0x4c>)
 8101efa:	681b      	ldr	r3, [r3, #0]
 8101efc:	3b01      	subs	r3, #1
 8101efe:	4a09      	ldr	r2, [pc, #36]	; (8101f24 <executeNonParsed+0x4c>)
 8101f00:	6013      	str	r3, [r2, #0]
    }
    if (executeStep()) {
 8101f02:	f7ff ff89 	bl	8101e18 <executeStep>
 8101f06:	4603      	mov	r3, r0
 8101f08:	2b00      	cmp	r3, #0
 8101f0a:	d002      	beq.n	8101f12 <executeNonParsed+0x3a>
        execStepsCount = 0;
 8101f0c:	4b05      	ldr	r3, [pc, #20]	; (8101f24 <executeNonParsed+0x4c>)
 8101f0e:	2200      	movs	r2, #0
 8101f10:	601a      	str	r2, [r3, #0]
    }
    if (execStepsCount == 0) {
 8101f12:	4b04      	ldr	r3, [pc, #16]	; (8101f24 <executeNonParsed+0x4c>)
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	2b00      	cmp	r3, #0
 8101f18:	d101      	bne.n	8101f1e <executeNonParsed+0x46>
        stopExecution();
 8101f1a:	f7ff ff67 	bl	8101dec <stopExecution>
    }
}
 8101f1e:	3708      	adds	r7, #8
 8101f20:	46bd      	mov	sp, r7
 8101f22:	bd80      	pop	{r7, pc}
 8101f24:	100000e4 	.word	0x100000e4

08101f28 <initParsedRun>:

void initParsedRun(void) {
 8101f28:	b580      	push	{r7, lr}
 8101f2a:	af00      	add	r7, sp, #0
    nextLineNum = 1;
 8101f2c:	4b0f      	ldr	r3, [pc, #60]	; (8101f6c <initParsedRun+0x44>)
 8101f2e:	2201      	movs	r2, #1
 8101f30:	801a      	strh	r2, [r3, #0]
    progLine = findLine(nextLineNum);
 8101f32:	4b0e      	ldr	r3, [pc, #56]	; (8101f6c <initParsedRun+0x44>)
 8101f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101f38:	4618      	mov	r0, r3
 8101f3a:	f7fe fbdd 	bl	81006f8 <findLine>
 8101f3e:	4603      	mov	r3, r0
 8101f40:	4a0b      	ldr	r2, [pc, #44]	; (8101f70 <initParsedRun+0x48>)
 8101f42:	6013      	str	r3, [r2, #0]
    labelsCached = 0;
 8101f44:	4b0b      	ldr	r3, [pc, #44]	; (8101f74 <initParsedRun+0x4c>)
 8101f46:	2200      	movs	r2, #0
 8101f48:	801a      	strh	r2, [r3, #0]
    labelCache = (labelCacheElem*)(void*)(prgStore + prgSize);
 8101f4a:	4b0b      	ldr	r3, [pc, #44]	; (8101f78 <initParsedRun+0x50>)
 8101f4c:	681b      	ldr	r3, [r3, #0]
 8101f4e:	4a0b      	ldr	r2, [pc, #44]	; (8101f7c <initParsedRun+0x54>)
 8101f50:	f9b2 2000 	ldrsh.w	r2, [r2]
 8101f54:	4413      	add	r3, r2
 8101f56:	4a0a      	ldr	r2, [pc, #40]	; (8101f80 <initParsedRun+0x58>)
 8101f58:	6013      	str	r3, [r2, #0]
    mainState |= STATE_RUN;
 8101f5a:	4b0a      	ldr	r3, [pc, #40]	; (8101f84 <initParsedRun+0x5c>)
 8101f5c:	781b      	ldrb	r3, [r3, #0]
 8101f5e:	f043 0310 	orr.w	r3, r3, #16
 8101f62:	b2da      	uxtb	r2, r3
 8101f64:	4b07      	ldr	r3, [pc, #28]	; (8101f84 <initParsedRun+0x5c>)
 8101f66:	701a      	strb	r2, [r3, #0]
}
 8101f68:	bf00      	nop
 8101f6a:	bd80      	pop	{r7, pc}
 8101f6c:	10000000 	.word	0x10000000
 8101f70:	100000e0 	.word	0x100000e0
 8101f74:	10004b48 	.word	0x10004b48
 8101f78:	10004b40 	.word	0x10004b40
 8101f7c:	10004ac4 	.word	0x10004ac4
 8101f80:	10004b4c 	.word	0x10004b4c
 8101f84:	10004b94 	.word	0x10004b94

08101f88 <executeParsedRun>:

void executeParsedRun(void) {
 8101f88:	b580      	push	{r7, lr}
 8101f8a:	b082      	sub	sp, #8
 8101f8c:	af00      	add	r7, sp, #0
    prgline* next;
    if (progLine->num == 0 || nextLineNum == 0) {
 8101f8e:	4b2b      	ldr	r3, [pc, #172]	; (810203c <executeParsedRun+0xb4>)
 8101f90:	681b      	ldr	r3, [r3, #0]
 8101f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101f96:	b21b      	sxth	r3, r3
 8101f98:	2b00      	cmp	r3, #0
 8101f9a:	d004      	beq.n	8101fa6 <executeParsedRun+0x1e>
 8101f9c:	4b28      	ldr	r3, [pc, #160]	; (8102040 <executeParsedRun+0xb8>)
 8101f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101fa2:	2b00      	cmp	r3, #0
 8101fa4:	d104      	bne.n	8101fb0 <executeParsedRun+0x28>
        stopExecution();
 8101fa6:	f7ff ff21 	bl	8101dec <stopExecution>
        signalEndOfCode();
 8101faa:	f7ff ff13 	bl	8101dd4 <signalEndOfCode>
        return;
 8101fae:	e042      	b.n	8102036 <executeParsedRun+0xae>
    }
    next = (prgline*)(void*)((char*)(void*)progLine
 8101fb0:	4b22      	ldr	r3, [pc, #136]	; (810203c <executeParsedRun+0xb4>)
 8101fb2:	681a      	ldr	r2, [r3, #0]
            + sizeof(progLine->num) + sizeof(progLine->str.len) + progLine->str.len);
 8101fb4:	4b21      	ldr	r3, [pc, #132]	; (810203c <executeParsedRun+0xb4>)
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	789b      	ldrb	r3, [r3, #2]
 8101fba:	3303      	adds	r3, #3
    next = (prgline*)(void*)((char*)(void*)progLine
 8101fbc:	4413      	add	r3, r2
 8101fbe:	607b      	str	r3, [r7, #4]
    nextLineNum = next->num;
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101fc6:	b21a      	sxth	r2, r3
 8101fc8:	4b1d      	ldr	r3, [pc, #116]	; (8102040 <executeParsedRun+0xb8>)
 8101fca:	801a      	strh	r2, [r3, #0]
    executeTokens((token*)(void*)(progLine->str.text));
 8101fcc:	4b1b      	ldr	r3, [pc, #108]	; (810203c <executeParsedRun+0xb4>)
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	3303      	adds	r3, #3
 8101fd2:	4618      	mov	r0, r3
 8101fd4:	f7ff fecc 	bl	8101d70 <executeTokens>
    if (next->num != nextLineNum) {
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101fde:	b21a      	sxth	r2, r3
 8101fe0:	4b17      	ldr	r3, [pc, #92]	; (8102040 <executeParsedRun+0xb8>)
 8101fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101fe6:	429a      	cmp	r2, r3
 8101fe8:	d022      	beq.n	8102030 <executeParsedRun+0xa8>
        progLine = getCachedLabel(nextLineNum);
 8101fea:	4b15      	ldr	r3, [pc, #84]	; (8102040 <executeParsedRun+0xb8>)
 8101fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101ff0:	4618      	mov	r0, r3
 8101ff2:	f7fe fee9 	bl	8100dc8 <getCachedLabel>
 8101ff6:	4603      	mov	r3, r0
 8101ff8:	4a10      	ldr	r2, [pc, #64]	; (810203c <executeParsedRun+0xb4>)
 8101ffa:	6013      	str	r3, [r2, #0]
        if (progLine == NULL) {
 8101ffc:	4b0f      	ldr	r3, [pc, #60]	; (810203c <executeParsedRun+0xb4>)
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	2b00      	cmp	r3, #0
 8102002:	d118      	bne.n	8102036 <executeParsedRun+0xae>
            progLine = findLine(nextLineNum);
 8102004:	4b0e      	ldr	r3, [pc, #56]	; (8102040 <executeParsedRun+0xb8>)
 8102006:	f9b3 3000 	ldrsh.w	r3, [r3]
 810200a:	4618      	mov	r0, r3
 810200c:	f7fe fb74 	bl	81006f8 <findLine>
 8102010:	4603      	mov	r3, r0
 8102012:	4a0a      	ldr	r2, [pc, #40]	; (810203c <executeParsedRun+0xb4>)
 8102014:	6013      	str	r3, [r2, #0]
            addCachedLabel(nextLineNum, (short)((char*)(void*)progLine - (char*)(void*)prgStore));
 8102016:	4b0a      	ldr	r3, [pc, #40]	; (8102040 <executeParsedRun+0xb8>)
 8102018:	f9b3 0000 	ldrsh.w	r0, [r3]
 810201c:	4b07      	ldr	r3, [pc, #28]	; (810203c <executeParsedRun+0xb4>)
 810201e:	681a      	ldr	r2, [r3, #0]
 8102020:	4b08      	ldr	r3, [pc, #32]	; (8102044 <executeParsedRun+0xbc>)
 8102022:	681b      	ldr	r3, [r3, #0]
 8102024:	1ad3      	subs	r3, r2, r3
 8102026:	b21b      	sxth	r3, r3
 8102028:	4619      	mov	r1, r3
 810202a:	f7fe fefd 	bl	8100e28 <addCachedLabel>
 810202e:	e002      	b.n	8102036 <executeParsedRun+0xae>
        }
    } else {
        progLine = next;
 8102030:	4a02      	ldr	r2, [pc, #8]	; (810203c <executeParsedRun+0xb4>)
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	6013      	str	r3, [r2, #0]
    }
}
 8102036:	3708      	adds	r7, #8
 8102038:	46bd      	mov	sp, r7
 810203a:	bd80      	pop	{r7, pc}
 810203c:	100000e0 	.word	0x100000e0
 8102040:	10000000 	.word	0x10000000
 8102044:	10004b40 	.word	0x10004b40

08102048 <parseExprUnary>:
#include "mystdlib.h"
#include "tokens.h"
#include "tokenint.h"
#include "expr.h"

char parseExprUnary() {
 8102048:	b580      	push	{r7, lr}
 810204a:	b082      	sub	sp, #8
 810204c:	af00      	add	r7, sp, #0
    char c = *getCurTokPos();
 810204e:	f000 fc9b 	bl	8102988 <getCurTokPos>
 8102052:	4603      	mov	r3, r0
 8102054:	781b      	ldrb	r3, [r3, #0]
 8102056:	71fb      	strb	r3, [r7, #7]
    if (c != '-' && c != '!') {
 8102058:	79fb      	ldrb	r3, [r7, #7]
 810205a:	2b2d      	cmp	r3, #45	; 0x2d
 810205c:	d004      	beq.n	8102068 <parseExprUnary+0x20>
 810205e:	79fb      	ldrb	r3, [r7, #7]
 8102060:	2b21      	cmp	r3, #33	; 0x21
 8102062:	d001      	beq.n	8102068 <parseExprUnary+0x20>
        return 0;
 8102064:	2300      	movs	r3, #0
 8102066:	e00b      	b.n	8102080 <parseExprUnary+0x38>
    }
    parseSymbol();
 8102068:	f000 ffa4 	bl	8102fb4 <parseSymbol>
    if (prevTok->body.symbol == '-') {
 810206c:	4b06      	ldr	r3, [pc, #24]	; (8102088 <parseExprUnary+0x40>)
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	785b      	ldrb	r3, [r3, #1]
 8102072:	2b2d      	cmp	r3, #45	; 0x2d
 8102074:	d103      	bne.n	810207e <parseExprUnary+0x36>
        prevTok->body.symbol = '~';
 8102076:	4b04      	ldr	r3, [pc, #16]	; (8102088 <parseExprUnary+0x40>)
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	227e      	movs	r2, #126	; 0x7e
 810207c:	705a      	strb	r2, [r3, #1]
    }
    return 1;
 810207e:	2301      	movs	r3, #1
}
 8102080:	4618      	mov	r0, r3
 8102082:	3708      	adds	r7, #8
 8102084:	46bd      	mov	sp, r7
 8102086:	bd80      	pop	{r7, pc}
 8102088:	10004b68 	.word	0x10004b68

0810208c <parseExprVal>:

char parseExprVal(void) {
 810208c:	b580      	push	{r7, lr}
 810208e:	af00      	add	r7, sp, #0
    if (parseNumber()) {
 8102090:	f000 fe6e 	bl	8102d70 <parseNumber>
 8102094:	4603      	mov	r3, r0
 8102096:	2b00      	cmp	r3, #0
 8102098:	d010      	beq.n	81020bc <parseExprVal+0x30>
        if (*getCurTokPos() == '(') {
 810209a:	f000 fc75 	bl	8102988 <getCurTokPos>
 810209e:	4603      	mov	r3, r0
 81020a0:	781b      	ldrb	r3, [r3, #0]
 81020a2:	2b28      	cmp	r3, #40	; 0x28
 81020a4:	d108      	bne.n	81020b8 <parseExprVal+0x2c>
            setTokenError(getCurTokPos(), 9);
 81020a6:	f000 fc6f 	bl	8102988 <getCurTokPos>
 81020aa:	4603      	mov	r3, r0
 81020ac:	2109      	movs	r1, #9
 81020ae:	4618      	mov	r0, r3
 81020b0:	f000 fd46 	bl	8102b40 <setTokenError>
            return 'e';
 81020b4:	2365      	movs	r3, #101	; 0x65
 81020b6:	e035      	b.n	8102124 <parseExprVal+0x98>
        }
        return '+';
 81020b8:	232b      	movs	r3, #43	; 0x2b
 81020ba:	e033      	b.n	8102124 <parseExprVal+0x98>
    }
    if (parseName(0)) {
 81020bc:	2000      	movs	r0, #0
 81020be:	f000 fddb 	bl	8102c78 <parseName>
 81020c2:	4603      	mov	r3, r0
 81020c4:	2b00      	cmp	r3, #0
 81020c6:	d014      	beq.n	81020f2 <parseExprVal+0x66>
        if (*getCurTokPos() == '(') {
 81020c8:	f000 fc5e 	bl	8102988 <getCurTokPos>
 81020cc:	4603      	mov	r3, r0
 81020ce:	781b      	ldrb	r3, [r3, #0]
 81020d0:	2b28      	cmp	r3, #40	; 0x28
 81020d2:	d108      	bne.n	81020e6 <parseExprVal+0x5a>
            prevTok->type = TT_FUNCTION;
 81020d4:	4b14      	ldr	r3, [pc, #80]	; (8102128 <parseExprVal+0x9c>)
 81020d6:	681b      	ldr	r3, [r3, #0]
 81020d8:	2223      	movs	r2, #35	; 0x23
 81020da:	701a      	strb	r2, [r3, #0]
            skipTokenInInput(1);
 81020dc:	2001      	movs	r0, #1
 81020de:	f000 fd5b 	bl	8102b98 <skipTokenInInput>
            return 'f';
 81020e2:	2366      	movs	r3, #102	; 0x66
 81020e4:	e01e      	b.n	8102124 <parseExprVal+0x98>
        }
        prevTok->type = TT_VARIABLE;
 81020e6:	4b10      	ldr	r3, [pc, #64]	; (8102128 <parseExprVal+0x9c>)
 81020e8:	681b      	ldr	r3, [r3, #0]
 81020ea:	2222      	movs	r2, #34	; 0x22
 81020ec:	701a      	strb	r2, [r3, #0]
        return '+';
 81020ee:	232b      	movs	r3, #43	; 0x2b
 81020f0:	e018      	b.n	8102124 <parseExprVal+0x98>
    }
    if (*getCurTokPos() == '(') {
 81020f2:	f000 fc49 	bl	8102988 <getCurTokPos>
 81020f6:	4603      	mov	r3, r0
 81020f8:	781b      	ldrb	r3, [r3, #0]
 81020fa:	2b28      	cmp	r3, #40	; 0x28
 81020fc:	d103      	bne.n	8102106 <parseExprVal+0x7a>
        parseSymbol();
 81020fe:	f000 ff59 	bl	8102fb4 <parseSymbol>
        return '(';
 8102102:	2328      	movs	r3, #40	; 0x28
 8102104:	e00e      	b.n	8102124 <parseExprVal+0x98>
    }
    if (parseExprUnary()) {
 8102106:	f7ff ff9f 	bl	8102048 <parseExprUnary>
 810210a:	4603      	mov	r3, r0
 810210c:	2b00      	cmp	r3, #0
 810210e:	d001      	beq.n	8102114 <parseExprVal+0x88>
        return '1';
 8102110:	2331      	movs	r3, #49	; 0x31
 8102112:	e007      	b.n	8102124 <parseExprVal+0x98>
    }
    setTokenError(getCurTokPos(), 9);
 8102114:	f000 fc38 	bl	8102988 <getCurTokPos>
 8102118:	4603      	mov	r3, r0
 810211a:	2109      	movs	r1, #9
 810211c:	4618      	mov	r0, r3
 810211e:	f000 fd0f 	bl	8102b40 <setTokenError>
    return 'e';
 8102122:	2365      	movs	r3, #101	; 0x65
}
 8102124:	4618      	mov	r0, r3
 8102126:	bd80      	pop	{r7, pc}
 8102128:	10004b68 	.word	0x10004b68

0810212c <parseExprBop>:

char parseExprBop(void) {
 810212c:	b580      	push	{r7, lr}
 810212e:	b082      	sub	sp, #8
 8102130:	af00      	add	r7, sp, #0
    char c = *getCurTokPos();
 8102132:	f000 fc29 	bl	8102988 <getCurTokPos>
 8102136:	4603      	mov	r3, r0
 8102138:	781b      	ldrb	r3, [r3, #0]
 810213a:	71fb      	strb	r3, [r7, #7]
    if (c == 0 || c == ';') {
 810213c:	79fb      	ldrb	r3, [r7, #7]
 810213e:	2b00      	cmp	r3, #0
 8102140:	d002      	beq.n	8102148 <parseExprBop+0x1c>
 8102142:	79fb      	ldrb	r3, [r7, #7]
 8102144:	2b3b      	cmp	r3, #59	; 0x3b
 8102146:	d101      	bne.n	810214c <parseExprBop+0x20>
        return 's';
 8102148:	2373      	movs	r3, #115	; 0x73
 810214a:	e036      	b.n	81021ba <parseExprBop+0x8e>
    }
    if (c == ')') {
 810214c:	79fb      	ldrb	r3, [r7, #7]
 810214e:	2b29      	cmp	r3, #41	; 0x29
 8102150:	d101      	bne.n	8102156 <parseExprBop+0x2a>
        return ')';
 8102152:	2329      	movs	r3, #41	; 0x29
 8102154:	e031      	b.n	81021ba <parseExprBop+0x8e>
    }
    if (c == ',') {
 8102156:	79fb      	ldrb	r3, [r7, #7]
 8102158:	2b2c      	cmp	r3, #44	; 0x2c
 810215a:	d101      	bne.n	8102160 <parseExprBop+0x34>
        return ',';
 810215c:	232c      	movs	r3, #44	; 0x2c
 810215e:	e02c      	b.n	81021ba <parseExprBop+0x8e>
    }
    if (c == '+' || c == '-' || c == '*' || c == '^' || c == '/' || c == '%'
 8102160:	79fb      	ldrb	r3, [r7, #7]
 8102162:	2b2b      	cmp	r3, #43	; 0x2b
 8102164:	d01d      	beq.n	81021a2 <parseExprBop+0x76>
 8102166:	79fb      	ldrb	r3, [r7, #7]
 8102168:	2b2d      	cmp	r3, #45	; 0x2d
 810216a:	d01a      	beq.n	81021a2 <parseExprBop+0x76>
 810216c:	79fb      	ldrb	r3, [r7, #7]
 810216e:	2b2a      	cmp	r3, #42	; 0x2a
 8102170:	d017      	beq.n	81021a2 <parseExprBop+0x76>
 8102172:	79fb      	ldrb	r3, [r7, #7]
 8102174:	2b5e      	cmp	r3, #94	; 0x5e
 8102176:	d014      	beq.n	81021a2 <parseExprBop+0x76>
 8102178:	79fb      	ldrb	r3, [r7, #7]
 810217a:	2b2f      	cmp	r3, #47	; 0x2f
 810217c:	d011      	beq.n	81021a2 <parseExprBop+0x76>
 810217e:	79fb      	ldrb	r3, [r7, #7]
 8102180:	2b25      	cmp	r3, #37	; 0x25
 8102182:	d00e      	beq.n	81021a2 <parseExprBop+0x76>
            || c == '<' || c == '>' || c == '=' || c == '&' || c == '|') {
 8102184:	79fb      	ldrb	r3, [r7, #7]
 8102186:	2b3c      	cmp	r3, #60	; 0x3c
 8102188:	d00b      	beq.n	81021a2 <parseExprBop+0x76>
 810218a:	79fb      	ldrb	r3, [r7, #7]
 810218c:	2b3e      	cmp	r3, #62	; 0x3e
 810218e:	d008      	beq.n	81021a2 <parseExprBop+0x76>
 8102190:	79fb      	ldrb	r3, [r7, #7]
 8102192:	2b3d      	cmp	r3, #61	; 0x3d
 8102194:	d005      	beq.n	81021a2 <parseExprBop+0x76>
 8102196:	79fb      	ldrb	r3, [r7, #7]
 8102198:	2b26      	cmp	r3, #38	; 0x26
 810219a:	d002      	beq.n	81021a2 <parseExprBop+0x76>
 810219c:	79fb      	ldrb	r3, [r7, #7]
 810219e:	2b7c      	cmp	r3, #124	; 0x7c
 81021a0:	d103      	bne.n	81021aa <parseExprBop+0x7e>
        parseSymbol();
 81021a2:	f000 ff07 	bl	8102fb4 <parseSymbol>
        return '1';
 81021a6:	2331      	movs	r3, #49	; 0x31
 81021a8:	e007      	b.n	81021ba <parseExprBop+0x8e>
    }
    setTokenError(getCurTokPos(), 9);
 81021aa:	f000 fbed 	bl	8102988 <getCurTokPos>
 81021ae:	4603      	mov	r3, r0
 81021b0:	2109      	movs	r1, #9
 81021b2:	4618      	mov	r0, r3
 81021b4:	f000 fcc4 	bl	8102b40 <setTokenError>
    return 'e';
 81021b8:	2365      	movs	r3, #101	; 0x65
}
 81021ba:	4618      	mov	r0, r3
 81021bc:	3708      	adds	r7, #8
 81021be:	46bd      	mov	sp, r7
 81021c0:	bd80      	pop	{r7, pc}
	...

081021c4 <parseExprRbr>:

char parseExprRbr(char brCount, char argCount) {
 81021c4:	b580      	push	{r7, lr}
 81021c6:	b082      	sub	sp, #8
 81021c8:	af00      	add	r7, sp, #0
 81021ca:	4603      	mov	r3, r0
 81021cc:	460a      	mov	r2, r1
 81021ce:	71fb      	strb	r3, [r7, #7]
 81021d0:	4613      	mov	r3, r2
 81021d2:	71bb      	strb	r3, [r7, #6]
    if (brCount < 1) {
 81021d4:	79fb      	ldrb	r3, [r7, #7]
 81021d6:	2b00      	cmp	r3, #0
 81021d8:	d108      	bne.n	81021ec <parseExprRbr+0x28>
        setTokenError(getCurTokPos(), 9);
 81021da:	f000 fbd5 	bl	8102988 <getCurTokPos>
 81021de:	4603      	mov	r3, r0
 81021e0:	2109      	movs	r1, #9
 81021e2:	4618      	mov	r0, r3
 81021e4:	f000 fcac 	bl	8102b40 <setTokenError>
        return 'e';
 81021e8:	2365      	movs	r3, #101	; 0x65
 81021ea:	e00d      	b.n	8102208 <parseExprRbr+0x44>
    } else {
        parseSymbol();
 81021ec:	f000 fee2 	bl	8102fb4 <parseSymbol>
        if (argCount > 0) {
 81021f0:	79bb      	ldrb	r3, [r7, #6]
 81021f2:	2b00      	cmp	r3, #0
 81021f4:	d007      	beq.n	8102206 <parseExprRbr+0x42>
            prevTok->type = TT_FUNC_END;
 81021f6:	4b06      	ldr	r3, [pc, #24]	; (8102210 <parseExprRbr+0x4c>)
 81021f8:	681b      	ldr	r3, [r3, #0]
 81021fa:	2231      	movs	r2, #49	; 0x31
 81021fc:	701a      	strb	r2, [r3, #0]
            prevTok->body.symbol = argCount;
 81021fe:	4b04      	ldr	r3, [pc, #16]	; (8102210 <parseExprRbr+0x4c>)
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	79ba      	ldrb	r2, [r7, #6]
 8102204:	705a      	strb	r2, [r3, #1]
        }
        return '+';
 8102206:	232b      	movs	r3, #43	; 0x2b
    }
}
 8102208:	4618      	mov	r0, r3
 810220a:	3708      	adds	r7, #8
 810220c:	46bd      	mov	sp, r7
 810220e:	bd80      	pop	{r7, pc}
 8102210:	10004b68 	.word	0x10004b68

08102214 <parseExprComma>:

char parseExprComma(char inFunc) {
 8102214:	b580      	push	{r7, lr}
 8102216:	b082      	sub	sp, #8
 8102218:	af00      	add	r7, sp, #0
 810221a:	4603      	mov	r3, r0
 810221c:	71fb      	strb	r3, [r7, #7]
    if (inFunc == 0) {
 810221e:	79fb      	ldrb	r3, [r7, #7]
 8102220:	2b00      	cmp	r3, #0
 8102222:	d108      	bne.n	8102236 <parseExprComma+0x22>
        setTokenError(getCurTokPos(), 9);
 8102224:	f000 fbb0 	bl	8102988 <getCurTokPos>
 8102228:	4603      	mov	r3, r0
 810222a:	2109      	movs	r1, #9
 810222c:	4618      	mov	r0, r3
 810222e:	f000 fc87 	bl	8102b40 <setTokenError>
        return 'e';
 8102232:	2365      	movs	r3, #101	; 0x65
 8102234:	e002      	b.n	810223c <parseExprComma+0x28>
    } else {
        parseSymbol();
 8102236:	f000 febd 	bl	8102fb4 <parseSymbol>
        return '1';
 810223a:	2331      	movs	r3, #49	; 0x31
    }
}
 810223c:	4618      	mov	r0, r3
 810223e:	3708      	adds	r7, #8
 8102240:	46bd      	mov	sp, r7
 8102242:	bd80      	pop	{r7, pc}

08102244 <operatorPriority>:

schar operatorPriority(char op) {
 8102244:	b480      	push	{r7}
 8102246:	b083      	sub	sp, #12
 8102248:	af00      	add	r7, sp, #0
 810224a:	4603      	mov	r3, r0
 810224c:	71fb      	strb	r3, [r7, #7]
    switch (op) {
 810224e:	79fb      	ldrb	r3, [r7, #7]
 8102250:	3b21      	subs	r3, #33	; 0x21
 8102252:	2b5d      	cmp	r3, #93	; 0x5d
 8102254:	f200 80cc 	bhi.w	81023f0 <operatorPriority+0x1ac>
 8102258:	a201      	add	r2, pc, #4	; (adr r2, 8102260 <operatorPriority+0x1c>)
 810225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810225e:	bf00      	nop
 8102260:	081023e9 	.word	0x081023e9
 8102264:	081023f1 	.word	0x081023f1
 8102268:	081023dd 	.word	0x081023dd
 810226c:	081023f1 	.word	0x081023f1
 8102270:	081023e5 	.word	0x081023e5
 8102274:	081023d9 	.word	0x081023d9
 8102278:	081023f1 	.word	0x081023f1
 810227c:	081023ed 	.word	0x081023ed
 8102280:	081023f1 	.word	0x081023f1
 8102284:	081023e5 	.word	0x081023e5
 8102288:	081023e1 	.word	0x081023e1
 810228c:	081023f1 	.word	0x081023f1
 8102290:	081023e1 	.word	0x081023e1
 8102294:	081023f1 	.word	0x081023f1
 8102298:	081023e5 	.word	0x081023e5
 810229c:	081023f1 	.word	0x081023f1
 81022a0:	081023f1 	.word	0x081023f1
 81022a4:	081023f1 	.word	0x081023f1
 81022a8:	081023f1 	.word	0x081023f1
 81022ac:	081023f1 	.word	0x081023f1
 81022b0:	081023f1 	.word	0x081023f1
 81022b4:	081023f1 	.word	0x081023f1
 81022b8:	081023f1 	.word	0x081023f1
 81022bc:	081023f1 	.word	0x081023f1
 81022c0:	081023f1 	.word	0x081023f1
 81022c4:	081023f1 	.word	0x081023f1
 81022c8:	081023f1 	.word	0x081023f1
 81022cc:	081023dd 	.word	0x081023dd
 81022d0:	081023dd 	.word	0x081023dd
 81022d4:	081023dd 	.word	0x081023dd
 81022d8:	081023f1 	.word	0x081023f1
 81022dc:	081023f1 	.word	0x081023f1
 81022e0:	081023f1 	.word	0x081023f1
 81022e4:	081023f1 	.word	0x081023f1
 81022e8:	081023f1 	.word	0x081023f1
 81022ec:	081023f1 	.word	0x081023f1
 81022f0:	081023f1 	.word	0x081023f1
 81022f4:	081023f1 	.word	0x081023f1
 81022f8:	081023f1 	.word	0x081023f1
 81022fc:	081023f1 	.word	0x081023f1
 8102300:	081023f1 	.word	0x081023f1
 8102304:	081023f1 	.word	0x081023f1
 8102308:	081023f1 	.word	0x081023f1
 810230c:	081023f1 	.word	0x081023f1
 8102310:	081023f1 	.word	0x081023f1
 8102314:	081023f1 	.word	0x081023f1
 8102318:	081023f1 	.word	0x081023f1
 810231c:	081023f1 	.word	0x081023f1
 8102320:	081023f1 	.word	0x081023f1
 8102324:	081023f1 	.word	0x081023f1
 8102328:	081023f1 	.word	0x081023f1
 810232c:	081023f1 	.word	0x081023f1
 8102330:	081023f1 	.word	0x081023f1
 8102334:	081023f1 	.word	0x081023f1
 8102338:	081023f1 	.word	0x081023f1
 810233c:	081023f1 	.word	0x081023f1
 8102340:	081023f1 	.word	0x081023f1
 8102344:	081023f1 	.word	0x081023f1
 8102348:	081023f1 	.word	0x081023f1
 810234c:	081023f1 	.word	0x081023f1
 8102350:	081023f1 	.word	0x081023f1
 8102354:	081023f1 	.word	0x081023f1
 8102358:	081023f1 	.word	0x081023f1
 810235c:	081023f1 	.word	0x081023f1
 8102360:	081023f1 	.word	0x081023f1
 8102364:	081023f1 	.word	0x081023f1
 8102368:	081023f1 	.word	0x081023f1
 810236c:	081023f1 	.word	0x081023f1
 8102370:	081023f1 	.word	0x081023f1
 8102374:	081023f1 	.word	0x081023f1
 8102378:	081023f1 	.word	0x081023f1
 810237c:	081023f1 	.word	0x081023f1
 8102380:	081023f1 	.word	0x081023f1
 8102384:	081023f1 	.word	0x081023f1
 8102388:	081023f1 	.word	0x081023f1
 810238c:	081023f1 	.word	0x081023f1
 8102390:	081023f1 	.word	0x081023f1
 8102394:	081023f1 	.word	0x081023f1
 8102398:	081023f1 	.word	0x081023f1
 810239c:	081023f1 	.word	0x081023f1
 81023a0:	081023f1 	.word	0x081023f1
 81023a4:	081023f1 	.word	0x081023f1
 81023a8:	081023f1 	.word	0x081023f1
 81023ac:	081023f1 	.word	0x081023f1
 81023b0:	081023f1 	.word	0x081023f1
 81023b4:	081023f1 	.word	0x081023f1
 81023b8:	081023f1 	.word	0x081023f1
 81023bc:	081023f1 	.word	0x081023f1
 81023c0:	081023f1 	.word	0x081023f1
 81023c4:	081023f1 	.word	0x081023f1
 81023c8:	081023dd 	.word	0x081023dd
 81023cc:	081023d9 	.word	0x081023d9
 81023d0:	081023dd 	.word	0x081023dd
 81023d4:	081023e9 	.word	0x081023e9
        case '&':
        case '|':
            return 5;
 81023d8:	2305      	movs	r3, #5
 81023da:	e00b      	b.n	81023f4 <operatorPriority+0x1b0>
        case '>':
        case '=':
        case '#':
        case '{':
        case '}':
            return 10;
 81023dc:	230a      	movs	r3, #10
 81023de:	e009      	b.n	81023f4 <operatorPriority+0x1b0>
        case '+':
        case '-':
            return 15;
 81023e0:	230f      	movs	r3, #15
 81023e2:	e007      	b.n	81023f4 <operatorPriority+0x1b0>
        case '*':
        case '/':
        case '%':
            return 20;
 81023e4:	2314      	movs	r3, #20
 81023e6:	e005      	b.n	81023f4 <operatorPriority+0x1b0>
        case '!':
        case '~':
            return 25;
 81023e8:	2319      	movs	r3, #25
 81023ea:	e003      	b.n	81023f4 <operatorPriority+0x1b0>
        case '(':
            return 0;
 81023ec:	2300      	movs	r3, #0
 81023ee:	e001      	b.n	81023f4 <operatorPriority+0x1b0>
    }
    return -1;
 81023f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81023f4:	4618      	mov	r0, r3
 81023f6:	370c      	adds	r7, #12
 81023f8:	46bd      	mov	sp, r7
 81023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023fe:	4770      	bx	lr

08102400 <isUnary>:

char isUnary(char op) {
 8102400:	b480      	push	{r7}
 8102402:	b083      	sub	sp, #12
 8102404:	af00      	add	r7, sp, #0
 8102406:	4603      	mov	r3, r0
 8102408:	71fb      	strb	r3, [r7, #7]
    return op == '!' || op == '~';
 810240a:	79fb      	ldrb	r3, [r7, #7]
 810240c:	2b21      	cmp	r3, #33	; 0x21
 810240e:	d002      	beq.n	8102416 <isUnary+0x16>
 8102410:	79fb      	ldrb	r3, [r7, #7]
 8102412:	2b7e      	cmp	r3, #126	; 0x7e
 8102414:	d101      	bne.n	810241a <isUnary+0x1a>
 8102416:	2301      	movs	r3, #1
 8102418:	e000      	b.n	810241c <isUnary+0x1c>
 810241a:	2300      	movs	r3, #0
 810241c:	b2db      	uxtb	r3, r3
}
 810241e:	4618      	mov	r0, r3
 8102420:	370c      	adds	r7, #12
 8102422:	46bd      	mov	sp, r7
 8102424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102428:	4770      	bx	lr
	...

0810242c <convertRpnPop>:

char convertRpnPop(char op) {
 810242c:	b580      	push	{r7, lr}
 810242e:	b082      	sub	sp, #8
 8102430:	af00      	add	r7, sp, #0
 8102432:	4603      	mov	r3, r0
 8102434:	71fb      	strb	r3, [r7, #7]
    if (op == '(') {
 8102436:	79fb      	ldrb	r3, [r7, #7]
 8102438:	2b28      	cmp	r3, #40	; 0x28
 810243a:	d101      	bne.n	8102440 <convertRpnPop+0x14>
        return 0;
 810243c:	2300      	movs	r3, #0
 810243e:	e010      	b.n	8102462 <convertRpnPop+0x36>
    }
    curTok->type = TT_SYMBOL;
 8102440:	4b0a      	ldr	r3, [pc, #40]	; (810246c <convertRpnPop+0x40>)
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	2230      	movs	r2, #48	; 0x30
 8102446:	701a      	strb	r2, [r3, #0]
    curTok->body.symbol = op;
 8102448:	4b08      	ldr	r3, [pc, #32]	; (810246c <convertRpnPop+0x40>)
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	79fa      	ldrb	r2, [r7, #7]
 810244e:	705a      	strb	r2, [r3, #1]
    curTok = nextToken(curTok);
 8102450:	4b06      	ldr	r3, [pc, #24]	; (810246c <convertRpnPop+0x40>)
 8102452:	681b      	ldr	r3, [r3, #0]
 8102454:	4618      	mov	r0, r3
 8102456:	f000 fb8f 	bl	8102b78 <nextToken>
 810245a:	4603      	mov	r3, r0
 810245c:	4a03      	ldr	r2, [pc, #12]	; (810246c <convertRpnPop+0x40>)
 810245e:	6013      	str	r3, [r2, #0]
    return 1;
 8102460:	2301      	movs	r3, #1
}
 8102462:	4618      	mov	r0, r3
 8102464:	3708      	adds	r7, #8
 8102466:	46bd      	mov	sp, r7
 8102468:	bd80      	pop	{r7, pc}
 810246a:	bf00      	nop
 810246c:	10004b6c 	.word	0x10004b6c

08102470 <shuntingYard>:

void shuntingYard(token* next) {
 8102470:	b580      	push	{r7, lr}
 8102472:	b08a      	sub	sp, #40	; 0x28
 8102474:	af00      	add	r7, sp, #0
 8102476:	6078      	str	r0, [r7, #4]
    char opstack[16];
    schar sp = -1;
 8102478:	23ff      	movs	r3, #255	; 0xff
 810247a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char prio;
    char op;
    char* start = (char*)(void*)next;
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	623b      	str	r3, [r7, #32]
    while (next->type != TT_ERROR) {
 8102482:	e10a      	b.n	810269a <shuntingYard+0x22a>
        if (next->type == TT_VARIABLE || next->type == TT_NUMBER) {
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	781b      	ldrb	r3, [r3, #0]
 8102488:	2b22      	cmp	r3, #34	; 0x22
 810248a:	d003      	beq.n	8102494 <shuntingYard+0x24>
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	781b      	ldrb	r3, [r3, #0]
 8102490:	2b10      	cmp	r3, #16
 8102492:	d10e      	bne.n	81024b2 <shuntingYard+0x42>
            copyToken(curTok, next);
 8102494:	4b90      	ldr	r3, [pc, #576]	; (81026d8 <shuntingYard+0x268>)
 8102496:	681b      	ldr	r3, [r3, #0]
 8102498:	6879      	ldr	r1, [r7, #4]
 810249a:	4618      	mov	r0, r3
 810249c:	f000 fb3e 	bl	8102b1c <copyToken>
            curTok = nextToken(curTok);
 81024a0:	4b8d      	ldr	r3, [pc, #564]	; (81026d8 <shuntingYard+0x268>)
 81024a2:	681b      	ldr	r3, [r3, #0]
 81024a4:	4618      	mov	r0, r3
 81024a6:	f000 fb67 	bl	8102b78 <nextToken>
 81024aa:	4603      	mov	r3, r0
 81024ac:	4a8a      	ldr	r2, [pc, #552]	; (81026d8 <shuntingYard+0x268>)
 81024ae:	6013      	str	r3, [r2, #0]
 81024b0:	e0ef      	b.n	8102692 <shuntingYard+0x222>
        } else if (next->type == TT_SYMBOL) {
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	781b      	ldrb	r3, [r3, #0]
 81024b6:	2b30      	cmp	r3, #48	; 0x30
 81024b8:	f040 8082 	bne.w	81025c0 <shuntingYard+0x150>
            op = next->body.symbol;
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	785b      	ldrb	r3, [r3, #1]
 81024c0:	77fb      	strb	r3, [r7, #31]
            if (op == '(') {
 81024c2:	7ffb      	ldrb	r3, [r7, #31]
 81024c4:	2b28      	cmp	r3, #40	; 0x28
 81024c6:	d10e      	bne.n	81024e6 <shuntingYard+0x76>
                opstack[++sp] = '(';
 81024c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81024cc:	3301      	adds	r3, #1
 81024ce:	b2db      	uxtb	r3, r3
 81024d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 81024d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 81024d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 81024dc:	4413      	add	r3, r2
 81024de:	2228      	movs	r2, #40	; 0x28
 81024e0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 81024e4:	e0d5      	b.n	8102692 <shuntingYard+0x222>
            } else if (op == ')' || op == ',') {
 81024e6:	7ffb      	ldrb	r3, [r7, #31]
 81024e8:	2b29      	cmp	r3, #41	; 0x29
 81024ea:	d002      	beq.n	81024f2 <shuntingYard+0x82>
 81024ec:	7ffb      	ldrb	r3, [r7, #31]
 81024ee:	2b2c      	cmp	r3, #44	; 0x2c
 81024f0:	d11f      	bne.n	8102532 <shuntingYard+0xc2>
                while (convertRpnPop(opstack[sp--]));
 81024f2:	bf00      	nop
 81024f4:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 81024f8:	b2d3      	uxtb	r3, r2
 81024fa:	3b01      	subs	r3, #1
 81024fc:	b2db      	uxtb	r3, r3
 81024fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8102502:	4613      	mov	r3, r2
 8102504:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8102508:	4413      	add	r3, r2
 810250a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 810250e:	4618      	mov	r0, r3
 8102510:	f7ff ff8c 	bl	810242c <convertRpnPop>
 8102514:	4603      	mov	r3, r0
 8102516:	2b00      	cmp	r3, #0
 8102518:	d1ec      	bne.n	81024f4 <shuntingYard+0x84>
                if (op == ',') {
 810251a:	7ffb      	ldrb	r3, [r7, #31]
 810251c:	2b2c      	cmp	r3, #44	; 0x2c
 810251e:	f040 80b8 	bne.w	8102692 <shuntingYard+0x222>
                    sp++;
 8102522:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8102526:	b2db      	uxtb	r3, r3
 8102528:	3301      	adds	r3, #1
 810252a:	b2db      	uxtb	r3, r3
 810252c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (op == ',') {
 8102530:	e0af      	b.n	8102692 <shuntingYard+0x222>
                }
            } else {
                prio = operatorPriority(op);
 8102532:	7ffb      	ldrb	r3, [r7, #31]
 8102534:	4618      	mov	r0, r3
 8102536:	f7ff fe85 	bl	8102244 <operatorPriority>
 810253a:	4603      	mov	r3, r0
 810253c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                if (isUnary(op)) {
 8102540:	7ffb      	ldrb	r3, [r7, #31]
 8102542:	4618      	mov	r0, r3
 8102544:	f7ff ff5c 	bl	8102400 <isUnary>
 8102548:	4603      	mov	r3, r0
 810254a:	2b00      	cmp	r3, #0
 810254c:	d015      	beq.n	810257a <shuntingYard+0x10a>
                    prio += 1;
 810254e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8102552:	3301      	adds	r3, #1
 8102554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                }
                while (sp >= 0 && operatorPriority(opstack[sp]) >= prio) {
 8102558:	e00f      	b.n	810257a <shuntingYard+0x10a>
                    convertRpnPop(opstack[sp--]);
 810255a:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 810255e:	b2d3      	uxtb	r3, r2
 8102560:	3b01      	subs	r3, #1
 8102562:	b2db      	uxtb	r3, r3
 8102564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8102568:	4613      	mov	r3, r2
 810256a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 810256e:	4413      	add	r3, r2
 8102570:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8102574:	4618      	mov	r0, r3
 8102576:	f7ff ff59 	bl	810242c <convertRpnPop>
                while (sp >= 0 && operatorPriority(opstack[sp]) >= prio) {
 810257a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 810257e:	2b00      	cmp	r3, #0
 8102580:	db0f      	blt.n	81025a2 <shuntingYard+0x132>
 8102582:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8102586:	f107 0228 	add.w	r2, r7, #40	; 0x28
 810258a:	4413      	add	r3, r2
 810258c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8102590:	4618      	mov	r0, r3
 8102592:	f7ff fe57 	bl	8102244 <operatorPriority>
 8102596:	4603      	mov	r3, r0
 8102598:	461a      	mov	r2, r3
 810259a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 810259e:	429a      	cmp	r2, r3
 81025a0:	dadb      	bge.n	810255a <shuntingYard+0xea>
                }
                opstack[++sp] = op;
 81025a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81025a6:	3301      	adds	r3, #1
 81025a8:	b2db      	uxtb	r3, r3
 81025aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 81025ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 81025b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 81025b6:	4413      	add	r3, r2
 81025b8:	7ffa      	ldrb	r2, [r7, #31]
 81025ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
 81025be:	e068      	b.n	8102692 <shuntingYard+0x222>
            }
        } else if (next->type == TT_FUNCTION) {
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	781b      	ldrb	r3, [r3, #0]
 81025c4:	2b23      	cmp	r3, #35	; 0x23
 81025c6:	d11f      	bne.n	8102608 <shuntingYard+0x198>
            opstack[++sp] = (char)(((char*)(void*)next) - start);
 81025c8:	687a      	ldr	r2, [r7, #4]
 81025ca:	6a3b      	ldr	r3, [r7, #32]
 81025cc:	1ad2      	subs	r2, r2, r3
 81025ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81025d2:	3301      	adds	r3, #1
 81025d4:	b2db      	uxtb	r3, r3
 81025d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 81025da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 81025de:	b2d2      	uxtb	r2, r2
 81025e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 81025e4:	440b      	add	r3, r1
 81025e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
            opstack[++sp] = '(';
 81025ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81025ee:	3301      	adds	r3, #1
 81025f0:	b2db      	uxtb	r3, r3
 81025f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 81025f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 81025fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 81025fe:	4413      	add	r3, r2
 8102600:	2228      	movs	r2, #40	; 0x28
 8102602:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8102606:	e044      	b.n	8102692 <shuntingYard+0x222>
        } else if (next->type == TT_FUNC_END) {
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	781b      	ldrb	r3, [r3, #0]
 810260c:	2b31      	cmp	r3, #49	; 0x31
 810260e:	d140      	bne.n	8102692 <shuntingYard+0x222>
            while (convertRpnPop(opstack[sp--]));
 8102610:	bf00      	nop
 8102612:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8102616:	b2d3      	uxtb	r3, r2
 8102618:	3b01      	subs	r3, #1
 810261a:	b2db      	uxtb	r3, r3
 810261c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8102620:	4613      	mov	r3, r2
 8102622:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8102626:	4413      	add	r3, r2
 8102628:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 810262c:	4618      	mov	r0, r3
 810262e:	f7ff fefd 	bl	810242c <convertRpnPop>
 8102632:	4603      	mov	r3, r0
 8102634:	2b00      	cmp	r3, #0
 8102636:	d1ec      	bne.n	8102612 <shuntingYard+0x1a2>
            copyToken(curTok, (token*)(void*)(start + opstack[sp--]));
 8102638:	4b27      	ldr	r3, [pc, #156]	; (81026d8 <shuntingYard+0x268>)
 810263a:	681a      	ldr	r2, [r3, #0]
 810263c:	f997 1027 	ldrsb.w	r1, [r7, #39]	; 0x27
 8102640:	b2cb      	uxtb	r3, r1
 8102642:	3b01      	subs	r3, #1
 8102644:	b2db      	uxtb	r3, r3
 8102646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 810264a:	460b      	mov	r3, r1
 810264c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8102650:	440b      	add	r3, r1
 8102652:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8102656:	4619      	mov	r1, r3
 8102658:	6a3b      	ldr	r3, [r7, #32]
 810265a:	440b      	add	r3, r1
 810265c:	4619      	mov	r1, r3
 810265e:	4610      	mov	r0, r2
 8102660:	f000 fa5c 	bl	8102b1c <copyToken>
            if (curTok->body.str.len == 1) {
 8102664:	4b1c      	ldr	r3, [pc, #112]	; (81026d8 <shuntingYard+0x268>)
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	785b      	ldrb	r3, [r3, #1]
 810266a:	2b01      	cmp	r3, #1
 810266c:	d109      	bne.n	8102682 <shuntingYard+0x212>
                curTok->type = TT_ARRAY;
 810266e:	4b1a      	ldr	r3, [pc, #104]	; (81026d8 <shuntingYard+0x268>)
 8102670:	681b      	ldr	r3, [r3, #0]
 8102672:	2233      	movs	r2, #51	; 0x33
 8102674:	701a      	strb	r2, [r3, #0]
                curTok->body.symbol = curTok->body.str.text[0];
 8102676:	4b18      	ldr	r3, [pc, #96]	; (81026d8 <shuntingYard+0x268>)
 8102678:	681a      	ldr	r2, [r3, #0]
 810267a:	4b17      	ldr	r3, [pc, #92]	; (81026d8 <shuntingYard+0x268>)
 810267c:	681b      	ldr	r3, [r3, #0]
 810267e:	7892      	ldrb	r2, [r2, #2]
 8102680:	705a      	strb	r2, [r3, #1]
            }
            curTok = nextToken(curTok);
 8102682:	4b15      	ldr	r3, [pc, #84]	; (81026d8 <shuntingYard+0x268>)
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	4618      	mov	r0, r3
 8102688:	f000 fa76 	bl	8102b78 <nextToken>
 810268c:	4603      	mov	r3, r0
 810268e:	4a12      	ldr	r2, [pc, #72]	; (81026d8 <shuntingYard+0x268>)
 8102690:	6013      	str	r3, [r2, #0]
        }
        next = nextToken(next);
 8102692:	6878      	ldr	r0, [r7, #4]
 8102694:	f000 fa70 	bl	8102b78 <nextToken>
 8102698:	6078      	str	r0, [r7, #4]
    while (next->type != TT_ERROR) {
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	781b      	ldrb	r3, [r3, #0]
 810269e:	2b01      	cmp	r3, #1
 81026a0:	f47f aef0 	bne.w	8102484 <shuntingYard+0x14>
    }
    while (sp >= 0) {
 81026a4:	e00f      	b.n	81026c6 <shuntingYard+0x256>
        convertRpnPop(opstack[sp--]);
 81026a6:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 81026aa:	b2d3      	uxtb	r3, r2
 81026ac:	3b01      	subs	r3, #1
 81026ae:	b2db      	uxtb	r3, r3
 81026b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 81026b4:	4613      	mov	r3, r2
 81026b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 81026ba:	4413      	add	r3, r2
 81026bc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 81026c0:	4618      	mov	r0, r3
 81026c2:	f7ff feb3 	bl	810242c <convertRpnPop>
    while (sp >= 0) {
 81026c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 81026ca:	2b00      	cmp	r3, #0
 81026cc:	daeb      	bge.n	81026a6 <shuntingYard+0x236>
    }
}
 81026ce:	bf00      	nop
 81026d0:	bf00      	nop
 81026d2:	3728      	adds	r7, #40	; 0x28
 81026d4:	46bd      	mov	sp, r7
 81026d6:	bd80      	pop	{r7, pc}
 81026d8:	10004b6c 	.word	0x10004b6c

081026dc <convertToRpn>:

void convertToRpn(token* next) {
 81026dc:	b580      	push	{r7, lr}
 81026de:	b0aa      	sub	sp, #168	; 0xa8
 81026e0:	af00      	add	r7, sp, #0
 81026e2:	6078      	str	r0, [r7, #4]
    char buf[MAX_LINE_LEN * 2];
    curTok->type = TT_ERROR;
 81026e4:	4b11      	ldr	r3, [pc, #68]	; (810272c <convertToRpn+0x50>)
 81026e6:	681b      	ldr	r3, [r3, #0]
 81026e8:	2201      	movs	r2, #1
 81026ea:	701a      	strb	r2, [r3, #0]
    memcpy(buf, next, ((char*)(void*)curTok) - ((char*)(void*)next) + 1);
 81026ec:	4b0f      	ldr	r3, [pc, #60]	; (810272c <convertToRpn+0x50>)
 81026ee:	681a      	ldr	r2, [r3, #0]
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	1ad3      	subs	r3, r2, r3
 81026f4:	3301      	adds	r3, #1
 81026f6:	461a      	mov	r2, r3
 81026f8:	f107 0308 	add.w	r3, r7, #8
 81026fc:	6879      	ldr	r1, [r7, #4]
 81026fe:	4618      	mov	r0, r3
 8102700:	f00a fa5c 	bl	810cbbc <memcpy>
    curTok = next;
 8102704:	4a09      	ldr	r2, [pc, #36]	; (810272c <convertToRpn+0x50>)
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	6013      	str	r3, [r2, #0]
    next = (token*)(void*) buf;
 810270a:	f107 0308 	add.w	r3, r7, #8
 810270e:	607b      	str	r3, [r7, #4]
    shuntingYard(next);
 8102710:	6878      	ldr	r0, [r7, #4]
 8102712:	f7ff fead 	bl	8102470 <shuntingYard>
    curTok->type = TT_ERROR;
 8102716:	4b05      	ldr	r3, [pc, #20]	; (810272c <convertToRpn+0x50>)
 8102718:	681b      	ldr	r3, [r3, #0]
 810271a:	2201      	movs	r2, #1
 810271c:	701a      	strb	r2, [r3, #0]
    prevTok = NULL;
 810271e:	4b04      	ldr	r3, [pc, #16]	; (8102730 <convertToRpn+0x54>)
 8102720:	2200      	movs	r2, #0
 8102722:	601a      	str	r2, [r3, #0]
}
 8102724:	bf00      	nop
 8102726:	37a8      	adds	r7, #168	; 0xa8
 8102728:	46bd      	mov	sp, r7
 810272a:	bd80      	pop	{r7, pc}
 810272c:	10004b6c 	.word	0x10004b6c
 8102730:	10004b68 	.word	0x10004b68

08102734 <parseExpression>:

char parseExpression(void) {
 8102734:	b580      	push	{r7, lr}
 8102736:	b086      	sub	sp, #24
 8102738:	af00      	add	r7, sp, #0
    token* startTok = curTok;
 810273a:	4b4c      	ldr	r3, [pc, #304]	; (810286c <parseExpression+0x138>)
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	613b      	str	r3, [r7, #16]
    char funcBrackets[16];
    char iFuncBr = 0;
 8102740:	2300      	movs	r3, #0
 8102742:	75fb      	strb	r3, [r7, #23]
    char state = '1';
 8102744:	2331      	movs	r3, #49	; 0x31
 8102746:	75bb      	strb	r3, [r7, #22]
    funcBrackets[iFuncBr] = 0;
 8102748:	7dfb      	ldrb	r3, [r7, #23]
 810274a:	f107 0218 	add.w	r2, r7, #24
 810274e:	4413      	add	r3, r2
 8102750:	2200      	movs	r2, #0
 8102752:	f803 2c18 	strb.w	r2, [r3, #-24]
    if (*getCurTokPos() == 0) {
 8102756:	f000 f917 	bl	8102988 <getCurTokPos>
 810275a:	4603      	mov	r3, r0
 810275c:	781b      	ldrb	r3, [r3, #0]
 810275e:	2b00      	cmp	r3, #0
 8102760:	d179      	bne.n	8102856 <parseExpression+0x122>
        setTokenError(getCurTokPos(), 10);
 8102762:	f000 f911 	bl	8102988 <getCurTokPos>
 8102766:	4603      	mov	r3, r0
 8102768:	210a      	movs	r1, #10
 810276a:	4618      	mov	r0, r3
 810276c:	f000 f9e8 	bl	8102b40 <setTokenError>
        return 0;
 8102770:	2300      	movs	r3, #0
 8102772:	e077      	b.n	8102864 <parseExpression+0x130>
    }
    while (state != 's') {
        switch (state) {
 8102774:	7dbb      	ldrb	r3, [r7, #22]
 8102776:	2b66      	cmp	r3, #102	; 0x66
 8102778:	d028      	beq.n	81027cc <parseExpression+0x98>
 810277a:	2b66      	cmp	r3, #102	; 0x66
 810277c:	dc6b      	bgt.n	8102856 <parseExpression+0x122>
 810277e:	2b31      	cmp	r3, #49	; 0x31
 8102780:	dc1c      	bgt.n	81027bc <parseExpression+0x88>
 8102782:	2b28      	cmp	r3, #40	; 0x28
 8102784:	db67      	blt.n	8102856 <parseExpression+0x122>
 8102786:	3b28      	subs	r3, #40	; 0x28
 8102788:	2b09      	cmp	r3, #9
 810278a:	d864      	bhi.n	8102856 <parseExpression+0x122>
 810278c:	a201      	add	r2, pc, #4	; (adr r2, 8102794 <parseExpression+0x60>)
 810278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102792:	bf00      	nop
 8102794:	081027e7 	.word	0x081027e7
 8102798:	0810280b 	.word	0x0810280b
 810279c:	08102857 	.word	0x08102857
 81027a0:	08102801 	.word	0x08102801
 81027a4:	0810282d 	.word	0x0810282d
 81027a8:	08102857 	.word	0x08102857
 81027ac:	08102857 	.word	0x08102857
 81027b0:	08102857 	.word	0x08102857
 81027b4:	08102857 	.word	0x08102857
 81027b8:	081027c3 	.word	0x081027c3
 81027bc:	2b65      	cmp	r3, #101	; 0x65
 81027be:	d048      	beq.n	8102852 <parseExpression+0x11e>
 81027c0:	e049      	b.n	8102856 <parseExpression+0x122>
            case '1':
                state = parseExprVal();
 81027c2:	f7ff fc63 	bl	810208c <parseExprVal>
 81027c6:	4603      	mov	r3, r0
 81027c8:	75bb      	strb	r3, [r7, #22]
                break;
 81027ca:	e044      	b.n	8102856 <parseExpression+0x122>
            case 'f':
                funcBrackets[++iFuncBr] = 1;
 81027cc:	7dfb      	ldrb	r3, [r7, #23]
 81027ce:	3301      	adds	r3, #1
 81027d0:	75fb      	strb	r3, [r7, #23]
 81027d2:	7dfb      	ldrb	r3, [r7, #23]
 81027d4:	f107 0218 	add.w	r2, r7, #24
 81027d8:	4413      	add	r3, r2
 81027da:	2201      	movs	r2, #1
 81027dc:	f803 2c18 	strb.w	r2, [r3, #-24]
                state = '1';
 81027e0:	2331      	movs	r3, #49	; 0x31
 81027e2:	75bb      	strb	r3, [r7, #22]
                break;
 81027e4:	e037      	b.n	8102856 <parseExpression+0x122>
            case '(':
                funcBrackets[++iFuncBr] = 0;
 81027e6:	7dfb      	ldrb	r3, [r7, #23]
 81027e8:	3301      	adds	r3, #1
 81027ea:	75fb      	strb	r3, [r7, #23]
 81027ec:	7dfb      	ldrb	r3, [r7, #23]
 81027ee:	f107 0218 	add.w	r2, r7, #24
 81027f2:	4413      	add	r3, r2
 81027f4:	2200      	movs	r2, #0
 81027f6:	f803 2c18 	strb.w	r2, [r3, #-24]
                state = '1';
 81027fa:	2331      	movs	r3, #49	; 0x31
 81027fc:	75bb      	strb	r3, [r7, #22]
                break;
 81027fe:	e02a      	b.n	8102856 <parseExpression+0x122>
            case '+':
                state = parseExprBop();
 8102800:	f7ff fc94 	bl	810212c <parseExprBop>
 8102804:	4603      	mov	r3, r0
 8102806:	75bb      	strb	r3, [r7, #22]
                break;
 8102808:	e025      	b.n	8102856 <parseExpression+0x122>
            case ')':
                state = parseExprRbr(iFuncBr, funcBrackets[iFuncBr]);
 810280a:	7dfb      	ldrb	r3, [r7, #23]
 810280c:	f107 0218 	add.w	r2, r7, #24
 8102810:	4413      	add	r3, r2
 8102812:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8102816:	7dfb      	ldrb	r3, [r7, #23]
 8102818:	4611      	mov	r1, r2
 810281a:	4618      	mov	r0, r3
 810281c:	f7ff fcd2 	bl	81021c4 <parseExprRbr>
 8102820:	4603      	mov	r3, r0
 8102822:	75bb      	strb	r3, [r7, #22]
                iFuncBr -= 1;
 8102824:	7dfb      	ldrb	r3, [r7, #23]
 8102826:	3b01      	subs	r3, #1
 8102828:	75fb      	strb	r3, [r7, #23]
                break;
 810282a:	e014      	b.n	8102856 <parseExpression+0x122>
            case ',':
                state = parseExprComma(funcBrackets[iFuncBr]++);
 810282c:	7dfb      	ldrb	r3, [r7, #23]
 810282e:	f107 0218 	add.w	r2, r7, #24
 8102832:	441a      	add	r2, r3
 8102834:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8102838:	1c51      	adds	r1, r2, #1
 810283a:	b2c9      	uxtb	r1, r1
 810283c:	f107 0018 	add.w	r0, r7, #24
 8102840:	4403      	add	r3, r0
 8102842:	f803 1c18 	strb.w	r1, [r3, #-24]
 8102846:	4610      	mov	r0, r2
 8102848:	f7ff fce4 	bl	8102214 <parseExprComma>
 810284c:	4603      	mov	r3, r0
 810284e:	75bb      	strb	r3, [r7, #22]
                break;
 8102850:	e001      	b.n	8102856 <parseExpression+0x122>
            case 'e':
                return 0;
 8102852:	2300      	movs	r3, #0
 8102854:	e006      	b.n	8102864 <parseExpression+0x130>
    while (state != 's') {
 8102856:	7dbb      	ldrb	r3, [r7, #22]
 8102858:	2b73      	cmp	r3, #115	; 0x73
 810285a:	d18b      	bne.n	8102774 <parseExpression+0x40>
        }
    }
    convertToRpn(startTok);
 810285c:	6938      	ldr	r0, [r7, #16]
 810285e:	f7ff ff3d 	bl	81026dc <convertToRpn>
    return 1;
 8102862:	2301      	movs	r3, #1
}
 8102864:	4618      	mov	r0, r3
 8102866:	3718      	adds	r7, #24
 8102868:	46bd      	mov	sp, r7
 810286a:	bd80      	pop	{r7, pc}
 810286c:	10004b6c 	.word	0x10004b6c

08102870 <cmdCodeByHash>:
token* curTok;
token* prevTok;
char* parseError;
char parseErrorCode;

static short cmdCodeByHash(numeric h) {
 8102870:	b580      	push	{r7, lr}
 8102872:	b082      	sub	sp, #8
 8102874:	af00      	add	r7, sp, #0
 8102876:	6078      	str	r0, [r7, #4]
    // replaced array with switch to save RAM
    switch (h) {
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	f640 520e 	movw	r2, #3342	; 0xd0e
 810287e:	4293      	cmp	r3, r2
 8102880:	d06e      	beq.n	8102960 <cmdCodeByHash+0xf0>
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	f640 520e 	movw	r2, #3342	; 0xd0e
 8102888:	4293      	cmp	r3, r2
 810288a:	dc75      	bgt.n	8102978 <cmdCodeByHash+0x108>
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	f240 72ac 	movw	r2, #1964	; 0x7ac
 8102892:	4293      	cmp	r3, r2
 8102894:	d062      	beq.n	810295c <cmdCodeByHash+0xec>
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	f240 72ac 	movw	r2, #1964	; 0x7ac
 810289c:	4293      	cmp	r3, r2
 810289e:	dc6b      	bgt.n	8102978 <cmdCodeByHash+0x108>
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	f240 7283 	movw	r2, #1923	; 0x783
 81028a6:	4293      	cmp	r3, r2
 81028a8:	d060      	beq.n	810296c <cmdCodeByHash+0xfc>
 81028aa:	687b      	ldr	r3, [r7, #4]
 81028ac:	f240 7283 	movw	r2, #1923	; 0x783
 81028b0:	4293      	cmp	r3, r2
 81028b2:	dc61      	bgt.n	8102978 <cmdCodeByHash+0x108>
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	f240 725e 	movw	r2, #1886	; 0x75e
 81028ba:	4293      	cmp	r3, r2
 81028bc:	d048      	beq.n	8102950 <cmdCodeByHash+0xe0>
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	f240 725e 	movw	r2, #1886	; 0x75e
 81028c4:	4293      	cmp	r3, r2
 81028c6:	dc57      	bgt.n	8102978 <cmdCodeByHash+0x108>
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	f240 627c 	movw	r2, #1660	; 0x67c
 81028ce:	4293      	cmp	r3, r2
 81028d0:	d03c      	beq.n	810294c <cmdCodeByHash+0xdc>
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	f240 627c 	movw	r2, #1660	; 0x67c
 81028d8:	4293      	cmp	r3, r2
 81028da:	dc4d      	bgt.n	8102978 <cmdCodeByHash+0x108>
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	f240 32e3 	movw	r2, #995	; 0x3e3
 81028e2:	4293      	cmp	r3, r2
 81028e4:	d038      	beq.n	8102958 <cmdCodeByHash+0xe8>
 81028e6:	687b      	ldr	r3, [r7, #4]
 81028e8:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 81028ec:	da44      	bge.n	8102978 <cmdCodeByHash+0x108>
 81028ee:	687b      	ldr	r3, [r7, #4]
 81028f0:	f240 32da 	movw	r2, #986	; 0x3da
 81028f4:	4293      	cmp	r3, r2
 81028f6:	d03d      	beq.n	8102974 <cmdCodeByHash+0x104>
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	f240 32da 	movw	r2, #986	; 0x3da
 81028fe:	4293      	cmp	r3, r2
 8102900:	dc3a      	bgt.n	8102978 <cmdCodeByHash+0x108>
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	f240 32cd 	movw	r2, #973	; 0x3cd
 8102908:	4293      	cmp	r3, r2
 810290a:	d031      	beq.n	8102970 <cmdCodeByHash+0x100>
 810290c:	687b      	ldr	r3, [r7, #4]
 810290e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8102912:	4293      	cmp	r3, r2
 8102914:	dc30      	bgt.n	8102978 <cmdCodeByHash+0x108>
 8102916:	687b      	ldr	r3, [r7, #4]
 8102918:	f240 12cf 	movw	r2, #463	; 0x1cf
 810291c:	4293      	cmp	r3, r2
 810291e:	d023      	beq.n	8102968 <cmdCodeByHash+0xf8>
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8102926:	da27      	bge.n	8102978 <cmdCodeByHash+0x108>
 8102928:	687b      	ldr	r3, [r7, #4]
 810292a:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 810292e:	d019      	beq.n	8102964 <cmdCodeByHash+0xf4>
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8102936:	dc1f      	bgt.n	8102978 <cmdCodeByHash+0x108>
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	2bd4      	cmp	r3, #212	; 0xd4
 810293c:	d00a      	beq.n	8102954 <cmdCodeByHash+0xe4>
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	f240 128f 	movw	r2, #399	; 0x18f
 8102944:	4293      	cmp	r3, r2
 8102946:	d117      	bne.n	8102978 <cmdCodeByHash+0x108>
        case 0x018F: // REM
            return CMD_REM;
 8102948:	2300      	movs	r3, #0
 810294a:	e019      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x067C: // PRINT
            return CMD_PRINT;
 810294c:	2301      	movs	r3, #1
 810294e:	e017      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x075E: // INPUT
            return CMD_INPUT;
 8102950:	2302      	movs	r3, #2
 8102952:	e015      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x00D4: // IF
            return CMD_IF;
 8102954:	2303      	movs	r3, #3
 8102956:	e013      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x03E3: // GOTO
            return CMD_GOTO;
 8102958:	2304      	movs	r3, #4
 810295a:	e011      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x07AC: // GOSUB
            return CMD_GOSUB;
 810295c:	2305      	movs	r3, #5
 810295e:	e00f      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x0D0E: // RETURN
            return CMD_RETURN;
 8102960:	2306      	movs	r3, #6
 8102962:	e00d      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x01CC: // END
            return CMD_END;
 8102964:	2307      	movs	r3, #7
 8102966:	e00b      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x01CF: // DIM
            return CMD_DIM;
 8102968:	230a      	movs	r3, #10
 810296a:	e009      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x0783: // DELAY
            return CMD_DELAY;
 810296c:	230b      	movs	r3, #11
 810296e:	e007      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x03CD: // DATA
            return CMD_DATA;
 8102970:	230c      	movs	r3, #12
 8102972:	e005      	b.n	8102980 <cmdCodeByHash+0x110>
        case 0x03DA: // EMIT
            return CMD_EMIT;
 8102974:	230d      	movs	r3, #13
 8102976:	e003      	b.n	8102980 <cmdCodeByHash+0x110>
        default:
            return extraCommandByHash(h);
 8102978:	6878      	ldr	r0, [r7, #4]
 810297a:	f001 fbbd 	bl	81040f8 <extraCommandByHash>
 810297e:	4603      	mov	r3, r0
    }
}
 8102980:	4618      	mov	r0, r3
 8102982:	3708      	adds	r7, #8
 8102984:	46bd      	mov	sp, r7
 8102986:	bd80      	pop	{r7, pc}

08102988 <getCurTokPos>:

char* getCurTokPos() {
 8102988:	b480      	push	{r7}
 810298a:	af00      	add	r7, sp, #0
    return cur;
 810298c:	4b03      	ldr	r3, [pc, #12]	; (810299c <getCurTokPos+0x14>)
 810298e:	681b      	ldr	r3, [r3, #0]
}
 8102990:	4618      	mov	r0, r3
 8102992:	46bd      	mov	sp, r7
 8102994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102998:	4770      	bx	lr
 810299a:	bf00      	nop
 810299c:	10004b70 	.word	0x10004b70

081029a0 <tokenSize>:

short tokenSize(token* t) {
 81029a0:	b480      	push	{r7}
 81029a2:	b083      	sub	sp, #12
 81029a4:	af00      	add	r7, sp, #0
 81029a6:	6078      	str	r0, [r7, #4]
    switch (t->type) {
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	781b      	ldrb	r3, [r3, #0]
 81029ac:	2b41      	cmp	r3, #65	; 0x41
 81029ae:	f200 8094 	bhi.w	8102ada <tokenSize+0x13a>
 81029b2:	a201      	add	r2, pc, #4	; (adr r2, 81029b8 <tokenSize+0x18>)
 81029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81029b8:	08102ad7 	.word	0x08102ad7
 81029bc:	08102ad7 	.word	0x08102ad7
 81029c0:	08102adb 	.word	0x08102adb
 81029c4:	08102adb 	.word	0x08102adb
 81029c8:	08102adb 	.word	0x08102adb
 81029cc:	08102adb 	.word	0x08102adb
 81029d0:	08102adb 	.word	0x08102adb
 81029d4:	08102adb 	.word	0x08102adb
 81029d8:	08102adb 	.word	0x08102adb
 81029dc:	08102adb 	.word	0x08102adb
 81029e0:	08102adb 	.word	0x08102adb
 81029e4:	08102adb 	.word	0x08102adb
 81029e8:	08102adb 	.word	0x08102adb
 81029ec:	08102adb 	.word	0x08102adb
 81029f0:	08102adb 	.word	0x08102adb
 81029f4:	08102adb 	.word	0x08102adb
 81029f8:	08102ac1 	.word	0x08102ac1
 81029fc:	08102adb 	.word	0x08102adb
 8102a00:	08102adb 	.word	0x08102adb
 8102a04:	08102adb 	.word	0x08102adb
 8102a08:	08102adb 	.word	0x08102adb
 8102a0c:	08102adb 	.word	0x08102adb
 8102a10:	08102adb 	.word	0x08102adb
 8102a14:	08102adb 	.word	0x08102adb
 8102a18:	08102adb 	.word	0x08102adb
 8102a1c:	08102adb 	.word	0x08102adb
 8102a20:	08102adb 	.word	0x08102adb
 8102a24:	08102adb 	.word	0x08102adb
 8102a28:	08102adb 	.word	0x08102adb
 8102a2c:	08102adb 	.word	0x08102adb
 8102a30:	08102adb 	.word	0x08102adb
 8102a34:	08102adb 	.word	0x08102adb
 8102a38:	08102ac5 	.word	0x08102ac5
 8102a3c:	08102ad3 	.word	0x08102ad3
 8102a40:	08102ac5 	.word	0x08102ac5
 8102a44:	08102ac5 	.word	0x08102ac5
 8102a48:	08102adb 	.word	0x08102adb
 8102a4c:	08102adb 	.word	0x08102adb
 8102a50:	08102adb 	.word	0x08102adb
 8102a54:	08102adb 	.word	0x08102adb
 8102a58:	08102adb 	.word	0x08102adb
 8102a5c:	08102adb 	.word	0x08102adb
 8102a60:	08102adb 	.word	0x08102adb
 8102a64:	08102adb 	.word	0x08102adb
 8102a68:	08102adb 	.word	0x08102adb
 8102a6c:	08102adb 	.word	0x08102adb
 8102a70:	08102adb 	.word	0x08102adb
 8102a74:	08102adb 	.word	0x08102adb
 8102a78:	08102ad3 	.word	0x08102ad3
 8102a7c:	08102ad3 	.word	0x08102ad3
 8102a80:	08102ad7 	.word	0x08102ad7
 8102a84:	08102ad3 	.word	0x08102ad3
 8102a88:	08102adb 	.word	0x08102adb
 8102a8c:	08102adb 	.word	0x08102adb
 8102a90:	08102adb 	.word	0x08102adb
 8102a94:	08102adb 	.word	0x08102adb
 8102a98:	08102adb 	.word	0x08102adb
 8102a9c:	08102adb 	.word	0x08102adb
 8102aa0:	08102adb 	.word	0x08102adb
 8102aa4:	08102adb 	.word	0x08102adb
 8102aa8:	08102adb 	.word	0x08102adb
 8102aac:	08102adb 	.word	0x08102adb
 8102ab0:	08102adb 	.word	0x08102adb
 8102ab4:	08102adb 	.word	0x08102adb
 8102ab8:	08102ac5 	.word	0x08102ac5
 8102abc:	08102ac5 	.word	0x08102ac5
        case TT_NUMBER:
            return 1 + sizeof(t->body.integer);
 8102ac0:	2305      	movs	r3, #5
 8102ac2:	e00b      	b.n	8102adc <tokenSize+0x13c>
        case TT_NAME:
        case TT_COMMENT:
        case TT_LITERAL:
        case TT_FUNCTION:
        case TT_VARIABLE:
            return 2 + t->body.str.len;
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	785b      	ldrb	r3, [r3, #1]
 8102ac8:	b29b      	uxth	r3, r3
 8102aca:	3302      	adds	r3, #2
 8102acc:	b29b      	uxth	r3, r3
 8102ace:	b21b      	sxth	r3, r3
 8102ad0:	e004      	b.n	8102adc <tokenSize+0x13c>
        case TT_FUNC_END:
        case TT_SYMBOL:
        case TT_ARRAY:
        case TT_COMMAND:
            return 1 + sizeof(t->body.symbol);
 8102ad2:	2302      	movs	r3, #2
 8102ad4:	e002      	b.n	8102adc <tokenSize+0x13c>
        case TT_NONE:
        case TT_ERROR:
        case TT_SEPARATOR:
            return 1;
 8102ad6:	2301      	movs	r3, #1
 8102ad8:	e000      	b.n	8102adc <tokenSize+0x13c>
    }
    return 0;
 8102ada:	2300      	movs	r3, #0
}
 8102adc:	4618      	mov	r0, r3
 8102ade:	370c      	adds	r7, #12
 8102ae0:	46bd      	mov	sp, r7
 8102ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ae6:	4770      	bx	lr

08102ae8 <tokenChainSize>:

short tokenChainSize(token* src) {
 8102ae8:	b580      	push	{r7, lr}
 8102aea:	b084      	sub	sp, #16
 8102aec:	af00      	add	r7, sp, #0
 8102aee:	6078      	str	r0, [r7, #4]
    token* t = src;
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	60fb      	str	r3, [r7, #12]
    while (t->type != TT_NONE) {
 8102af4:	e003      	b.n	8102afe <tokenChainSize+0x16>
        t = nextToken(t);
 8102af6:	68f8      	ldr	r0, [r7, #12]
 8102af8:	f000 f83e 	bl	8102b78 <nextToken>
 8102afc:	60f8      	str	r0, [r7, #12]
    while (t->type != TT_NONE) {
 8102afe:	68fb      	ldr	r3, [r7, #12]
 8102b00:	781b      	ldrb	r3, [r3, #0]
 8102b02:	2b00      	cmp	r3, #0
 8102b04:	d1f7      	bne.n	8102af6 <tokenChainSize+0xe>
    }
    return (short)((char*)(void*)t - (char*)(void*)src) + 1;
 8102b06:	68fa      	ldr	r2, [r7, #12]
 8102b08:	687b      	ldr	r3, [r7, #4]
 8102b0a:	1ad3      	subs	r3, r2, r3
 8102b0c:	b29b      	uxth	r3, r3
 8102b0e:	3301      	adds	r3, #1
 8102b10:	b29b      	uxth	r3, r3
 8102b12:	b21b      	sxth	r3, r3
}
 8102b14:	4618      	mov	r0, r3
 8102b16:	3710      	adds	r7, #16
 8102b18:	46bd      	mov	sp, r7
 8102b1a:	bd80      	pop	{r7, pc}

08102b1c <copyToken>:

void copyToken(token* dst, token* src) {
 8102b1c:	b580      	push	{r7, lr}
 8102b1e:	b082      	sub	sp, #8
 8102b20:	af00      	add	r7, sp, #0
 8102b22:	6078      	str	r0, [r7, #4]
 8102b24:	6039      	str	r1, [r7, #0]
    memcpy(dst, src, tokenSize(src));
 8102b26:	6838      	ldr	r0, [r7, #0]
 8102b28:	f7ff ff3a 	bl	81029a0 <tokenSize>
 8102b2c:	4603      	mov	r3, r0
 8102b2e:	461a      	mov	r2, r3
 8102b30:	6839      	ldr	r1, [r7, #0]
 8102b32:	6878      	ldr	r0, [r7, #4]
 8102b34:	f00a f842 	bl	810cbbc <memcpy>
}
 8102b38:	bf00      	nop
 8102b3a:	3708      	adds	r7, #8
 8102b3c:	46bd      	mov	sp, r7
 8102b3e:	bd80      	pop	{r7, pc}

08102b40 <setTokenError>:

void setTokenError(char* pos, char code) {
 8102b40:	b480      	push	{r7}
 8102b42:	b083      	sub	sp, #12
 8102b44:	af00      	add	r7, sp, #0
 8102b46:	6078      	str	r0, [r7, #4]
 8102b48:	460b      	mov	r3, r1
 8102b4a:	70fb      	strb	r3, [r7, #3]
    parseErrorCode = code;
 8102b4c:	4a07      	ldr	r2, [pc, #28]	; (8102b6c <setTokenError+0x2c>)
 8102b4e:	78fb      	ldrb	r3, [r7, #3]
 8102b50:	7013      	strb	r3, [r2, #0]
    parseError = pos;
 8102b52:	4a07      	ldr	r2, [pc, #28]	; (8102b70 <setTokenError+0x30>)
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	6013      	str	r3, [r2, #0]
    curTok->type = TT_ERROR;
 8102b58:	4b06      	ldr	r3, [pc, #24]	; (8102b74 <setTokenError+0x34>)
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	2201      	movs	r2, #1
 8102b5e:	701a      	strb	r2, [r3, #0]
}
 8102b60:	bf00      	nop
 8102b62:	370c      	adds	r7, #12
 8102b64:	46bd      	mov	sp, r7
 8102b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b6a:	4770      	bx	lr
 8102b6c:	10004b74 	.word	0x10004b74
 8102b70:	10004b64 	.word	0x10004b64
 8102b74:	10004b6c 	.word	0x10004b6c

08102b78 <nextToken>:

token* nextToken(token* t) {
 8102b78:	b580      	push	{r7, lr}
 8102b7a:	b082      	sub	sp, #8
 8102b7c:	af00      	add	r7, sp, #0
 8102b7e:	6078      	str	r0, [r7, #4]
    return (token*)(void*)((char*)(void*)t + tokenSize(t));
 8102b80:	6878      	ldr	r0, [r7, #4]
 8102b82:	f7ff ff0d 	bl	81029a0 <tokenSize>
 8102b86:	4603      	mov	r3, r0
 8102b88:	461a      	mov	r2, r3
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	4413      	add	r3, r2
}
 8102b8e:	4618      	mov	r0, r3
 8102b90:	3708      	adds	r7, #8
 8102b92:	46bd      	mov	sp, r7
 8102b94:	bd80      	pop	{r7, pc}
	...

08102b98 <skipTokenInInput>:

void skipTokenInInput(char offset) {
 8102b98:	b580      	push	{r7, lr}
 8102b9a:	b082      	sub	sp, #8
 8102b9c:	af00      	add	r7, sp, #0
 8102b9e:	4603      	mov	r3, r0
 8102ba0:	71fb      	strb	r3, [r7, #7]
    cur = skipSpaces(cur + offset);
 8102ba2:	4b07      	ldr	r3, [pc, #28]	; (8102bc0 <skipTokenInInput+0x28>)
 8102ba4:	681a      	ldr	r2, [r3, #0]
 8102ba6:	79fb      	ldrb	r3, [r7, #7]
 8102ba8:	4413      	add	r3, r2
 8102baa:	4618      	mov	r0, r3
 8102bac:	f000 fe5e 	bl	810386c <skipSpaces>
 8102bb0:	4603      	mov	r3, r0
 8102bb2:	4a03      	ldr	r2, [pc, #12]	; (8102bc0 <skipTokenInInput+0x28>)
 8102bb4:	6013      	str	r3, [r2, #0]
}
 8102bb6:	bf00      	nop
 8102bb8:	3708      	adds	r7, #8
 8102bba:	46bd      	mov	sp, r7
 8102bbc:	bd80      	pop	{r7, pc}
 8102bbe:	bf00      	nop
 8102bc0:	10004b70 	.word	0x10004b70

08102bc4 <advance>:

static void advance(char* s) {
 8102bc4:	b580      	push	{r7, lr}
 8102bc6:	b082      	sub	sp, #8
 8102bc8:	af00      	add	r7, sp, #0
 8102bca:	6078      	str	r0, [r7, #4]
    cur = skipSpaces(s);
 8102bcc:	6878      	ldr	r0, [r7, #4]
 8102bce:	f000 fe4d 	bl	810386c <skipSpaces>
 8102bd2:	4603      	mov	r3, r0
 8102bd4:	4a08      	ldr	r2, [pc, #32]	; (8102bf8 <advance+0x34>)
 8102bd6:	6013      	str	r3, [r2, #0]
    prevTok = curTok;
 8102bd8:	4b08      	ldr	r3, [pc, #32]	; (8102bfc <advance+0x38>)
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	4a08      	ldr	r2, [pc, #32]	; (8102c00 <advance+0x3c>)
 8102bde:	6013      	str	r3, [r2, #0]
    curTok = nextToken(curTok);
 8102be0:	4b06      	ldr	r3, [pc, #24]	; (8102bfc <advance+0x38>)
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	4618      	mov	r0, r3
 8102be6:	f7ff ffc7 	bl	8102b78 <nextToken>
 8102bea:	4603      	mov	r3, r0
 8102bec:	4a03      	ldr	r2, [pc, #12]	; (8102bfc <advance+0x38>)
 8102bee:	6013      	str	r3, [r2, #0]
}
 8102bf0:	bf00      	nop
 8102bf2:	3708      	adds	r7, #8
 8102bf4:	46bd      	mov	sp, r7
 8102bf6:	bd80      	pop	{r7, pc}
 8102bf8:	10004b70 	.word	0x10004b70
 8102bfc:	10004b6c 	.word	0x10004b6c
 8102c00:	10004b68 	.word	0x10004b68

08102c04 <substCommandFound>:

static void substCommandFound(char code) {
 8102c04:	b580      	push	{r7, lr}
 8102c06:	b082      	sub	sp, #8
 8102c08:	af00      	add	r7, sp, #0
 8102c0a:	4603      	mov	r3, r0
 8102c0c:	71fb      	strb	r3, [r7, #7]
    curTok->type = TT_COMMAND;
 8102c0e:	4b0a      	ldr	r3, [pc, #40]	; (8102c38 <substCommandFound+0x34>)
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	2221      	movs	r2, #33	; 0x21
 8102c14:	701a      	strb	r2, [r3, #0]
    curTok->body.command = code;
 8102c16:	4b08      	ldr	r3, [pc, #32]	; (8102c38 <substCommandFound+0x34>)
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	79fa      	ldrb	r2, [r7, #7]
 8102c1c:	705a      	strb	r2, [r3, #1]
    nextToken(curTok)->type = TT_ERROR;
 8102c1e:	4b06      	ldr	r3, [pc, #24]	; (8102c38 <substCommandFound+0x34>)
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	4618      	mov	r0, r3
 8102c24:	f7ff ffa8 	bl	8102b78 <nextToken>
 8102c28:	4603      	mov	r3, r0
 8102c2a:	2201      	movs	r2, #1
 8102c2c:	701a      	strb	r2, [r3, #0]
}
 8102c2e:	bf00      	nop
 8102c30:	3708      	adds	r7, #8
 8102c32:	46bd      	mov	sp, r7
 8102c34:	bd80      	pop	{r7, pc}
 8102c36:	bf00      	nop
 8102c38:	10004b6c 	.word	0x10004b6c

08102c3c <trySubstCmd>:

void trySubstCmd(void) {
 8102c3c:	b580      	push	{r7, lr}
 8102c3e:	b082      	sub	sp, #8
 8102c40:	af00      	add	r7, sp, #0
    short i;
    numeric cmdHash = tokenHash(curTok);
 8102c42:	4b0c      	ldr	r3, [pc, #48]	; (8102c74 <trySubstCmd+0x38>)
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	4618      	mov	r0, r3
 8102c48:	f000 fd89 	bl	810375e <tokenHash>
 8102c4c:	6078      	str	r0, [r7, #4]
    i = cmdCodeByHash(cmdHash);
 8102c4e:	6878      	ldr	r0, [r7, #4]
 8102c50:	f7ff fe0e 	bl	8102870 <cmdCodeByHash>
 8102c54:	4603      	mov	r3, r0
 8102c56:	807b      	strh	r3, [r7, #2]
    if (i >= 0) {
 8102c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8102c5c:	2b00      	cmp	r3, #0
 8102c5e:	db05      	blt.n	8102c6c <trySubstCmd+0x30>
        substCommandFound(i);
 8102c60:	887b      	ldrh	r3, [r7, #2]
 8102c62:	b2db      	uxtb	r3, r3
 8102c64:	4618      	mov	r0, r3
 8102c66:	f7ff ffcd 	bl	8102c04 <substCommandFound>
        return;
 8102c6a:	bf00      	nop
    }
}
 8102c6c:	3708      	adds	r7, #8
 8102c6e:	46bd      	mov	sp, r7
 8102c70:	bd80      	pop	{r7, pc}
 8102c72:	bf00      	nop
 8102c74:	10004b6c 	.word	0x10004b6c

08102c78 <parseName>:

char parseName(char checkCmd) {
 8102c78:	b5b0      	push	{r4, r5, r7, lr}
 8102c7a:	b084      	sub	sp, #16
 8102c7c:	af00      	add	r7, sp, #0
 8102c7e:	4603      	mov	r3, r0
 8102c80:	71fb      	strb	r3, [r7, #7]
    short i = 0;
 8102c82:	2300      	movs	r3, #0
 8102c84:	81fb      	strh	r3, [r7, #14]
    if (!isAlpha(*cur)) {
 8102c86:	4b25      	ldr	r3, [pc, #148]	; (8102d1c <parseName+0xa4>)
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	781b      	ldrb	r3, [r3, #0]
 8102c8c:	4618      	mov	r0, r3
 8102c8e:	f000 ff1a 	bl	8103ac6 <isAlpha>
 8102c92:	4603      	mov	r3, r0
 8102c94:	2b00      	cmp	r3, #0
 8102c96:	d101      	bne.n	8102c9c <parseName+0x24>
        return 0;
 8102c98:	2300      	movs	r3, #0
 8102c9a:	e03a      	b.n	8102d12 <parseName+0x9a>
    }
    curTok->type = TT_NAME;
 8102c9c:	4b20      	ldr	r3, [pc, #128]	; (8102d20 <parseName+0xa8>)
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	2220      	movs	r2, #32
 8102ca2:	701a      	strb	r2, [r3, #0]
    while (isAlNum(cur[i])) {
 8102ca4:	e016      	b.n	8102cd4 <parseName+0x5c>
        curTok->body.str.text[i] = toUpper(cur[i]);
 8102ca6:	4b1d      	ldr	r3, [pc, #116]	; (8102d1c <parseName+0xa4>)
 8102ca8:	681a      	ldr	r2, [r3, #0]
 8102caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102cae:	4413      	add	r3, r2
 8102cb0:	781b      	ldrb	r3, [r3, #0]
 8102cb2:	4a1b      	ldr	r2, [pc, #108]	; (8102d20 <parseName+0xa8>)
 8102cb4:	6815      	ldr	r5, [r2, #0]
 8102cb6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8102cba:	4618      	mov	r0, r3
 8102cbc:	f000 feed 	bl	8103a9a <toUpper>
 8102cc0:	4603      	mov	r3, r0
 8102cc2:	461a      	mov	r2, r3
 8102cc4:	192b      	adds	r3, r5, r4
 8102cc6:	709a      	strb	r2, [r3, #2]
        i++;
 8102cc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102ccc:	b29b      	uxth	r3, r3
 8102cce:	3301      	adds	r3, #1
 8102cd0:	b29b      	uxth	r3, r3
 8102cd2:	81fb      	strh	r3, [r7, #14]
    while (isAlNum(cur[i])) {
 8102cd4:	4b11      	ldr	r3, [pc, #68]	; (8102d1c <parseName+0xa4>)
 8102cd6:	681a      	ldr	r2, [r3, #0]
 8102cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102cdc:	4413      	add	r3, r2
 8102cde:	781b      	ldrb	r3, [r3, #0]
 8102ce0:	4618      	mov	r0, r3
 8102ce2:	f000 ff6e 	bl	8103bc2 <isAlNum>
 8102ce6:	4603      	mov	r3, r0
 8102ce8:	2b00      	cmp	r3, #0
 8102cea:	d1dc      	bne.n	8102ca6 <parseName+0x2e>
    }
    curTok->body.str.len = i;
 8102cec:	4b0c      	ldr	r3, [pc, #48]	; (8102d20 <parseName+0xa8>)
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	89fa      	ldrh	r2, [r7, #14]
 8102cf2:	b2d2      	uxtb	r2, r2
 8102cf4:	705a      	strb	r2, [r3, #1]
    if (checkCmd) {
 8102cf6:	79fb      	ldrb	r3, [r7, #7]
 8102cf8:	2b00      	cmp	r3, #0
 8102cfa:	d001      	beq.n	8102d00 <parseName+0x88>
        trySubstCmd();
 8102cfc:	f7ff ff9e 	bl	8102c3c <trySubstCmd>
    }
    advance(cur + i);
 8102d00:	4b06      	ldr	r3, [pc, #24]	; (8102d1c <parseName+0xa4>)
 8102d02:	681a      	ldr	r2, [r3, #0]
 8102d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102d08:	4413      	add	r3, r2
 8102d0a:	4618      	mov	r0, r3
 8102d0c:	f7ff ff5a 	bl	8102bc4 <advance>
    return 1;
 8102d10:	2301      	movs	r3, #1
}
 8102d12:	4618      	mov	r0, r3
 8102d14:	3710      	adds	r7, #16
 8102d16:	46bd      	mov	sp, r7
 8102d18:	bdb0      	pop	{r4, r5, r7, pc}
 8102d1a:	bf00      	nop
 8102d1c:	10004b70 	.word	0x10004b70
 8102d20:	10004b6c 	.word	0x10004b6c

08102d24 <parseChar>:

char parseChar(void) {
 8102d24:	b580      	push	{r7, lr}
 8102d26:	af00      	add	r7, sp, #0
    if (cur[0] != '\'') {
 8102d28:	4b0f      	ldr	r3, [pc, #60]	; (8102d68 <parseChar+0x44>)
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	781b      	ldrb	r3, [r3, #0]
 8102d2e:	2b27      	cmp	r3, #39	; 0x27
 8102d30:	d001      	beq.n	8102d36 <parseChar+0x12>
        return 0;
 8102d32:	2300      	movs	r3, #0
 8102d34:	e016      	b.n	8102d64 <parseChar+0x40>
    }
    curTok->type = TT_NUMBER;
 8102d36:	4b0d      	ldr	r3, [pc, #52]	; (8102d6c <parseChar+0x48>)
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	2210      	movs	r2, #16
 8102d3c:	701a      	strb	r2, [r3, #0]
    curTok->body.integer = ((unsigned char*) cur)[1];
 8102d3e:	4b0a      	ldr	r3, [pc, #40]	; (8102d68 <parseChar+0x44>)
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	3301      	adds	r3, #1
 8102d44:	781a      	ldrb	r2, [r3, #0]
 8102d46:	4b09      	ldr	r3, [pc, #36]	; (8102d6c <parseChar+0x48>)
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	f8c3 2001 	str.w	r2, [r3, #1]
    cur += 2;
 8102d4e:	4b06      	ldr	r3, [pc, #24]	; (8102d68 <parseChar+0x44>)
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	3302      	adds	r3, #2
 8102d54:	4a04      	ldr	r2, [pc, #16]	; (8102d68 <parseChar+0x44>)
 8102d56:	6013      	str	r3, [r2, #0]
    advance(cur);
 8102d58:	4b03      	ldr	r3, [pc, #12]	; (8102d68 <parseChar+0x44>)
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	4618      	mov	r0, r3
 8102d5e:	f7ff ff31 	bl	8102bc4 <advance>
    return 1;
 8102d62:	2301      	movs	r3, #1
}
 8102d64:	4618      	mov	r0, r3
 8102d66:	bd80      	pop	{r7, pc}
 8102d68:	10004b70 	.word	0x10004b70
 8102d6c:	10004b6c 	.word	0x10004b6c

08102d70 <parseNumber>:

char parseNumber(void) {
 8102d70:	b590      	push	{r4, r7, lr}
 8102d72:	b083      	sub	sp, #12
 8102d74:	af00      	add	r7, sp, #0
    char base = 10;
 8102d76:	230a      	movs	r3, #10
 8102d78:	71fb      	strb	r3, [r7, #7]
    if (!isDigit(*cur)) {
 8102d7a:	4b3b      	ldr	r3, [pc, #236]	; (8102e68 <parseNumber+0xf8>)
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	781b      	ldrb	r3, [r3, #0]
 8102d80:	4618      	mov	r0, r3
 8102d82:	f000 feb9 	bl	8103af8 <isDigit>
 8102d86:	4603      	mov	r3, r0
 8102d88:	2b00      	cmp	r3, #0
 8102d8a:	d103      	bne.n	8102d94 <parseNumber+0x24>
        return parseChar();
 8102d8c:	f7ff ffca 	bl	8102d24 <parseChar>
 8102d90:	4603      	mov	r3, r0
 8102d92:	e065      	b.n	8102e60 <parseNumber+0xf0>
    }
    curTok->type = TT_NUMBER;
 8102d94:	4b35      	ldr	r3, [pc, #212]	; (8102e6c <parseNumber+0xfc>)
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	2210      	movs	r2, #16
 8102d9a:	701a      	strb	r2, [r3, #0]
    curTok->body.integer = 0;
 8102d9c:	4b33      	ldr	r3, [pc, #204]	; (8102e6c <parseNumber+0xfc>)
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	2200      	movs	r2, #0
 8102da2:	705a      	strb	r2, [r3, #1]
 8102da4:	2200      	movs	r2, #0
 8102da6:	709a      	strb	r2, [r3, #2]
 8102da8:	2200      	movs	r2, #0
 8102daa:	70da      	strb	r2, [r3, #3]
 8102dac:	2200      	movs	r2, #0
 8102dae:	711a      	strb	r2, [r3, #4]
    if (cur[0] == '0') {
 8102db0:	4b2d      	ldr	r3, [pc, #180]	; (8102e68 <parseNumber+0xf8>)
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	781b      	ldrb	r3, [r3, #0]
 8102db6:	2b30      	cmp	r3, #48	; 0x30
 8102db8:	d141      	bne.n	8102e3e <parseNumber+0xce>
        if (toUpper(cur[1]) == 'X') {
 8102dba:	4b2b      	ldr	r3, [pc, #172]	; (8102e68 <parseNumber+0xf8>)
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	3301      	adds	r3, #1
 8102dc0:	781b      	ldrb	r3, [r3, #0]
 8102dc2:	4618      	mov	r0, r3
 8102dc4:	f000 fe69 	bl	8103a9a <toUpper>
 8102dc8:	4603      	mov	r3, r0
 8102dca:	2b58      	cmp	r3, #88	; 0x58
 8102dcc:	d107      	bne.n	8102dde <parseNumber+0x6e>
            base = 16;
 8102dce:	2310      	movs	r3, #16
 8102dd0:	71fb      	strb	r3, [r7, #7]
            cur += 2;
 8102dd2:	4b25      	ldr	r3, [pc, #148]	; (8102e68 <parseNumber+0xf8>)
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	3302      	adds	r3, #2
 8102dd8:	4a23      	ldr	r2, [pc, #140]	; (8102e68 <parseNumber+0xf8>)
 8102dda:	6013      	str	r3, [r2, #0]
 8102ddc:	e02f      	b.n	8102e3e <parseNumber+0xce>
        } else if (toUpper(cur[1]) == 'B') {
 8102dde:	4b22      	ldr	r3, [pc, #136]	; (8102e68 <parseNumber+0xf8>)
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	3301      	adds	r3, #1
 8102de4:	781b      	ldrb	r3, [r3, #0]
 8102de6:	4618      	mov	r0, r3
 8102de8:	f000 fe57 	bl	8103a9a <toUpper>
 8102dec:	4603      	mov	r3, r0
 8102dee:	2b42      	cmp	r3, #66	; 0x42
 8102df0:	d107      	bne.n	8102e02 <parseNumber+0x92>
            base = 2;
 8102df2:	2302      	movs	r3, #2
 8102df4:	71fb      	strb	r3, [r7, #7]
            cur += 2;
 8102df6:	4b1c      	ldr	r3, [pc, #112]	; (8102e68 <parseNumber+0xf8>)
 8102df8:	681b      	ldr	r3, [r3, #0]
 8102dfa:	3302      	adds	r3, #2
 8102dfc:	4a1a      	ldr	r2, [pc, #104]	; (8102e68 <parseNumber+0xf8>)
 8102dfe:	6013      	str	r3, [r2, #0]
 8102e00:	e01d      	b.n	8102e3e <parseNumber+0xce>
        } else {
            base = 8;
 8102e02:	2308      	movs	r3, #8
 8102e04:	71fb      	strb	r3, [r7, #7]
        }
    }
    while (isDigitBased(*cur, base)) {
 8102e06:	e01a      	b.n	8102e3e <parseNumber+0xce>
        curTok->body.integer = curTok->body.integer * base + makeDigit(*cur, base);
 8102e08:	4b18      	ldr	r3, [pc, #96]	; (8102e6c <parseNumber+0xfc>)
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8102e10:	79fa      	ldrb	r2, [r7, #7]
 8102e12:	fb02 f403 	mul.w	r4, r2, r3
 8102e16:	4b14      	ldr	r3, [pc, #80]	; (8102e68 <parseNumber+0xf8>)
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	781b      	ldrb	r3, [r3, #0]
 8102e1c:	79fa      	ldrb	r2, [r7, #7]
 8102e1e:	4611      	mov	r1, r2
 8102e20:	4618      	mov	r0, r3
 8102e22:	f000 feaf 	bl	8103b84 <makeDigit>
 8102e26:	4603      	mov	r3, r0
 8102e28:	461a      	mov	r2, r3
 8102e2a:	4b10      	ldr	r3, [pc, #64]	; (8102e6c <parseNumber+0xfc>)
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	4422      	add	r2, r4
 8102e30:	f8c3 2001 	str.w	r2, [r3, #1]
        cur++;
 8102e34:	4b0c      	ldr	r3, [pc, #48]	; (8102e68 <parseNumber+0xf8>)
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	3301      	adds	r3, #1
 8102e3a:	4a0b      	ldr	r2, [pc, #44]	; (8102e68 <parseNumber+0xf8>)
 8102e3c:	6013      	str	r3, [r2, #0]
    while (isDigitBased(*cur, base)) {
 8102e3e:	4b0a      	ldr	r3, [pc, #40]	; (8102e68 <parseNumber+0xf8>)
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	781b      	ldrb	r3, [r3, #0]
 8102e44:	79fa      	ldrb	r2, [r7, #7]
 8102e46:	4611      	mov	r1, r2
 8102e48:	4618      	mov	r0, r3
 8102e4a:	f000 fe6a 	bl	8103b22 <isDigitBased>
 8102e4e:	4603      	mov	r3, r0
 8102e50:	2b00      	cmp	r3, #0
 8102e52:	d1d9      	bne.n	8102e08 <parseNumber+0x98>
    }
    advance(cur);
 8102e54:	4b04      	ldr	r3, [pc, #16]	; (8102e68 <parseNumber+0xf8>)
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	4618      	mov	r0, r3
 8102e5a:	f7ff feb3 	bl	8102bc4 <advance>
    return 1;
 8102e5e:	2301      	movs	r3, #1
}
 8102e60:	4618      	mov	r0, r3
 8102e62:	370c      	adds	r7, #12
 8102e64:	46bd      	mov	sp, r7
 8102e66:	bd90      	pop	{r4, r7, pc}
 8102e68:	10004b70 	.word	0x10004b70
 8102e6c:	10004b6c 	.word	0x10004b6c

08102e70 <parseNone>:

char parseNone(void) {
 8102e70:	b580      	push	{r7, lr}
 8102e72:	af00      	add	r7, sp, #0
    if (*cur != 0) {
 8102e74:	4b09      	ldr	r3, [pc, #36]	; (8102e9c <parseNone+0x2c>)
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	781b      	ldrb	r3, [r3, #0]
 8102e7a:	2b00      	cmp	r3, #0
 8102e7c:	d007      	beq.n	8102e8e <parseNone+0x1e>
        setTokenError(cur, 5);
 8102e7e:	4b07      	ldr	r3, [pc, #28]	; (8102e9c <parseNone+0x2c>)
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	2105      	movs	r1, #5
 8102e84:	4618      	mov	r0, r3
 8102e86:	f7ff fe5b 	bl	8102b40 <setTokenError>
        return 0;
 8102e8a:	2300      	movs	r3, #0
 8102e8c:	e004      	b.n	8102e98 <parseNone+0x28>
    }
    curTok->type = TT_NONE;
 8102e8e:	4b04      	ldr	r3, [pc, #16]	; (8102ea0 <parseNone+0x30>)
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	2200      	movs	r2, #0
 8102e94:	701a      	strb	r2, [r3, #0]
    return 1;
 8102e96:	2301      	movs	r3, #1
}
 8102e98:	4618      	mov	r0, r3
 8102e9a:	bd80      	pop	{r7, pc}
 8102e9c:	10004b70 	.word	0x10004b70
 8102ea0:	10004b6c 	.word	0x10004b6c

08102ea4 <parseComment>:

char parseComment(void) {
 8102ea4:	b580      	push	{r7, lr}
 8102ea6:	b082      	sub	sp, #8
 8102ea8:	af00      	add	r7, sp, #0
    unsigned char len = strlen(cur);
 8102eaa:	4b13      	ldr	r3, [pc, #76]	; (8102ef8 <parseComment+0x54>)
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	4618      	mov	r0, r3
 8102eb0:	f7fd fa16 	bl	81002e0 <strlen>
 8102eb4:	4603      	mov	r3, r0
 8102eb6:	71fb      	strb	r3, [r7, #7]
    curTok->type = TT_COMMENT;
 8102eb8:	4b10      	ldr	r3, [pc, #64]	; (8102efc <parseComment+0x58>)
 8102eba:	681b      	ldr	r3, [r3, #0]
 8102ebc:	2241      	movs	r2, #65	; 0x41
 8102ebe:	701a      	strb	r2, [r3, #0]
    curTok->body.str.len = len;
 8102ec0:	4b0e      	ldr	r3, [pc, #56]	; (8102efc <parseComment+0x58>)
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	79fa      	ldrb	r2, [r7, #7]
 8102ec6:	705a      	strb	r2, [r3, #1]
    memcpy(&(curTok->body.str.text), cur, len);
 8102ec8:	4b0c      	ldr	r3, [pc, #48]	; (8102efc <parseComment+0x58>)
 8102eca:	681b      	ldr	r3, [r3, #0]
 8102ecc:	3302      	adds	r3, #2
 8102ece:	4a0a      	ldr	r2, [pc, #40]	; (8102ef8 <parseComment+0x54>)
 8102ed0:	6811      	ldr	r1, [r2, #0]
 8102ed2:	79fa      	ldrb	r2, [r7, #7]
 8102ed4:	4618      	mov	r0, r3
 8102ed6:	f009 fe71 	bl	810cbbc <memcpy>
    advance(cur + len);
 8102eda:	4b07      	ldr	r3, [pc, #28]	; (8102ef8 <parseComment+0x54>)
 8102edc:	681a      	ldr	r2, [r3, #0]
 8102ede:	79fb      	ldrb	r3, [r7, #7]
 8102ee0:	4413      	add	r3, r2
 8102ee2:	4618      	mov	r0, r3
 8102ee4:	f7ff fe6e 	bl	8102bc4 <advance>
    return parseNone();
 8102ee8:	f7ff ffc2 	bl	8102e70 <parseNone>
 8102eec:	4603      	mov	r3, r0
}
 8102eee:	4618      	mov	r0, r3
 8102ef0:	3708      	adds	r7, #8
 8102ef2:	46bd      	mov	sp, r7
 8102ef4:	bd80      	pop	{r7, pc}
 8102ef6:	bf00      	nop
 8102ef8:	10004b70 	.word	0x10004b70
 8102efc:	10004b6c 	.word	0x10004b6c

08102f00 <parseLiteral>:

char parseLiteral() {
 8102f00:	b580      	push	{r7, lr}
 8102f02:	b082      	sub	sp, #8
 8102f04:	af00      	add	r7, sp, #0
    if (*cur != '"') {
 8102f06:	4b29      	ldr	r3, [pc, #164]	; (8102fac <parseLiteral+0xac>)
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	781b      	ldrb	r3, [r3, #0]
 8102f0c:	2b22      	cmp	r3, #34	; 0x22
 8102f0e:	d001      	beq.n	8102f14 <parseLiteral+0x14>
        return 0;
 8102f10:	2300      	movs	r3, #0
 8102f12:	e046      	b.n	8102fa2 <parseLiteral+0xa2>
    }
    short i = 1;
 8102f14:	2301      	movs	r3, #1
 8102f16:	80fb      	strh	r3, [r7, #6]
    curTok->type = TT_LITERAL;
 8102f18:	4b25      	ldr	r3, [pc, #148]	; (8102fb0 <parseLiteral+0xb0>)
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	2240      	movs	r2, #64	; 0x40
 8102f1e:	701a      	strb	r2, [r3, #0]
    while (cur[i] != 0 && cur[i] != '"') {
 8102f20:	e013      	b.n	8102f4a <parseLiteral+0x4a>
        curTok->body.str.text[i - 1] = cur[i];
 8102f22:	4b22      	ldr	r3, [pc, #136]	; (8102fac <parseLiteral+0xac>)
 8102f24:	681a      	ldr	r2, [r3, #0]
 8102f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f2a:	18d1      	adds	r1, r2, r3
 8102f2c:	4b20      	ldr	r3, [pc, #128]	; (8102fb0 <parseLiteral+0xb0>)
 8102f2e:	681a      	ldr	r2, [r3, #0]
 8102f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f34:	3b01      	subs	r3, #1
 8102f36:	7809      	ldrb	r1, [r1, #0]
 8102f38:	4413      	add	r3, r2
 8102f3a:	460a      	mov	r2, r1
 8102f3c:	709a      	strb	r2, [r3, #2]
        i++;
 8102f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f42:	b29b      	uxth	r3, r3
 8102f44:	3301      	adds	r3, #1
 8102f46:	b29b      	uxth	r3, r3
 8102f48:	80fb      	strh	r3, [r7, #6]
    while (cur[i] != 0 && cur[i] != '"') {
 8102f4a:	4b18      	ldr	r3, [pc, #96]	; (8102fac <parseLiteral+0xac>)
 8102f4c:	681a      	ldr	r2, [r3, #0]
 8102f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f52:	4413      	add	r3, r2
 8102f54:	781b      	ldrb	r3, [r3, #0]
 8102f56:	2b00      	cmp	r3, #0
 8102f58:	d007      	beq.n	8102f6a <parseLiteral+0x6a>
 8102f5a:	4b14      	ldr	r3, [pc, #80]	; (8102fac <parseLiteral+0xac>)
 8102f5c:	681a      	ldr	r2, [r3, #0]
 8102f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f62:	4413      	add	r3, r2
 8102f64:	781b      	ldrb	r3, [r3, #0]
 8102f66:	2b22      	cmp	r3, #34	; 0x22
 8102f68:	d1db      	bne.n	8102f22 <parseLiteral+0x22>
    }
    curTok->body.str.len = i - 1;
 8102f6a:	88fb      	ldrh	r3, [r7, #6]
 8102f6c:	b2da      	uxtb	r2, r3
 8102f6e:	4b10      	ldr	r3, [pc, #64]	; (8102fb0 <parseLiteral+0xb0>)
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	3a01      	subs	r2, #1
 8102f74:	b2d2      	uxtb	r2, r2
 8102f76:	705a      	strb	r2, [r3, #1]
    advance(cur + i + (cur[i] == '"' ? 1 : 0));
 8102f78:	4b0c      	ldr	r3, [pc, #48]	; (8102fac <parseLiteral+0xac>)
 8102f7a:	681a      	ldr	r2, [r3, #0]
 8102f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f80:	490a      	ldr	r1, [pc, #40]	; (8102fac <parseLiteral+0xac>)
 8102f82:	6808      	ldr	r0, [r1, #0]
 8102f84:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8102f88:	4401      	add	r1, r0
 8102f8a:	7809      	ldrb	r1, [r1, #0]
 8102f8c:	2922      	cmp	r1, #34	; 0x22
 8102f8e:	d101      	bne.n	8102f94 <parseLiteral+0x94>
 8102f90:	2101      	movs	r1, #1
 8102f92:	e000      	b.n	8102f96 <parseLiteral+0x96>
 8102f94:	2100      	movs	r1, #0
 8102f96:	440b      	add	r3, r1
 8102f98:	4413      	add	r3, r2
 8102f9a:	4618      	mov	r0, r3
 8102f9c:	f7ff fe12 	bl	8102bc4 <advance>
    return 1;
 8102fa0:	2301      	movs	r3, #1
}
 8102fa2:	4618      	mov	r0, r3
 8102fa4:	3708      	adds	r7, #8
 8102fa6:	46bd      	mov	sp, r7
 8102fa8:	bd80      	pop	{r7, pc}
 8102faa:	bf00      	nop
 8102fac:	10004b70 	.word	0x10004b70
 8102fb0:	10004b6c 	.word	0x10004b6c

08102fb4 <parseSymbol>:

char parseSymbol() {
 8102fb4:	b590      	push	{r4, r7, lr}
 8102fb6:	b083      	sub	sp, #12
 8102fb8:	af00      	add	r7, sp, #0
    curTok->type = TT_SYMBOL;
 8102fba:	4b25      	ldr	r3, [pc, #148]	; (8103050 <parseSymbol+0x9c>)
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	2230      	movs	r2, #48	; 0x30
 8102fc0:	701a      	strb	r2, [r3, #0]
    char c = 0;
 8102fc2:	2300      	movs	r3, #0
 8102fc4:	71fb      	strb	r3, [r7, #7]
    if (cur[0] == '<') {
 8102fc6:	4b23      	ldr	r3, [pc, #140]	; (8103054 <parseSymbol+0xa0>)
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	781b      	ldrb	r3, [r3, #0]
 8102fcc:	2b3c      	cmp	r3, #60	; 0x3c
 8102fce:	d111      	bne.n	8102ff4 <parseSymbol+0x40>
        if (cur[1] == '>') {
 8102fd0:	4b20      	ldr	r3, [pc, #128]	; (8103054 <parseSymbol+0xa0>)
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	3301      	adds	r3, #1
 8102fd6:	781b      	ldrb	r3, [r3, #0]
 8102fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8102fda:	d102      	bne.n	8102fe2 <parseSymbol+0x2e>
            c = '#';
 8102fdc:	2323      	movs	r3, #35	; 0x23
 8102fde:	71fb      	strb	r3, [r7, #7]
 8102fe0:	e015      	b.n	810300e <parseSymbol+0x5a>
        } else if (cur[1] == '=') {
 8102fe2:	4b1c      	ldr	r3, [pc, #112]	; (8103054 <parseSymbol+0xa0>)
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	3301      	adds	r3, #1
 8102fe8:	781b      	ldrb	r3, [r3, #0]
 8102fea:	2b3d      	cmp	r3, #61	; 0x3d
 8102fec:	d10f      	bne.n	810300e <parseSymbol+0x5a>
            c = '{';
 8102fee:	237b      	movs	r3, #123	; 0x7b
 8102ff0:	71fb      	strb	r3, [r7, #7]
 8102ff2:	e00c      	b.n	810300e <parseSymbol+0x5a>
        }
    } else if (cur[0] == '>' && cur[1] == '=') {
 8102ff4:	4b17      	ldr	r3, [pc, #92]	; (8103054 <parseSymbol+0xa0>)
 8102ff6:	681b      	ldr	r3, [r3, #0]
 8102ff8:	781b      	ldrb	r3, [r3, #0]
 8102ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8102ffc:	d107      	bne.n	810300e <parseSymbol+0x5a>
 8102ffe:	4b15      	ldr	r3, [pc, #84]	; (8103054 <parseSymbol+0xa0>)
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	3301      	adds	r3, #1
 8103004:	781b      	ldrb	r3, [r3, #0]
 8103006:	2b3d      	cmp	r3, #61	; 0x3d
 8103008:	d101      	bne.n	810300e <parseSymbol+0x5a>
        c = '}';
 810300a:	237d      	movs	r3, #125	; 0x7d
 810300c:	71fb      	strb	r3, [r7, #7]
    }
    if (c != 0) {
 810300e:	79fb      	ldrb	r3, [r7, #7]
 8103010:	2b00      	cmp	r3, #0
 8103012:	d005      	beq.n	8103020 <parseSymbol+0x6c>
        cur++;
 8103014:	4b0f      	ldr	r3, [pc, #60]	; (8103054 <parseSymbol+0xa0>)
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	3301      	adds	r3, #1
 810301a:	4a0e      	ldr	r2, [pc, #56]	; (8103054 <parseSymbol+0xa0>)
 810301c:	6013      	str	r3, [r2, #0]
 810301e:	e003      	b.n	8103028 <parseSymbol+0x74>
    } else {
        c = cur[0];
 8103020:	4b0c      	ldr	r3, [pc, #48]	; (8103054 <parseSymbol+0xa0>)
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	781b      	ldrb	r3, [r3, #0]
 8103026:	71fb      	strb	r3, [r7, #7]
    }
    curTok->body.symbol = toUpper(c);
 8103028:	4b09      	ldr	r3, [pc, #36]	; (8103050 <parseSymbol+0x9c>)
 810302a:	681c      	ldr	r4, [r3, #0]
 810302c:	79fb      	ldrb	r3, [r7, #7]
 810302e:	4618      	mov	r0, r3
 8103030:	f000 fd33 	bl	8103a9a <toUpper>
 8103034:	4603      	mov	r3, r0
 8103036:	7063      	strb	r3, [r4, #1]
    advance(cur + 1);
 8103038:	4b06      	ldr	r3, [pc, #24]	; (8103054 <parseSymbol+0xa0>)
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	3301      	adds	r3, #1
 810303e:	4618      	mov	r0, r3
 8103040:	f7ff fdc0 	bl	8102bc4 <advance>
    return 1;
 8103044:	2301      	movs	r3, #1
}
 8103046:	4618      	mov	r0, r3
 8103048:	370c      	adds	r7, #12
 810304a:	46bd      	mov	sp, r7
 810304c:	bd90      	pop	{r4, r7, pc}
 810304e:	bf00      	nop
 8103050:	10004b6c 	.word	0x10004b6c
 8103054:	10004b70 	.word	0x10004b70

08103058 <parseLineNumber>:

char parseLineNumber(void) {
 8103058:	b580      	push	{r7, lr}
 810305a:	b082      	sub	sp, #8
 810305c:	af00      	add	r7, sp, #0
    char* start = cur;
 810305e:	4b11      	ldr	r3, [pc, #68]	; (81030a4 <parseLineNumber+0x4c>)
 8103060:	681b      	ldr	r3, [r3, #0]
 8103062:	607b      	str	r3, [r7, #4]
    if (!parseNumber()) {
 8103064:	f7ff fe84 	bl	8102d70 <parseNumber>
 8103068:	4603      	mov	r3, r0
 810306a:	2b00      	cmp	r3, #0
 810306c:	d101      	bne.n	8103072 <parseLineNumber+0x1a>
        return 1;
 810306e:	2301      	movs	r3, #1
 8103070:	e014      	b.n	810309c <parseLineNumber+0x44>
    }
    if (prevTok->body.integer < 1 || prevTok->body.integer > MAX_LINE_NUMBER) {
 8103072:	4b0d      	ldr	r3, [pc, #52]	; (81030a8 <parseLineNumber+0x50>)
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	f8d3 3001 	ldr.w	r3, [r3, #1]
 810307a:	2b00      	cmp	r3, #0
 810307c:	dd07      	ble.n	810308e <parseLineNumber+0x36>
 810307e:	4b0a      	ldr	r3, [pc, #40]	; (81030a8 <parseLineNumber+0x50>)
 8103080:	681b      	ldr	r3, [r3, #0]
 8103082:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8103086:	f247 5230 	movw	r2, #30000	; 0x7530
 810308a:	4293      	cmp	r3, r2
 810308c:	dd05      	ble.n	810309a <parseLineNumber+0x42>
        setTokenError(start, 7);
 810308e:	2107      	movs	r1, #7
 8103090:	6878      	ldr	r0, [r7, #4]
 8103092:	f7ff fd55 	bl	8102b40 <setTokenError>
        return 0;
 8103096:	2300      	movs	r3, #0
 8103098:	e000      	b.n	810309c <parseLineNumber+0x44>
    }
    return 1;
 810309a:	2301      	movs	r3, #1
}
 810309c:	4618      	mov	r0, r3
 810309e:	3708      	adds	r7, #8
 81030a0:	46bd      	mov	sp, r7
 81030a2:	bd80      	pop	{r7, pc}
 81030a4:	10004b70 	.word	0x10004b70
 81030a8:	10004b68 	.word	0x10004b68

081030ac <parseSemicolon>:

char parseSemicolon(void) {
 81030ac:	b580      	push	{r7, lr}
 81030ae:	af00      	add	r7, sp, #0
    if (*cur != ';') {
 81030b0:	4b0c      	ldr	r3, [pc, #48]	; (81030e4 <parseSemicolon+0x38>)
 81030b2:	681b      	ldr	r3, [r3, #0]
 81030b4:	781b      	ldrb	r3, [r3, #0]
 81030b6:	2b3b      	cmp	r3, #59	; 0x3b
 81030b8:	d007      	beq.n	81030ca <parseSemicolon+0x1e>
        setTokenError(cur, 4);
 81030ba:	4b0a      	ldr	r3, [pc, #40]	; (81030e4 <parseSemicolon+0x38>)
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	2104      	movs	r1, #4
 81030c0:	4618      	mov	r0, r3
 81030c2:	f7ff fd3d 	bl	8102b40 <setTokenError>
        return 0;
 81030c6:	2300      	movs	r3, #0
 81030c8:	e00a      	b.n	81030e0 <parseSemicolon+0x34>
    }
    curTok->type = TT_SEPARATOR;
 81030ca:	4b07      	ldr	r3, [pc, #28]	; (81030e8 <parseSemicolon+0x3c>)
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	2232      	movs	r2, #50	; 0x32
 81030d0:	701a      	strb	r2, [r3, #0]
    advance(cur + 1);
 81030d2:	4b04      	ldr	r3, [pc, #16]	; (81030e4 <parseSemicolon+0x38>)
 81030d4:	681b      	ldr	r3, [r3, #0]
 81030d6:	3301      	adds	r3, #1
 81030d8:	4618      	mov	r0, r3
 81030da:	f7ff fd73 	bl	8102bc4 <advance>
    return 1;
 81030de:	2301      	movs	r3, #1
}
 81030e0:	4618      	mov	r0, r3
 81030e2:	bd80      	pop	{r7, pc}
 81030e4:	10004b70 	.word	0x10004b70
 81030e8:	10004b6c 	.word	0x10004b6c

081030ec <skipSubscripts>:

char* skipSubscripts() {
 81030ec:	b480      	push	{r7}
 81030ee:	b083      	sub	sp, #12
 81030f0:	af00      	add	r7, sp, #0
    char* p = cur;
 81030f2:	4b14      	ldr	r3, [pc, #80]	; (8103144 <skipSubscripts+0x58>)
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	607b      	str	r3, [r7, #4]
    char br = 0;
 81030f8:	2300      	movs	r3, #0
 81030fa:	70fb      	strb	r3, [r7, #3]
    while (*p != 0) {
 81030fc:	e014      	b.n	8103128 <skipSubscripts+0x3c>
        if (*p == '(') {
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	781b      	ldrb	r3, [r3, #0]
 8103102:	2b28      	cmp	r3, #40	; 0x28
 8103104:	d103      	bne.n	810310e <skipSubscripts+0x22>
            br += 1;
 8103106:	78fb      	ldrb	r3, [r7, #3]
 8103108:	3301      	adds	r3, #1
 810310a:	70fb      	strb	r3, [r7, #3]
 810310c:	e009      	b.n	8103122 <skipSubscripts+0x36>
        } else if (*p == ')') {
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	781b      	ldrb	r3, [r3, #0]
 8103112:	2b29      	cmp	r3, #41	; 0x29
 8103114:	d105      	bne.n	8103122 <skipSubscripts+0x36>
            br -= 1;
 8103116:	78fb      	ldrb	r3, [r7, #3]
 8103118:	3b01      	subs	r3, #1
 810311a:	70fb      	strb	r3, [r7, #3]
            if (br == 0) {
 810311c:	78fb      	ldrb	r3, [r7, #3]
 810311e:	2b00      	cmp	r3, #0
 8103120:	d007      	beq.n	8103132 <skipSubscripts+0x46>
                break;
            }
        }
        p++;
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	3301      	adds	r3, #1
 8103126:	607b      	str	r3, [r7, #4]
    while (*p != 0) {
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	781b      	ldrb	r3, [r3, #0]
 810312c:	2b00      	cmp	r3, #0
 810312e:	d1e6      	bne.n	81030fe <skipSubscripts+0x12>
 8103130:	e000      	b.n	8103134 <skipSubscripts+0x48>
                break;
 8103132:	bf00      	nop
    }
    return p;
 8103134:	687b      	ldr	r3, [r7, #4]
}
 8103136:	4618      	mov	r0, r3
 8103138:	370c      	adds	r7, #12
 810313a:	46bd      	mov	sp, r7
 810313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103140:	4770      	bx	lr
 8103142:	bf00      	nop
 8103144:	10004b70 	.word	0x10004b70

08103148 <assignmentSyntax>:

char assignmentSyntax(void) {
 8103148:	b580      	push	{r7, lr}
 810314a:	b082      	sub	sp, #8
 810314c:	af00      	add	r7, sp, #0
    char* p;
    if (*cur == '=') {
 810314e:	4b1c      	ldr	r3, [pc, #112]	; (81031c0 <assignmentSyntax+0x78>)
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	781b      	ldrb	r3, [r3, #0]
 8103154:	2b3d      	cmp	r3, #61	; 0x3d
 8103156:	d101      	bne.n	810315c <assignmentSyntax+0x14>
        return CMD_LET;
 8103158:	2308      	movs	r3, #8
 810315a:	e02c      	b.n	81031b6 <assignmentSyntax+0x6e>
    } else if (*cur != '(') {
 810315c:	4b18      	ldr	r3, [pc, #96]	; (81031c0 <assignmentSyntax+0x78>)
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	781b      	ldrb	r3, [r3, #0]
 8103162:	2b28      	cmp	r3, #40	; 0x28
 8103164:	d007      	beq.n	8103176 <assignmentSyntax+0x2e>
        setTokenError(cur, 2);
 8103166:	4b16      	ldr	r3, [pc, #88]	; (81031c0 <assignmentSyntax+0x78>)
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	2102      	movs	r1, #2
 810316c:	4618      	mov	r0, r3
 810316e:	f7ff fce7 	bl	8102b40 <setTokenError>
        return 0;
 8103172:	2300      	movs	r3, #0
 8103174:	e01f      	b.n	81031b6 <assignmentSyntax+0x6e>
    }
    p = skipSubscripts();
 8103176:	f7ff ffb9 	bl	81030ec <skipSubscripts>
 810317a:	6078      	str	r0, [r7, #4]
    if (*p == 0) {
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	781b      	ldrb	r3, [r3, #0]
 8103180:	2b00      	cmp	r3, #0
 8103182:	d105      	bne.n	8103190 <assignmentSyntax+0x48>
        setTokenError(p, 10);
 8103184:	210a      	movs	r1, #10
 8103186:	6878      	ldr	r0, [r7, #4]
 8103188:	f7ff fcda 	bl	8102b40 <setTokenError>
        return 0;
 810318c:	2300      	movs	r3, #0
 810318e:	e012      	b.n	81031b6 <assignmentSyntax+0x6e>
    }
    p = skipSpaces(p + 1);
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	3301      	adds	r3, #1
 8103194:	4618      	mov	r0, r3
 8103196:	f000 fb69 	bl	810386c <skipSpaces>
 810319a:	6078      	str	r0, [r7, #4]
    if (*p != '=') {
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	781b      	ldrb	r3, [r3, #0]
 81031a0:	2b3d      	cmp	r3, #61	; 0x3d
 81031a2:	d007      	beq.n	81031b4 <assignmentSyntax+0x6c>
        setTokenError(cur, 2);
 81031a4:	4b06      	ldr	r3, [pc, #24]	; (81031c0 <assignmentSyntax+0x78>)
 81031a6:	681b      	ldr	r3, [r3, #0]
 81031a8:	2102      	movs	r1, #2
 81031aa:	4618      	mov	r0, r3
 81031ac:	f7ff fcc8 	bl	8102b40 <setTokenError>
        return 0;
 81031b0:	2300      	movs	r3, #0
 81031b2:	e000      	b.n	81031b6 <assignmentSyntax+0x6e>
    }
    return CMD_LETA;
 81031b4:	2309      	movs	r3, #9
}
 81031b6:	4618      	mov	r0, r3
 81031b8:	3708      	adds	r7, #8
 81031ba:	46bd      	mov	sp, r7
 81031bc:	bd80      	pop	{r7, pc}
 81031be:	bf00      	nop
 81031c0:	10004b70 	.word	0x10004b70

081031c4 <parseSubscripts>:

char parseSubscripts(void) {
 81031c4:	b580      	push	{r7, lr}
 81031c6:	b082      	sub	sp, #8
 81031c8:	af00      	add	r7, sp, #0
    char* p = skipSubscripts();
 81031ca:	f7ff ff8f 	bl	81030ec <skipSubscripts>
 81031ce:	6078      	str	r0, [r7, #4]
    *p = ';';
 81031d0:	687b      	ldr	r3, [r7, #4]
 81031d2:	223b      	movs	r2, #59	; 0x3b
 81031d4:	701a      	strb	r2, [r3, #0]
    cur++;
 81031d6:	4b0b      	ldr	r3, [pc, #44]	; (8103204 <parseSubscripts+0x40>)
 81031d8:	681b      	ldr	r3, [r3, #0]
 81031da:	3301      	adds	r3, #1
 81031dc:	4a09      	ldr	r2, [pc, #36]	; (8103204 <parseSubscripts+0x40>)
 81031de:	6013      	str	r3, [r2, #0]
    if (!parseExpression()) {
 81031e0:	f7ff faa8 	bl	8102734 <parseExpression>
 81031e4:	4603      	mov	r3, r0
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	d101      	bne.n	81031ee <parseSubscripts+0x2a>
        return 0;
 81031ea:	2300      	movs	r3, #0
 81031ec:	e005      	b.n	81031fa <parseSubscripts+0x36>
    }
    parseSemicolon();
 81031ee:	f7ff ff5d 	bl	81030ac <parseSemicolon>
    *p = ')';
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	2229      	movs	r2, #41	; 0x29
 81031f6:	701a      	strb	r2, [r3, #0]
    return 1;
 81031f8:	2301      	movs	r3, #1
}
 81031fa:	4618      	mov	r0, r3
 81031fc:	3708      	adds	r7, #8
 81031fe:	46bd      	mov	sp, r7
 8103200:	bd80      	pop	{r7, pc}
 8103202:	bf00      	nop
 8103204:	10004b70 	.word	0x10004b70

08103208 <parseAssignment>:

char parseAssignment(void) {
 8103208:	b5b0      	push	{r4, r5, r7, lr}
 810320a:	b082      	sub	sp, #8
 810320c:	af00      	add	r7, sp, #0
    char synt = assignmentSyntax();
 810320e:	f7ff ff9b 	bl	8103148 <assignmentSyntax>
 8103212:	4603      	mov	r3, r0
 8103214:	71fb      	strb	r3, [r7, #7]
    if (!synt) {
 8103216:	79fb      	ldrb	r3, [r7, #7]
 8103218:	2b00      	cmp	r3, #0
 810321a:	d101      	bne.n	8103220 <parseAssignment+0x18>
        return 0;
 810321c:	2300      	movs	r3, #0
 810321e:	e063      	b.n	81032e8 <parseAssignment+0xe0>
    }
    curTok->type = TT_COMMAND;
 8103220:	4b33      	ldr	r3, [pc, #204]	; (81032f0 <parseAssignment+0xe8>)
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	2221      	movs	r2, #33	; 0x21
 8103226:	701a      	strb	r2, [r3, #0]
    memmove((char*)(void*)prevTok + tokenSize(curTok), prevTok, tokenSize(prevTok));
 8103228:	4b32      	ldr	r3, [pc, #200]	; (81032f4 <parseAssignment+0xec>)
 810322a:	681c      	ldr	r4, [r3, #0]
 810322c:	4b30      	ldr	r3, [pc, #192]	; (81032f0 <parseAssignment+0xe8>)
 810322e:	681b      	ldr	r3, [r3, #0]
 8103230:	4618      	mov	r0, r3
 8103232:	f7ff fbb5 	bl	81029a0 <tokenSize>
 8103236:	4603      	mov	r3, r0
 8103238:	441c      	add	r4, r3
 810323a:	4b2e      	ldr	r3, [pc, #184]	; (81032f4 <parseAssignment+0xec>)
 810323c:	681d      	ldr	r5, [r3, #0]
 810323e:	4b2d      	ldr	r3, [pc, #180]	; (81032f4 <parseAssignment+0xec>)
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	4618      	mov	r0, r3
 8103244:	f7ff fbac 	bl	81029a0 <tokenSize>
 8103248:	4603      	mov	r3, r0
 810324a:	461a      	mov	r2, r3
 810324c:	4629      	mov	r1, r5
 810324e:	4620      	mov	r0, r4
 8103250:	f009 fcc2 	bl	810cbd8 <memmove>
    prevTok->type = TT_COMMAND;
 8103254:	4b27      	ldr	r3, [pc, #156]	; (81032f4 <parseAssignment+0xec>)
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	2221      	movs	r2, #33	; 0x21
 810325a:	701a      	strb	r2, [r3, #0]
    prevTok->body.command = synt;
 810325c:	4b25      	ldr	r3, [pc, #148]	; (81032f4 <parseAssignment+0xec>)
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	79fa      	ldrb	r2, [r7, #7]
 8103262:	705a      	strb	r2, [r3, #1]
    curTok = nextToken(prevTok);
 8103264:	4b23      	ldr	r3, [pc, #140]	; (81032f4 <parseAssignment+0xec>)
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	4618      	mov	r0, r3
 810326a:	f7ff fc85 	bl	8102b78 <nextToken>
 810326e:	4603      	mov	r3, r0
 8103270:	4a1f      	ldr	r2, [pc, #124]	; (81032f0 <parseAssignment+0xe8>)
 8103272:	6013      	str	r3, [r2, #0]
    if (synt == CMD_LETA) {
 8103274:	79fb      	ldrb	r3, [r7, #7]
 8103276:	2b09      	cmp	r3, #9
 8103278:	d109      	bne.n	810328e <parseAssignment+0x86>
        curTok->type = TT_ARRAY;
 810327a:	4b1d      	ldr	r3, [pc, #116]	; (81032f0 <parseAssignment+0xe8>)
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	2233      	movs	r2, #51	; 0x33
 8103280:	701a      	strb	r2, [r3, #0]
        curTok->body.symbol = curTok->body.str.text[0];
 8103282:	4b1b      	ldr	r3, [pc, #108]	; (81032f0 <parseAssignment+0xe8>)
 8103284:	681a      	ldr	r2, [r3, #0]
 8103286:	4b1a      	ldr	r3, [pc, #104]	; (81032f0 <parseAssignment+0xe8>)
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	7892      	ldrb	r2, [r2, #2]
 810328c:	705a      	strb	r2, [r3, #1]
    }
    prevTok = curTok;
 810328e:	4b18      	ldr	r3, [pc, #96]	; (81032f0 <parseAssignment+0xe8>)
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	4a18      	ldr	r2, [pc, #96]	; (81032f4 <parseAssignment+0xec>)
 8103294:	6013      	str	r3, [r2, #0]
    curTok = nextToken(curTok);
 8103296:	4b16      	ldr	r3, [pc, #88]	; (81032f0 <parseAssignment+0xe8>)
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	4618      	mov	r0, r3
 810329c:	f7ff fc6c 	bl	8102b78 <nextToken>
 81032a0:	4603      	mov	r3, r0
 81032a2:	4a13      	ldr	r2, [pc, #76]	; (81032f0 <parseAssignment+0xe8>)
 81032a4:	6013      	str	r3, [r2, #0]
    if (synt == CMD_LETA) {
 81032a6:	79fb      	ldrb	r3, [r7, #7]
 81032a8:	2b09      	cmp	r3, #9
 81032aa:	d106      	bne.n	81032ba <parseAssignment+0xb2>
        if (!parseSubscripts()) {
 81032ac:	f7ff ff8a 	bl	81031c4 <parseSubscripts>
 81032b0:	4603      	mov	r3, r0
 81032b2:	2b00      	cmp	r3, #0
 81032b4:	d101      	bne.n	81032ba <parseAssignment+0xb2>
            return 0;
 81032b6:	2300      	movs	r3, #0
 81032b8:	e016      	b.n	81032e8 <parseAssignment+0xe0>
        }
    }
    cur = skipSpaces(cur + 1);
 81032ba:	4b0f      	ldr	r3, [pc, #60]	; (81032f8 <parseAssignment+0xf0>)
 81032bc:	681b      	ldr	r3, [r3, #0]
 81032be:	3301      	adds	r3, #1
 81032c0:	4618      	mov	r0, r3
 81032c2:	f000 fad3 	bl	810386c <skipSpaces>
 81032c6:	4603      	mov	r3, r0
 81032c8:	4a0b      	ldr	r2, [pc, #44]	; (81032f8 <parseAssignment+0xf0>)
 81032ca:	6013      	str	r3, [r2, #0]
    return parseExpression() && parseNone();
 81032cc:	f7ff fa32 	bl	8102734 <parseExpression>
 81032d0:	4603      	mov	r3, r0
 81032d2:	2b00      	cmp	r3, #0
 81032d4:	d006      	beq.n	81032e4 <parseAssignment+0xdc>
 81032d6:	f7ff fdcb 	bl	8102e70 <parseNone>
 81032da:	4603      	mov	r3, r0
 81032dc:	2b00      	cmp	r3, #0
 81032de:	d001      	beq.n	81032e4 <parseAssignment+0xdc>
 81032e0:	2301      	movs	r3, #1
 81032e2:	e000      	b.n	81032e6 <parseAssignment+0xde>
 81032e4:	2300      	movs	r3, #0
 81032e6:	b2db      	uxtb	r3, r3
}
 81032e8:	4618      	mov	r0, r3
 81032ea:	3708      	adds	r7, #8
 81032ec:	46bd      	mov	sp, r7
 81032ee:	bdb0      	pop	{r4, r5, r7, pc}
 81032f0:	10004b6c 	.word	0x10004b6c
 81032f4:	10004b68 	.word	0x10004b68
 81032f8:	10004b70 	.word	0x10004b70

081032fc <parseExprOrLiteral>:

char parseExprOrLiteral(void) {
 81032fc:	b580      	push	{r7, lr}
 81032fe:	af00      	add	r7, sp, #0
    if (parseLiteral()) {
 8103300:	f7ff fdfe 	bl	8102f00 <parseLiteral>
 8103304:	4603      	mov	r3, r0
 8103306:	2b00      	cmp	r3, #0
 8103308:	d001      	beq.n	810330e <parseExprOrLiteral+0x12>
        return 1;
 810330a:	2301      	movs	r3, #1
 810330c:	e002      	b.n	8103314 <parseExprOrLiteral+0x18>
    }
    return parseExpression();
 810330e:	f7ff fa11 	bl	8102734 <parseExpression>
 8103312:	4603      	mov	r3, r0
}
 8103314:	4618      	mov	r0, r3
 8103316:	bd80      	pop	{r7, pc}

08103318 <parseVar>:

char parseVar(void) {
 8103318:	b580      	push	{r7, lr}
 810331a:	af00      	add	r7, sp, #0
    if (!parseName(0)) {
 810331c:	2000      	movs	r0, #0
 810331e:	f7ff fcab 	bl	8102c78 <parseName>
 8103322:	4603      	mov	r3, r0
 8103324:	2b00      	cmp	r3, #0
 8103326:	d107      	bne.n	8103338 <parseVar+0x20>
        setTokenError(cur, 3);
 8103328:	4b07      	ldr	r3, [pc, #28]	; (8103348 <parseVar+0x30>)
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	2103      	movs	r1, #3
 810332e:	4618      	mov	r0, r3
 8103330:	f7ff fc06 	bl	8102b40 <setTokenError>
        return 0;
 8103334:	2300      	movs	r3, #0
 8103336:	e004      	b.n	8103342 <parseVar+0x2a>
    }
    prevTok->type = TT_VARIABLE;
 8103338:	4b04      	ldr	r3, [pc, #16]	; (810334c <parseVar+0x34>)
 810333a:	681b      	ldr	r3, [r3, #0]
 810333c:	2222      	movs	r2, #34	; 0x22
 810333e:	701a      	strb	r2, [r3, #0]
    return 1;
 8103340:	2301      	movs	r3, #1
}
 8103342:	4618      	mov	r0, r3
 8103344:	bd80      	pop	{r7, pc}
 8103346:	bf00      	nop
 8103348:	10004b70 	.word	0x10004b70
 810334c:	10004b68 	.word	0x10004b68

08103350 <parseExprList>:

char parseExprList(void) {
 8103350:	b580      	push	{r7, lr}
 8103352:	af00      	add	r7, sp, #0
    if (!parseExpression()) {
 8103354:	f7ff f9ee 	bl	8102734 <parseExpression>
 8103358:	4603      	mov	r3, r0
 810335a:	2b00      	cmp	r3, #0
 810335c:	d10d      	bne.n	810337a <parseExprList+0x2a>
        return 0;
 810335e:	2300      	movs	r3, #0
 8103360:	e013      	b.n	810338a <parseExprList+0x3a>
    }
    while (*cur != 0) {
        if (!parseSemicolon() || !parseExpression()) {
 8103362:	f7ff fea3 	bl	81030ac <parseSemicolon>
 8103366:	4603      	mov	r3, r0
 8103368:	2b00      	cmp	r3, #0
 810336a:	d004      	beq.n	8103376 <parseExprList+0x26>
 810336c:	f7ff f9e2 	bl	8102734 <parseExpression>
 8103370:	4603      	mov	r3, r0
 8103372:	2b00      	cmp	r3, #0
 8103374:	d101      	bne.n	810337a <parseExprList+0x2a>
            return 0;
 8103376:	2300      	movs	r3, #0
 8103378:	e007      	b.n	810338a <parseExprList+0x3a>
    while (*cur != 0) {
 810337a:	4b05      	ldr	r3, [pc, #20]	; (8103390 <parseExprList+0x40>)
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	781b      	ldrb	r3, [r3, #0]
 8103380:	2b00      	cmp	r3, #0
 8103382:	d1ee      	bne.n	8103362 <parseExprList+0x12>
        }
    }
    return parseNone();
 8103384:	f7ff fd74 	bl	8102e70 <parseNone>
 8103388:	4603      	mov	r3, r0
}
 810338a:	4618      	mov	r0, r3
 810338c:	bd80      	pop	{r7, pc}
 810338e:	bf00      	nop
 8103390:	10004b70 	.word	0x10004b70

08103394 <parsePrintList>:

char parsePrintList(void) {
 8103394:	b580      	push	{r7, lr}
 8103396:	af00      	add	r7, sp, #0
    if (!parseExprOrLiteral()) {
 8103398:	f7ff ffb0 	bl	81032fc <parseExprOrLiteral>
 810339c:	4603      	mov	r3, r0
 810339e:	2b00      	cmp	r3, #0
 81033a0:	d10d      	bne.n	81033be <parsePrintList+0x2a>
        return 0;
 81033a2:	2300      	movs	r3, #0
 81033a4:	e013      	b.n	81033ce <parsePrintList+0x3a>
    }
    while (*cur != 0) {
        if (!parseSemicolon() || !parseExprOrLiteral()) {
 81033a6:	f7ff fe81 	bl	81030ac <parseSemicolon>
 81033aa:	4603      	mov	r3, r0
 81033ac:	2b00      	cmp	r3, #0
 81033ae:	d004      	beq.n	81033ba <parsePrintList+0x26>
 81033b0:	f7ff ffa4 	bl	81032fc <parseExprOrLiteral>
 81033b4:	4603      	mov	r3, r0
 81033b6:	2b00      	cmp	r3, #0
 81033b8:	d101      	bne.n	81033be <parsePrintList+0x2a>
            return 0;
 81033ba:	2300      	movs	r3, #0
 81033bc:	e007      	b.n	81033ce <parsePrintList+0x3a>
    while (*cur != 0) {
 81033be:	4b05      	ldr	r3, [pc, #20]	; (81033d4 <parsePrintList+0x40>)
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	781b      	ldrb	r3, [r3, #0]
 81033c4:	2b00      	cmp	r3, #0
 81033c6:	d1ee      	bne.n	81033a6 <parsePrintList+0x12>
        }
    }
    return parseNone();
 81033c8:	f7ff fd52 	bl	8102e70 <parseNone>
 81033cc:	4603      	mov	r3, r0
}
 81033ce:	4618      	mov	r0, r3
 81033d0:	bd80      	pop	{r7, pc}
 81033d2:	bf00      	nop
 81033d4:	10004b70 	.word	0x10004b70

081033d8 <parseDataList>:

char parseDataList(void) {
 81033d8:	b580      	push	{r7, lr}
 81033da:	af00      	add	r7, sp, #0
    do {
        if (!parseNumber() && !parseLiteral()) {
 81033dc:	f7ff fcc8 	bl	8102d70 <parseNumber>
 81033e0:	4603      	mov	r3, r0
 81033e2:	2b00      	cmp	r3, #0
 81033e4:	d10c      	bne.n	8103400 <parseDataList+0x28>
 81033e6:	f7ff fd8b 	bl	8102f00 <parseLiteral>
 81033ea:	4603      	mov	r3, r0
 81033ec:	2b00      	cmp	r3, #0
 81033ee:	d107      	bne.n	8103400 <parseDataList+0x28>
            setTokenError(cur, 8);
 81033f0:	4b08      	ldr	r3, [pc, #32]	; (8103414 <parseDataList+0x3c>)
 81033f2:	681b      	ldr	r3, [r3, #0]
 81033f4:	2108      	movs	r1, #8
 81033f6:	4618      	mov	r0, r3
 81033f8:	f7ff fba2 	bl	8102b40 <setTokenError>
            return 0;
 81033fc:	2300      	movs	r3, #0
 81033fe:	e007      	b.n	8103410 <parseDataList+0x38>
        }
    } while (*cur != 0);
 8103400:	4b04      	ldr	r3, [pc, #16]	; (8103414 <parseDataList+0x3c>)
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	781b      	ldrb	r3, [r3, #0]
 8103406:	2b00      	cmp	r3, #0
 8103408:	d1e8      	bne.n	81033dc <parseDataList+0x4>
    return parseNone();
 810340a:	f7ff fd31 	bl	8102e70 <parseNone>
 810340e:	4603      	mov	r3, r0
}
 8103410:	4618      	mov	r0, r3
 8103412:	bd80      	pop	{r7, pc}
 8103414:	10004b70 	.word	0x10004b70

08103418 <parseNExpressions>:

char parseNExpressions(char cnt) {
 8103418:	b580      	push	{r7, lr}
 810341a:	b082      	sub	sp, #8
 810341c:	af00      	add	r7, sp, #0
 810341e:	4603      	mov	r3, r0
 8103420:	71fb      	strb	r3, [r7, #7]
    if (cnt > 0) {
 8103422:	79fb      	ldrb	r3, [r7, #7]
 8103424:	2b00      	cmp	r3, #0
 8103426:	d018      	beq.n	810345a <parseNExpressions+0x42>
        if (!parseExpression()) {
 8103428:	f7ff f984 	bl	8102734 <parseExpression>
 810342c:	4603      	mov	r3, r0
 810342e:	2b00      	cmp	r3, #0
 8103430:	d10d      	bne.n	810344e <parseNExpressions+0x36>
            return 0;
 8103432:	2300      	movs	r3, #0
 8103434:	e014      	b.n	8103460 <parseNExpressions+0x48>
        }
        while (--cnt > 0) {
            if (!parseSemicolon() || !parseExpression()) {
 8103436:	f7ff fe39 	bl	81030ac <parseSemicolon>
 810343a:	4603      	mov	r3, r0
 810343c:	2b00      	cmp	r3, #0
 810343e:	d004      	beq.n	810344a <parseNExpressions+0x32>
 8103440:	f7ff f978 	bl	8102734 <parseExpression>
 8103444:	4603      	mov	r3, r0
 8103446:	2b00      	cmp	r3, #0
 8103448:	d101      	bne.n	810344e <parseNExpressions+0x36>
                return 0;
 810344a:	2300      	movs	r3, #0
 810344c:	e008      	b.n	8103460 <parseNExpressions+0x48>
        while (--cnt > 0) {
 810344e:	79fb      	ldrb	r3, [r7, #7]
 8103450:	3b01      	subs	r3, #1
 8103452:	71fb      	strb	r3, [r7, #7]
 8103454:	79fb      	ldrb	r3, [r7, #7]
 8103456:	2b00      	cmp	r3, #0
 8103458:	d1ed      	bne.n	8103436 <parseNExpressions+0x1e>
            }
        }
    }
    return parseNone();
 810345a:	f7ff fd09 	bl	8102e70 <parseNone>
 810345e:	4603      	mov	r3, r0
}
 8103460:	4618      	mov	r0, r3
 8103462:	3708      	adds	r7, #8
 8103464:	46bd      	mov	sp, r7
 8103466:	bd80      	pop	{r7, pc}

08103468 <parseLabel>:

char parseLabel(void) {
 8103468:	b580      	push	{r7, lr}
 810346a:	af00      	add	r7, sp, #0
    if (parseNumber()) {
 810346c:	f7ff fc80 	bl	8102d70 <parseNumber>
 8103470:	4603      	mov	r3, r0
 8103472:	2b00      	cmp	r3, #0
 8103474:	d003      	beq.n	810347e <parseLabel+0x16>
        return parseNone();
 8103476:	f7ff fcfb 	bl	8102e70 <parseNone>
 810347a:	4603      	mov	r3, r0
 810347c:	e006      	b.n	810348c <parseLabel+0x24>
    }
    setTokenError(cur, 8);
 810347e:	4b04      	ldr	r3, [pc, #16]	; (8103490 <parseLabel+0x28>)
 8103480:	681b      	ldr	r3, [r3, #0]
 8103482:	2108      	movs	r1, #8
 8103484:	4618      	mov	r0, r3
 8103486:	f7ff fb5b 	bl	8102b40 <setTokenError>
    return 0;
 810348a:	2300      	movs	r3, #0
}
 810348c:	4618      	mov	r0, r3
 810348e:	bd80      	pop	{r7, pc}
 8103490:	10004b70 	.word	0x10004b70

08103494 <parseConditional>:

char parseStatement(void);

char parseConditional(void) {
 8103494:	b580      	push	{r7, lr}
 8103496:	af00      	add	r7, sp, #0
    if (!parseExpression()) {
 8103498:	f7ff f94c 	bl	8102734 <parseExpression>
 810349c:	4603      	mov	r3, r0
 810349e:	2b00      	cmp	r3, #0
 81034a0:	d101      	bne.n	81034a6 <parseConditional+0x12>
        return 0;
 81034a2:	2300      	movs	r3, #0
 81034a4:	e00d      	b.n	81034c2 <parseConditional+0x2e>
    }
    return parseSemicolon() && parseStatement();
 81034a6:	f7ff fe01 	bl	81030ac <parseSemicolon>
 81034aa:	4603      	mov	r3, r0
 81034ac:	2b00      	cmp	r3, #0
 81034ae:	d006      	beq.n	81034be <parseConditional+0x2a>
 81034b0:	f000 f880 	bl	81035b4 <parseStatement>
 81034b4:	4603      	mov	r3, r0
 81034b6:	2b00      	cmp	r3, #0
 81034b8:	d001      	beq.n	81034be <parseConditional+0x2a>
 81034ba:	2301      	movs	r3, #1
 81034bc:	e000      	b.n	81034c0 <parseConditional+0x2c>
 81034be:	2300      	movs	r3, #0
 81034c0:	b2db      	uxtb	r3, r3
}
 81034c2:	4618      	mov	r0, r3
 81034c4:	bd80      	pop	{r7, pc}
	...

081034c8 <parseAllocate>:

char parseAllocate() {
 81034c8:	b580      	push	{r7, lr}
 81034ca:	af00      	add	r7, sp, #0
    if (!parseName(0)) {
 81034cc:	2000      	movs	r0, #0
 81034ce:	f7ff fbd3 	bl	8102c78 <parseName>
 81034d2:	4603      	mov	r3, r0
 81034d4:	2b00      	cmp	r3, #0
 81034d6:	d107      	bne.n	81034e8 <parseAllocate+0x20>
        setTokenError(cur, 3);
 81034d8:	4b21      	ldr	r3, [pc, #132]	; (8103560 <parseAllocate+0x98>)
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	2103      	movs	r1, #3
 81034de:	4618      	mov	r0, r3
 81034e0:	f7ff fb2e 	bl	8102b40 <setTokenError>
        return 0;
 81034e4:	2300      	movs	r3, #0
 81034e6:	e038      	b.n	810355a <parseAllocate+0x92>
    }
    prevTok->type = TT_ARRAY;
 81034e8:	4b1e      	ldr	r3, [pc, #120]	; (8103564 <parseAllocate+0x9c>)
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	2233      	movs	r2, #51	; 0x33
 81034ee:	701a      	strb	r2, [r3, #0]
    prevTok->body.symbol = prevTok->body.str.text[0];
 81034f0:	4b1c      	ldr	r3, [pc, #112]	; (8103564 <parseAllocate+0x9c>)
 81034f2:	681a      	ldr	r2, [r3, #0]
 81034f4:	4b1b      	ldr	r3, [pc, #108]	; (8103564 <parseAllocate+0x9c>)
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	7892      	ldrb	r2, [r2, #2]
 81034fa:	705a      	strb	r2, [r3, #1]
    curTok = nextToken(prevTok);
 81034fc:	4b19      	ldr	r3, [pc, #100]	; (8103564 <parseAllocate+0x9c>)
 81034fe:	681b      	ldr	r3, [r3, #0]
 8103500:	4618      	mov	r0, r3
 8103502:	f7ff fb39 	bl	8102b78 <nextToken>
 8103506:	4603      	mov	r3, r0
 8103508:	4a17      	ldr	r2, [pc, #92]	; (8103568 <parseAllocate+0xa0>)
 810350a:	6013      	str	r3, [r2, #0]
    if (!parseNumber()) {
 810350c:	f7ff fc30 	bl	8102d70 <parseNumber>
 8103510:	4603      	mov	r3, r0
 8103512:	2b00      	cmp	r3, #0
 8103514:	d107      	bne.n	8103526 <parseAllocate+0x5e>
        setTokenError(cur, 8);
 8103516:	4b12      	ldr	r3, [pc, #72]	; (8103560 <parseAllocate+0x98>)
 8103518:	681b      	ldr	r3, [r3, #0]
 810351a:	2108      	movs	r1, #8
 810351c:	4618      	mov	r0, r3
 810351e:	f7ff fb0f 	bl	8102b40 <setTokenError>
        return 0;
 8103522:	2300      	movs	r3, #0
 8103524:	e019      	b.n	810355a <parseAllocate+0x92>
    }
    if (*cur != 0) {
 8103526:	4b0e      	ldr	r3, [pc, #56]	; (8103560 <parseAllocate+0x98>)
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	781b      	ldrb	r3, [r3, #0]
 810352c:	2b00      	cmp	r3, #0
 810352e:	d011      	beq.n	8103554 <parseAllocate+0x8c>
        if (!parseSymbol() || prevTok->body.symbol != 'B') {
 8103530:	f7ff fd40 	bl	8102fb4 <parseSymbol>
 8103534:	4603      	mov	r3, r0
 8103536:	2b00      	cmp	r3, #0
 8103538:	d004      	beq.n	8103544 <parseAllocate+0x7c>
 810353a:	4b0a      	ldr	r3, [pc, #40]	; (8103564 <parseAllocate+0x9c>)
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	785b      	ldrb	r3, [r3, #1]
 8103540:	2b42      	cmp	r3, #66	; 0x42
 8103542:	d007      	beq.n	8103554 <parseAllocate+0x8c>
            setTokenError(cur, 9);
 8103544:	4b06      	ldr	r3, [pc, #24]	; (8103560 <parseAllocate+0x98>)
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	2109      	movs	r1, #9
 810354a:	4618      	mov	r0, r3
 810354c:	f7ff faf8 	bl	8102b40 <setTokenError>
            return 0;
 8103550:	2300      	movs	r3, #0
 8103552:	e002      	b.n	810355a <parseAllocate+0x92>
        }
    }
    return parseNone();
 8103554:	f7ff fc8c 	bl	8102e70 <parseNone>
 8103558:	4603      	mov	r3, r0
}
 810355a:	4618      	mov	r0, r3
 810355c:	bd80      	pop	{r7, pc}
 810355e:	bf00      	nop
 8103560:	10004b70 	.word	0x10004b70
 8103564:	10004b68 	.word	0x10004b68
 8103568:	10004b6c 	.word	0x10004b6c

0810356c <parseSpecialWithError>:

void parseSpecialWithError() {
 810356c:	b580      	push	{r7, lr}
 810356e:	af00      	add	r7, sp, #0
    curTok = nextToken(curTok);
 8103570:	4b0f      	ldr	r3, [pc, #60]	; (81035b0 <parseSpecialWithError+0x44>)
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	4618      	mov	r0, r3
 8103576:	f7ff faff 	bl	8102b78 <nextToken>
 810357a:	4603      	mov	r3, r0
 810357c:	4a0c      	ldr	r2, [pc, #48]	; (81035b0 <parseSpecialWithError+0x44>)
 810357e:	6013      	str	r3, [r2, #0]
    while (parseName(0) || parseNumber() || parseLiteral()) {
 8103580:	bf00      	nop
 8103582:	2000      	movs	r0, #0
 8103584:	f7ff fb78 	bl	8102c78 <parseName>
 8103588:	4603      	mov	r3, r0
 810358a:	2b00      	cmp	r3, #0
 810358c:	d1f9      	bne.n	8103582 <parseSpecialWithError+0x16>
 810358e:	f7ff fbef 	bl	8102d70 <parseNumber>
 8103592:	4603      	mov	r3, r0
 8103594:	2b00      	cmp	r3, #0
 8103596:	d1f4      	bne.n	8103582 <parseSpecialWithError+0x16>
 8103598:	f7ff fcb2 	bl	8102f00 <parseLiteral>
 810359c:	4603      	mov	r3, r0
 810359e:	2b00      	cmp	r3, #0
 81035a0:	d1ef      	bne.n	8103582 <parseSpecialWithError+0x16>
    }
    curTok->type = TT_ERROR;
 81035a2:	4b03      	ldr	r3, [pc, #12]	; (81035b0 <parseSpecialWithError+0x44>)
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	2201      	movs	r2, #1
 81035a8:	701a      	strb	r2, [r3, #0]
}
 81035aa:	bf00      	nop
 81035ac:	bd80      	pop	{r7, pc}
 81035ae:	bf00      	nop
 81035b0:	10004b6c 	.word	0x10004b6c

081035b4 <parseStatement>:

char parseStatement(void) {
 81035b4:	b580      	push	{r7, lr}
 81035b6:	b082      	sub	sp, #8
 81035b8:	af00      	add	r7, sp, #0
    char cmd;
    if (!parseName(1)) {
 81035ba:	2001      	movs	r0, #1
 81035bc:	f7ff fb5c 	bl	8102c78 <parseName>
 81035c0:	4603      	mov	r3, r0
 81035c2:	2b00      	cmp	r3, #0
 81035c4:	d107      	bne.n	81035d6 <parseStatement+0x22>
        setTokenError(cur, 1);
 81035c6:	4b45      	ldr	r3, [pc, #276]	; (81036dc <parseStatement+0x128>)
 81035c8:	681b      	ldr	r3, [r3, #0]
 81035ca:	2101      	movs	r1, #1
 81035cc:	4618      	mov	r0, r3
 81035ce:	f7ff fab7 	bl	8102b40 <setTokenError>
        return 0;
 81035d2:	2300      	movs	r3, #0
 81035d4:	e07e      	b.n	81036d4 <parseStatement+0x120>
    } else if (prevTok->type != TT_COMMAND) {
 81035d6:	4b42      	ldr	r3, [pc, #264]	; (81036e0 <parseStatement+0x12c>)
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	781b      	ldrb	r3, [r3, #0]
 81035dc:	2b21      	cmp	r3, #33	; 0x21
 81035de:	d00a      	beq.n	81035f6 <parseStatement+0x42>
        if (parseAssignment()) {
 81035e0:	f7ff fe12 	bl	8103208 <parseAssignment>
 81035e4:	4603      	mov	r3, r0
 81035e6:	2b00      	cmp	r3, #0
 81035e8:	d001      	beq.n	81035ee <parseStatement+0x3a>
            return 1;
 81035ea:	2301      	movs	r3, #1
 81035ec:	e072      	b.n	81036d4 <parseStatement+0x120>
        } else {
            parseSpecialWithError();
 81035ee:	f7ff ffbd 	bl	810356c <parseSpecialWithError>
            return 0;
 81035f2:	2300      	movs	r3, #0
 81035f4:	e06e      	b.n	81036d4 <parseStatement+0x120>
        }
    }
    cmd = prevTok->body.command;
 81035f6:	4b3a      	ldr	r3, [pc, #232]	; (81036e0 <parseStatement+0x12c>)
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	785b      	ldrb	r3, [r3, #1]
 81035fc:	71fb      	strb	r3, [r7, #7]
    if (cmd == CMD_REM) {
 81035fe:	79fb      	ldrb	r3, [r7, #7]
 8103600:	2b00      	cmp	r3, #0
 8103602:	d103      	bne.n	810360c <parseStatement+0x58>
        return parseComment();
 8103604:	f7ff fc4e 	bl	8102ea4 <parseComment>
 8103608:	4603      	mov	r3, r0
 810360a:	e063      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_GOTO || cmd == CMD_GOSUB) {
 810360c:	79fb      	ldrb	r3, [r7, #7]
 810360e:	2b04      	cmp	r3, #4
 8103610:	d002      	beq.n	8103618 <parseStatement+0x64>
 8103612:	79fb      	ldrb	r3, [r7, #7]
 8103614:	2b05      	cmp	r3, #5
 8103616:	d103      	bne.n	8103620 <parseStatement+0x6c>
        return parseLabel();
 8103618:	f7ff ff26 	bl	8103468 <parseLabel>
 810361c:	4603      	mov	r3, r0
 810361e:	e059      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_RETURN || cmd == CMD_END) {
 8103620:	79fb      	ldrb	r3, [r7, #7]
 8103622:	2b06      	cmp	r3, #6
 8103624:	d002      	beq.n	810362c <parseStatement+0x78>
 8103626:	79fb      	ldrb	r3, [r7, #7]
 8103628:	2b07      	cmp	r3, #7
 810362a:	d103      	bne.n	8103634 <parseStatement+0x80>
        return parseNone();
 810362c:	f7ff fc20 	bl	8102e70 <parseNone>
 8103630:	4603      	mov	r3, r0
 8103632:	e04f      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_PRINT) {
 8103634:	79fb      	ldrb	r3, [r7, #7]
 8103636:	2b01      	cmp	r3, #1
 8103638:	d103      	bne.n	8103642 <parseStatement+0x8e>
        return parsePrintList();
 810363a:	f7ff feab 	bl	8103394 <parsePrintList>
 810363e:	4603      	mov	r3, r0
 8103640:	e048      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_INPUT) {
 8103642:	79fb      	ldrb	r3, [r7, #7]
 8103644:	2b02      	cmp	r3, #2
 8103646:	d10e      	bne.n	8103666 <parseStatement+0xb2>
        return parseVar() && parseNone();
 8103648:	f7ff fe66 	bl	8103318 <parseVar>
 810364c:	4603      	mov	r3, r0
 810364e:	2b00      	cmp	r3, #0
 8103650:	d006      	beq.n	8103660 <parseStatement+0xac>
 8103652:	f7ff fc0d 	bl	8102e70 <parseNone>
 8103656:	4603      	mov	r3, r0
 8103658:	2b00      	cmp	r3, #0
 810365a:	d001      	beq.n	8103660 <parseStatement+0xac>
 810365c:	2301      	movs	r3, #1
 810365e:	e000      	b.n	8103662 <parseStatement+0xae>
 8103660:	2300      	movs	r3, #0
 8103662:	b2db      	uxtb	r3, r3
 8103664:	e036      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_IF) {
 8103666:	79fb      	ldrb	r3, [r7, #7]
 8103668:	2b03      	cmp	r3, #3
 810366a:	d103      	bne.n	8103674 <parseStatement+0xc0>
        return parseConditional();
 810366c:	f7ff ff12 	bl	8103494 <parseConditional>
 8103670:	4603      	mov	r3, r0
 8103672:	e02f      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_DIM) {
 8103674:	79fb      	ldrb	r3, [r7, #7]
 8103676:	2b0a      	cmp	r3, #10
 8103678:	d103      	bne.n	8103682 <parseStatement+0xce>
        return parseAllocate();
 810367a:	f7ff ff25 	bl	81034c8 <parseAllocate>
 810367e:	4603      	mov	r3, r0
 8103680:	e028      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_DELAY) {
 8103682:	79fb      	ldrb	r3, [r7, #7]
 8103684:	2b0b      	cmp	r3, #11
 8103686:	d104      	bne.n	8103692 <parseStatement+0xde>
        return parseNExpressions(1);
 8103688:	2001      	movs	r0, #1
 810368a:	f7ff fec5 	bl	8103418 <parseNExpressions>
 810368e:	4603      	mov	r3, r0
 8103690:	e020      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_DATA) {
 8103692:	79fb      	ldrb	r3, [r7, #7]
 8103694:	2b0c      	cmp	r3, #12
 8103696:	d103      	bne.n	81036a0 <parseStatement+0xec>
        return parseDataList();
 8103698:	f7ff fe9e 	bl	81033d8 <parseDataList>
 810369c:	4603      	mov	r3, r0
 810369e:	e019      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd == CMD_EMIT) {
 81036a0:	79fb      	ldrb	r3, [r7, #7]
 81036a2:	2b0d      	cmp	r3, #13
 81036a4:	d103      	bne.n	81036ae <parseStatement+0xfa>
        return parseExprList();
 81036a6:	f7ff fe53 	bl	8103350 <parseExprList>
 81036aa:	4603      	mov	r3, r0
 81036ac:	e012      	b.n	81036d4 <parseStatement+0x120>
    } else if (cmd >= CMD_EXTRA) {
 81036ae:	79fb      	ldrb	r3, [r7, #7]
 81036b0:	2b3f      	cmp	r3, #63	; 0x3f
 81036b2:	d908      	bls.n	81036c6 <parseStatement+0x112>
        return parseNExpressions(extraCmdArgCnt[cmd - CMD_EXTRA]);
 81036b4:	79fb      	ldrb	r3, [r7, #7]
 81036b6:	3b40      	subs	r3, #64	; 0x40
 81036b8:	4a0a      	ldr	r2, [pc, #40]	; (81036e4 <parseStatement+0x130>)
 81036ba:	5cd3      	ldrb	r3, [r2, r3]
 81036bc:	4618      	mov	r0, r3
 81036be:	f7ff feab 	bl	8103418 <parseNExpressions>
 81036c2:	4603      	mov	r3, r0
 81036c4:	e006      	b.n	81036d4 <parseStatement+0x120>
    }
    setTokenError(cur, 6);
 81036c6:	4b05      	ldr	r3, [pc, #20]	; (81036dc <parseStatement+0x128>)
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	2106      	movs	r1, #6
 81036cc:	4618      	mov	r0, r3
 81036ce:	f7ff fa37 	bl	8102b40 <setTokenError>
    return 0;
 81036d2:	2300      	movs	r3, #0
}
 81036d4:	4618      	mov	r0, r3
 81036d6:	3708      	adds	r7, #8
 81036d8:	46bd      	mov	sp, r7
 81036da:	bd80      	pop	{r7, pc}
 81036dc:	10004b70 	.word	0x10004b70
 81036e0:	10004b68 	.word	0x10004b68
 81036e4:	10000044 	.word	0x10000044

081036e8 <parseLine>:

void parseLine(char* line, token* tokens) {
 81036e8:	b580      	push	{r7, lr}
 81036ea:	b082      	sub	sp, #8
 81036ec:	af00      	add	r7, sp, #0
 81036ee:	6078      	str	r0, [r7, #4]
 81036f0:	6039      	str	r1, [r7, #0]
    cur = line;
 81036f2:	4a10      	ldr	r2, [pc, #64]	; (8103734 <parseLine+0x4c>)
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	6013      	str	r3, [r2, #0]
    curTok = tokens;
 81036f8:	4a0f      	ldr	r2, [pc, #60]	; (8103738 <parseLine+0x50>)
 81036fa:	683b      	ldr	r3, [r7, #0]
 81036fc:	6013      	str	r3, [r2, #0]
    prevTok = NULL;
 81036fe:	4b0f      	ldr	r3, [pc, #60]	; (810373c <parseLine+0x54>)
 8103700:	2200      	movs	r2, #0
 8103702:	601a      	str	r2, [r3, #0]
    setTokenError(NULL, 0);
 8103704:	2100      	movs	r1, #0
 8103706:	2000      	movs	r0, #0
 8103708:	f7ff fa1a 	bl	8102b40 <setTokenError>
    if (parseLineNumber()) {
 810370c:	f7ff fca4 	bl	8103058 <parseLineNumber>
 8103710:	4603      	mov	r3, r0
 8103712:	2b00      	cmp	r3, #0
 8103714:	d009      	beq.n	810372a <parseLine+0x42>
        if (*cur != 0) {
 8103716:	4b07      	ldr	r3, [pc, #28]	; (8103734 <parseLine+0x4c>)
 8103718:	681b      	ldr	r3, [r3, #0]
 810371a:	781b      	ldrb	r3, [r3, #0]
 810371c:	2b00      	cmp	r3, #0
 810371e:	d002      	beq.n	8103726 <parseLine+0x3e>
            parseStatement();
 8103720:	f7ff ff48 	bl	81035b4 <parseStatement>
        } else {
            parseNone();
        }
    }
}
 8103724:	e001      	b.n	810372a <parseLine+0x42>
            parseNone();
 8103726:	f7ff fba3 	bl	8102e70 <parseNone>
}
 810372a:	bf00      	nop
 810372c:	3708      	adds	r7, #8
 810372e:	46bd      	mov	sp, r7
 8103730:	bd80      	pop	{r7, pc}
 8103732:	bf00      	nop
 8103734:	10004b70 	.word	0x10004b70
 8103738:	10004b6c 	.word	0x10004b6c
 810373c:	10004b68 	.word	0x10004b68

08103740 <tokenClass>:

char tokenClass(token* t) {
 8103740:	b480      	push	{r7}
 8103742:	b083      	sub	sp, #12
 8103744:	af00      	add	r7, sp, #0
 8103746:	6078      	str	r0, [r7, #4]
    return t->type & 0xF0;
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	781b      	ldrb	r3, [r3, #0]
 810374c:	f023 030f 	bic.w	r3, r3, #15
 8103750:	b2db      	uxtb	r3, r3
}
 8103752:	4618      	mov	r0, r3
 8103754:	370c      	adds	r7, #12
 8103756:	46bd      	mov	sp, r7
 8103758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810375c:	4770      	bx	lr

0810375e <tokenHash>:

numeric tokenHash(token* t) {
 810375e:	b580      	push	{r7, lr}
 8103760:	b082      	sub	sp, #8
 8103762:	af00      	add	r7, sp, #0
 8103764:	6078      	str	r0, [r7, #4]
    if (tokenClass(t) != TT_NAME) {
 8103766:	6878      	ldr	r0, [r7, #4]
 8103768:	f7ff ffea 	bl	8103740 <tokenClass>
 810376c:	4603      	mov	r3, r0
 810376e:	2b20      	cmp	r3, #32
 8103770:	d001      	beq.n	8103776 <tokenHash+0x18>
        return 0;
 8103772:	2300      	movs	r3, #0
 8103774:	e005      	b.n	8103782 <tokenHash+0x24>
    }
    return hashOfNStr(&(t->body.str));
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	3301      	adds	r3, #1
 810377a:	4618      	mov	r0, r3
 810377c:	f000 fa52 	bl	8103c24 <hashOfNStr>
 8103780:	4603      	mov	r3, r0
}
 8103782:	4618      	mov	r0, r3
 8103784:	3708      	adds	r7, #8
 8103786:	46bd      	mov	sp, r7
 8103788:	bd80      	pop	{r7, pc}
	...

0810378c <getParseErrorPos>:

char* getParseErrorPos(void) {
 810378c:	b480      	push	{r7}
 810378e:	af00      	add	r7, sp, #0
    return parseError;
 8103790:	4b03      	ldr	r3, [pc, #12]	; (81037a0 <getParseErrorPos+0x14>)
 8103792:	681b      	ldr	r3, [r3, #0]
}
 8103794:	4618      	mov	r0, r3
 8103796:	46bd      	mov	sp, r7
 8103798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810379c:	4770      	bx	lr
 810379e:	bf00      	nop
 81037a0:	10004b64 	.word	0x10004b64

081037a4 <getParseErrorMsg>:

void getParseErrorMsg(char* s) {
 81037a4:	b580      	push	{r7, lr}
 81037a6:	b082      	sub	sp, #8
 81037a8:	af00      	add	r7, sp, #0
 81037aa:	6078      	str	r0, [r7, #4]
    outputConstStr(ID_PARSING_ERRORS, parseErrorCode, s);
 81037ac:	4b05      	ldr	r3, [pc, #20]	; (81037c4 <getParseErrorMsg+0x20>)
 81037ae:	781b      	ldrb	r3, [r3, #0]
 81037b0:	687a      	ldr	r2, [r7, #4]
 81037b2:	4619      	mov	r1, r3
 81037b4:	2001      	movs	r0, #1
 81037b6:	f000 fc57 	bl	8104068 <outputConstStr>
}
 81037ba:	bf00      	nop
 81037bc:	3708      	adds	r7, #8
 81037be:	46bd      	mov	sp, r7
 81037c0:	bd80      	pop	{r7, pc}
 81037c2:	bf00      	nop
 81037c4:	10004b74 	.word	0x10004b74

081037c8 <trim>:
#include "mystdlib.h"
#include "utils.h"
#include "extern.h"

void trim(char* s) {
 81037c8:	b480      	push	{r7}
 81037ca:	b085      	sub	sp, #20
 81037cc:	af00      	add	r7, sp, #0
 81037ce:	6078      	str	r0, [r7, #4]
    short i = 0, k;
 81037d0:	2300      	movs	r3, #0
 81037d2:	81fb      	strh	r3, [r7, #14]
    while (s[i] != 0 && s[i] <= ' ') {
 81037d4:	e005      	b.n	81037e2 <trim+0x1a>
        i++;
 81037d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81037da:	b29b      	uxth	r3, r3
 81037dc:	3301      	adds	r3, #1
 81037de:	b29b      	uxth	r3, r3
 81037e0:	81fb      	strh	r3, [r7, #14]
    while (s[i] != 0 && s[i] <= ' ') {
 81037e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81037e6:	687a      	ldr	r2, [r7, #4]
 81037e8:	4413      	add	r3, r2
 81037ea:	781b      	ldrb	r3, [r3, #0]
 81037ec:	2b00      	cmp	r3, #0
 81037ee:	d006      	beq.n	81037fe <trim+0x36>
 81037f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81037f4:	687a      	ldr	r2, [r7, #4]
 81037f6:	4413      	add	r3, r2
 81037f8:	781b      	ldrb	r3, [r3, #0]
 81037fa:	2b20      	cmp	r3, #32
 81037fc:	d9eb      	bls.n	81037d6 <trim+0xe>
    }
    k = 0;
 81037fe:	2300      	movs	r3, #0
 8103800:	81bb      	strh	r3, [r7, #12]
    while (s[i] != 0) {
 8103802:	e011      	b.n	8103828 <trim+0x60>
        s[k++] = s[i++];
 8103804:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8103808:	b293      	uxth	r3, r2
 810380a:	3301      	adds	r3, #1
 810380c:	b29b      	uxth	r3, r3
 810380e:	81fb      	strh	r3, [r7, #14]
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	441a      	add	r2, r3
 8103814:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8103818:	b28b      	uxth	r3, r1
 810381a:	3301      	adds	r3, #1
 810381c:	b29b      	uxth	r3, r3
 810381e:	81bb      	strh	r3, [r7, #12]
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	440b      	add	r3, r1
 8103824:	7812      	ldrb	r2, [r2, #0]
 8103826:	701a      	strb	r2, [r3, #0]
    while (s[i] != 0) {
 8103828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810382c:	687a      	ldr	r2, [r7, #4]
 810382e:	4413      	add	r3, r2
 8103830:	781b      	ldrb	r3, [r3, #0]
 8103832:	2b00      	cmp	r3, #0
 8103834:	d1e6      	bne.n	8103804 <trim+0x3c>
    }
    do {
        s[k--] = 0;
 8103836:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 810383a:	b293      	uxth	r3, r2
 810383c:	3b01      	subs	r3, #1
 810383e:	b29b      	uxth	r3, r3
 8103840:	81bb      	strh	r3, [r7, #12]
 8103842:	687b      	ldr	r3, [r7, #4]
 8103844:	4413      	add	r3, r2
 8103846:	2200      	movs	r2, #0
 8103848:	701a      	strb	r2, [r3, #0]
    } while (k >= 0 && s[k] <= ' ');
 810384a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 810384e:	2b00      	cmp	r3, #0
 8103850:	db06      	blt.n	8103860 <trim+0x98>
 8103852:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8103856:	687a      	ldr	r2, [r7, #4]
 8103858:	4413      	add	r3, r2
 810385a:	781b      	ldrb	r3, [r3, #0]
 810385c:	2b20      	cmp	r3, #32
 810385e:	d9ea      	bls.n	8103836 <trim+0x6e>
}
 8103860:	bf00      	nop
 8103862:	3714      	adds	r7, #20
 8103864:	46bd      	mov	sp, r7
 8103866:	f85d 7b04 	ldr.w	r7, [sp], #4
 810386a:	4770      	bx	lr

0810386c <skipSpaces>:

char* skipSpaces(char* s) {
 810386c:	b580      	push	{r7, lr}
 810386e:	b082      	sub	sp, #8
 8103870:	af00      	add	r7, sp, #0
 8103872:	6078      	str	r0, [r7, #4]
    while (isSpace(*s)) {
 8103874:	e002      	b.n	810387c <skipSpaces+0x10>
        s++;
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	3301      	adds	r3, #1
 810387a:	607b      	str	r3, [r7, #4]
    while (isSpace(*s)) {
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	781b      	ldrb	r3, [r3, #0]
 8103880:	4618      	mov	r0, r3
 8103882:	f000 f9b9 	bl	8103bf8 <isSpace>
 8103886:	4603      	mov	r3, r0
 8103888:	2b00      	cmp	r3, #0
 810388a:	d1f4      	bne.n	8103876 <skipSpaces+0xa>
    }
    return s;
 810388c:	687b      	ldr	r3, [r7, #4]
}
 810388e:	4618      	mov	r0, r3
 8103890:	3708      	adds	r7, #8
 8103892:	46bd      	mov	sp, r7
 8103894:	bd80      	pop	{r7, pc}

08103896 <skipDigits>:

char* skipDigits(char* s) {
 8103896:	b580      	push	{r7, lr}
 8103898:	b082      	sub	sp, #8
 810389a:	af00      	add	r7, sp, #0
 810389c:	6078      	str	r0, [r7, #4]
    while (isDigit(*s)) {
 810389e:	e002      	b.n	81038a6 <skipDigits+0x10>
        s++;
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	3301      	adds	r3, #1
 81038a4:	607b      	str	r3, [r7, #4]
    while (isDigit(*s)) {
 81038a6:	687b      	ldr	r3, [r7, #4]
 81038a8:	781b      	ldrb	r3, [r3, #0]
 81038aa:	4618      	mov	r0, r3
 81038ac:	f000 f924 	bl	8103af8 <isDigit>
 81038b0:	4603      	mov	r3, r0
 81038b2:	2b00      	cmp	r3, #0
 81038b4:	d1f4      	bne.n	81038a0 <skipDigits+0xa>
    }
    return s;
 81038b6:	687b      	ldr	r3, [r7, #4]
}
 81038b8:	4618      	mov	r0, r3
 81038ba:	3708      	adds	r7, #8
 81038bc:	46bd      	mov	sp, r7
 81038be:	bd80      	pop	{r7, pc}

081038c0 <outputChar>:
        return 0;
    }
    return memcmp(&(ns->text), s, ns->len) == 0;
}

void outputChar(char c) {
 81038c0:	b580      	push	{r7, lr}
 81038c2:	b082      	sub	sp, #8
 81038c4:	af00      	add	r7, sp, #0
 81038c6:	4603      	mov	r3, r0
 81038c8:	71fb      	strb	r3, [r7, #7]
    sysPutc(c);
 81038ca:	79fb      	ldrb	r3, [r7, #7]
 81038cc:	4618      	mov	r0, r3
 81038ce:	f000 fae0 	bl	8103e92 <sysPutc>
}
 81038d2:	bf00      	nop
 81038d4:	3708      	adds	r7, #8
 81038d6:	46bd      	mov	sp, r7
 81038d8:	bd80      	pop	{r7, pc}

081038da <outputStr>:

void outputStr(char* s) {
 81038da:	b580      	push	{r7, lr}
 81038dc:	b082      	sub	sp, #8
 81038de:	af00      	add	r7, sp, #0
 81038e0:	6078      	str	r0, [r7, #4]
    while (*s) {
 81038e2:	e006      	b.n	81038f2 <outputStr+0x18>
        sysPutc(*(s++));
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	1c5a      	adds	r2, r3, #1
 81038e8:	607a      	str	r2, [r7, #4]
 81038ea:	781b      	ldrb	r3, [r3, #0]
 81038ec:	4618      	mov	r0, r3
 81038ee:	f000 fad0 	bl	8103e92 <sysPutc>
    while (*s) {
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	781b      	ldrb	r3, [r3, #0]
 81038f6:	2b00      	cmp	r3, #0
 81038f8:	d1f4      	bne.n	81038e4 <outputStr+0xa>
    }
}
 81038fa:	bf00      	nop
 81038fc:	bf00      	nop
 81038fe:	3708      	adds	r7, #8
 8103900:	46bd      	mov	sp, r7
 8103902:	bd80      	pop	{r7, pc}

08103904 <outputNStr>:

void outputNStr(nstring* t) {
 8103904:	b580      	push	{r7, lr}
 8103906:	b084      	sub	sp, #16
 8103908:	af00      	add	r7, sp, #0
 810390a:	6078      	str	r0, [r7, #4]
    for (short i = 0; i < t->len; i++) {
 810390c:	2300      	movs	r3, #0
 810390e:	81fb      	strh	r3, [r7, #14]
 8103910:	e00d      	b.n	810392e <outputNStr+0x2a>
        sysPutc(t->text[i]);
 8103912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103916:	687a      	ldr	r2, [r7, #4]
 8103918:	4413      	add	r3, r2
 810391a:	785b      	ldrb	r3, [r3, #1]
 810391c:	4618      	mov	r0, r3
 810391e:	f000 fab8 	bl	8103e92 <sysPutc>
    for (short i = 0; i < t->len; i++) {
 8103922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103926:	b29b      	uxth	r3, r3
 8103928:	3301      	adds	r3, #1
 810392a:	b29b      	uxth	r3, r3
 810392c:	81fb      	strh	r3, [r7, #14]
 810392e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103932:	687a      	ldr	r2, [r7, #4]
 8103934:	7812      	ldrb	r2, [r2, #0]
 8103936:	4293      	cmp	r3, r2
 8103938:	dbeb      	blt.n	8103912 <outputNStr+0xe>
    }
};
 810393a:	bf00      	nop
 810393c:	bf00      	nop
 810393e:	3710      	adds	r7, #16
 8103940:	46bd      	mov	sp, r7
 8103942:	bd80      	pop	{r7, pc}

08103944 <outputInt>:

void outputInt(long n) {
 8103944:	b580      	push	{r7, lr}
 8103946:	b084      	sub	sp, #16
 8103948:	af00      	add	r7, sp, #0
 810394a:	6078      	str	r0, [r7, #4]
    long d = 1000000000;
 810394c:	4b1f      	ldr	r3, [pc, #124]	; (81039cc <outputInt+0x88>)
 810394e:	60fb      	str	r3, [r7, #12]
    if (n < 0) {
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	2b00      	cmp	r3, #0
 8103954:	da05      	bge.n	8103962 <outputInt+0x1e>
        outputChar('-');
 8103956:	202d      	movs	r0, #45	; 0x2d
 8103958:	f7ff ffb2 	bl	81038c0 <outputChar>
        n = -n;
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	425b      	negs	r3, r3
 8103960:	607b      	str	r3, [r7, #4]
    }
    if (n == 0) {
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	2b00      	cmp	r3, #0
 8103966:	d10b      	bne.n	8103980 <outputInt+0x3c>
        sysPutc('0');
 8103968:	2030      	movs	r0, #48	; 0x30
 810396a:	f000 fa92 	bl	8103e92 <sysPutc>
        return;
 810396e:	e02a      	b.n	81039c6 <outputInt+0x82>
    }
    while (d > n) {
        d /= 10;
 8103970:	68fb      	ldr	r3, [r7, #12]
 8103972:	4a17      	ldr	r2, [pc, #92]	; (81039d0 <outputInt+0x8c>)
 8103974:	fb82 1203 	smull	r1, r2, r2, r3
 8103978:	1092      	asrs	r2, r2, #2
 810397a:	17db      	asrs	r3, r3, #31
 810397c:	1ad3      	subs	r3, r2, r3
 810397e:	60fb      	str	r3, [r7, #12]
    while (d > n) {
 8103980:	68fa      	ldr	r2, [r7, #12]
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	429a      	cmp	r2, r3
 8103986:	dcf3      	bgt.n	8103970 <outputInt+0x2c>
    }
    while (d > 0) {
 8103988:	e01a      	b.n	81039c0 <outputInt+0x7c>
        sysPutc(n / d + '0');
 810398a:	687a      	ldr	r2, [r7, #4]
 810398c:	68fb      	ldr	r3, [r7, #12]
 810398e:	fb92 f3f3 	sdiv	r3, r2, r3
 8103992:	b2db      	uxtb	r3, r3
 8103994:	3330      	adds	r3, #48	; 0x30
 8103996:	b2db      	uxtb	r3, r3
 8103998:	4618      	mov	r0, r3
 810399a:	f000 fa7a 	bl	8103e92 <sysPutc>
        n %= d;
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	68fa      	ldr	r2, [r7, #12]
 81039a2:	fb93 f2f2 	sdiv	r2, r3, r2
 81039a6:	68f9      	ldr	r1, [r7, #12]
 81039a8:	fb01 f202 	mul.w	r2, r1, r2
 81039ac:	1a9b      	subs	r3, r3, r2
 81039ae:	607b      	str	r3, [r7, #4]
        d /= 10;
 81039b0:	68fb      	ldr	r3, [r7, #12]
 81039b2:	4a07      	ldr	r2, [pc, #28]	; (81039d0 <outputInt+0x8c>)
 81039b4:	fb82 1203 	smull	r1, r2, r2, r3
 81039b8:	1092      	asrs	r2, r2, #2
 81039ba:	17db      	asrs	r3, r3, #31
 81039bc:	1ad3      	subs	r3, r2, r3
 81039be:	60fb      	str	r3, [r7, #12]
    while (d > 0) {
 81039c0:	68fb      	ldr	r3, [r7, #12]
 81039c2:	2b00      	cmp	r3, #0
 81039c4:	dce1      	bgt.n	810398a <outputInt+0x46>
    }
}
 81039c6:	3710      	adds	r7, #16
 81039c8:	46bd      	mov	sp, r7
 81039ca:	bd80      	pop	{r7, pc}
 81039cc:	3b9aca00 	.word	0x3b9aca00
 81039d0:	66666667 	.word	0x66666667

081039d4 <decFromStr>:

int decFromStr(char* s) {
 81039d4:	b590      	push	{r4, r7, lr}
 81039d6:	b085      	sub	sp, #20
 81039d8:	af00      	add	r7, sp, #0
 81039da:	6078      	str	r0, [r7, #4]
    schar sign = 1;
 81039dc:	2301      	movs	r3, #1
 81039de:	73fb      	strb	r3, [r7, #15]
    char base = 10;
 81039e0:	230a      	movs	r3, #10
 81039e2:	73bb      	strb	r3, [r7, #14]
    int res = 0;
 81039e4:	2300      	movs	r3, #0
 81039e6:	60bb      	str	r3, [r7, #8]
    if (*s == '-') {
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	781b      	ldrb	r3, [r3, #0]
 81039ec:	2b2d      	cmp	r3, #45	; 0x2d
 81039ee:	d104      	bne.n	81039fa <decFromStr+0x26>
        sign = -1;
 81039f0:	23ff      	movs	r3, #255	; 0xff
 81039f2:	73fb      	strb	r3, [r7, #15]
        s += 1;
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	3301      	adds	r3, #1
 81039f8:	607b      	str	r3, [r7, #4]
    }
    if (*s == '0') {
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	781b      	ldrb	r3, [r3, #0]
 81039fe:	2b30      	cmp	r3, #48	; 0x30
 8103a00:	d131      	bne.n	8103a66 <decFromStr+0x92>
        s += 1;
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	3301      	adds	r3, #1
 8103a06:	607b      	str	r3, [r7, #4]
        if (toUpper(*s) == 'X') {
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	781b      	ldrb	r3, [r3, #0]
 8103a0c:	4618      	mov	r0, r3
 8103a0e:	f000 f844 	bl	8103a9a <toUpper>
 8103a12:	4603      	mov	r3, r0
 8103a14:	2b58      	cmp	r3, #88	; 0x58
 8103a16:	d105      	bne.n	8103a24 <decFromStr+0x50>
            base = 16;
 8103a18:	2310      	movs	r3, #16
 8103a1a:	73bb      	strb	r3, [r7, #14]
            s += 1;
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	3301      	adds	r3, #1
 8103a20:	607b      	str	r3, [r7, #4]
 8103a22:	e020      	b.n	8103a66 <decFromStr+0x92>
        } else if (toUpper(*s) == 'B') {
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	781b      	ldrb	r3, [r3, #0]
 8103a28:	4618      	mov	r0, r3
 8103a2a:	f000 f836 	bl	8103a9a <toUpper>
 8103a2e:	4603      	mov	r3, r0
 8103a30:	2b42      	cmp	r3, #66	; 0x42
 8103a32:	d105      	bne.n	8103a40 <decFromStr+0x6c>
            base = 2;
 8103a34:	2302      	movs	r3, #2
 8103a36:	73bb      	strb	r3, [r7, #14]
            s += 1;
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	3301      	adds	r3, #1
 8103a3c:	607b      	str	r3, [r7, #4]
 8103a3e:	e012      	b.n	8103a66 <decFromStr+0x92>
        } else {
            base = 8;
 8103a40:	2308      	movs	r3, #8
 8103a42:	73bb      	strb	r3, [r7, #14]
        }
    }
    while (isDigitBased(*s, base)) {
 8103a44:	e00f      	b.n	8103a66 <decFromStr+0x92>
        res = res * base + makeDigit(*s++, base);
 8103a46:	7bbb      	ldrb	r3, [r7, #14]
 8103a48:	68ba      	ldr	r2, [r7, #8]
 8103a4a:	fb02 f403 	mul.w	r4, r2, r3
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	1c5a      	adds	r2, r3, #1
 8103a52:	607a      	str	r2, [r7, #4]
 8103a54:	781b      	ldrb	r3, [r3, #0]
 8103a56:	7bba      	ldrb	r2, [r7, #14]
 8103a58:	4611      	mov	r1, r2
 8103a5a:	4618      	mov	r0, r3
 8103a5c:	f000 f892 	bl	8103b84 <makeDigit>
 8103a60:	4603      	mov	r3, r0
 8103a62:	4423      	add	r3, r4
 8103a64:	60bb      	str	r3, [r7, #8]
    while (isDigitBased(*s, base)) {
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	781b      	ldrb	r3, [r3, #0]
 8103a6a:	7bba      	ldrb	r2, [r7, #14]
 8103a6c:	4611      	mov	r1, r2
 8103a6e:	4618      	mov	r0, r3
 8103a70:	f000 f857 	bl	8103b22 <isDigitBased>
 8103a74:	4603      	mov	r3, r0
 8103a76:	2b00      	cmp	r3, #0
 8103a78:	d1e5      	bne.n	8103a46 <decFromStr+0x72>
    }
    return res * sign;
 8103a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8103a7e:	68ba      	ldr	r2, [r7, #8]
 8103a80:	fb02 f303 	mul.w	r3, r2, r3
}
 8103a84:	4618      	mov	r0, r3
 8103a86:	3714      	adds	r7, #20
 8103a88:	46bd      	mov	sp, r7
 8103a8a:	bd90      	pop	{r4, r7, pc}

08103a8c <outputCr>:

void outputCr() {
 8103a8c:	b580      	push	{r7, lr}
 8103a8e:	af00      	add	r7, sp, #0
    sysPutc('\n');
 8103a90:	200a      	movs	r0, #10
 8103a92:	f000 f9fe 	bl	8103e92 <sysPutc>
}
 8103a96:	bf00      	nop
 8103a98:	bd80      	pop	{r7, pc}

08103a9a <toUpper>:

char toUpper(char c) {
 8103a9a:	b480      	push	{r7}
 8103a9c:	b083      	sub	sp, #12
 8103a9e:	af00      	add	r7, sp, #0
 8103aa0:	4603      	mov	r3, r0
 8103aa2:	71fb      	strb	r3, [r7, #7]
    return (c >= 'a' && c <= 'z') ? c - ('a' - 'A') : c;
 8103aa4:	79fb      	ldrb	r3, [r7, #7]
 8103aa6:	2b60      	cmp	r3, #96	; 0x60
 8103aa8:	d906      	bls.n	8103ab8 <toUpper+0x1e>
 8103aaa:	79fb      	ldrb	r3, [r7, #7]
 8103aac:	2b7a      	cmp	r3, #122	; 0x7a
 8103aae:	d803      	bhi.n	8103ab8 <toUpper+0x1e>
 8103ab0:	79fb      	ldrb	r3, [r7, #7]
 8103ab2:	3b20      	subs	r3, #32
 8103ab4:	b2db      	uxtb	r3, r3
 8103ab6:	e000      	b.n	8103aba <toUpper+0x20>
 8103ab8:	79fb      	ldrb	r3, [r7, #7]
}
 8103aba:	4618      	mov	r0, r3
 8103abc:	370c      	adds	r7, #12
 8103abe:	46bd      	mov	sp, r7
 8103ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ac4:	4770      	bx	lr

08103ac6 <isAlpha>:

char isAlpha(char c) {
 8103ac6:	b580      	push	{r7, lr}
 8103ac8:	b082      	sub	sp, #8
 8103aca:	af00      	add	r7, sp, #0
 8103acc:	4603      	mov	r3, r0
 8103ace:	71fb      	strb	r3, [r7, #7]
    c = toUpper(c);
 8103ad0:	79fb      	ldrb	r3, [r7, #7]
 8103ad2:	4618      	mov	r0, r3
 8103ad4:	f7ff ffe1 	bl	8103a9a <toUpper>
 8103ad8:	4603      	mov	r3, r0
 8103ada:	71fb      	strb	r3, [r7, #7]
    return c >= 'A' && c <= 'Z';
 8103adc:	79fb      	ldrb	r3, [r7, #7]
 8103ade:	2b40      	cmp	r3, #64	; 0x40
 8103ae0:	d904      	bls.n	8103aec <isAlpha+0x26>
 8103ae2:	79fb      	ldrb	r3, [r7, #7]
 8103ae4:	2b5a      	cmp	r3, #90	; 0x5a
 8103ae6:	d801      	bhi.n	8103aec <isAlpha+0x26>
 8103ae8:	2301      	movs	r3, #1
 8103aea:	e000      	b.n	8103aee <isAlpha+0x28>
 8103aec:	2300      	movs	r3, #0
 8103aee:	b2db      	uxtb	r3, r3
}
 8103af0:	4618      	mov	r0, r3
 8103af2:	3708      	adds	r7, #8
 8103af4:	46bd      	mov	sp, r7
 8103af6:	bd80      	pop	{r7, pc}

08103af8 <isDigit>:

char isDigit(char c) {
 8103af8:	b480      	push	{r7}
 8103afa:	b083      	sub	sp, #12
 8103afc:	af00      	add	r7, sp, #0
 8103afe:	4603      	mov	r3, r0
 8103b00:	71fb      	strb	r3, [r7, #7]
    return c >= '0' && c <= '9';
 8103b02:	79fb      	ldrb	r3, [r7, #7]
 8103b04:	2b2f      	cmp	r3, #47	; 0x2f
 8103b06:	d904      	bls.n	8103b12 <isDigit+0x1a>
 8103b08:	79fb      	ldrb	r3, [r7, #7]
 8103b0a:	2b39      	cmp	r3, #57	; 0x39
 8103b0c:	d801      	bhi.n	8103b12 <isDigit+0x1a>
 8103b0e:	2301      	movs	r3, #1
 8103b10:	e000      	b.n	8103b14 <isDigit+0x1c>
 8103b12:	2300      	movs	r3, #0
 8103b14:	b2db      	uxtb	r3, r3
}
 8103b16:	4618      	mov	r0, r3
 8103b18:	370c      	adds	r7, #12
 8103b1a:	46bd      	mov	sp, r7
 8103b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b20:	4770      	bx	lr

08103b22 <isDigitBased>:

char isDigitBased(char c, char base) {
 8103b22:	b580      	push	{r7, lr}
 8103b24:	b082      	sub	sp, #8
 8103b26:	af00      	add	r7, sp, #0
 8103b28:	4603      	mov	r3, r0
 8103b2a:	460a      	mov	r2, r1
 8103b2c:	71fb      	strb	r3, [r7, #7]
 8103b2e:	4613      	mov	r3, r2
 8103b30:	71bb      	strb	r3, [r7, #6]
    if (c < '0') {
 8103b32:	79fb      	ldrb	r3, [r7, #7]
 8103b34:	2b2f      	cmp	r3, #47	; 0x2f
 8103b36:	d801      	bhi.n	8103b3c <isDigitBased+0x1a>
        return 0;
 8103b38:	2300      	movs	r3, #0
 8103b3a:	e01f      	b.n	8103b7c <isDigitBased+0x5a>
    } else if (c <= '9') {
 8103b3c:	79fb      	ldrb	r3, [r7, #7]
 8103b3e:	2b39      	cmp	r3, #57	; 0x39
 8103b40:	d809      	bhi.n	8103b56 <isDigitBased+0x34>
        return base > c - '0';
 8103b42:	79fb      	ldrb	r3, [r7, #7]
 8103b44:	f1a3 022f 	sub.w	r2, r3, #47	; 0x2f
 8103b48:	79bb      	ldrb	r3, [r7, #6]
 8103b4a:	429a      	cmp	r2, r3
 8103b4c:	bfd4      	ite	le
 8103b4e:	2301      	movle	r3, #1
 8103b50:	2300      	movgt	r3, #0
 8103b52:	b2db      	uxtb	r3, r3
 8103b54:	e012      	b.n	8103b7c <isDigitBased+0x5a>
    } else {
        c = toUpper(c);
 8103b56:	79fb      	ldrb	r3, [r7, #7]
 8103b58:	4618      	mov	r0, r3
 8103b5a:	f7ff ff9e 	bl	8103a9a <toUpper>
 8103b5e:	4603      	mov	r3, r0
 8103b60:	71fb      	strb	r3, [r7, #7]
        return c >= 'A' && base > c - 'A' + 10;
 8103b62:	79fb      	ldrb	r3, [r7, #7]
 8103b64:	2b40      	cmp	r3, #64	; 0x40
 8103b66:	d907      	bls.n	8103b78 <isDigitBased+0x56>
 8103b68:	79fb      	ldrb	r3, [r7, #7]
 8103b6a:	f1a3 0236 	sub.w	r2, r3, #54	; 0x36
 8103b6e:	79bb      	ldrb	r3, [r7, #6]
 8103b70:	429a      	cmp	r2, r3
 8103b72:	dc01      	bgt.n	8103b78 <isDigitBased+0x56>
 8103b74:	2301      	movs	r3, #1
 8103b76:	e000      	b.n	8103b7a <isDigitBased+0x58>
 8103b78:	2300      	movs	r3, #0
 8103b7a:	b2db      	uxtb	r3, r3
    }
}
 8103b7c:	4618      	mov	r0, r3
 8103b7e:	3708      	adds	r7, #8
 8103b80:	46bd      	mov	sp, r7
 8103b82:	bd80      	pop	{r7, pc}

08103b84 <makeDigit>:

char makeDigit(char c, char base) {
 8103b84:	b580      	push	{r7, lr}
 8103b86:	b082      	sub	sp, #8
 8103b88:	af00      	add	r7, sp, #0
 8103b8a:	4603      	mov	r3, r0
 8103b8c:	460a      	mov	r2, r1
 8103b8e:	71fb      	strb	r3, [r7, #7]
 8103b90:	4613      	mov	r3, r2
 8103b92:	71bb      	strb	r3, [r7, #6]
    if (c < '0') {
 8103b94:	79fb      	ldrb	r3, [r7, #7]
 8103b96:	2b2f      	cmp	r3, #47	; 0x2f
 8103b98:	d801      	bhi.n	8103b9e <makeDigit+0x1a>
        return 0;
 8103b9a:	2300      	movs	r3, #0
 8103b9c:	e00d      	b.n	8103bba <makeDigit+0x36>
    } else if (c <= '9') {
 8103b9e:	79fb      	ldrb	r3, [r7, #7]
 8103ba0:	2b39      	cmp	r3, #57	; 0x39
 8103ba2:	d803      	bhi.n	8103bac <makeDigit+0x28>
        return c - '0';
 8103ba4:	79fb      	ldrb	r3, [r7, #7]
 8103ba6:	3b30      	subs	r3, #48	; 0x30
 8103ba8:	b2db      	uxtb	r3, r3
 8103baa:	e006      	b.n	8103bba <makeDigit+0x36>
    } else {
        return toUpper(c) - 'A' + 10;
 8103bac:	79fb      	ldrb	r3, [r7, #7]
 8103bae:	4618      	mov	r0, r3
 8103bb0:	f7ff ff73 	bl	8103a9a <toUpper>
 8103bb4:	4603      	mov	r3, r0
 8103bb6:	3b37      	subs	r3, #55	; 0x37
 8103bb8:	b2db      	uxtb	r3, r3
    }
}
 8103bba:	4618      	mov	r0, r3
 8103bbc:	3708      	adds	r7, #8
 8103bbe:	46bd      	mov	sp, r7
 8103bc0:	bd80      	pop	{r7, pc}

08103bc2 <isAlNum>:

char isAlNum(char c) {
 8103bc2:	b580      	push	{r7, lr}
 8103bc4:	b082      	sub	sp, #8
 8103bc6:	af00      	add	r7, sp, #0
 8103bc8:	4603      	mov	r3, r0
 8103bca:	71fb      	strb	r3, [r7, #7]
    return isDigit(c) || isAlpha(c);
 8103bcc:	79fb      	ldrb	r3, [r7, #7]
 8103bce:	4618      	mov	r0, r3
 8103bd0:	f7ff ff92 	bl	8103af8 <isDigit>
 8103bd4:	4603      	mov	r3, r0
 8103bd6:	2b00      	cmp	r3, #0
 8103bd8:	d106      	bne.n	8103be8 <isAlNum+0x26>
 8103bda:	79fb      	ldrb	r3, [r7, #7]
 8103bdc:	4618      	mov	r0, r3
 8103bde:	f7ff ff72 	bl	8103ac6 <isAlpha>
 8103be2:	4603      	mov	r3, r0
 8103be4:	2b00      	cmp	r3, #0
 8103be6:	d001      	beq.n	8103bec <isAlNum+0x2a>
 8103be8:	2301      	movs	r3, #1
 8103bea:	e000      	b.n	8103bee <isAlNum+0x2c>
 8103bec:	2300      	movs	r3, #0
 8103bee:	b2db      	uxtb	r3, r3
}
 8103bf0:	4618      	mov	r0, r3
 8103bf2:	3708      	adds	r7, #8
 8103bf4:	46bd      	mov	sp, r7
 8103bf6:	bd80      	pop	{r7, pc}

08103bf8 <isSpace>:

char isSpace(char c) {
 8103bf8:	b480      	push	{r7}
 8103bfa:	b083      	sub	sp, #12
 8103bfc:	af00      	add	r7, sp, #0
 8103bfe:	4603      	mov	r3, r0
 8103c00:	71fb      	strb	r3, [r7, #7]
    switch (c) {
 8103c02:	79fb      	ldrb	r3, [r7, #7]
 8103c04:	2b0d      	cmp	r3, #13
 8103c06:	dc02      	bgt.n	8103c0e <isSpace+0x16>
 8103c08:	2b09      	cmp	r3, #9
 8103c0a:	da02      	bge.n	8103c12 <isSpace+0x1a>
 8103c0c:	e003      	b.n	8103c16 <isSpace+0x1e>
 8103c0e:	2b20      	cmp	r3, #32
 8103c10:	d101      	bne.n	8103c16 <isSpace+0x1e>
        case '\t':
        case '\v':
        case '\n':
        case '\r':
        case '\f':
            return 1;
 8103c12:	2301      	movs	r3, #1
 8103c14:	e000      	b.n	8103c18 <isSpace+0x20>
    }
    return 0;
 8103c16:	2300      	movs	r3, #0
}
 8103c18:	4618      	mov	r0, r3
 8103c1a:	370c      	adds	r7, #12
 8103c1c:	46bd      	mov	sp, r7
 8103c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c22:	4770      	bx	lr

08103c24 <hashOfNStr>:

numeric hashOfNStr(nstring* t) {
 8103c24:	b480      	push	{r7}
 8103c26:	b087      	sub	sp, #28
 8103c28:	af00      	add	r7, sp, #0
 8103c2a:	6078      	str	r0, [r7, #4]
    char i = 0, n = t->len;
 8103c2c:	2300      	movs	r3, #0
 8103c2e:	75fb      	strb	r3, [r7, #23]
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	781b      	ldrb	r3, [r3, #0]
 8103c34:	73fb      	strb	r3, [r7, #15]
    numeric res = 0;
 8103c36:	2300      	movs	r3, #0
 8103c38:	613b      	str	r3, [r7, #16]
    while (i < n) {
 8103c3a:	e00a      	b.n	8103c52 <hashOfNStr+0x2e>
        res = (res << 1) ^ t->text[i];
 8103c3c:	693b      	ldr	r3, [r7, #16]
 8103c3e:	005b      	lsls	r3, r3, #1
 8103c40:	7dfa      	ldrb	r2, [r7, #23]
 8103c42:	6879      	ldr	r1, [r7, #4]
 8103c44:	440a      	add	r2, r1
 8103c46:	7852      	ldrb	r2, [r2, #1]
 8103c48:	4053      	eors	r3, r2
 8103c4a:	613b      	str	r3, [r7, #16]
        i++;
 8103c4c:	7dfb      	ldrb	r3, [r7, #23]
 8103c4e:	3301      	adds	r3, #1
 8103c50:	75fb      	strb	r3, [r7, #23]
    while (i < n) {
 8103c52:	7dfa      	ldrb	r2, [r7, #23]
 8103c54:	7bfb      	ldrb	r3, [r7, #15]
 8103c56:	429a      	cmp	r2, r3
 8103c58:	d3f0      	bcc.n	8103c3c <hashOfNStr+0x18>
    }
    return res;
 8103c5a:	693b      	ldr	r3, [r7, #16]
}
 8103c5c:	4618      	mov	r0, r3
 8103c5e:	371c      	adds	r7, #28
 8103c60:	46bd      	mov	sp, r7
 8103c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c66:	4770      	bx	lr

08103c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8103c68:	b480      	push	{r7}
 8103c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8103c6c:	4b0b      	ldr	r3, [pc, #44]	; (8103c9c <SystemInit+0x34>)
 8103c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103c72:	4a0a      	ldr	r2, [pc, #40]	; (8103c9c <SystemInit+0x34>)
 8103c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8103c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8103c7c:	4b07      	ldr	r3, [pc, #28]	; (8103c9c <SystemInit+0x34>)
 8103c7e:	691b      	ldr	r3, [r3, #16]
 8103c80:	4a06      	ldr	r2, [pc, #24]	; (8103c9c <SystemInit+0x34>)
 8103c82:	f043 0310 	orr.w	r3, r3, #16
 8103c86:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8103c88:	4b04      	ldr	r3, [pc, #16]	; (8103c9c <SystemInit+0x34>)
 8103c8a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8103c8e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8103c90:	bf00      	nop
 8103c92:	46bd      	mov	sp, r7
 8103c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c98:	4770      	bx	lr
 8103c9a:	bf00      	nop
 8103c9c:	e000ed00 	.word	0xe000ed00

08103ca0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8103ca0:	b580      	push	{r7, lr}
 8103ca2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueBASIC */
  queueBASICHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueBASIC_attributes);
 8103ca4:	4a0c      	ldr	r2, [pc, #48]	; (8103cd8 <MX_FREERTOS_Init+0x38>)
 8103ca6:	2102      	movs	r1, #2
 8103ca8:	2010      	movs	r0, #16
 8103caa:	f006 fa2e 	bl	810a10a <osMessageQueueNew>
 8103cae:	4603      	mov	r3, r0
 8103cb0:	4a0a      	ldr	r2, [pc, #40]	; (8103cdc <MX_FREERTOS_Init+0x3c>)
 8103cb2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8103cb4:	4a0a      	ldr	r2, [pc, #40]	; (8103ce0 <MX_FREERTOS_Init+0x40>)
 8103cb6:	2100      	movs	r1, #0
 8103cb8:	480a      	ldr	r0, [pc, #40]	; (8103ce4 <MX_FREERTOS_Init+0x44>)
 8103cba:	f006 f979 	bl	8109fb0 <osThreadNew>
 8103cbe:	4603      	mov	r3, r0
 8103cc0:	4a09      	ldr	r2, [pc, #36]	; (8103ce8 <MX_FREERTOS_Init+0x48>)
 8103cc2:	6013      	str	r3, [r2, #0]

  /* creation of interpreter */
  interpreterHandle = osThreadNew(StartInterpreter, NULL, &interpreter_attributes);
 8103cc4:	4a09      	ldr	r2, [pc, #36]	; (8103cec <MX_FREERTOS_Init+0x4c>)
 8103cc6:	2100      	movs	r1, #0
 8103cc8:	4809      	ldr	r0, [pc, #36]	; (8103cf0 <MX_FREERTOS_Init+0x50>)
 8103cca:	f006 f971 	bl	8109fb0 <osThreadNew>
 8103cce:	4603      	mov	r3, r0
 8103cd0:	4a08      	ldr	r2, [pc, #32]	; (8103cf4 <MX_FREERTOS_Init+0x54>)
 8103cd2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8103cd4:	bf00      	nop
 8103cd6:	bd80      	pop	{r7, pc}
 8103cd8:	0810cf90 	.word	0x0810cf90
 8103cdc:	10004b90 	.word	0x10004b90
 8103ce0:	0810cf48 	.word	0x0810cf48
 8103ce4:	08103cf9 	.word	0x08103cf9
 8103ce8:	10004b7c 	.word	0x10004b7c
 8103cec:	0810cf6c 	.word	0x0810cf6c
 8103cf0:	081042c5 	.word	0x081042c5
 8103cf4:	10004b84 	.word	0x10004b84

08103cf8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8103cf8:	b580      	push	{r7, lr}
 8103cfa:	b082      	sub	sp, #8
 8103cfc:	af00      	add	r7, sp, #0
 8103cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8103d00:	2001      	movs	r0, #1
 8103d02:	f006 f9e7 	bl	810a0d4 <osDelay>
 8103d06:	e7fb      	b.n	8103d00 <StartDefaultTask+0x8>

08103d08 <showInfo>:
char uartRxBufStart, uartRxBufEnd;
#define UART_RX_BUF_SIZE 8
char lastInput;
short prgSize;
unsigned char uartRxBuf[UART_RX_BUF_SIZE];
void showInfo(void) {
 8103d08:	b580      	push	{r7, lr}
 8103d0a:	af00      	add	r7, sp, #0
    outputConstStr(ID_COMMON_STRINGS, 1, NULL); // code:
 8103d0c:	2200      	movs	r2, #0
 8103d0e:	2101      	movs	r1, #1
 8103d10:	2000      	movs	r0, #0
 8103d12:	f000 f9a9 	bl	8104068 <outputConstStr>
    outputInt(prgSize);
 8103d16:	4b12      	ldr	r3, [pc, #72]	; (8103d60 <showInfo+0x58>)
 8103d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8103d1c:	4618      	mov	r0, r3
 8103d1e:	f7ff fe11 	bl	8103944 <outputInt>
    outputCr();
 8103d22:	f7ff feb3 	bl	8103a8c <outputCr>
    outputConstStr(ID_COMMON_STRINGS, 2, NULL); // vars:
 8103d26:	2200      	movs	r2, #0
 8103d28:	2102      	movs	r1, #2
 8103d2a:	2000      	movs	r0, #0
 8103d2c:	f000 f99c 	bl	8104068 <outputConstStr>
    outputInt(varSize());
 8103d30:	f7fc fe78 	bl	8100a24 <varSize>
 8103d34:	4603      	mov	r3, r0
 8103d36:	4618      	mov	r0, r3
 8103d38:	f7ff fe04 	bl	8103944 <outputInt>
    outputCr();
 8103d3c:	f7ff fea6 	bl	8103a8c <outputCr>
    outputConstStr(ID_COMMON_STRINGS, 3, NULL); // next:
 8103d40:	2200      	movs	r2, #0
 8103d42:	2103      	movs	r1, #3
 8103d44:	2000      	movs	r0, #0
 8103d46:	f000 f98f 	bl	8104068 <outputConstStr>
    outputInt(nextLineNum);
 8103d4a:	4b06      	ldr	r3, [pc, #24]	; (8103d64 <showInfo+0x5c>)
 8103d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8103d50:	4618      	mov	r0, r3
 8103d52:	f7ff fdf7 	bl	8103944 <outputInt>
    outputCr();
 8103d56:	f7ff fe99 	bl	8103a8c <outputCr>
}
 8103d5a:	bf00      	nop
 8103d5c:	bd80      	pop	{r7, pc}
 8103d5e:	bf00      	nop
 8103d60:	10004ac4 	.word	0x10004ac4
 8103d64:	10000000 	.word	0x10000000

08103d68 <prgReset>:
void prgReset(void) {
 8103d68:	b580      	push	{r7, lr}
 8103d6a:	af00      	add	r7, sp, #0
    resetEditor();
 8103d6c:	f7fc fc3c 	bl	81005e8 <resetEditor>
    resetTokenExecutor();
 8103d70:	f7fc fe36 	bl	81009e0 <resetTokenExecutor>
}
 8103d74:	bf00      	nop
 8103d76:	bd80      	pop	{r7, pc}

08103d78 <executeRun>:
void executeRun() {
 8103d78:	b580      	push	{r7, lr}
 8103d7a:	af00      	add	r7, sp, #0
    if (editorSave()) {
 8103d7c:	f7fc fd6a 	bl	8100854 <editorSave>
 8103d80:	4603      	mov	r3, r0
 8103d82:	2b00      	cmp	r3, #0
 8103d84:	d004      	beq.n	8103d90 <executeRun+0x18>
        editorLoadParsed();
 8103d86:	f7fc fdb3 	bl	81008f0 <editorLoadParsed>
        initParsedRun();
 8103d8a:	f7fe f8cd 	bl	8101f28 <initParsedRun>
    } else {
        executeNonParsed(-1);
    }
}
 8103d8e:	e003      	b.n	8103d98 <executeRun+0x20>
        executeNonParsed(-1);
 8103d90:	f04f 30ff 	mov.w	r0, #4294967295
 8103d94:	f7fe f8a0 	bl	8101ed8 <executeNonParsed>
}
 8103d98:	bf00      	nop
 8103d9a:	bd80      	pop	{r7, pc}

08103d9c <metaOrError>:
void metaOrError() {
 8103d9c:	b580      	push	{r7, lr}
 8103d9e:	b082      	sub	sp, #8
 8103da0:	af00      	add	r7, sp, #0
    numeric h = tokenHash(toksBody);
 8103da2:	4b1a      	ldr	r3, [pc, #104]	; (8103e0c <metaOrError+0x70>)
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	4618      	mov	r0, r3
 8103da8:	f7ff fcd9 	bl	810375e <tokenHash>
 8103dac:	6078      	str	r0, [r7, #4]
//        listProgram(toksBody);
//    } else
//    	if (h == 0x312) { // STEP
//        executeSteps();
//    } else
    	if (h == 0x1AC) { // RUN
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 8103db4:	d102      	bne.n	8103dbc <metaOrError+0x20>
        executeRun();
 8103db6:	f7ff ffdf 	bl	8103d78 <executeRun>
        outputStr(lineSpace);
        outputChar(' ');
        outputInt((long)(getParseErrorPos() - lineSpace) + 1);
        outputCr();
    }
}
 8103dba:	e023      	b.n	8103e04 <metaOrError+0x68>
    } else if (h == 0x69A) { // RESET
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	f240 629a 	movw	r2, #1690	; 0x69a
 8103dc2:	4293      	cmp	r3, r2
 8103dc4:	d102      	bne.n	8103dcc <metaOrError+0x30>
        prgReset();
 8103dc6:	f7ff ffcf 	bl	8103d68 <prgReset>
}
 8103dca:	e01b      	b.n	8103e04 <metaOrError+0x68>
    } else if (h == 0x3B3) { // INFO
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	f240 32b3 	movw	r2, #947	; 0x3b3
 8103dd2:	4293      	cmp	r3, r2
 8103dd4:	d102      	bne.n	8103ddc <metaOrError+0x40>
        showInfo();
 8103dd6:	f7ff ff97 	bl	8103d08 <showInfo>
}
 8103dda:	e013      	b.n	8103e04 <metaOrError+0x68>
        getParseErrorMsg(lineSpace);
 8103ddc:	480c      	ldr	r0, [pc, #48]	; (8103e10 <metaOrError+0x74>)
 8103dde:	f7ff fce1 	bl	81037a4 <getParseErrorMsg>
        outputStr(lineSpace);
 8103de2:	480b      	ldr	r0, [pc, #44]	; (8103e10 <metaOrError+0x74>)
 8103de4:	f7ff fd79 	bl	81038da <outputStr>
        outputChar(' ');
 8103de8:	2020      	movs	r0, #32
 8103dea:	f7ff fd69 	bl	81038c0 <outputChar>
        outputInt((long)(getParseErrorPos() - lineSpace) + 1);
 8103dee:	f7ff fccd 	bl	810378c <getParseErrorPos>
 8103df2:	4603      	mov	r3, r0
 8103df4:	4a06      	ldr	r2, [pc, #24]	; (8103e10 <metaOrError+0x74>)
 8103df6:	1a9b      	subs	r3, r3, r2
 8103df8:	3301      	adds	r3, #1
 8103dfa:	4618      	mov	r0, r3
 8103dfc:	f7ff fda2 	bl	8103944 <outputInt>
        outputCr();
 8103e00:	f7ff fe44 	bl	8103a8c <outputCr>
}
 8103e04:	bf00      	nop
 8103e06:	3708      	adds	r7, #8
 8103e08:	46bd      	mov	sp, r7
 8103e0a:	bd80      	pop	{r7, pc}
 8103e0c:	10004b98 	.word	0x10004b98
 8103e10:	10004ac8 	.word	0x10004ac8

08103e14 <uartRead>:

int uartRead(void)
{
 8103e14:	b480      	push	{r7}
 8103e16:	b083      	sub	sp, #12
 8103e18:	af00      	add	r7, sp, #0
	unsigned char c;
	if(uartRxBufStart == uartRxBufEnd) { return -1; }
 8103e1a:	4b11      	ldr	r3, [pc, #68]	; (8103e60 <uartRead+0x4c>)
 8103e1c:	781a      	ldrb	r2, [r3, #0]
 8103e1e:	4b11      	ldr	r3, [pc, #68]	; (8103e64 <uartRead+0x50>)
 8103e20:	781b      	ldrb	r3, [r3, #0]
 8103e22:	429a      	cmp	r2, r3
 8103e24:	d102      	bne.n	8103e2c <uartRead+0x18>
 8103e26:	f04f 33ff 	mov.w	r3, #4294967295
 8103e2a:	e013      	b.n	8103e54 <uartRead+0x40>
	c = uartRxBuf[uartRxBufStart];
 8103e2c:	4b0c      	ldr	r3, [pc, #48]	; (8103e60 <uartRead+0x4c>)
 8103e2e:	781b      	ldrb	r3, [r3, #0]
 8103e30:	461a      	mov	r2, r3
 8103e32:	4b0d      	ldr	r3, [pc, #52]	; (8103e68 <uartRead+0x54>)
 8103e34:	5c9b      	ldrb	r3, [r3, r2]
 8103e36:	71fb      	strb	r3, [r7, #7]
	uartRxBufStart = (uartRxBufStart + 1) % UART_RX_BUF_SIZE;
 8103e38:	4b09      	ldr	r3, [pc, #36]	; (8103e60 <uartRead+0x4c>)
 8103e3a:	781b      	ldrb	r3, [r3, #0]
 8103e3c:	3301      	adds	r3, #1
 8103e3e:	425a      	negs	r2, r3
 8103e40:	f003 0307 	and.w	r3, r3, #7
 8103e44:	f002 0207 	and.w	r2, r2, #7
 8103e48:	bf58      	it	pl
 8103e4a:	4253      	negpl	r3, r2
 8103e4c:	b2da      	uxtb	r2, r3
 8103e4e:	4b04      	ldr	r3, [pc, #16]	; (8103e60 <uartRead+0x4c>)
 8103e50:	701a      	strb	r2, [r3, #0]
	return c;
 8103e52:	79fb      	ldrb	r3, [r7, #7]
}
 8103e54:	4618      	mov	r0, r3
 8103e56:	370c      	adds	r7, #12
 8103e58:	46bd      	mov	sp, r7
 8103e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e5e:	4770      	bx	lr
 8103e60:	10004b78 	.word	0x10004b78
 8103e64:	10004b80 	.word	0x10004b80
 8103e68:	10004b88 	.word	0x10004b88

08103e6c <sysGetc>:
char sysGetc(void)
{
 8103e6c:	b580      	push	{r7, lr}
 8103e6e:	b082      	sub	sp, #8
 8103e70:	af00      	add	r7, sp, #0
	short c = uartRead();
 8103e72:	f7ff ffcf 	bl	8103e14 <uartRead>
 8103e76:	4603      	mov	r3, r0
 8103e78:	80fb      	strh	r3, [r7, #6]
	return c>=0? (char) c:0;
 8103e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103e7e:	2b00      	cmp	r3, #0
 8103e80:	db02      	blt.n	8103e88 <sysGetc+0x1c>
 8103e82:	88fb      	ldrh	r3, [r7, #6]
 8103e84:	b2db      	uxtb	r3, r3
 8103e86:	e000      	b.n	8103e8a <sysGetc+0x1e>
 8103e88:	2300      	movs	r3, #0
}
 8103e8a:	4618      	mov	r0, r3
 8103e8c:	3708      	adds	r7, #8
 8103e8e:	46bd      	mov	sp, r7
 8103e90:	bd80      	pop	{r7, pc}

08103e92 <sysPutc>:

char mainState;
void sysPutc(char c) {
 8103e92:	b580      	push	{r7, lr}
 8103e94:	b082      	sub	sp, #8
 8103e96:	af00      	add	r7, sp, #0
 8103e98:	4603      	mov	r3, r0
 8103e9a:	71fb      	strb	r3, [r7, #7]
    if (c == '\n') {
 8103e9c:	79fb      	ldrb	r3, [r7, #7]
 8103e9e:	2b0a      	cmp	r3, #10
 8103ea0:	d103      	bne.n	8103eaa <sysPutc+0x18>
        uartSend('\r');
 8103ea2:	200d      	movs	r0, #13
 8103ea4:	f000 f820 	bl	8103ee8 <uartSend>
 8103ea8:	e008      	b.n	8103ebc <sysPutc+0x2a>
    } else if (c == '\b') {
 8103eaa:	79fb      	ldrb	r3, [r7, #7]
 8103eac:	2b08      	cmp	r3, #8
 8103eae:	d105      	bne.n	8103ebc <sysPutc+0x2a>
        uartSend('\b');
 8103eb0:	2008      	movs	r0, #8
 8103eb2:	f000 f819 	bl	8103ee8 <uartSend>
        uartSend(' ');
 8103eb6:	2020      	movs	r0, #32
 8103eb8:	f000 f816 	bl	8103ee8 <uartSend>
    }
    uartSend(c);
 8103ebc:	79fb      	ldrb	r3, [r7, #7]
 8103ebe:	4618      	mov	r0, r3
 8103ec0:	f000 f812 	bl	8103ee8 <uartSend>
}
 8103ec4:	bf00      	nop
 8103ec6:	3708      	adds	r7, #8
 8103ec8:	46bd      	mov	sp, r7
 8103eca:	bd80      	pop	{r7, pc}

08103ecc <sysEcho>:

void sysEcho(char c) {
 8103ecc:	b580      	push	{r7, lr}
 8103ece:	b082      	sub	sp, #8
 8103ed0:	af00      	add	r7, sp, #0
 8103ed2:	4603      	mov	r3, r0
 8103ed4:	71fb      	strb	r3, [r7, #7]
    sysPutc(c);
 8103ed6:	79fb      	ldrb	r3, [r7, #7]
 8103ed8:	4618      	mov	r0, r3
 8103eda:	f7ff ffda 	bl	8103e92 <sysPutc>
}
 8103ede:	bf00      	nop
 8103ee0:	3708      	adds	r7, #8
 8103ee2:	46bd      	mov	sp, r7
 8103ee4:	bd80      	pop	{r7, pc}
	...

08103ee8 <uartSend>:
void uartSend(int c) {
 8103ee8:	b580      	push	{r7, lr}
 8103eea:	b082      	sub	sp, #8
 8103eec:	af00      	add	r7, sp, #0
 8103eee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit (&huart2, c, sizeof (c), 10);
 8103ef0:	6879      	ldr	r1, [r7, #4]
 8103ef2:	230a      	movs	r3, #10
 8103ef4:	2204      	movs	r2, #4
 8103ef6:	4803      	ldr	r0, [pc, #12]	; (8103f04 <uartSend+0x1c>)
 8103ef8:	f003 fcc2 	bl	8107880 <HAL_UART_Transmit>

}
 8103efc:	bf00      	nop
 8103efe:	3708      	adds	r7, #8
 8103f00:	46bd      	mov	sp, r7
 8103f02:	bd80      	pop	{r7, pc}
 8103f04:	10004d4c 	.word	0x10004d4c

08103f08 <printTokens>:
    }
}
char extraCmdArgCnt[] = {2, 2, 2, 2};
char extraFuncArgCnt[] = {1, 1, 1, 1, 1};

void printTokens(token* t) {
 8103f08:	b480      	push	{r7}
 8103f0a:	b083      	sub	sp, #12
 8103f0c:	af00      	add	r7, sp, #0
 8103f0e:	6078      	str	r0, [r7, #4]
}
 8103f10:	bf00      	nop
 8103f12:	370c      	adds	r7, #12
 8103f14:	46bd      	mov	sp, r7
 8103f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f1a:	4770      	bx	lr

08103f1c <processLine>:
void processLine() {
 8103f1c:	b580      	push	{r7, lr}
 8103f1e:	af00      	add	r7, sp, #0
    if (lineSpace[0] == 0) {
 8103f20:	4b1a      	ldr	r3, [pc, #104]	; (8103f8c <processLine+0x70>)
 8103f22:	781b      	ldrb	r3, [r3, #0]
 8103f24:	2b00      	cmp	r3, #0
 8103f26:	d02e      	beq.n	8103f86 <processLine+0x6a>
        return;
    }
    parseLine(lineSpace, toksBody);
 8103f28:	4b19      	ldr	r3, [pc, #100]	; (8103f90 <processLine+0x74>)
 8103f2a:	681b      	ldr	r3, [r3, #0]
 8103f2c:	4619      	mov	r1, r3
 8103f2e:	4817      	ldr	r0, [pc, #92]	; (8103f8c <processLine+0x70>)
 8103f30:	f7ff fbda 	bl	81036e8 <parseLine>
    printTokens(toksBody);
 8103f34:	4b16      	ldr	r3, [pc, #88]	; (8103f90 <processLine+0x74>)
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	4618      	mov	r0, r3
 8103f3a:	f7ff ffe5 	bl	8103f08 <printTokens>
    if (getParseErrorPos() != NULL) {
 8103f3e:	f7ff fc25 	bl	810378c <getParseErrorPos>
 8103f42:	4603      	mov	r3, r0
 8103f44:	2b00      	cmp	r3, #0
 8103f46:	d002      	beq.n	8103f4e <processLine+0x32>
        metaOrError();
 8103f48:	f7ff ff28 	bl	8103d9c <metaOrError>
        return;
 8103f4c:	e01c      	b.n	8103f88 <processLine+0x6c>
    }
    if (toksBody->type != TT_NUMBER) {
 8103f4e:	4b10      	ldr	r3, [pc, #64]	; (8103f90 <processLine+0x74>)
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	781b      	ldrb	r3, [r3, #0]
 8103f54:	2b10      	cmp	r3, #16
 8103f56:	d005      	beq.n	8103f64 <processLine+0x48>
        executeTokens(toksBody);
 8103f58:	4b0d      	ldr	r3, [pc, #52]	; (8103f90 <processLine+0x74>)
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	4618      	mov	r0, r3
 8103f5e:	f7fd ff07 	bl	8101d70 <executeTokens>
 8103f62:	e011      	b.n	8103f88 <processLine+0x6c>
    } else {
        injectLine(skipSpaces(skipDigits(lineSpace)), toksBody->body.integer);
 8103f64:	4809      	ldr	r0, [pc, #36]	; (8103f8c <processLine+0x70>)
 8103f66:	f7ff fc96 	bl	8103896 <skipDigits>
 8103f6a:	4603      	mov	r3, r0
 8103f6c:	4618      	mov	r0, r3
 8103f6e:	f7ff fc7d 	bl	810386c <skipSpaces>
 8103f72:	4602      	mov	r2, r0
 8103f74:	4b06      	ldr	r3, [pc, #24]	; (8103f90 <processLine+0x74>)
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8103f7c:	4619      	mov	r1, r3
 8103f7e:	4610      	mov	r0, r2
 8103f80:	f7fc fbdc 	bl	810073c <injectLine>
 8103f84:	e000      	b.n	8103f88 <processLine+0x6c>
        return;
 8103f86:	bf00      	nop
    }
}
 8103f88:	bd80      	pop	{r7, pc}
 8103f8a:	bf00      	nop
 8103f8c:	10004ac8 	.word	0x10004ac8
 8103f90:	10004b98 	.word	0x10004b98

08103f94 <pinRead>:
short pinRead(char pin) {
 8103f94:	b480      	push	{r7}
 8103f96:	b083      	sub	sp, #12
 8103f98:	af00      	add	r7, sp, #0
 8103f9a:	4603      	mov	r3, r0
 8103f9c:	71fb      	strb	r3, [r7, #7]
    return 0;
 8103f9e:	2300      	movs	r3, #0
	//return pinInput(GPIOA_BASE, pin);
}
 8103fa0:	4618      	mov	r0, r3
 8103fa2:	370c      	adds	r7, #12
 8103fa4:	46bd      	mov	sp, r7
 8103fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103faa:	4770      	bx	lr

08103fac <pinOut>:

void pinOut(char pin, schar state) {
 8103fac:	b480      	push	{r7}
 8103fae:	b083      	sub	sp, #12
 8103fb0:	af00      	add	r7, sp, #0
 8103fb2:	4603      	mov	r3, r0
 8103fb4:	460a      	mov	r2, r1
 8103fb6:	71fb      	strb	r3, [r7, #7]
 8103fb8:	4613      	mov	r3, r2
 8103fba:	71bb      	strb	r3, [r7, #6]
//        pinMode(GPIOA_BASE, pin, PIN_MODE_IN, state == -1 ? PIN_CNF_I_FLT : PIN_CNF_I_PULL);
//        if (state < -1) {
//            pinOutput(GPIOA_BASE, pin, state == -2 ? 1 : 0);
//        }
//    }
}
 8103fbc:	bf00      	nop
 8103fbe:	370c      	adds	r7, #12
 8103fc0:	46bd      	mov	sp, r7
 8103fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc6:	4770      	bx	lr

08103fc8 <dispatch>:

void dispatch() {
 8103fc8:	b580      	push	{r7, lr}
 8103fca:	af00      	add	r7, sp, #0
    if (lastInput == 3) {
 8103fcc:	4b24      	ldr	r3, [pc, #144]	; (8104060 <dispatch+0x98>)
 8103fce:	781b      	ldrb	r3, [r3, #0]
 8103fd0:	2b03      	cmp	r3, #3
 8103fd2:	d106      	bne.n	8103fe2 <dispatch+0x1a>
        mainState |= STATE_BREAK;
 8103fd4:	4b23      	ldr	r3, [pc, #140]	; (8104064 <dispatch+0x9c>)
 8103fd6:	781b      	ldrb	r3, [r3, #0]
 8103fd8:	f043 0303 	orr.w	r3, r3, #3
 8103fdc:	b2da      	uxtb	r2, r3
 8103fde:	4b21      	ldr	r3, [pc, #132]	; (8104064 <dispatch+0x9c>)
 8103fe0:	701a      	strb	r2, [r3, #0]
    }
    if ((mainState & (STATE_RUN | STATE_SLOWED)) == STATE_RUN) {
 8103fe2:	4b20      	ldr	r3, [pc, #128]	; (8104064 <dispatch+0x9c>)
 8103fe4:	781b      	ldrb	r3, [r3, #0]
 8103fe6:	f003 0313 	and.w	r3, r3, #19
 8103fea:	2b10      	cmp	r3, #16
 8103fec:	d102      	bne.n	8103ff4 <dispatch+0x2c>
        executeParsedRun();
 8103fee:	f7fd ffcb 	bl	8101f88 <executeParsedRun>
        return;
 8103ff2:	e034      	b.n	810405e <dispatch+0x96>
    }
    switch (mainState & STATE_SLOWED) {
 8103ff4:	4b1b      	ldr	r3, [pc, #108]	; (8104064 <dispatch+0x9c>)
 8103ff6:	781b      	ldrb	r3, [r3, #0]
 8103ff8:	f003 0303 	and.w	r3, r3, #3
 8103ffc:	2b03      	cmp	r3, #3
 8103ffe:	d00f      	beq.n	8104020 <dispatch+0x58>
 8104000:	2b03      	cmp	r3, #3
 8104002:	dc13      	bgt.n	810402c <dispatch+0x64>
 8104004:	2b01      	cmp	r3, #1
 8104006:	d002      	beq.n	810400e <dispatch+0x46>
 8104008:	2b02      	cmp	r3, #2
 810400a:	d003      	beq.n	8104014 <dispatch+0x4c>
 810400c:	e00e      	b.n	810402c <dispatch+0x64>
        case STATE_DELAY:
            dispatchDelay();
 810400e:	f7fd fd2f 	bl	8101a70 <dispatchDelay>
            return;
 8104012:	e024      	b.n	810405e <dispatch+0x96>
        case STATE_INPUT:
            dispatchInput();
 8104014:	f7fd fd90 	bl	8101b38 <dispatchInput>
            lastInput = 0;
 8104018:	4b11      	ldr	r3, [pc, #68]	; (8104060 <dispatch+0x98>)
 810401a:	2200      	movs	r2, #0
 810401c:	701a      	strb	r2, [r3, #0]
            return;
 810401e:	e01e      	b.n	810405e <dispatch+0x96>
        case STATE_BREAK:
            dispatchBreak();
 8104020:	f7fd ff3e 	bl	8101ea0 <dispatchBreak>
            lastInput = 0;
 8104024:	4b0e      	ldr	r3, [pc, #56]	; (8104060 <dispatch+0x98>)
 8104026:	2200      	movs	r2, #0
 8104028:	701a      	strb	r2, [r3, #0]
            return;
 810402a:	e018      	b.n	810405e <dispatch+0x96>
    }
    if ((mainState & STATE_STEPS) != 0) {
 810402c:	4b0d      	ldr	r3, [pc, #52]	; (8104064 <dispatch+0x9c>)
 810402e:	781b      	ldrb	r3, [r3, #0]
 8104030:	f003 0320 	and.w	r3, r3, #32
 8104034:	2b00      	cmp	r3, #0
 8104036:	d003      	beq.n	8104040 <dispatch+0x78>
        executeNonParsed(0);
 8104038:	2000      	movs	r0, #0
 810403a:	f7fd ff4d 	bl	8101ed8 <executeNonParsed>
                processLine();
            }
            lastInput = 0;
        }
    }
    return;
 810403e:	e00d      	b.n	810405c <dispatch+0x94>
        if (lastInput > 0) {
 8104040:	4b07      	ldr	r3, [pc, #28]	; (8104060 <dispatch+0x98>)
 8104042:	781b      	ldrb	r3, [r3, #0]
 8104044:	2b00      	cmp	r3, #0
 8104046:	d009      	beq.n	810405c <dispatch+0x94>
            if (readLine()) {
 8104048:	f7fc fae8 	bl	810061c <readLine>
 810404c:	4603      	mov	r3, r0
 810404e:	2b00      	cmp	r3, #0
 8104050:	d001      	beq.n	8104056 <dispatch+0x8e>
                processLine();
 8104052:	f7ff ff63 	bl	8103f1c <processLine>
            lastInput = 0;
 8104056:	4b02      	ldr	r3, [pc, #8]	; (8104060 <dispatch+0x98>)
 8104058:	2200      	movs	r2, #0
 810405a:	701a      	strb	r2, [r3, #0]
    return;
 810405c:	bf00      	nop
}
 810405e:	bd80      	pop	{r7, pc}
 8104060:	10004b44 	.word	0x10004b44
 8104064:	10004b94 	.word	0x10004b94

08104068 <outputConstStr>:
        v = ((long) h2) << 16;
    }
    return (div <= 1) ? v : v / div;
}*/

void outputConstStr(char strId, char index, char* w) {
 8104068:	b580      	push	{r7, lr}
 810406a:	b084      	sub	sp, #16
 810406c:	af00      	add	r7, sp, #0
 810406e:	4603      	mov	r3, r0
 8104070:	603a      	str	r2, [r7, #0]
 8104072:	71fb      	strb	r3, [r7, #7]
 8104074:	460b      	mov	r3, r1
 8104076:	71bb      	strb	r3, [r7, #6]
    char* s;
    switch (strId) {
 8104078:	79fb      	ldrb	r3, [r7, #7]
 810407a:	2b00      	cmp	r3, #0
 810407c:	d002      	beq.n	8104084 <outputConstStr+0x1c>
 810407e:	2b01      	cmp	r3, #1
 8104080:	d003      	beq.n	810408a <outputConstStr+0x22>
            break;
        case ID_PARSING_ERRORS:
        	s= "\nCmd or Var exp-d\nSymbol '=' exp-d\nName expected\nSymbol ';' exp-d\nExtra chars at end\nUnexpected error\nNumber out of range\nNumber expected\nUnexpected symbol\nUnexp-d line end\n";
            break;
        default:
            return;
 8104082:	e031      	b.n	81040e8 <outputConstStr+0x80>
            s = "BDARS BASIC 0.1\ncode: \nvars: \nnext: \nBREAK\nEnd of code\nSaved\nLoaded\nbytes\nLoad failed\nAutorun in 1 sec\nCanceled!\nLow VARS mem\nLow PROG mem\n";
 8104084:	4b1a      	ldr	r3, [pc, #104]	; (81040f0 <outputConstStr+0x88>)
 8104086:	60fb      	str	r3, [r7, #12]
            break;
 8104088:	e002      	b.n	8104090 <outputConstStr+0x28>
        	s= "\nCmd or Var exp-d\nSymbol '=' exp-d\nName expected\nSymbol ';' exp-d\nExtra chars at end\nUnexpected error\nNumber out of range\nNumber expected\nUnexpected symbol\nUnexp-d line end\n";
 810408a:	4b1a      	ldr	r3, [pc, #104]	; (81040f4 <outputConstStr+0x8c>)
 810408c:	60fb      	str	r3, [r7, #12]
            break;
 810408e:	bf00      	nop
    }
    while (index > 0) {
 8104090:	e009      	b.n	81040a6 <outputConstStr+0x3e>
        while (*s++ != '\n') {
 8104092:	bf00      	nop
 8104094:	68fb      	ldr	r3, [r7, #12]
 8104096:	1c5a      	adds	r2, r3, #1
 8104098:	60fa      	str	r2, [r7, #12]
 810409a:	781b      	ldrb	r3, [r3, #0]
 810409c:	2b0a      	cmp	r3, #10
 810409e:	d1f9      	bne.n	8104094 <outputConstStr+0x2c>
        }
        index -= 1;
 81040a0:	79bb      	ldrb	r3, [r7, #6]
 81040a2:	3b01      	subs	r3, #1
 81040a4:	71bb      	strb	r3, [r7, #6]
    while (index > 0) {
 81040a6:	79bb      	ldrb	r3, [r7, #6]
 81040a8:	2b00      	cmp	r3, #0
 81040aa:	d1f2      	bne.n	8104092 <outputConstStr+0x2a>
    }
    while (*s != '\n') {
 81040ac:	e012      	b.n	81040d4 <outputConstStr+0x6c>
        if (w) {
 81040ae:	683b      	ldr	r3, [r7, #0]
 81040b0:	2b00      	cmp	r3, #0
 81040b2:	d008      	beq.n	81040c6 <outputConstStr+0x5e>
            *(w++) = (*s++);
 81040b4:	68fa      	ldr	r2, [r7, #12]
 81040b6:	1c53      	adds	r3, r2, #1
 81040b8:	60fb      	str	r3, [r7, #12]
 81040ba:	683b      	ldr	r3, [r7, #0]
 81040bc:	1c59      	adds	r1, r3, #1
 81040be:	6039      	str	r1, [r7, #0]
 81040c0:	7812      	ldrb	r2, [r2, #0]
 81040c2:	701a      	strb	r2, [r3, #0]
 81040c4:	e006      	b.n	81040d4 <outputConstStr+0x6c>
        } else {
            sysPutc(*s++);
 81040c6:	68fb      	ldr	r3, [r7, #12]
 81040c8:	1c5a      	adds	r2, r3, #1
 81040ca:	60fa      	str	r2, [r7, #12]
 81040cc:	781b      	ldrb	r3, [r3, #0]
 81040ce:	4618      	mov	r0, r3
 81040d0:	f7ff fedf 	bl	8103e92 <sysPutc>
    while (*s != '\n') {
 81040d4:	68fb      	ldr	r3, [r7, #12]
 81040d6:	781b      	ldrb	r3, [r3, #0]
 81040d8:	2b0a      	cmp	r3, #10
 81040da:	d1e8      	bne.n	81040ae <outputConstStr+0x46>
        }
    }
    if (w) {
 81040dc:	683b      	ldr	r3, [r7, #0]
 81040de:	2b00      	cmp	r3, #0
 81040e0:	d002      	beq.n	81040e8 <outputConstStr+0x80>
        *w = 0;
 81040e2:	683b      	ldr	r3, [r7, #0]
 81040e4:	2200      	movs	r2, #0
 81040e6:	701a      	strb	r2, [r3, #0]
    }
}
 81040e8:	3710      	adds	r7, #16
 81040ea:	46bd      	mov	sp, r7
 81040ec:	bd80      	pop	{r7, pc}
 81040ee:	bf00      	nop
 81040f0:	0810cde4 	.word	0x0810cde4
 81040f4:	0810ce70 	.word	0x0810ce70

081040f8 <extraCommandByHash>:

short extraCommandByHash(numeric h) {
 81040f8:	b480      	push	{r7}
 81040fa:	b083      	sub	sp, #12
 81040fc:	af00      	add	r7, sp, #0
 81040fe:	6078      	str	r0, [r7, #4]
    switch (h) {
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	f240 62ec 	movw	r2, #1772	; 0x6ec
 8104106:	4293      	cmp	r3, r2
 8104108:	d019      	beq.n	810413e <extraCommandByHash+0x46>
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	f240 62ec 	movw	r2, #1772	; 0x6ec
 8104110:	4293      	cmp	r3, r2
 8104112:	dc1a      	bgt.n	810414a <extraCommandByHash+0x52>
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	f240 62ea 	movw	r2, #1770	; 0x6ea
 810411a:	4293      	cmp	r3, r2
 810411c:	d011      	beq.n	8104142 <extraCommandByHash+0x4a>
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	f240 62ea 	movw	r2, #1770	; 0x6ea
 8104124:	4293      	cmp	r3, r2
 8104126:	dc10      	bgt.n	810414a <extraCommandByHash+0x52>
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 810412e:	d00a      	beq.n	8104146 <extraCommandByHash+0x4e>
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	f240 326f 	movw	r2, #879	; 0x36f
 8104136:	4293      	cmp	r3, r2
 8104138:	d107      	bne.n	810414a <extraCommandByHash+0x52>
        case 0x036F: // POKE
            return CMD_EXTRA + 0;
 810413a:	2340      	movs	r3, #64	; 0x40
 810413c:	e007      	b.n	810414e <extraCommandByHash+0x56>
        case 0x06EC: // POKE2
            return CMD_EXTRA + 1;
 810413e:	2341      	movs	r3, #65	; 0x41
 8104140:	e005      	b.n	810414e <extraCommandByHash+0x56>
        case 0x06EA: // POKE4
            return CMD_EXTRA + 2;
 8104142:	2342      	movs	r3, #66	; 0x42
 8104144:	e003      	b.n	810414e <extraCommandByHash+0x56>
        case 0x019C: // PIN
            return CMD_EXTRA + 3;
 8104146:	2343      	movs	r3, #67	; 0x43
 8104148:	e001      	b.n	810414e <extraCommandByHash+0x56>
        default:
            return -1;
 810414a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 810414e:	4618      	mov	r0, r3
 8104150:	370c      	adds	r7, #12
 8104152:	46bd      	mov	sp, r7
 8104154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104158:	4770      	bx	lr

0810415a <extraFunctionByHash>:

short extraFunctionByHash(numeric h) {
 810415a:	b480      	push	{r7}
 810415c:	b083      	sub	sp, #12
 810415e:	af00      	add	r7, sp, #0
 8104160:	6078      	str	r0, [r7, #4]
    switch (h) {
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	f240 629e 	movw	r2, #1694	; 0x69e
 8104168:	4293      	cmp	r3, r2
 810416a:	d028      	beq.n	81041be <extraFunctionByHash+0x64>
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	f240 629e 	movw	r2, #1694	; 0x69e
 8104172:	4293      	cmp	r3, r2
 8104174:	dc25      	bgt.n	81041c2 <extraFunctionByHash+0x68>
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	f5b3 6fd3 	cmp.w	r3, #1688	; 0x698
 810417c:	d01d      	beq.n	81041ba <extraFunctionByHash+0x60>
 810417e:	687b      	ldr	r3, [r7, #4]
 8104180:	f5b3 6fd3 	cmp.w	r3, #1688	; 0x698
 8104184:	dc1d      	bgt.n	81041c2 <extraFunctionByHash+0x68>
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	f240 3255 	movw	r2, #853	; 0x355
 810418c:	4293      	cmp	r3, r2
 810418e:	d012      	beq.n	81041b6 <extraFunctionByHash+0x5c>
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	f240 3255 	movw	r2, #853	; 0x355
 8104196:	4293      	cmp	r3, r2
 8104198:	dc13      	bgt.n	81041c2 <extraFunctionByHash+0x68>
 810419a:	687b      	ldr	r3, [r7, #4]
 810419c:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 81041a0:	d005      	beq.n	81041ae <extraFunctionByHash+0x54>
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	f240 12cf 	movw	r2, #463	; 0x1cf
 81041a8:	4293      	cmp	r3, r2
 81041aa:	d002      	beq.n	81041b2 <extraFunctionByHash+0x58>
 81041ac:	e009      	b.n	81041c2 <extraFunctionByHash+0x68>
        case 0x019C: // PIN
            return 3;
 81041ae:	2303      	movs	r3, #3
 81041b0:	e009      	b.n	81041c6 <extraFunctionByHash+0x6c>
        case 0x01CF: // ADC
            return 4;
 81041b2:	2304      	movs	r3, #4
 81041b4:	e007      	b.n	81041c6 <extraFunctionByHash+0x6c>
        case 0x0355: // PEEK
            return 0;
 81041b6:	2300      	movs	r3, #0
 81041b8:	e005      	b.n	81041c6 <extraFunctionByHash+0x6c>
        case 0x0698: // PEEK2
            return 1;
 81041ba:	2301      	movs	r3, #1
 81041bc:	e003      	b.n	81041c6 <extraFunctionByHash+0x6c>
        case 0x069E: // PEEK4
            return 2;
 81041be:	2302      	movs	r3, #2
 81041c0:	e001      	b.n	81041c6 <extraFunctionByHash+0x6c>
        default:
            return -1;
 81041c2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 81041c6:	4618      	mov	r0, r3
 81041c8:	370c      	adds	r7, #12
 81041ca:	46bd      	mov	sp, r7
 81041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041d0:	4770      	bx	lr
	...

081041d4 <extraCommand>:

void extraCommand(char cmd, numeric args[]) {
 81041d4:	b580      	push	{r7, lr}
 81041d6:	b082      	sub	sp, #8
 81041d8:	af00      	add	r7, sp, #0
 81041da:	4603      	mov	r3, r0
 81041dc:	6039      	str	r1, [r7, #0]
 81041de:	71fb      	strb	r3, [r7, #7]
    switch (cmd) {
 81041e0:	79fb      	ldrb	r3, [r7, #7]
 81041e2:	2b03      	cmp	r3, #3
 81041e4:	d82d      	bhi.n	8104242 <extraCommand+0x6e>
 81041e6:	a201      	add	r2, pc, #4	; (adr r2, 81041ec <extraCommand+0x18>)
 81041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041ec:	081041fd 	.word	0x081041fd
 81041f0:	0810420d 	.word	0x0810420d
 81041f4:	0810421d 	.word	0x0810421d
 81041f8:	0810422b 	.word	0x0810422b
        case 0:
            *((unsigned char*)(args[0])) = (unsigned char) args[1];
 81041fc:	683b      	ldr	r3, [r7, #0]
 81041fe:	3304      	adds	r3, #4
 8104200:	681a      	ldr	r2, [r3, #0]
 8104202:	683b      	ldr	r3, [r7, #0]
 8104204:	681b      	ldr	r3, [r3, #0]
 8104206:	b2d2      	uxtb	r2, r2
 8104208:	701a      	strb	r2, [r3, #0]
            break;
 810420a:	e01a      	b.n	8104242 <extraCommand+0x6e>
        case 1:
            *((unsigned short*)(args[0])) = (unsigned short) args[1];
 810420c:	683b      	ldr	r3, [r7, #0]
 810420e:	3304      	adds	r3, #4
 8104210:	681a      	ldr	r2, [r3, #0]
 8104212:	683b      	ldr	r3, [r7, #0]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	b292      	uxth	r2, r2
 8104218:	801a      	strh	r2, [r3, #0]
            break;
 810421a:	e012      	b.n	8104242 <extraCommand+0x6e>
        case 2:
            *((unsigned long*)(args[0])) = (unsigned long) args[1];
 810421c:	683b      	ldr	r3, [r7, #0]
 810421e:	3304      	adds	r3, #4
 8104220:	681a      	ldr	r2, [r3, #0]
 8104222:	683b      	ldr	r3, [r7, #0]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	601a      	str	r2, [r3, #0]
            break;
 8104228:	e00b      	b.n	8104242 <extraCommand+0x6e>
        case 3:
            pinOut(args[0], args[1]);
 810422a:	683b      	ldr	r3, [r7, #0]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	b2da      	uxtb	r2, r3
 8104230:	683b      	ldr	r3, [r7, #0]
 8104232:	3304      	adds	r3, #4
 8104234:	681b      	ldr	r3, [r3, #0]
 8104236:	b25b      	sxtb	r3, r3
 8104238:	4619      	mov	r1, r3
 810423a:	4610      	mov	r0, r2
 810423c:	f7ff feb6 	bl	8103fac <pinOut>
            break;
 8104240:	bf00      	nop
    }
}
 8104242:	bf00      	nop
 8104244:	3708      	adds	r7, #8
 8104246:	46bd      	mov	sp, r7
 8104248:	bd80      	pop	{r7, pc}
 810424a:	bf00      	nop

0810424c <extraFunction>:

numeric extraFunction(char cmd, numeric args[]) {
 810424c:	b580      	push	{r7, lr}
 810424e:	b082      	sub	sp, #8
 8104250:	af00      	add	r7, sp, #0
 8104252:	4603      	mov	r3, r0
 8104254:	6039      	str	r1, [r7, #0]
 8104256:	71fb      	strb	r3, [r7, #7]
    switch (cmd) {
 8104258:	79fb      	ldrb	r3, [r7, #7]
 810425a:	2b03      	cmp	r3, #3
 810425c:	d81e      	bhi.n	810429c <extraFunction+0x50>
 810425e:	a201      	add	r2, pc, #4	; (adr r2, 8104264 <extraFunction+0x18>)
 8104260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104264:	08104275 	.word	0x08104275
 8104268:	0810427d 	.word	0x0810427d
 810426c:	08104285 	.word	0x08104285
 8104270:	0810428d 	.word	0x0810428d
        case 0:
            return *((unsigned char*)(args[0]));
 8104274:	683b      	ldr	r3, [r7, #0]
 8104276:	681b      	ldr	r3, [r3, #0]
 8104278:	781b      	ldrb	r3, [r3, #0]
 810427a:	e010      	b.n	810429e <extraFunction+0x52>
        case 1:
            return *((unsigned short*)(args[0]));
 810427c:	683b      	ldr	r3, [r7, #0]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	881b      	ldrh	r3, [r3, #0]
 8104282:	e00c      	b.n	810429e <extraFunction+0x52>
        case 2:
            return *((unsigned long*)(args[0]));
 8104284:	683b      	ldr	r3, [r7, #0]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	e008      	b.n	810429e <extraFunction+0x52>
        case 3:
            return pinRead(args[0]);
 810428c:	683b      	ldr	r3, [r7, #0]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	b2db      	uxtb	r3, r3
 8104292:	4618      	mov	r0, r3
 8104294:	f7ff fe7e 	bl	8103f94 <pinRead>
 8104298:	4603      	mov	r3, r0
 810429a:	e000      	b.n	810429e <extraFunction+0x52>
//        case 4:
//            return adcRead(args[0]);
    }
    return 0;
 810429c:	2300      	movs	r3, #0
}
 810429e:	4618      	mov	r0, r3
 81042a0:	3708      	adds	r7, #8
 81042a2:	46bd      	mov	sp, r7
 81042a4:	bd80      	pop	{r7, pc}
 81042a6:	bf00      	nop

081042a8 <storageOperation>:
}

unsigned char storageChecksum(short size) {
}

char storageOperation(void* data, short size) {
 81042a8:	b480      	push	{r7}
 81042aa:	b083      	sub	sp, #12
 81042ac:	af00      	add	r7, sp, #0
 81042ae:	6078      	str	r0, [r7, #4]
 81042b0:	460b      	mov	r3, r1
 81042b2:	807b      	strh	r3, [r7, #2]
}
 81042b4:	bf00      	nop
 81042b6:	4618      	mov	r0, r3
 81042b8:	370c      	adds	r7, #12
 81042ba:	46bd      	mov	sp, r7
 81042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042c0:	4770      	bx	lr
	...

081042c4 <StartInterpreter>:

/* USER CODE END Header_StartInterpreter */
__weak void StartInterpreter(void *argument)
{
 81042c4:	b580      	push	{r7, lr}
 81042c6:	b082      	sub	sp, #8
 81042c8:	af00      	add	r7, sp, #0
 81042ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInterpreter */
	HAL_UART_Receive_IT(&huart2, uartRxBuf,UART_RX_BUF_SIZE);
 81042cc:	2208      	movs	r2, #8
 81042ce:	4906      	ldr	r1, [pc, #24]	; (81042e8 <StartInterpreter+0x24>)
 81042d0:	4806      	ldr	r0, [pc, #24]	; (81042ec <StartInterpreter+0x28>)
 81042d2:	f003 fb6b 	bl	81079ac <HAL_UART_Receive_IT>
	/* Infinite loop */


	for(;;)
  {
    lastInput = sysGetc();
 81042d6:	f7ff fdc9 	bl	8103e6c <sysGetc>
 81042da:	4603      	mov	r3, r0
 81042dc:	461a      	mov	r2, r3
 81042de:	4b04      	ldr	r3, [pc, #16]	; (81042f0 <StartInterpreter+0x2c>)
 81042e0:	701a      	strb	r2, [r3, #0]
    dispatch();
 81042e2:	f7ff fe71 	bl	8103fc8 <dispatch>
    lastInput = sysGetc();
 81042e6:	e7f6      	b.n	81042d6 <StartInterpreter+0x12>
 81042e8:	10004b88 	.word	0x10004b88
 81042ec:	10004d4c 	.word	0x10004d4c
 81042f0:	10004b44 	.word	0x10004b44

081042f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 81042f4:	b480      	push	{r7}
 81042f6:	b085      	sub	sp, #20
 81042f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81042fa:	4b19      	ldr	r3, [pc, #100]	; (8104360 <MX_GPIO_Init+0x6c>)
 81042fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104300:	4a17      	ldr	r2, [pc, #92]	; (8104360 <MX_GPIO_Init+0x6c>)
 8104302:	f043 0301 	orr.w	r3, r3, #1
 8104306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810430a:	4b15      	ldr	r3, [pc, #84]	; (8104360 <MX_GPIO_Init+0x6c>)
 810430c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104310:	f003 0301 	and.w	r3, r3, #1
 8104314:	60fb      	str	r3, [r7, #12]
 8104316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8104318:	4b11      	ldr	r3, [pc, #68]	; (8104360 <MX_GPIO_Init+0x6c>)
 810431a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810431e:	4a10      	ldr	r2, [pc, #64]	; (8104360 <MX_GPIO_Init+0x6c>)
 8104320:	f043 0302 	orr.w	r3, r3, #2
 8104324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8104328:	4b0d      	ldr	r3, [pc, #52]	; (8104360 <MX_GPIO_Init+0x6c>)
 810432a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810432e:	f003 0302 	and.w	r3, r3, #2
 8104332:	60bb      	str	r3, [r7, #8]
 8104334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8104336:	4b0a      	ldr	r3, [pc, #40]	; (8104360 <MX_GPIO_Init+0x6c>)
 8104338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810433c:	4a08      	ldr	r2, [pc, #32]	; (8104360 <MX_GPIO_Init+0x6c>)
 810433e:	f043 0304 	orr.w	r3, r3, #4
 8104342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8104346:	4b06      	ldr	r3, [pc, #24]	; (8104360 <MX_GPIO_Init+0x6c>)
 8104348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810434c:	f003 0304 	and.w	r3, r3, #4
 8104350:	607b      	str	r3, [r7, #4]
 8104352:	687b      	ldr	r3, [r7, #4]

}
 8104354:	bf00      	nop
 8104356:	3714      	adds	r7, #20
 8104358:	46bd      	mov	sp, r7
 810435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810435e:	4770      	bx	lr
 8104360:	58024400 	.word	0x58024400

08104364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8104364:	b580      	push	{r7, lr}
 8104366:	b082      	sub	sp, #8
 8104368:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810436a:	4b22      	ldr	r3, [pc, #136]	; (81043f4 <main+0x90>)
 810436c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104370:	4a20      	ldr	r2, [pc, #128]	; (81043f4 <main+0x90>)
 8104372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810437a:	4b1e      	ldr	r3, [pc, #120]	; (81043f4 <main+0x90>)
 810437c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104384:	607b      	str	r3, [r7, #4]
 8104386:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8104388:	2001      	movs	r0, #1
 810438a:	f001 fc55 	bl	8105c38 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810438e:	f001 fcdf 	bl	8105d50 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8104392:	2201      	movs	r2, #1
 8104394:	2102      	movs	r1, #2
 8104396:	2000      	movs	r0, #0
 8104398:	f001 fc60 	bl	8105c5c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810439c:	4b16      	ldr	r3, [pc, #88]	; (81043f8 <main+0x94>)
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	091b      	lsrs	r3, r3, #4
 81043a2:	f003 030f 	and.w	r3, r3, #15
 81043a6:	2b07      	cmp	r3, #7
 81043a8:	d108      	bne.n	81043bc <main+0x58>
 81043aa:	4b14      	ldr	r3, [pc, #80]	; (81043fc <main+0x98>)
 81043ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81043b0:	4a12      	ldr	r2, [pc, #72]	; (81043fc <main+0x98>)
 81043b2:	f043 0301 	orr.w	r3, r3, #1
 81043b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81043ba:	e007      	b.n	81043cc <main+0x68>
 81043bc:	4b0f      	ldr	r3, [pc, #60]	; (81043fc <main+0x98>)
 81043be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81043c2:	4a0e      	ldr	r2, [pc, #56]	; (81043fc <main+0x98>)
 81043c4:	f043 0301 	orr.w	r3, r3, #1
 81043c8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81043cc:	f000 fb4a 	bl	8104a64 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81043d0:	f7ff ff90 	bl	81042f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 81043d4:	f000 f884 	bl	81044e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 81043d8:	f000 f8ce 	bl	8104578 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 81043dc:	f000 f918 	bl	8104610 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 81043e0:	f000 f962 	bl	81046a8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81043e4:	f005 fd9a 	bl	8109f1c <osKernelInitialize>
  MX_FREERTOS_Init();
 81043e8:	f7ff fc5a 	bl	8103ca0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81043ec:	f005 fdba 	bl	8109f64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81043f0:	e7fe      	b.n	81043f0 <main+0x8c>
 81043f2:	bf00      	nop
 81043f4:	58024400 	.word	0x58024400
 81043f8:	e000ed00 	.word	0xe000ed00
 81043fc:	58026400 	.word	0x58026400

08104400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8104400:	b480      	push	{r7}
 8104402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8104404:	b672      	cpsid	i
}
 8104406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8104408:	e7fe      	b.n	8104408 <Error_Handler+0x8>
	...

0810440c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810440c:	b580      	push	{r7, lr}
 810440e:	b082      	sub	sp, #8
 8104410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104412:	4b0c      	ldr	r3, [pc, #48]	; (8104444 <HAL_MspInit+0x38>)
 8104414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104418:	4a0a      	ldr	r2, [pc, #40]	; (8104444 <HAL_MspInit+0x38>)
 810441a:	f043 0302 	orr.w	r3, r3, #2
 810441e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104422:	4b08      	ldr	r3, [pc, #32]	; (8104444 <HAL_MspInit+0x38>)
 8104424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104428:	f003 0302 	and.w	r3, r3, #2
 810442c:	607b      	str	r3, [r7, #4]
 810442e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8104430:	2200      	movs	r2, #0
 8104432:	210f      	movs	r1, #15
 8104434:	f06f 0001 	mvn.w	r0, #1
 8104438:	f000 fca3 	bl	8104d82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810443c:	bf00      	nop
 810443e:	3708      	adds	r7, #8
 8104440:	46bd      	mov	sp, r7
 8104442:	bd80      	pop	{r7, pc}
 8104444:	58024400 	.word	0x58024400

08104448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8104448:	b480      	push	{r7}
 810444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810444c:	e7fe      	b.n	810444c <NMI_Handler+0x4>

0810444e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810444e:	b480      	push	{r7}
 8104450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8104452:	e7fe      	b.n	8104452 <HardFault_Handler+0x4>

08104454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8104454:	b480      	push	{r7}
 8104456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8104458:	e7fe      	b.n	8104458 <MemManage_Handler+0x4>

0810445a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810445a:	b480      	push	{r7}
 810445c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810445e:	e7fe      	b.n	810445e <BusFault_Handler+0x4>

08104460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8104460:	b480      	push	{r7}
 8104462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8104464:	e7fe      	b.n	8104464 <UsageFault_Handler+0x4>

08104466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8104466:	b480      	push	{r7}
 8104468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810446a:	bf00      	nop
 810446c:	46bd      	mov	sp, r7
 810446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104472:	4770      	bx	lr

08104474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8104474:	b580      	push	{r7, lr}
 8104476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8104478:	f000 fb88 	bl	8104b8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 810447c:	f007 ff4a 	bl	810c314 <xTaskGetSchedulerState>
 8104480:	4603      	mov	r3, r0
 8104482:	2b01      	cmp	r3, #1
 8104484:	d001      	beq.n	810448a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8104486:	f006 fb47 	bl	810ab18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810448a:	bf00      	nop
 810448c:	bd80      	pop	{r7, pc}
	...

08104490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8104490:	b580      	push	{r7, lr}
 8104492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8104494:	4802      	ldr	r0, [pc, #8]	; (81044a0 <USART1_IRQHandler+0x10>)
 8104496:	f003 fadf 	bl	8107a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 810449a:	bf00      	nop
 810449c:	bd80      	pop	{r7, pc}
 810449e:	bf00      	nop
 81044a0:	10004c2c 	.word	0x10004c2c

081044a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 81044a4:	b580      	push	{r7, lr}
 81044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 81044a8:	4802      	ldr	r0, [pc, #8]	; (81044b4 <USART2_IRQHandler+0x10>)
 81044aa:	f003 fad5 	bl	8107a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 81044ae:	bf00      	nop
 81044b0:	bd80      	pop	{r7, pc}
 81044b2:	bf00      	nop
 81044b4:	10004d4c 	.word	0x10004d4c

081044b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 81044b8:	b580      	push	{r7, lr}
 81044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 81044bc:	4802      	ldr	r0, [pc, #8]	; (81044c8 <USART3_IRQHandler+0x10>)
 81044be:	f003 facb 	bl	8107a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 81044c2:	bf00      	nop
 81044c4:	bd80      	pop	{r7, pc}
 81044c6:	bf00      	nop
 81044c8:	10004b9c 	.word	0x10004b9c

081044cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 81044cc:	b580      	push	{r7, lr}
 81044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 81044d0:	4802      	ldr	r0, [pc, #8]	; (81044dc <USART6_IRQHandler+0x10>)
 81044d2:	f003 fac1 	bl	8107a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 81044d6:	bf00      	nop
 81044d8:	bd80      	pop	{r7, pc}
 81044da:	bf00      	nop
 81044dc:	10004cbc 	.word	0x10004cbc

081044e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 81044e0:	b580      	push	{r7, lr}
 81044e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 81044e4:	4b22      	ldr	r3, [pc, #136]	; (8104570 <MX_USART1_UART_Init+0x90>)
 81044e6:	4a23      	ldr	r2, [pc, #140]	; (8104574 <MX_USART1_UART_Init+0x94>)
 81044e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 81044ea:	4b21      	ldr	r3, [pc, #132]	; (8104570 <MX_USART1_UART_Init+0x90>)
 81044ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81044f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 81044f2:	4b1f      	ldr	r3, [pc, #124]	; (8104570 <MX_USART1_UART_Init+0x90>)
 81044f4:	2200      	movs	r2, #0
 81044f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 81044f8:	4b1d      	ldr	r3, [pc, #116]	; (8104570 <MX_USART1_UART_Init+0x90>)
 81044fa:	2200      	movs	r2, #0
 81044fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 81044fe:	4b1c      	ldr	r3, [pc, #112]	; (8104570 <MX_USART1_UART_Init+0x90>)
 8104500:	2200      	movs	r2, #0
 8104502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8104504:	4b1a      	ldr	r3, [pc, #104]	; (8104570 <MX_USART1_UART_Init+0x90>)
 8104506:	220c      	movs	r2, #12
 8104508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810450a:	4b19      	ldr	r3, [pc, #100]	; (8104570 <MX_USART1_UART_Init+0x90>)
 810450c:	2200      	movs	r2, #0
 810450e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8104510:	4b17      	ldr	r3, [pc, #92]	; (8104570 <MX_USART1_UART_Init+0x90>)
 8104512:	2200      	movs	r2, #0
 8104514:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8104516:	4b16      	ldr	r3, [pc, #88]	; (8104570 <MX_USART1_UART_Init+0x90>)
 8104518:	2200      	movs	r2, #0
 810451a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810451c:	4b14      	ldr	r3, [pc, #80]	; (8104570 <MX_USART1_UART_Init+0x90>)
 810451e:	2200      	movs	r2, #0
 8104520:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8104522:	4b13      	ldr	r3, [pc, #76]	; (8104570 <MX_USART1_UART_Init+0x90>)
 8104524:	2200      	movs	r2, #0
 8104526:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8104528:	4811      	ldr	r0, [pc, #68]	; (8104570 <MX_USART1_UART_Init+0x90>)
 810452a:	f003 f959 	bl	81077e0 <HAL_UART_Init>
 810452e:	4603      	mov	r3, r0
 8104530:	2b00      	cmp	r3, #0
 8104532:	d001      	beq.n	8104538 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8104534:	f7ff ff64 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104538:	2100      	movs	r1, #0
 810453a:	480d      	ldr	r0, [pc, #52]	; (8104570 <MX_USART1_UART_Init+0x90>)
 810453c:	f005 fbef 	bl	8109d1e <HAL_UARTEx_SetTxFifoThreshold>
 8104540:	4603      	mov	r3, r0
 8104542:	2b00      	cmp	r3, #0
 8104544:	d001      	beq.n	810454a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8104546:	f7ff ff5b 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810454a:	2100      	movs	r1, #0
 810454c:	4808      	ldr	r0, [pc, #32]	; (8104570 <MX_USART1_UART_Init+0x90>)
 810454e:	f005 fc24 	bl	8109d9a <HAL_UARTEx_SetRxFifoThreshold>
 8104552:	4603      	mov	r3, r0
 8104554:	2b00      	cmp	r3, #0
 8104556:	d001      	beq.n	810455c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8104558:	f7ff ff52 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 810455c:	4804      	ldr	r0, [pc, #16]	; (8104570 <MX_USART1_UART_Init+0x90>)
 810455e:	f005 fba5 	bl	8109cac <HAL_UARTEx_DisableFifoMode>
 8104562:	4603      	mov	r3, r0
 8104564:	2b00      	cmp	r3, #0
 8104566:	d001      	beq.n	810456c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8104568:	f7ff ff4a 	bl	8104400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 810456c:	bf00      	nop
 810456e:	bd80      	pop	{r7, pc}
 8104570:	10004c2c 	.word	0x10004c2c
 8104574:	40011000 	.word	0x40011000

08104578 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8104578:	b580      	push	{r7, lr}
 810457a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 810457c:	4b22      	ldr	r3, [pc, #136]	; (8104608 <MX_USART2_UART_Init+0x90>)
 810457e:	4a23      	ldr	r2, [pc, #140]	; (810460c <MX_USART2_UART_Init+0x94>)
 8104580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8104582:	4b21      	ldr	r3, [pc, #132]	; (8104608 <MX_USART2_UART_Init+0x90>)
 8104584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8104588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 810458a:	4b1f      	ldr	r3, [pc, #124]	; (8104608 <MX_USART2_UART_Init+0x90>)
 810458c:	2200      	movs	r2, #0
 810458e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8104590:	4b1d      	ldr	r3, [pc, #116]	; (8104608 <MX_USART2_UART_Init+0x90>)
 8104592:	2200      	movs	r2, #0
 8104594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8104596:	4b1c      	ldr	r3, [pc, #112]	; (8104608 <MX_USART2_UART_Init+0x90>)
 8104598:	2200      	movs	r2, #0
 810459a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 810459c:	4b1a      	ldr	r3, [pc, #104]	; (8104608 <MX_USART2_UART_Init+0x90>)
 810459e:	220c      	movs	r2, #12
 81045a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81045a2:	4b19      	ldr	r3, [pc, #100]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045a4:	2200      	movs	r2, #0
 81045a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 81045a8:	4b17      	ldr	r3, [pc, #92]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045aa:	2200      	movs	r2, #0
 81045ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81045ae:	4b16      	ldr	r3, [pc, #88]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045b0:	2200      	movs	r2, #0
 81045b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81045b4:	4b14      	ldr	r3, [pc, #80]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045b6:	2200      	movs	r2, #0
 81045b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81045ba:	4b13      	ldr	r3, [pc, #76]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045bc:	2200      	movs	r2, #0
 81045be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 81045c0:	4811      	ldr	r0, [pc, #68]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045c2:	f003 f90d 	bl	81077e0 <HAL_UART_Init>
 81045c6:	4603      	mov	r3, r0
 81045c8:	2b00      	cmp	r3, #0
 81045ca:	d001      	beq.n	81045d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 81045cc:	f7ff ff18 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81045d0:	2100      	movs	r1, #0
 81045d2:	480d      	ldr	r0, [pc, #52]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045d4:	f005 fba3 	bl	8109d1e <HAL_UARTEx_SetTxFifoThreshold>
 81045d8:	4603      	mov	r3, r0
 81045da:	2b00      	cmp	r3, #0
 81045dc:	d001      	beq.n	81045e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 81045de:	f7ff ff0f 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81045e2:	2100      	movs	r1, #0
 81045e4:	4808      	ldr	r0, [pc, #32]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045e6:	f005 fbd8 	bl	8109d9a <HAL_UARTEx_SetRxFifoThreshold>
 81045ea:	4603      	mov	r3, r0
 81045ec:	2b00      	cmp	r3, #0
 81045ee:	d001      	beq.n	81045f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 81045f0:	f7ff ff06 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 81045f4:	4804      	ldr	r0, [pc, #16]	; (8104608 <MX_USART2_UART_Init+0x90>)
 81045f6:	f005 fb59 	bl	8109cac <HAL_UARTEx_DisableFifoMode>
 81045fa:	4603      	mov	r3, r0
 81045fc:	2b00      	cmp	r3, #0
 81045fe:	d001      	beq.n	8104604 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8104600:	f7ff fefe 	bl	8104400 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8104604:	bf00      	nop
 8104606:	bd80      	pop	{r7, pc}
 8104608:	10004d4c 	.word	0x10004d4c
 810460c:	40004400 	.word	0x40004400

08104610 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8104610:	b580      	push	{r7, lr}
 8104612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8104614:	4b22      	ldr	r3, [pc, #136]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 8104616:	4a23      	ldr	r2, [pc, #140]	; (81046a4 <MX_USART3_UART_Init+0x94>)
 8104618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810461a:	4b21      	ldr	r3, [pc, #132]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 810461c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8104620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8104622:	4b1f      	ldr	r3, [pc, #124]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 8104624:	2200      	movs	r2, #0
 8104626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8104628:	4b1d      	ldr	r3, [pc, #116]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 810462a:	2200      	movs	r2, #0
 810462c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810462e:	4b1c      	ldr	r3, [pc, #112]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 8104630:	2200      	movs	r2, #0
 8104632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8104634:	4b1a      	ldr	r3, [pc, #104]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 8104636:	220c      	movs	r2, #12
 8104638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810463a:	4b19      	ldr	r3, [pc, #100]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 810463c:	2200      	movs	r2, #0
 810463e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8104640:	4b17      	ldr	r3, [pc, #92]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 8104642:	2200      	movs	r2, #0
 8104644:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8104646:	4b16      	ldr	r3, [pc, #88]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 8104648:	2200      	movs	r2, #0
 810464a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810464c:	4b14      	ldr	r3, [pc, #80]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 810464e:	2200      	movs	r2, #0
 8104650:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8104652:	4b13      	ldr	r3, [pc, #76]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 8104654:	2200      	movs	r2, #0
 8104656:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8104658:	4811      	ldr	r0, [pc, #68]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 810465a:	f003 f8c1 	bl	81077e0 <HAL_UART_Init>
 810465e:	4603      	mov	r3, r0
 8104660:	2b00      	cmp	r3, #0
 8104662:	d001      	beq.n	8104668 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8104664:	f7ff fecc 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104668:	2100      	movs	r1, #0
 810466a:	480d      	ldr	r0, [pc, #52]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 810466c:	f005 fb57 	bl	8109d1e <HAL_UARTEx_SetTxFifoThreshold>
 8104670:	4603      	mov	r3, r0
 8104672:	2b00      	cmp	r3, #0
 8104674:	d001      	beq.n	810467a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8104676:	f7ff fec3 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810467a:	2100      	movs	r1, #0
 810467c:	4808      	ldr	r0, [pc, #32]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 810467e:	f005 fb8c 	bl	8109d9a <HAL_UARTEx_SetRxFifoThreshold>
 8104682:	4603      	mov	r3, r0
 8104684:	2b00      	cmp	r3, #0
 8104686:	d001      	beq.n	810468c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8104688:	f7ff feba 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810468c:	4804      	ldr	r0, [pc, #16]	; (81046a0 <MX_USART3_UART_Init+0x90>)
 810468e:	f005 fb0d 	bl	8109cac <HAL_UARTEx_DisableFifoMode>
 8104692:	4603      	mov	r3, r0
 8104694:	2b00      	cmp	r3, #0
 8104696:	d001      	beq.n	810469c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8104698:	f7ff feb2 	bl	8104400 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810469c:	bf00      	nop
 810469e:	bd80      	pop	{r7, pc}
 81046a0:	10004b9c 	.word	0x10004b9c
 81046a4:	40004800 	.word	0x40004800

081046a8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 81046a8:	b580      	push	{r7, lr}
 81046aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 81046ac:	4b22      	ldr	r3, [pc, #136]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046ae:	4a23      	ldr	r2, [pc, #140]	; (810473c <MX_USART6_UART_Init+0x94>)
 81046b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 81046b2:	4b21      	ldr	r3, [pc, #132]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81046b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 81046ba:	4b1f      	ldr	r3, [pc, #124]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046bc:	2200      	movs	r2, #0
 81046be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 81046c0:	4b1d      	ldr	r3, [pc, #116]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046c2:	2200      	movs	r2, #0
 81046c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 81046c6:	4b1c      	ldr	r3, [pc, #112]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046c8:	2200      	movs	r2, #0
 81046ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 81046cc:	4b1a      	ldr	r3, [pc, #104]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046ce:	220c      	movs	r2, #12
 81046d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81046d2:	4b19      	ldr	r3, [pc, #100]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046d4:	2200      	movs	r2, #0
 81046d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 81046d8:	4b17      	ldr	r3, [pc, #92]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046da:	2200      	movs	r2, #0
 81046dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81046de:	4b16      	ldr	r3, [pc, #88]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046e0:	2200      	movs	r2, #0
 81046e2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81046e4:	4b14      	ldr	r3, [pc, #80]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046e6:	2200      	movs	r2, #0
 81046e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81046ea:	4b13      	ldr	r3, [pc, #76]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046ec:	2200      	movs	r2, #0
 81046ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 81046f0:	4811      	ldr	r0, [pc, #68]	; (8104738 <MX_USART6_UART_Init+0x90>)
 81046f2:	f003 f875 	bl	81077e0 <HAL_UART_Init>
 81046f6:	4603      	mov	r3, r0
 81046f8:	2b00      	cmp	r3, #0
 81046fa:	d001      	beq.n	8104700 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 81046fc:	f7ff fe80 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104700:	2100      	movs	r1, #0
 8104702:	480d      	ldr	r0, [pc, #52]	; (8104738 <MX_USART6_UART_Init+0x90>)
 8104704:	f005 fb0b 	bl	8109d1e <HAL_UARTEx_SetTxFifoThreshold>
 8104708:	4603      	mov	r3, r0
 810470a:	2b00      	cmp	r3, #0
 810470c:	d001      	beq.n	8104712 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 810470e:	f7ff fe77 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8104712:	2100      	movs	r1, #0
 8104714:	4808      	ldr	r0, [pc, #32]	; (8104738 <MX_USART6_UART_Init+0x90>)
 8104716:	f005 fb40 	bl	8109d9a <HAL_UARTEx_SetRxFifoThreshold>
 810471a:	4603      	mov	r3, r0
 810471c:	2b00      	cmp	r3, #0
 810471e:	d001      	beq.n	8104724 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8104720:	f7ff fe6e 	bl	8104400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8104724:	4804      	ldr	r0, [pc, #16]	; (8104738 <MX_USART6_UART_Init+0x90>)
 8104726:	f005 fac1 	bl	8109cac <HAL_UARTEx_DisableFifoMode>
 810472a:	4603      	mov	r3, r0
 810472c:	2b00      	cmp	r3, #0
 810472e:	d001      	beq.n	8104734 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8104730:	f7ff fe66 	bl	8104400 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8104734:	bf00      	nop
 8104736:	bd80      	pop	{r7, pc}
 8104738:	10004cbc 	.word	0x10004cbc
 810473c:	40011400 	.word	0x40011400

08104740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8104740:	b580      	push	{r7, lr}
 8104742:	b0be      	sub	sp, #248	; 0xf8
 8104744:	af00      	add	r7, sp, #0
 8104746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104748:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810474c:	2200      	movs	r2, #0
 810474e:	601a      	str	r2, [r3, #0]
 8104750:	605a      	str	r2, [r3, #4]
 8104752:	609a      	str	r2, [r3, #8]
 8104754:	60da      	str	r2, [r3, #12]
 8104756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8104758:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810475c:	22bc      	movs	r2, #188	; 0xbc
 810475e:	2100      	movs	r1, #0
 8104760:	4618      	mov	r0, r3
 8104762:	f008 fa53 	bl	810cc0c <memset>
  if(uartHandle->Instance==USART1)
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	681b      	ldr	r3, [r3, #0]
 810476a:	4aa1      	ldr	r2, [pc, #644]	; (81049f0 <HAL_UART_MspInit+0x2b0>)
 810476c:	4293      	cmp	r3, r2
 810476e:	d14b      	bne.n	8104808 <HAL_UART_MspInit+0xc8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8104770:	2301      	movs	r3, #1
 8104772:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8104774:	2300      	movs	r3, #0
 8104776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810477a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810477e:	4618      	mov	r0, r3
 8104780:	f001 fccc 	bl	810611c <HAL_RCCEx_PeriphCLKConfig>
 8104784:	4603      	mov	r3, r0
 8104786:	2b00      	cmp	r3, #0
 8104788:	d001      	beq.n	810478e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 810478a:	f7ff fe39 	bl	8104400 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 810478e:	4b99      	ldr	r3, [pc, #612]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104794:	4a97      	ldr	r2, [pc, #604]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104796:	f043 0310 	orr.w	r3, r3, #16
 810479a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810479e:	4b95      	ldr	r3, [pc, #596]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81047a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81047a4:	f003 0310 	and.w	r3, r3, #16
 81047a8:	627b      	str	r3, [r7, #36]	; 0x24
 81047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81047ac:	4b91      	ldr	r3, [pc, #580]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81047ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81047b2:	4a90      	ldr	r2, [pc, #576]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81047b4:	f043 0302 	orr.w	r3, r3, #2
 81047b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81047bc:	4b8d      	ldr	r3, [pc, #564]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81047be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81047c2:	f003 0302 	and.w	r3, r3, #2
 81047c6:	623b      	str	r3, [r7, #32]
 81047c8:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 81047ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 81047ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81047d2:	2302      	movs	r3, #2
 81047d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81047d8:	2300      	movs	r3, #0
 81047da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81047de:	2300      	movs	r3, #0
 81047e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 81047e4:	2304      	movs	r3, #4
 81047e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81047ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81047ee:	4619      	mov	r1, r3
 81047f0:	4881      	ldr	r0, [pc, #516]	; (81049f8 <HAL_UART_MspInit+0x2b8>)
 81047f2:	f001 f871 	bl	81058d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 81047f6:	2200      	movs	r2, #0
 81047f8:	2105      	movs	r1, #5
 81047fa:	2025      	movs	r0, #37	; 0x25
 81047fc:	f000 fac1 	bl	8104d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8104800:	2025      	movs	r0, #37	; 0x25
 8104802:	f000 fad8 	bl	8104db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8104806:	e0ef      	b.n	81049e8 <HAL_UART_MspInit+0x2a8>
  else if(uartHandle->Instance==USART2)
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	4a7b      	ldr	r2, [pc, #492]	; (81049fc <HAL_UART_MspInit+0x2bc>)
 810480e:	4293      	cmp	r3, r2
 8104810:	d14a      	bne.n	81048a8 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8104812:	2302      	movs	r3, #2
 8104814:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8104816:	2300      	movs	r3, #0
 8104818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810481c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8104820:	4618      	mov	r0, r3
 8104822:	f001 fc7b 	bl	810611c <HAL_RCCEx_PeriphCLKConfig>
 8104826:	4603      	mov	r3, r0
 8104828:	2b00      	cmp	r3, #0
 810482a:	d001      	beq.n	8104830 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 810482c:	f7ff fde8 	bl	8104400 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8104830:	4b70      	ldr	r3, [pc, #448]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8104836:	4a6f      	ldr	r2, [pc, #444]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810483c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8104840:	4b6c      	ldr	r3, [pc, #432]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8104846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810484a:	61fb      	str	r3, [r7, #28]
 810484c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810484e:	4b69      	ldr	r3, [pc, #420]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104854:	4a67      	ldr	r2, [pc, #412]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104856:	f043 0301 	orr.w	r3, r3, #1
 810485a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810485e:	4b65      	ldr	r3, [pc, #404]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104864:	f003 0301 	and.w	r3, r3, #1
 8104868:	61bb      	str	r3, [r7, #24]
 810486a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 810486c:	230c      	movs	r3, #12
 810486e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104872:	2302      	movs	r3, #2
 8104874:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104878:	2300      	movs	r3, #0
 810487a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810487e:	2300      	movs	r3, #0
 8104880:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8104884:	2307      	movs	r3, #7
 8104886:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810488a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810488e:	4619      	mov	r1, r3
 8104890:	485b      	ldr	r0, [pc, #364]	; (8104a00 <HAL_UART_MspInit+0x2c0>)
 8104892:	f001 f821 	bl	81058d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8104896:	2200      	movs	r2, #0
 8104898:	2105      	movs	r1, #5
 810489a:	2026      	movs	r0, #38	; 0x26
 810489c:	f000 fa71 	bl	8104d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 81048a0:	2026      	movs	r0, #38	; 0x26
 81048a2:	f000 fa88 	bl	8104db6 <HAL_NVIC_EnableIRQ>
}
 81048a6:	e09f      	b.n	81049e8 <HAL_UART_MspInit+0x2a8>
  else if(uartHandle->Instance==USART3)
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	681b      	ldr	r3, [r3, #0]
 81048ac:	4a55      	ldr	r2, [pc, #340]	; (8104a04 <HAL_UART_MspInit+0x2c4>)
 81048ae:	4293      	cmp	r3, r2
 81048b0:	d14b      	bne.n	810494a <HAL_UART_MspInit+0x20a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81048b2:	2302      	movs	r3, #2
 81048b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81048b6:	2300      	movs	r3, #0
 81048b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81048bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81048c0:	4618      	mov	r0, r3
 81048c2:	f001 fc2b 	bl	810611c <HAL_RCCEx_PeriphCLKConfig>
 81048c6:	4603      	mov	r3, r0
 81048c8:	2b00      	cmp	r3, #0
 81048ca:	d001      	beq.n	81048d0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 81048cc:	f7ff fd98 	bl	8104400 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 81048d0:	4b48      	ldr	r3, [pc, #288]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81048d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81048d6:	4a47      	ldr	r2, [pc, #284]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81048d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81048dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81048e0:	4b44      	ldr	r3, [pc, #272]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81048e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81048e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81048ea:	617b      	str	r3, [r7, #20]
 81048ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81048ee:	4b41      	ldr	r3, [pc, #260]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81048f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81048f4:	4a3f      	ldr	r2, [pc, #252]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81048f6:	f043 0302 	orr.w	r3, r3, #2
 81048fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81048fe:	4b3d      	ldr	r3, [pc, #244]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104904:	f003 0302 	and.w	r3, r3, #2
 8104908:	613b      	str	r3, [r7, #16]
 810490a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 810490c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8104910:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104914:	2302      	movs	r3, #2
 8104916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810491a:	2300      	movs	r3, #0
 810491c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104920:	2300      	movs	r3, #0
 8104922:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8104926:	2307      	movs	r3, #7
 8104928:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810492c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8104930:	4619      	mov	r1, r3
 8104932:	4831      	ldr	r0, [pc, #196]	; (81049f8 <HAL_UART_MspInit+0x2b8>)
 8104934:	f000 ffd0 	bl	81058d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8104938:	2200      	movs	r2, #0
 810493a:	2105      	movs	r1, #5
 810493c:	2027      	movs	r0, #39	; 0x27
 810493e:	f000 fa20 	bl	8104d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8104942:	2027      	movs	r0, #39	; 0x27
 8104944:	f000 fa37 	bl	8104db6 <HAL_NVIC_EnableIRQ>
}
 8104948:	e04e      	b.n	81049e8 <HAL_UART_MspInit+0x2a8>
  else if(uartHandle->Instance==USART6)
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	4a2e      	ldr	r2, [pc, #184]	; (8104a08 <HAL_UART_MspInit+0x2c8>)
 8104950:	4293      	cmp	r3, r2
 8104952:	d149      	bne.n	81049e8 <HAL_UART_MspInit+0x2a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8104954:	2301      	movs	r3, #1
 8104956:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8104958:	2300      	movs	r3, #0
 810495a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810495e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8104962:	4618      	mov	r0, r3
 8104964:	f001 fbda 	bl	810611c <HAL_RCCEx_PeriphCLKConfig>
 8104968:	4603      	mov	r3, r0
 810496a:	2b00      	cmp	r3, #0
 810496c:	d001      	beq.n	8104972 <HAL_UART_MspInit+0x232>
      Error_Handler();
 810496e:	f7ff fd47 	bl	8104400 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8104972:	4b20      	ldr	r3, [pc, #128]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104978:	4a1e      	ldr	r2, [pc, #120]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 810497a:	f043 0320 	orr.w	r3, r3, #32
 810497e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8104982:	4b1c      	ldr	r3, [pc, #112]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104988:	f003 0320 	and.w	r3, r3, #32
 810498c:	60fb      	str	r3, [r7, #12]
 810498e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8104990:	4b18      	ldr	r3, [pc, #96]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104996:	4a17      	ldr	r2, [pc, #92]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 8104998:	f043 0304 	orr.w	r3, r3, #4
 810499c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81049a0:	4b14      	ldr	r3, [pc, #80]	; (81049f4 <HAL_UART_MspInit+0x2b4>)
 81049a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81049a6:	f003 0304 	and.w	r3, r3, #4
 81049aa:	60bb      	str	r3, [r7, #8]
 81049ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81049ae:	23c0      	movs	r3, #192	; 0xc0
 81049b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81049b4:	2302      	movs	r3, #2
 81049b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81049ba:	2300      	movs	r3, #0
 81049bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81049c0:	2300      	movs	r3, #0
 81049c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 81049c6:	2307      	movs	r3, #7
 81049c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81049cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81049d0:	4619      	mov	r1, r3
 81049d2:	480e      	ldr	r0, [pc, #56]	; (8104a0c <HAL_UART_MspInit+0x2cc>)
 81049d4:	f000 ff80 	bl	81058d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 81049d8:	2200      	movs	r2, #0
 81049da:	2105      	movs	r1, #5
 81049dc:	2047      	movs	r0, #71	; 0x47
 81049de:	f000 f9d0 	bl	8104d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 81049e2:	2047      	movs	r0, #71	; 0x47
 81049e4:	f000 f9e7 	bl	8104db6 <HAL_NVIC_EnableIRQ>
}
 81049e8:	bf00      	nop
 81049ea:	37f8      	adds	r7, #248	; 0xf8
 81049ec:	46bd      	mov	sp, r7
 81049ee:	bd80      	pop	{r7, pc}
 81049f0:	40011000 	.word	0x40011000
 81049f4:	58024400 	.word	0x58024400
 81049f8:	58020400 	.word	0x58020400
 81049fc:	40004400 	.word	0x40004400
 8104a00:	58020000 	.word	0x58020000
 8104a04:	40004800 	.word	0x40004800
 8104a08:	40011400 	.word	0x40011400
 8104a0c:	58020800 	.word	0x58020800

08104a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8104a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8104a48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104a14:	f7ff f928 	bl	8103c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104a18:	480c      	ldr	r0, [pc, #48]	; (8104a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104a1a:	490d      	ldr	r1, [pc, #52]	; (8104a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104a1c:	4a0d      	ldr	r2, [pc, #52]	; (8104a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8104a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104a20:	e002      	b.n	8104a28 <LoopCopyDataInit>

08104a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8104a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104a26:	3304      	adds	r3, #4

08104a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8104a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104a2c:	d3f9      	bcc.n	8104a22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8104a2e:	4a0a      	ldr	r2, [pc, #40]	; (8104a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104a30:	4c0a      	ldr	r4, [pc, #40]	; (8104a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8104a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104a34:	e001      	b.n	8104a3a <LoopFillZerobss>

08104a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8104a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104a38:	3204      	adds	r2, #4

08104a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8104a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104a3c:	d3fb      	bcc.n	8104a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104a3e:	f008 f897 	bl	810cb70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104a42:	f7ff fc8f 	bl	8104364 <main>
  bx  lr
 8104a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104a48:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104a4c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104a50:	100000c0 	.word	0x100000c0
  ldr r2, =_sidata
 8104a54:	0810d040 	.word	0x0810d040
  ldr r2, =_sbss
 8104a58:	100000c0 	.word	0x100000c0
  ldr r4, =_ebss
 8104a5c:	10004e2c 	.word	0x10004e2c

08104a60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104a60:	e7fe      	b.n	8104a60 <ADC3_IRQHandler>
	...

08104a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8104a64:	b580      	push	{r7, lr}
 8104a66:	b082      	sub	sp, #8
 8104a68:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8104a6a:	4b28      	ldr	r3, [pc, #160]	; (8104b0c <HAL_Init+0xa8>)
 8104a6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8104a70:	4a26      	ldr	r2, [pc, #152]	; (8104b0c <HAL_Init+0xa8>)
 8104a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8104a76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8104a7a:	4b24      	ldr	r3, [pc, #144]	; (8104b0c <HAL_Init+0xa8>)
 8104a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8104a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104a84:	603b      	str	r3, [r7, #0]
 8104a86:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8104a88:	4b21      	ldr	r3, [pc, #132]	; (8104b10 <HAL_Init+0xac>)
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8104a90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104a94:	4a1e      	ldr	r2, [pc, #120]	; (8104b10 <HAL_Init+0xac>)
 8104a96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8104a9a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8104a9c:	4b1c      	ldr	r3, [pc, #112]	; (8104b10 <HAL_Init+0xac>)
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	4a1b      	ldr	r2, [pc, #108]	; (8104b10 <HAL_Init+0xac>)
 8104aa2:	f043 0301 	orr.w	r3, r3, #1
 8104aa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8104aa8:	2003      	movs	r0, #3
 8104aaa:	f000 f95f 	bl	8104d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8104aae:	f001 f95d 	bl	8105d6c <HAL_RCC_GetSysClockFreq>
 8104ab2:	4602      	mov	r2, r0
 8104ab4:	4b15      	ldr	r3, [pc, #84]	; (8104b0c <HAL_Init+0xa8>)
 8104ab6:	699b      	ldr	r3, [r3, #24]
 8104ab8:	0a1b      	lsrs	r3, r3, #8
 8104aba:	f003 030f 	and.w	r3, r3, #15
 8104abe:	4915      	ldr	r1, [pc, #84]	; (8104b14 <HAL_Init+0xb0>)
 8104ac0:	5ccb      	ldrb	r3, [r1, r3]
 8104ac2:	f003 031f 	and.w	r3, r3, #31
 8104ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8104aca:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104acc:	4b0f      	ldr	r3, [pc, #60]	; (8104b0c <HAL_Init+0xa8>)
 8104ace:	699b      	ldr	r3, [r3, #24]
 8104ad0:	f003 030f 	and.w	r3, r3, #15
 8104ad4:	4a0f      	ldr	r2, [pc, #60]	; (8104b14 <HAL_Init+0xb0>)
 8104ad6:	5cd3      	ldrb	r3, [r2, r3]
 8104ad8:	f003 031f 	and.w	r3, r3, #31
 8104adc:	687a      	ldr	r2, [r7, #4]
 8104ade:	fa22 f303 	lsr.w	r3, r2, r3
 8104ae2:	4a0d      	ldr	r2, [pc, #52]	; (8104b18 <HAL_Init+0xb4>)
 8104ae4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104ae6:	4b0c      	ldr	r3, [pc, #48]	; (8104b18 <HAL_Init+0xb4>)
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	4a0c      	ldr	r2, [pc, #48]	; (8104b1c <HAL_Init+0xb8>)
 8104aec:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8104aee:	200f      	movs	r0, #15
 8104af0:	f000 f816 	bl	8104b20 <HAL_InitTick>
 8104af4:	4603      	mov	r3, r0
 8104af6:	2b00      	cmp	r3, #0
 8104af8:	d001      	beq.n	8104afe <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8104afa:	2301      	movs	r3, #1
 8104afc:	e002      	b.n	8104b04 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8104afe:	f7ff fc85 	bl	810440c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104b02:	2300      	movs	r3, #0
}
 8104b04:	4618      	mov	r0, r3
 8104b06:	3708      	adds	r7, #8
 8104b08:	46bd      	mov	sp, r7
 8104b0a:	bd80      	pop	{r7, pc}
 8104b0c:	58024400 	.word	0x58024400
 8104b10:	40024400 	.word	0x40024400
 8104b14:	0810cf38 	.word	0x0810cf38
 8104b18:	10000040 	.word	0x10000040
 8104b1c:	1000003c 	.word	0x1000003c

08104b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104b20:	b580      	push	{r7, lr}
 8104b22:	b082      	sub	sp, #8
 8104b24:	af00      	add	r7, sp, #0
 8104b26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104b28:	4b15      	ldr	r3, [pc, #84]	; (8104b80 <HAL_InitTick+0x60>)
 8104b2a:	781b      	ldrb	r3, [r3, #0]
 8104b2c:	2b00      	cmp	r3, #0
 8104b2e:	d101      	bne.n	8104b34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8104b30:	2301      	movs	r3, #1
 8104b32:	e021      	b.n	8104b78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8104b34:	4b13      	ldr	r3, [pc, #76]	; (8104b84 <HAL_InitTick+0x64>)
 8104b36:	681a      	ldr	r2, [r3, #0]
 8104b38:	4b11      	ldr	r3, [pc, #68]	; (8104b80 <HAL_InitTick+0x60>)
 8104b3a:	781b      	ldrb	r3, [r3, #0]
 8104b3c:	4619      	mov	r1, r3
 8104b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8104b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8104b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8104b4a:	4618      	mov	r0, r3
 8104b4c:	f000 f941 	bl	8104dd2 <HAL_SYSTICK_Config>
 8104b50:	4603      	mov	r3, r0
 8104b52:	2b00      	cmp	r3, #0
 8104b54:	d001      	beq.n	8104b5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8104b56:	2301      	movs	r3, #1
 8104b58:	e00e      	b.n	8104b78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	2b0f      	cmp	r3, #15
 8104b5e:	d80a      	bhi.n	8104b76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8104b60:	2200      	movs	r2, #0
 8104b62:	6879      	ldr	r1, [r7, #4]
 8104b64:	f04f 30ff 	mov.w	r0, #4294967295
 8104b68:	f000 f90b 	bl	8104d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8104b6c:	4a06      	ldr	r2, [pc, #24]	; (8104b88 <HAL_InitTick+0x68>)
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8104b72:	2300      	movs	r3, #0
 8104b74:	e000      	b.n	8104b78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8104b76:	2301      	movs	r3, #1
}
 8104b78:	4618      	mov	r0, r3
 8104b7a:	3708      	adds	r7, #8
 8104b7c:	46bd      	mov	sp, r7
 8104b7e:	bd80      	pop	{r7, pc}
 8104b80:	10000054 	.word	0x10000054
 8104b84:	1000003c 	.word	0x1000003c
 8104b88:	10000050 	.word	0x10000050

08104b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8104b8c:	b480      	push	{r7}
 8104b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8104b90:	4b06      	ldr	r3, [pc, #24]	; (8104bac <HAL_IncTick+0x20>)
 8104b92:	781b      	ldrb	r3, [r3, #0]
 8104b94:	461a      	mov	r2, r3
 8104b96:	4b06      	ldr	r3, [pc, #24]	; (8104bb0 <HAL_IncTick+0x24>)
 8104b98:	681b      	ldr	r3, [r3, #0]
 8104b9a:	4413      	add	r3, r2
 8104b9c:	4a04      	ldr	r2, [pc, #16]	; (8104bb0 <HAL_IncTick+0x24>)
 8104b9e:	6013      	str	r3, [r2, #0]
}
 8104ba0:	bf00      	nop
 8104ba2:	46bd      	mov	sp, r7
 8104ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ba8:	4770      	bx	lr
 8104baa:	bf00      	nop
 8104bac:	10000054 	.word	0x10000054
 8104bb0:	10004ddc 	.word	0x10004ddc

08104bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8104bb4:	b480      	push	{r7}
 8104bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8104bb8:	4b03      	ldr	r3, [pc, #12]	; (8104bc8 <HAL_GetTick+0x14>)
 8104bba:	681b      	ldr	r3, [r3, #0]
}
 8104bbc:	4618      	mov	r0, r3
 8104bbe:	46bd      	mov	sp, r7
 8104bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bc4:	4770      	bx	lr
 8104bc6:	bf00      	nop
 8104bc8:	10004ddc 	.word	0x10004ddc

08104bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104bcc:	b480      	push	{r7}
 8104bce:	b085      	sub	sp, #20
 8104bd0:	af00      	add	r7, sp, #0
 8104bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	f003 0307 	and.w	r3, r3, #7
 8104bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104bdc:	4b0c      	ldr	r3, [pc, #48]	; (8104c10 <__NVIC_SetPriorityGrouping+0x44>)
 8104bde:	68db      	ldr	r3, [r3, #12]
 8104be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104be2:	68ba      	ldr	r2, [r7, #8]
 8104be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104be8:	4013      	ands	r3, r2
 8104bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104bec:	68fb      	ldr	r3, [r7, #12]
 8104bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104bf0:	68bb      	ldr	r3, [r7, #8]
 8104bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104bfe:	4a04      	ldr	r2, [pc, #16]	; (8104c10 <__NVIC_SetPriorityGrouping+0x44>)
 8104c00:	68bb      	ldr	r3, [r7, #8]
 8104c02:	60d3      	str	r3, [r2, #12]
}
 8104c04:	bf00      	nop
 8104c06:	3714      	adds	r7, #20
 8104c08:	46bd      	mov	sp, r7
 8104c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c0e:	4770      	bx	lr
 8104c10:	e000ed00 	.word	0xe000ed00

08104c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104c14:	b480      	push	{r7}
 8104c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104c18:	4b04      	ldr	r3, [pc, #16]	; (8104c2c <__NVIC_GetPriorityGrouping+0x18>)
 8104c1a:	68db      	ldr	r3, [r3, #12]
 8104c1c:	0a1b      	lsrs	r3, r3, #8
 8104c1e:	f003 0307 	and.w	r3, r3, #7
}
 8104c22:	4618      	mov	r0, r3
 8104c24:	46bd      	mov	sp, r7
 8104c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c2a:	4770      	bx	lr
 8104c2c:	e000ed00 	.word	0xe000ed00

08104c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104c30:	b480      	push	{r7}
 8104c32:	b083      	sub	sp, #12
 8104c34:	af00      	add	r7, sp, #0
 8104c36:	4603      	mov	r3, r0
 8104c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104c3e:	2b00      	cmp	r3, #0
 8104c40:	db0b      	blt.n	8104c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104c42:	88fb      	ldrh	r3, [r7, #6]
 8104c44:	f003 021f 	and.w	r2, r3, #31
 8104c48:	4907      	ldr	r1, [pc, #28]	; (8104c68 <__NVIC_EnableIRQ+0x38>)
 8104c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104c4e:	095b      	lsrs	r3, r3, #5
 8104c50:	2001      	movs	r0, #1
 8104c52:	fa00 f202 	lsl.w	r2, r0, r2
 8104c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8104c5a:	bf00      	nop
 8104c5c:	370c      	adds	r7, #12
 8104c5e:	46bd      	mov	sp, r7
 8104c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c64:	4770      	bx	lr
 8104c66:	bf00      	nop
 8104c68:	e000e100 	.word	0xe000e100

08104c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104c6c:	b480      	push	{r7}
 8104c6e:	b083      	sub	sp, #12
 8104c70:	af00      	add	r7, sp, #0
 8104c72:	4603      	mov	r3, r0
 8104c74:	6039      	str	r1, [r7, #0]
 8104c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104c7c:	2b00      	cmp	r3, #0
 8104c7e:	db0a      	blt.n	8104c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104c80:	683b      	ldr	r3, [r7, #0]
 8104c82:	b2da      	uxtb	r2, r3
 8104c84:	490c      	ldr	r1, [pc, #48]	; (8104cb8 <__NVIC_SetPriority+0x4c>)
 8104c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104c8a:	0112      	lsls	r2, r2, #4
 8104c8c:	b2d2      	uxtb	r2, r2
 8104c8e:	440b      	add	r3, r1
 8104c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8104c94:	e00a      	b.n	8104cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104c96:	683b      	ldr	r3, [r7, #0]
 8104c98:	b2da      	uxtb	r2, r3
 8104c9a:	4908      	ldr	r1, [pc, #32]	; (8104cbc <__NVIC_SetPriority+0x50>)
 8104c9c:	88fb      	ldrh	r3, [r7, #6]
 8104c9e:	f003 030f 	and.w	r3, r3, #15
 8104ca2:	3b04      	subs	r3, #4
 8104ca4:	0112      	lsls	r2, r2, #4
 8104ca6:	b2d2      	uxtb	r2, r2
 8104ca8:	440b      	add	r3, r1
 8104caa:	761a      	strb	r2, [r3, #24]
}
 8104cac:	bf00      	nop
 8104cae:	370c      	adds	r7, #12
 8104cb0:	46bd      	mov	sp, r7
 8104cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cb6:	4770      	bx	lr
 8104cb8:	e000e100 	.word	0xe000e100
 8104cbc:	e000ed00 	.word	0xe000ed00

08104cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104cc0:	b480      	push	{r7}
 8104cc2:	b089      	sub	sp, #36	; 0x24
 8104cc4:	af00      	add	r7, sp, #0
 8104cc6:	60f8      	str	r0, [r7, #12]
 8104cc8:	60b9      	str	r1, [r7, #8]
 8104cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104ccc:	68fb      	ldr	r3, [r7, #12]
 8104cce:	f003 0307 	and.w	r3, r3, #7
 8104cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104cd4:	69fb      	ldr	r3, [r7, #28]
 8104cd6:	f1c3 0307 	rsb	r3, r3, #7
 8104cda:	2b04      	cmp	r3, #4
 8104cdc:	bf28      	it	cs
 8104cde:	2304      	movcs	r3, #4
 8104ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104ce2:	69fb      	ldr	r3, [r7, #28]
 8104ce4:	3304      	adds	r3, #4
 8104ce6:	2b06      	cmp	r3, #6
 8104ce8:	d902      	bls.n	8104cf0 <NVIC_EncodePriority+0x30>
 8104cea:	69fb      	ldr	r3, [r7, #28]
 8104cec:	3b03      	subs	r3, #3
 8104cee:	e000      	b.n	8104cf2 <NVIC_EncodePriority+0x32>
 8104cf0:	2300      	movs	r3, #0
 8104cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8104cf8:	69bb      	ldr	r3, [r7, #24]
 8104cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8104cfe:	43da      	mvns	r2, r3
 8104d00:	68bb      	ldr	r3, [r7, #8]
 8104d02:	401a      	ands	r2, r3
 8104d04:	697b      	ldr	r3, [r7, #20]
 8104d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104d08:	f04f 31ff 	mov.w	r1, #4294967295
 8104d0c:	697b      	ldr	r3, [r7, #20]
 8104d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8104d12:	43d9      	mvns	r1, r3
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104d18:	4313      	orrs	r3, r2
         );
}
 8104d1a:	4618      	mov	r0, r3
 8104d1c:	3724      	adds	r7, #36	; 0x24
 8104d1e:	46bd      	mov	sp, r7
 8104d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d24:	4770      	bx	lr
	...

08104d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104d28:	b580      	push	{r7, lr}
 8104d2a:	b082      	sub	sp, #8
 8104d2c:	af00      	add	r7, sp, #0
 8104d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104d30:	687b      	ldr	r3, [r7, #4]
 8104d32:	3b01      	subs	r3, #1
 8104d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104d38:	d301      	bcc.n	8104d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8104d3a:	2301      	movs	r3, #1
 8104d3c:	e00f      	b.n	8104d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8104d3e:	4a0a      	ldr	r2, [pc, #40]	; (8104d68 <SysTick_Config+0x40>)
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	3b01      	subs	r3, #1
 8104d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104d46:	210f      	movs	r1, #15
 8104d48:	f04f 30ff 	mov.w	r0, #4294967295
 8104d4c:	f7ff ff8e 	bl	8104c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104d50:	4b05      	ldr	r3, [pc, #20]	; (8104d68 <SysTick_Config+0x40>)
 8104d52:	2200      	movs	r2, #0
 8104d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104d56:	4b04      	ldr	r3, [pc, #16]	; (8104d68 <SysTick_Config+0x40>)
 8104d58:	2207      	movs	r2, #7
 8104d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8104d5c:	2300      	movs	r3, #0
}
 8104d5e:	4618      	mov	r0, r3
 8104d60:	3708      	adds	r7, #8
 8104d62:	46bd      	mov	sp, r7
 8104d64:	bd80      	pop	{r7, pc}
 8104d66:	bf00      	nop
 8104d68:	e000e010 	.word	0xe000e010

08104d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104d6c:	b580      	push	{r7, lr}
 8104d6e:	b082      	sub	sp, #8
 8104d70:	af00      	add	r7, sp, #0
 8104d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104d74:	6878      	ldr	r0, [r7, #4]
 8104d76:	f7ff ff29 	bl	8104bcc <__NVIC_SetPriorityGrouping>
}
 8104d7a:	bf00      	nop
 8104d7c:	3708      	adds	r7, #8
 8104d7e:	46bd      	mov	sp, r7
 8104d80:	bd80      	pop	{r7, pc}

08104d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104d82:	b580      	push	{r7, lr}
 8104d84:	b086      	sub	sp, #24
 8104d86:	af00      	add	r7, sp, #0
 8104d88:	4603      	mov	r3, r0
 8104d8a:	60b9      	str	r1, [r7, #8]
 8104d8c:	607a      	str	r2, [r7, #4]
 8104d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104d90:	f7ff ff40 	bl	8104c14 <__NVIC_GetPriorityGrouping>
 8104d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104d96:	687a      	ldr	r2, [r7, #4]
 8104d98:	68b9      	ldr	r1, [r7, #8]
 8104d9a:	6978      	ldr	r0, [r7, #20]
 8104d9c:	f7ff ff90 	bl	8104cc0 <NVIC_EncodePriority>
 8104da0:	4602      	mov	r2, r0
 8104da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104da6:	4611      	mov	r1, r2
 8104da8:	4618      	mov	r0, r3
 8104daa:	f7ff ff5f 	bl	8104c6c <__NVIC_SetPriority>
}
 8104dae:	bf00      	nop
 8104db0:	3718      	adds	r7, #24
 8104db2:	46bd      	mov	sp, r7
 8104db4:	bd80      	pop	{r7, pc}

08104db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104db6:	b580      	push	{r7, lr}
 8104db8:	b082      	sub	sp, #8
 8104dba:	af00      	add	r7, sp, #0
 8104dbc:	4603      	mov	r3, r0
 8104dbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8104dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104dc4:	4618      	mov	r0, r3
 8104dc6:	f7ff ff33 	bl	8104c30 <__NVIC_EnableIRQ>
}
 8104dca:	bf00      	nop
 8104dcc:	3708      	adds	r7, #8
 8104dce:	46bd      	mov	sp, r7
 8104dd0:	bd80      	pop	{r7, pc}

08104dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104dd2:	b580      	push	{r7, lr}
 8104dd4:	b082      	sub	sp, #8
 8104dd6:	af00      	add	r7, sp, #0
 8104dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8104dda:	6878      	ldr	r0, [r7, #4]
 8104ddc:	f7ff ffa4 	bl	8104d28 <SysTick_Config>
 8104de0:	4603      	mov	r3, r0
}
 8104de2:	4618      	mov	r0, r3
 8104de4:	3708      	adds	r7, #8
 8104de6:	46bd      	mov	sp, r7
 8104de8:	bd80      	pop	{r7, pc}
	...

08104dec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104dec:	b480      	push	{r7}
 8104dee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104df0:	4b07      	ldr	r3, [pc, #28]	; (8104e10 <HAL_GetCurrentCPUID+0x24>)
 8104df2:	681b      	ldr	r3, [r3, #0]
 8104df4:	091b      	lsrs	r3, r3, #4
 8104df6:	f003 030f 	and.w	r3, r3, #15
 8104dfa:	2b07      	cmp	r3, #7
 8104dfc:	d101      	bne.n	8104e02 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8104dfe:	2303      	movs	r3, #3
 8104e00:	e000      	b.n	8104e04 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8104e02:	2301      	movs	r3, #1
  }
}
 8104e04:	4618      	mov	r0, r3
 8104e06:	46bd      	mov	sp, r7
 8104e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e0c:	4770      	bx	lr
 8104e0e:	bf00      	nop
 8104e10:	e000ed00 	.word	0xe000ed00

08104e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104e14:	b580      	push	{r7, lr}
 8104e16:	b086      	sub	sp, #24
 8104e18:	af00      	add	r7, sp, #0
 8104e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104e1c:	f7ff feca 	bl	8104bb4 <HAL_GetTick>
 8104e20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	2b00      	cmp	r3, #0
 8104e26:	d101      	bne.n	8104e2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104e28:	2301      	movs	r3, #1
 8104e2a:	e2dc      	b.n	81053e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104e2c:	687b      	ldr	r3, [r7, #4]
 8104e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104e32:	b2db      	uxtb	r3, r3
 8104e34:	2b02      	cmp	r3, #2
 8104e36:	d008      	beq.n	8104e4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	2280      	movs	r2, #128	; 0x80
 8104e3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	2200      	movs	r2, #0
 8104e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104e46:	2301      	movs	r3, #1
 8104e48:	e2cd      	b.n	81053e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	681b      	ldr	r3, [r3, #0]
 8104e4e:	4a76      	ldr	r2, [pc, #472]	; (8105028 <HAL_DMA_Abort+0x214>)
 8104e50:	4293      	cmp	r3, r2
 8104e52:	d04a      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	681b      	ldr	r3, [r3, #0]
 8104e58:	4a74      	ldr	r2, [pc, #464]	; (810502c <HAL_DMA_Abort+0x218>)
 8104e5a:	4293      	cmp	r3, r2
 8104e5c:	d045      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	4a73      	ldr	r2, [pc, #460]	; (8105030 <HAL_DMA_Abort+0x21c>)
 8104e64:	4293      	cmp	r3, r2
 8104e66:	d040      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	4a71      	ldr	r2, [pc, #452]	; (8105034 <HAL_DMA_Abort+0x220>)
 8104e6e:	4293      	cmp	r3, r2
 8104e70:	d03b      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	4a70      	ldr	r2, [pc, #448]	; (8105038 <HAL_DMA_Abort+0x224>)
 8104e78:	4293      	cmp	r3, r2
 8104e7a:	d036      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	4a6e      	ldr	r2, [pc, #440]	; (810503c <HAL_DMA_Abort+0x228>)
 8104e82:	4293      	cmp	r3, r2
 8104e84:	d031      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	4a6d      	ldr	r2, [pc, #436]	; (8105040 <HAL_DMA_Abort+0x22c>)
 8104e8c:	4293      	cmp	r3, r2
 8104e8e:	d02c      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	4a6b      	ldr	r2, [pc, #428]	; (8105044 <HAL_DMA_Abort+0x230>)
 8104e96:	4293      	cmp	r3, r2
 8104e98:	d027      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	4a6a      	ldr	r2, [pc, #424]	; (8105048 <HAL_DMA_Abort+0x234>)
 8104ea0:	4293      	cmp	r3, r2
 8104ea2:	d022      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	4a68      	ldr	r2, [pc, #416]	; (810504c <HAL_DMA_Abort+0x238>)
 8104eaa:	4293      	cmp	r3, r2
 8104eac:	d01d      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104eae:	687b      	ldr	r3, [r7, #4]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	4a67      	ldr	r2, [pc, #412]	; (8105050 <HAL_DMA_Abort+0x23c>)
 8104eb4:	4293      	cmp	r3, r2
 8104eb6:	d018      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	4a65      	ldr	r2, [pc, #404]	; (8105054 <HAL_DMA_Abort+0x240>)
 8104ebe:	4293      	cmp	r3, r2
 8104ec0:	d013      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	4a64      	ldr	r2, [pc, #400]	; (8105058 <HAL_DMA_Abort+0x244>)
 8104ec8:	4293      	cmp	r3, r2
 8104eca:	d00e      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	681b      	ldr	r3, [r3, #0]
 8104ed0:	4a62      	ldr	r2, [pc, #392]	; (810505c <HAL_DMA_Abort+0x248>)
 8104ed2:	4293      	cmp	r3, r2
 8104ed4:	d009      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	4a61      	ldr	r2, [pc, #388]	; (8105060 <HAL_DMA_Abort+0x24c>)
 8104edc:	4293      	cmp	r3, r2
 8104ede:	d004      	beq.n	8104eea <HAL_DMA_Abort+0xd6>
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	4a5f      	ldr	r2, [pc, #380]	; (8105064 <HAL_DMA_Abort+0x250>)
 8104ee6:	4293      	cmp	r3, r2
 8104ee8:	d101      	bne.n	8104eee <HAL_DMA_Abort+0xda>
 8104eea:	2301      	movs	r3, #1
 8104eec:	e000      	b.n	8104ef0 <HAL_DMA_Abort+0xdc>
 8104eee:	2300      	movs	r3, #0
 8104ef0:	2b00      	cmp	r3, #0
 8104ef2:	d013      	beq.n	8104f1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	681a      	ldr	r2, [r3, #0]
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	f022 021e 	bic.w	r2, r2, #30
 8104f02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	695a      	ldr	r2, [r3, #20]
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	681b      	ldr	r3, [r3, #0]
 8104f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104f12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	681b      	ldr	r3, [r3, #0]
 8104f18:	617b      	str	r3, [r7, #20]
 8104f1a:	e00a      	b.n	8104f32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	681b      	ldr	r3, [r3, #0]
 8104f20:	681a      	ldr	r2, [r3, #0]
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	f022 020e 	bic.w	r2, r2, #14
 8104f2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	681b      	ldr	r3, [r3, #0]
 8104f30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	4a3c      	ldr	r2, [pc, #240]	; (8105028 <HAL_DMA_Abort+0x214>)
 8104f38:	4293      	cmp	r3, r2
 8104f3a:	d072      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	4a3a      	ldr	r2, [pc, #232]	; (810502c <HAL_DMA_Abort+0x218>)
 8104f42:	4293      	cmp	r3, r2
 8104f44:	d06d      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f46:	687b      	ldr	r3, [r7, #4]
 8104f48:	681b      	ldr	r3, [r3, #0]
 8104f4a:	4a39      	ldr	r2, [pc, #228]	; (8105030 <HAL_DMA_Abort+0x21c>)
 8104f4c:	4293      	cmp	r3, r2
 8104f4e:	d068      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	4a37      	ldr	r2, [pc, #220]	; (8105034 <HAL_DMA_Abort+0x220>)
 8104f56:	4293      	cmp	r3, r2
 8104f58:	d063      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	681b      	ldr	r3, [r3, #0]
 8104f5e:	4a36      	ldr	r2, [pc, #216]	; (8105038 <HAL_DMA_Abort+0x224>)
 8104f60:	4293      	cmp	r3, r2
 8104f62:	d05e      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	4a34      	ldr	r2, [pc, #208]	; (810503c <HAL_DMA_Abort+0x228>)
 8104f6a:	4293      	cmp	r3, r2
 8104f6c:	d059      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	4a33      	ldr	r2, [pc, #204]	; (8105040 <HAL_DMA_Abort+0x22c>)
 8104f74:	4293      	cmp	r3, r2
 8104f76:	d054      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	4a31      	ldr	r2, [pc, #196]	; (8105044 <HAL_DMA_Abort+0x230>)
 8104f7e:	4293      	cmp	r3, r2
 8104f80:	d04f      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	4a30      	ldr	r2, [pc, #192]	; (8105048 <HAL_DMA_Abort+0x234>)
 8104f88:	4293      	cmp	r3, r2
 8104f8a:	d04a      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	681b      	ldr	r3, [r3, #0]
 8104f90:	4a2e      	ldr	r2, [pc, #184]	; (810504c <HAL_DMA_Abort+0x238>)
 8104f92:	4293      	cmp	r3, r2
 8104f94:	d045      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	4a2d      	ldr	r2, [pc, #180]	; (8105050 <HAL_DMA_Abort+0x23c>)
 8104f9c:	4293      	cmp	r3, r2
 8104f9e:	d040      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	4a2b      	ldr	r2, [pc, #172]	; (8105054 <HAL_DMA_Abort+0x240>)
 8104fa6:	4293      	cmp	r3, r2
 8104fa8:	d03b      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	681b      	ldr	r3, [r3, #0]
 8104fae:	4a2a      	ldr	r2, [pc, #168]	; (8105058 <HAL_DMA_Abort+0x244>)
 8104fb0:	4293      	cmp	r3, r2
 8104fb2:	d036      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	4a28      	ldr	r2, [pc, #160]	; (810505c <HAL_DMA_Abort+0x248>)
 8104fba:	4293      	cmp	r3, r2
 8104fbc:	d031      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	4a27      	ldr	r2, [pc, #156]	; (8105060 <HAL_DMA_Abort+0x24c>)
 8104fc4:	4293      	cmp	r3, r2
 8104fc6:	d02c      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	681b      	ldr	r3, [r3, #0]
 8104fcc:	4a25      	ldr	r2, [pc, #148]	; (8105064 <HAL_DMA_Abort+0x250>)
 8104fce:	4293      	cmp	r3, r2
 8104fd0:	d027      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	4a24      	ldr	r2, [pc, #144]	; (8105068 <HAL_DMA_Abort+0x254>)
 8104fd8:	4293      	cmp	r3, r2
 8104fda:	d022      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	681b      	ldr	r3, [r3, #0]
 8104fe0:	4a22      	ldr	r2, [pc, #136]	; (810506c <HAL_DMA_Abort+0x258>)
 8104fe2:	4293      	cmp	r3, r2
 8104fe4:	d01d      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	681b      	ldr	r3, [r3, #0]
 8104fea:	4a21      	ldr	r2, [pc, #132]	; (8105070 <HAL_DMA_Abort+0x25c>)
 8104fec:	4293      	cmp	r3, r2
 8104fee:	d018      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	681b      	ldr	r3, [r3, #0]
 8104ff4:	4a1f      	ldr	r2, [pc, #124]	; (8105074 <HAL_DMA_Abort+0x260>)
 8104ff6:	4293      	cmp	r3, r2
 8104ff8:	d013      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	4a1e      	ldr	r2, [pc, #120]	; (8105078 <HAL_DMA_Abort+0x264>)
 8105000:	4293      	cmp	r3, r2
 8105002:	d00e      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	4a1c      	ldr	r2, [pc, #112]	; (810507c <HAL_DMA_Abort+0x268>)
 810500a:	4293      	cmp	r3, r2
 810500c:	d009      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	681b      	ldr	r3, [r3, #0]
 8105012:	4a1b      	ldr	r2, [pc, #108]	; (8105080 <HAL_DMA_Abort+0x26c>)
 8105014:	4293      	cmp	r3, r2
 8105016:	d004      	beq.n	8105022 <HAL_DMA_Abort+0x20e>
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	681b      	ldr	r3, [r3, #0]
 810501c:	4a19      	ldr	r2, [pc, #100]	; (8105084 <HAL_DMA_Abort+0x270>)
 810501e:	4293      	cmp	r3, r2
 8105020:	d132      	bne.n	8105088 <HAL_DMA_Abort+0x274>
 8105022:	2301      	movs	r3, #1
 8105024:	e031      	b.n	810508a <HAL_DMA_Abort+0x276>
 8105026:	bf00      	nop
 8105028:	40020010 	.word	0x40020010
 810502c:	40020028 	.word	0x40020028
 8105030:	40020040 	.word	0x40020040
 8105034:	40020058 	.word	0x40020058
 8105038:	40020070 	.word	0x40020070
 810503c:	40020088 	.word	0x40020088
 8105040:	400200a0 	.word	0x400200a0
 8105044:	400200b8 	.word	0x400200b8
 8105048:	40020410 	.word	0x40020410
 810504c:	40020428 	.word	0x40020428
 8105050:	40020440 	.word	0x40020440
 8105054:	40020458 	.word	0x40020458
 8105058:	40020470 	.word	0x40020470
 810505c:	40020488 	.word	0x40020488
 8105060:	400204a0 	.word	0x400204a0
 8105064:	400204b8 	.word	0x400204b8
 8105068:	58025408 	.word	0x58025408
 810506c:	5802541c 	.word	0x5802541c
 8105070:	58025430 	.word	0x58025430
 8105074:	58025444 	.word	0x58025444
 8105078:	58025458 	.word	0x58025458
 810507c:	5802546c 	.word	0x5802546c
 8105080:	58025480 	.word	0x58025480
 8105084:	58025494 	.word	0x58025494
 8105088:	2300      	movs	r3, #0
 810508a:	2b00      	cmp	r3, #0
 810508c:	d007      	beq.n	810509e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105092:	681a      	ldr	r2, [r3, #0]
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810509c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810509e:	687b      	ldr	r3, [r7, #4]
 81050a0:	681b      	ldr	r3, [r3, #0]
 81050a2:	4a6d      	ldr	r2, [pc, #436]	; (8105258 <HAL_DMA_Abort+0x444>)
 81050a4:	4293      	cmp	r3, r2
 81050a6:	d04a      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	681b      	ldr	r3, [r3, #0]
 81050ac:	4a6b      	ldr	r2, [pc, #428]	; (810525c <HAL_DMA_Abort+0x448>)
 81050ae:	4293      	cmp	r3, r2
 81050b0:	d045      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	4a6a      	ldr	r2, [pc, #424]	; (8105260 <HAL_DMA_Abort+0x44c>)
 81050b8:	4293      	cmp	r3, r2
 81050ba:	d040      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	4a68      	ldr	r2, [pc, #416]	; (8105264 <HAL_DMA_Abort+0x450>)
 81050c2:	4293      	cmp	r3, r2
 81050c4:	d03b      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	4a67      	ldr	r2, [pc, #412]	; (8105268 <HAL_DMA_Abort+0x454>)
 81050cc:	4293      	cmp	r3, r2
 81050ce:	d036      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	4a65      	ldr	r2, [pc, #404]	; (810526c <HAL_DMA_Abort+0x458>)
 81050d6:	4293      	cmp	r3, r2
 81050d8:	d031      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	681b      	ldr	r3, [r3, #0]
 81050de:	4a64      	ldr	r2, [pc, #400]	; (8105270 <HAL_DMA_Abort+0x45c>)
 81050e0:	4293      	cmp	r3, r2
 81050e2:	d02c      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	4a62      	ldr	r2, [pc, #392]	; (8105274 <HAL_DMA_Abort+0x460>)
 81050ea:	4293      	cmp	r3, r2
 81050ec:	d027      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	4a61      	ldr	r2, [pc, #388]	; (8105278 <HAL_DMA_Abort+0x464>)
 81050f4:	4293      	cmp	r3, r2
 81050f6:	d022      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	4a5f      	ldr	r2, [pc, #380]	; (810527c <HAL_DMA_Abort+0x468>)
 81050fe:	4293      	cmp	r3, r2
 8105100:	d01d      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	4a5e      	ldr	r2, [pc, #376]	; (8105280 <HAL_DMA_Abort+0x46c>)
 8105108:	4293      	cmp	r3, r2
 810510a:	d018      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	681b      	ldr	r3, [r3, #0]
 8105110:	4a5c      	ldr	r2, [pc, #368]	; (8105284 <HAL_DMA_Abort+0x470>)
 8105112:	4293      	cmp	r3, r2
 8105114:	d013      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	4a5b      	ldr	r2, [pc, #364]	; (8105288 <HAL_DMA_Abort+0x474>)
 810511c:	4293      	cmp	r3, r2
 810511e:	d00e      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	681b      	ldr	r3, [r3, #0]
 8105124:	4a59      	ldr	r2, [pc, #356]	; (810528c <HAL_DMA_Abort+0x478>)
 8105126:	4293      	cmp	r3, r2
 8105128:	d009      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	4a58      	ldr	r2, [pc, #352]	; (8105290 <HAL_DMA_Abort+0x47c>)
 8105130:	4293      	cmp	r3, r2
 8105132:	d004      	beq.n	810513e <HAL_DMA_Abort+0x32a>
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	4a56      	ldr	r2, [pc, #344]	; (8105294 <HAL_DMA_Abort+0x480>)
 810513a:	4293      	cmp	r3, r2
 810513c:	d108      	bne.n	8105150 <HAL_DMA_Abort+0x33c>
 810513e:	687b      	ldr	r3, [r7, #4]
 8105140:	681b      	ldr	r3, [r3, #0]
 8105142:	681a      	ldr	r2, [r3, #0]
 8105144:	687b      	ldr	r3, [r7, #4]
 8105146:	681b      	ldr	r3, [r3, #0]
 8105148:	f022 0201 	bic.w	r2, r2, #1
 810514c:	601a      	str	r2, [r3, #0]
 810514e:	e007      	b.n	8105160 <HAL_DMA_Abort+0x34c>
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	681b      	ldr	r3, [r3, #0]
 8105154:	681a      	ldr	r2, [r3, #0]
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	f022 0201 	bic.w	r2, r2, #1
 810515e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8105160:	e013      	b.n	810518a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8105162:	f7ff fd27 	bl	8104bb4 <HAL_GetTick>
 8105166:	4602      	mov	r2, r0
 8105168:	693b      	ldr	r3, [r7, #16]
 810516a:	1ad3      	subs	r3, r2, r3
 810516c:	2b05      	cmp	r3, #5
 810516e:	d90c      	bls.n	810518a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	2220      	movs	r2, #32
 8105174:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8105176:	687b      	ldr	r3, [r7, #4]
 8105178:	2203      	movs	r2, #3
 810517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	2200      	movs	r2, #0
 8105182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8105186:	2301      	movs	r3, #1
 8105188:	e12d      	b.n	81053e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810518a:	697b      	ldr	r3, [r7, #20]
 810518c:	681b      	ldr	r3, [r3, #0]
 810518e:	f003 0301 	and.w	r3, r3, #1
 8105192:	2b00      	cmp	r3, #0
 8105194:	d1e5      	bne.n	8105162 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	4a2f      	ldr	r2, [pc, #188]	; (8105258 <HAL_DMA_Abort+0x444>)
 810519c:	4293      	cmp	r3, r2
 810519e:	d04a      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	4a2d      	ldr	r2, [pc, #180]	; (810525c <HAL_DMA_Abort+0x448>)
 81051a6:	4293      	cmp	r3, r2
 81051a8:	d045      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	4a2c      	ldr	r2, [pc, #176]	; (8105260 <HAL_DMA_Abort+0x44c>)
 81051b0:	4293      	cmp	r3, r2
 81051b2:	d040      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	4a2a      	ldr	r2, [pc, #168]	; (8105264 <HAL_DMA_Abort+0x450>)
 81051ba:	4293      	cmp	r3, r2
 81051bc:	d03b      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	681b      	ldr	r3, [r3, #0]
 81051c2:	4a29      	ldr	r2, [pc, #164]	; (8105268 <HAL_DMA_Abort+0x454>)
 81051c4:	4293      	cmp	r3, r2
 81051c6:	d036      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051c8:	687b      	ldr	r3, [r7, #4]
 81051ca:	681b      	ldr	r3, [r3, #0]
 81051cc:	4a27      	ldr	r2, [pc, #156]	; (810526c <HAL_DMA_Abort+0x458>)
 81051ce:	4293      	cmp	r3, r2
 81051d0:	d031      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	4a26      	ldr	r2, [pc, #152]	; (8105270 <HAL_DMA_Abort+0x45c>)
 81051d8:	4293      	cmp	r3, r2
 81051da:	d02c      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	4a24      	ldr	r2, [pc, #144]	; (8105274 <HAL_DMA_Abort+0x460>)
 81051e2:	4293      	cmp	r3, r2
 81051e4:	d027      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	681b      	ldr	r3, [r3, #0]
 81051ea:	4a23      	ldr	r2, [pc, #140]	; (8105278 <HAL_DMA_Abort+0x464>)
 81051ec:	4293      	cmp	r3, r2
 81051ee:	d022      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	681b      	ldr	r3, [r3, #0]
 81051f4:	4a21      	ldr	r2, [pc, #132]	; (810527c <HAL_DMA_Abort+0x468>)
 81051f6:	4293      	cmp	r3, r2
 81051f8:	d01d      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	4a20      	ldr	r2, [pc, #128]	; (8105280 <HAL_DMA_Abort+0x46c>)
 8105200:	4293      	cmp	r3, r2
 8105202:	d018      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	4a1e      	ldr	r2, [pc, #120]	; (8105284 <HAL_DMA_Abort+0x470>)
 810520a:	4293      	cmp	r3, r2
 810520c:	d013      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	681b      	ldr	r3, [r3, #0]
 8105212:	4a1d      	ldr	r2, [pc, #116]	; (8105288 <HAL_DMA_Abort+0x474>)
 8105214:	4293      	cmp	r3, r2
 8105216:	d00e      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	4a1b      	ldr	r2, [pc, #108]	; (810528c <HAL_DMA_Abort+0x478>)
 810521e:	4293      	cmp	r3, r2
 8105220:	d009      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	4a1a      	ldr	r2, [pc, #104]	; (8105290 <HAL_DMA_Abort+0x47c>)
 8105228:	4293      	cmp	r3, r2
 810522a:	d004      	beq.n	8105236 <HAL_DMA_Abort+0x422>
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	4a18      	ldr	r2, [pc, #96]	; (8105294 <HAL_DMA_Abort+0x480>)
 8105232:	4293      	cmp	r3, r2
 8105234:	d101      	bne.n	810523a <HAL_DMA_Abort+0x426>
 8105236:	2301      	movs	r3, #1
 8105238:	e000      	b.n	810523c <HAL_DMA_Abort+0x428>
 810523a:	2300      	movs	r3, #0
 810523c:	2b00      	cmp	r3, #0
 810523e:	d02b      	beq.n	8105298 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105244:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105246:	687b      	ldr	r3, [r7, #4]
 8105248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810524a:	f003 031f 	and.w	r3, r3, #31
 810524e:	223f      	movs	r2, #63	; 0x3f
 8105250:	409a      	lsls	r2, r3
 8105252:	68bb      	ldr	r3, [r7, #8]
 8105254:	609a      	str	r2, [r3, #8]
 8105256:	e02a      	b.n	81052ae <HAL_DMA_Abort+0x49a>
 8105258:	40020010 	.word	0x40020010
 810525c:	40020028 	.word	0x40020028
 8105260:	40020040 	.word	0x40020040
 8105264:	40020058 	.word	0x40020058
 8105268:	40020070 	.word	0x40020070
 810526c:	40020088 	.word	0x40020088
 8105270:	400200a0 	.word	0x400200a0
 8105274:	400200b8 	.word	0x400200b8
 8105278:	40020410 	.word	0x40020410
 810527c:	40020428 	.word	0x40020428
 8105280:	40020440 	.word	0x40020440
 8105284:	40020458 	.word	0x40020458
 8105288:	40020470 	.word	0x40020470
 810528c:	40020488 	.word	0x40020488
 8105290:	400204a0 	.word	0x400204a0
 8105294:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810529c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052a2:	f003 031f 	and.w	r3, r3, #31
 81052a6:	2201      	movs	r2, #1
 81052a8:	409a      	lsls	r2, r3
 81052aa:	68fb      	ldr	r3, [r7, #12]
 81052ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	681b      	ldr	r3, [r3, #0]
 81052b2:	4a4f      	ldr	r2, [pc, #316]	; (81053f0 <HAL_DMA_Abort+0x5dc>)
 81052b4:	4293      	cmp	r3, r2
 81052b6:	d072      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	4a4d      	ldr	r2, [pc, #308]	; (81053f4 <HAL_DMA_Abort+0x5e0>)
 81052be:	4293      	cmp	r3, r2
 81052c0:	d06d      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	681b      	ldr	r3, [r3, #0]
 81052c6:	4a4c      	ldr	r2, [pc, #304]	; (81053f8 <HAL_DMA_Abort+0x5e4>)
 81052c8:	4293      	cmp	r3, r2
 81052ca:	d068      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	4a4a      	ldr	r2, [pc, #296]	; (81053fc <HAL_DMA_Abort+0x5e8>)
 81052d2:	4293      	cmp	r3, r2
 81052d4:	d063      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	681b      	ldr	r3, [r3, #0]
 81052da:	4a49      	ldr	r2, [pc, #292]	; (8105400 <HAL_DMA_Abort+0x5ec>)
 81052dc:	4293      	cmp	r3, r2
 81052de:	d05e      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	4a47      	ldr	r2, [pc, #284]	; (8105404 <HAL_DMA_Abort+0x5f0>)
 81052e6:	4293      	cmp	r3, r2
 81052e8:	d059      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	4a46      	ldr	r2, [pc, #280]	; (8105408 <HAL_DMA_Abort+0x5f4>)
 81052f0:	4293      	cmp	r3, r2
 81052f2:	d054      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	681b      	ldr	r3, [r3, #0]
 81052f8:	4a44      	ldr	r2, [pc, #272]	; (810540c <HAL_DMA_Abort+0x5f8>)
 81052fa:	4293      	cmp	r3, r2
 81052fc:	d04f      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	4a43      	ldr	r2, [pc, #268]	; (8105410 <HAL_DMA_Abort+0x5fc>)
 8105304:	4293      	cmp	r3, r2
 8105306:	d04a      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	4a41      	ldr	r2, [pc, #260]	; (8105414 <HAL_DMA_Abort+0x600>)
 810530e:	4293      	cmp	r3, r2
 8105310:	d045      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	681b      	ldr	r3, [r3, #0]
 8105316:	4a40      	ldr	r2, [pc, #256]	; (8105418 <HAL_DMA_Abort+0x604>)
 8105318:	4293      	cmp	r3, r2
 810531a:	d040      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	4a3e      	ldr	r2, [pc, #248]	; (810541c <HAL_DMA_Abort+0x608>)
 8105322:	4293      	cmp	r3, r2
 8105324:	d03b      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105326:	687b      	ldr	r3, [r7, #4]
 8105328:	681b      	ldr	r3, [r3, #0]
 810532a:	4a3d      	ldr	r2, [pc, #244]	; (8105420 <HAL_DMA_Abort+0x60c>)
 810532c:	4293      	cmp	r3, r2
 810532e:	d036      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105330:	687b      	ldr	r3, [r7, #4]
 8105332:	681b      	ldr	r3, [r3, #0]
 8105334:	4a3b      	ldr	r2, [pc, #236]	; (8105424 <HAL_DMA_Abort+0x610>)
 8105336:	4293      	cmp	r3, r2
 8105338:	d031      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	681b      	ldr	r3, [r3, #0]
 810533e:	4a3a      	ldr	r2, [pc, #232]	; (8105428 <HAL_DMA_Abort+0x614>)
 8105340:	4293      	cmp	r3, r2
 8105342:	d02c      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	681b      	ldr	r3, [r3, #0]
 8105348:	4a38      	ldr	r2, [pc, #224]	; (810542c <HAL_DMA_Abort+0x618>)
 810534a:	4293      	cmp	r3, r2
 810534c:	d027      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	681b      	ldr	r3, [r3, #0]
 8105352:	4a37      	ldr	r2, [pc, #220]	; (8105430 <HAL_DMA_Abort+0x61c>)
 8105354:	4293      	cmp	r3, r2
 8105356:	d022      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105358:	687b      	ldr	r3, [r7, #4]
 810535a:	681b      	ldr	r3, [r3, #0]
 810535c:	4a35      	ldr	r2, [pc, #212]	; (8105434 <HAL_DMA_Abort+0x620>)
 810535e:	4293      	cmp	r3, r2
 8105360:	d01d      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105362:	687b      	ldr	r3, [r7, #4]
 8105364:	681b      	ldr	r3, [r3, #0]
 8105366:	4a34      	ldr	r2, [pc, #208]	; (8105438 <HAL_DMA_Abort+0x624>)
 8105368:	4293      	cmp	r3, r2
 810536a:	d018      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	681b      	ldr	r3, [r3, #0]
 8105370:	4a32      	ldr	r2, [pc, #200]	; (810543c <HAL_DMA_Abort+0x628>)
 8105372:	4293      	cmp	r3, r2
 8105374:	d013      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105376:	687b      	ldr	r3, [r7, #4]
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	4a31      	ldr	r2, [pc, #196]	; (8105440 <HAL_DMA_Abort+0x62c>)
 810537c:	4293      	cmp	r3, r2
 810537e:	d00e      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105380:	687b      	ldr	r3, [r7, #4]
 8105382:	681b      	ldr	r3, [r3, #0]
 8105384:	4a2f      	ldr	r2, [pc, #188]	; (8105444 <HAL_DMA_Abort+0x630>)
 8105386:	4293      	cmp	r3, r2
 8105388:	d009      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	681b      	ldr	r3, [r3, #0]
 810538e:	4a2e      	ldr	r2, [pc, #184]	; (8105448 <HAL_DMA_Abort+0x634>)
 8105390:	4293      	cmp	r3, r2
 8105392:	d004      	beq.n	810539e <HAL_DMA_Abort+0x58a>
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	681b      	ldr	r3, [r3, #0]
 8105398:	4a2c      	ldr	r2, [pc, #176]	; (810544c <HAL_DMA_Abort+0x638>)
 810539a:	4293      	cmp	r3, r2
 810539c:	d101      	bne.n	81053a2 <HAL_DMA_Abort+0x58e>
 810539e:	2301      	movs	r3, #1
 81053a0:	e000      	b.n	81053a4 <HAL_DMA_Abort+0x590>
 81053a2:	2300      	movs	r3, #0
 81053a4:	2b00      	cmp	r3, #0
 81053a6:	d015      	beq.n	81053d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81053ac:	687a      	ldr	r2, [r7, #4]
 81053ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81053b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81053b2:	687b      	ldr	r3, [r7, #4]
 81053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81053b6:	2b00      	cmp	r3, #0
 81053b8:	d00c      	beq.n	81053d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81053be:	681a      	ldr	r2, [r3, #0]
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81053c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81053c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81053ce:	687a      	ldr	r2, [r7, #4]
 81053d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81053d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	2201      	movs	r2, #1
 81053d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	2200      	movs	r2, #0
 81053e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 81053e4:	2300      	movs	r3, #0
}
 81053e6:	4618      	mov	r0, r3
 81053e8:	3718      	adds	r7, #24
 81053ea:	46bd      	mov	sp, r7
 81053ec:	bd80      	pop	{r7, pc}
 81053ee:	bf00      	nop
 81053f0:	40020010 	.word	0x40020010
 81053f4:	40020028 	.word	0x40020028
 81053f8:	40020040 	.word	0x40020040
 81053fc:	40020058 	.word	0x40020058
 8105400:	40020070 	.word	0x40020070
 8105404:	40020088 	.word	0x40020088
 8105408:	400200a0 	.word	0x400200a0
 810540c:	400200b8 	.word	0x400200b8
 8105410:	40020410 	.word	0x40020410
 8105414:	40020428 	.word	0x40020428
 8105418:	40020440 	.word	0x40020440
 810541c:	40020458 	.word	0x40020458
 8105420:	40020470 	.word	0x40020470
 8105424:	40020488 	.word	0x40020488
 8105428:	400204a0 	.word	0x400204a0
 810542c:	400204b8 	.word	0x400204b8
 8105430:	58025408 	.word	0x58025408
 8105434:	5802541c 	.word	0x5802541c
 8105438:	58025430 	.word	0x58025430
 810543c:	58025444 	.word	0x58025444
 8105440:	58025458 	.word	0x58025458
 8105444:	5802546c 	.word	0x5802546c
 8105448:	58025480 	.word	0x58025480
 810544c:	58025494 	.word	0x58025494

08105450 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8105450:	b580      	push	{r7, lr}
 8105452:	b084      	sub	sp, #16
 8105454:	af00      	add	r7, sp, #0
 8105456:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	2b00      	cmp	r3, #0
 810545c:	d101      	bne.n	8105462 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810545e:	2301      	movs	r3, #1
 8105460:	e205      	b.n	810586e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105468:	b2db      	uxtb	r3, r3
 810546a:	2b02      	cmp	r3, #2
 810546c:	d004      	beq.n	8105478 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	2280      	movs	r2, #128	; 0x80
 8105472:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8105474:	2301      	movs	r3, #1
 8105476:	e1fa      	b.n	810586e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	4a8c      	ldr	r2, [pc, #560]	; (81056b0 <HAL_DMA_Abort_IT+0x260>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d04a      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	4a8b      	ldr	r2, [pc, #556]	; (81056b4 <HAL_DMA_Abort_IT+0x264>)
 8105488:	4293      	cmp	r3, r2
 810548a:	d045      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	4a89      	ldr	r2, [pc, #548]	; (81056b8 <HAL_DMA_Abort_IT+0x268>)
 8105492:	4293      	cmp	r3, r2
 8105494:	d040      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	4a88      	ldr	r2, [pc, #544]	; (81056bc <HAL_DMA_Abort_IT+0x26c>)
 810549c:	4293      	cmp	r3, r2
 810549e:	d03b      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	4a86      	ldr	r2, [pc, #536]	; (81056c0 <HAL_DMA_Abort_IT+0x270>)
 81054a6:	4293      	cmp	r3, r2
 81054a8:	d036      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	4a85      	ldr	r2, [pc, #532]	; (81056c4 <HAL_DMA_Abort_IT+0x274>)
 81054b0:	4293      	cmp	r3, r2
 81054b2:	d031      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	4a83      	ldr	r2, [pc, #524]	; (81056c8 <HAL_DMA_Abort_IT+0x278>)
 81054ba:	4293      	cmp	r3, r2
 81054bc:	d02c      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	4a82      	ldr	r2, [pc, #520]	; (81056cc <HAL_DMA_Abort_IT+0x27c>)
 81054c4:	4293      	cmp	r3, r2
 81054c6:	d027      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	4a80      	ldr	r2, [pc, #512]	; (81056d0 <HAL_DMA_Abort_IT+0x280>)
 81054ce:	4293      	cmp	r3, r2
 81054d0:	d022      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	681b      	ldr	r3, [r3, #0]
 81054d6:	4a7f      	ldr	r2, [pc, #508]	; (81056d4 <HAL_DMA_Abort_IT+0x284>)
 81054d8:	4293      	cmp	r3, r2
 81054da:	d01d      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	4a7d      	ldr	r2, [pc, #500]	; (81056d8 <HAL_DMA_Abort_IT+0x288>)
 81054e2:	4293      	cmp	r3, r2
 81054e4:	d018      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	4a7c      	ldr	r2, [pc, #496]	; (81056dc <HAL_DMA_Abort_IT+0x28c>)
 81054ec:	4293      	cmp	r3, r2
 81054ee:	d013      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	4a7a      	ldr	r2, [pc, #488]	; (81056e0 <HAL_DMA_Abort_IT+0x290>)
 81054f6:	4293      	cmp	r3, r2
 81054f8:	d00e      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	681b      	ldr	r3, [r3, #0]
 81054fe:	4a79      	ldr	r2, [pc, #484]	; (81056e4 <HAL_DMA_Abort_IT+0x294>)
 8105500:	4293      	cmp	r3, r2
 8105502:	d009      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 8105504:	687b      	ldr	r3, [r7, #4]
 8105506:	681b      	ldr	r3, [r3, #0]
 8105508:	4a77      	ldr	r2, [pc, #476]	; (81056e8 <HAL_DMA_Abort_IT+0x298>)
 810550a:	4293      	cmp	r3, r2
 810550c:	d004      	beq.n	8105518 <HAL_DMA_Abort_IT+0xc8>
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	4a76      	ldr	r2, [pc, #472]	; (81056ec <HAL_DMA_Abort_IT+0x29c>)
 8105514:	4293      	cmp	r3, r2
 8105516:	d101      	bne.n	810551c <HAL_DMA_Abort_IT+0xcc>
 8105518:	2301      	movs	r3, #1
 810551a:	e000      	b.n	810551e <HAL_DMA_Abort_IT+0xce>
 810551c:	2300      	movs	r3, #0
 810551e:	2b00      	cmp	r3, #0
 8105520:	d065      	beq.n	81055ee <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	2204      	movs	r2, #4
 8105526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	4a60      	ldr	r2, [pc, #384]	; (81056b0 <HAL_DMA_Abort_IT+0x260>)
 8105530:	4293      	cmp	r3, r2
 8105532:	d04a      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	4a5e      	ldr	r2, [pc, #376]	; (81056b4 <HAL_DMA_Abort_IT+0x264>)
 810553a:	4293      	cmp	r3, r2
 810553c:	d045      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	4a5d      	ldr	r2, [pc, #372]	; (81056b8 <HAL_DMA_Abort_IT+0x268>)
 8105544:	4293      	cmp	r3, r2
 8105546:	d040      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	681b      	ldr	r3, [r3, #0]
 810554c:	4a5b      	ldr	r2, [pc, #364]	; (81056bc <HAL_DMA_Abort_IT+0x26c>)
 810554e:	4293      	cmp	r3, r2
 8105550:	d03b      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	681b      	ldr	r3, [r3, #0]
 8105556:	4a5a      	ldr	r2, [pc, #360]	; (81056c0 <HAL_DMA_Abort_IT+0x270>)
 8105558:	4293      	cmp	r3, r2
 810555a:	d036      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	4a58      	ldr	r2, [pc, #352]	; (81056c4 <HAL_DMA_Abort_IT+0x274>)
 8105562:	4293      	cmp	r3, r2
 8105564:	d031      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	4a57      	ldr	r2, [pc, #348]	; (81056c8 <HAL_DMA_Abort_IT+0x278>)
 810556c:	4293      	cmp	r3, r2
 810556e:	d02c      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	4a55      	ldr	r2, [pc, #340]	; (81056cc <HAL_DMA_Abort_IT+0x27c>)
 8105576:	4293      	cmp	r3, r2
 8105578:	d027      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	4a54      	ldr	r2, [pc, #336]	; (81056d0 <HAL_DMA_Abort_IT+0x280>)
 8105580:	4293      	cmp	r3, r2
 8105582:	d022      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	4a52      	ldr	r2, [pc, #328]	; (81056d4 <HAL_DMA_Abort_IT+0x284>)
 810558a:	4293      	cmp	r3, r2
 810558c:	d01d      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	4a51      	ldr	r2, [pc, #324]	; (81056d8 <HAL_DMA_Abort_IT+0x288>)
 8105594:	4293      	cmp	r3, r2
 8105596:	d018      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	4a4f      	ldr	r2, [pc, #316]	; (81056dc <HAL_DMA_Abort_IT+0x28c>)
 810559e:	4293      	cmp	r3, r2
 81055a0:	d013      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	4a4e      	ldr	r2, [pc, #312]	; (81056e0 <HAL_DMA_Abort_IT+0x290>)
 81055a8:	4293      	cmp	r3, r2
 81055aa:	d00e      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	4a4c      	ldr	r2, [pc, #304]	; (81056e4 <HAL_DMA_Abort_IT+0x294>)
 81055b2:	4293      	cmp	r3, r2
 81055b4:	d009      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	4a4b      	ldr	r2, [pc, #300]	; (81056e8 <HAL_DMA_Abort_IT+0x298>)
 81055bc:	4293      	cmp	r3, r2
 81055be:	d004      	beq.n	81055ca <HAL_DMA_Abort_IT+0x17a>
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	4a49      	ldr	r2, [pc, #292]	; (81056ec <HAL_DMA_Abort_IT+0x29c>)
 81055c6:	4293      	cmp	r3, r2
 81055c8:	d108      	bne.n	81055dc <HAL_DMA_Abort_IT+0x18c>
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	681a      	ldr	r2, [r3, #0]
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	681b      	ldr	r3, [r3, #0]
 81055d4:	f022 0201 	bic.w	r2, r2, #1
 81055d8:	601a      	str	r2, [r3, #0]
 81055da:	e147      	b.n	810586c <HAL_DMA_Abort_IT+0x41c>
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	681a      	ldr	r2, [r3, #0]
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	681b      	ldr	r3, [r3, #0]
 81055e6:	f022 0201 	bic.w	r2, r2, #1
 81055ea:	601a      	str	r2, [r3, #0]
 81055ec:	e13e      	b.n	810586c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	681b      	ldr	r3, [r3, #0]
 81055f2:	681a      	ldr	r2, [r3, #0]
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	681b      	ldr	r3, [r3, #0]
 81055f8:	f022 020e 	bic.w	r2, r2, #14
 81055fc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81055fe:	687b      	ldr	r3, [r7, #4]
 8105600:	681b      	ldr	r3, [r3, #0]
 8105602:	4a2b      	ldr	r2, [pc, #172]	; (81056b0 <HAL_DMA_Abort_IT+0x260>)
 8105604:	4293      	cmp	r3, r2
 8105606:	d04a      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105608:	687b      	ldr	r3, [r7, #4]
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	4a29      	ldr	r2, [pc, #164]	; (81056b4 <HAL_DMA_Abort_IT+0x264>)
 810560e:	4293      	cmp	r3, r2
 8105610:	d045      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105612:	687b      	ldr	r3, [r7, #4]
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	4a28      	ldr	r2, [pc, #160]	; (81056b8 <HAL_DMA_Abort_IT+0x268>)
 8105618:	4293      	cmp	r3, r2
 810561a:	d040      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 810561c:	687b      	ldr	r3, [r7, #4]
 810561e:	681b      	ldr	r3, [r3, #0]
 8105620:	4a26      	ldr	r2, [pc, #152]	; (81056bc <HAL_DMA_Abort_IT+0x26c>)
 8105622:	4293      	cmp	r3, r2
 8105624:	d03b      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	4a25      	ldr	r2, [pc, #148]	; (81056c0 <HAL_DMA_Abort_IT+0x270>)
 810562c:	4293      	cmp	r3, r2
 810562e:	d036      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	4a23      	ldr	r2, [pc, #140]	; (81056c4 <HAL_DMA_Abort_IT+0x274>)
 8105636:	4293      	cmp	r3, r2
 8105638:	d031      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	4a22      	ldr	r2, [pc, #136]	; (81056c8 <HAL_DMA_Abort_IT+0x278>)
 8105640:	4293      	cmp	r3, r2
 8105642:	d02c      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	4a20      	ldr	r2, [pc, #128]	; (81056cc <HAL_DMA_Abort_IT+0x27c>)
 810564a:	4293      	cmp	r3, r2
 810564c:	d027      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	4a1f      	ldr	r2, [pc, #124]	; (81056d0 <HAL_DMA_Abort_IT+0x280>)
 8105654:	4293      	cmp	r3, r2
 8105656:	d022      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	4a1d      	ldr	r2, [pc, #116]	; (81056d4 <HAL_DMA_Abort_IT+0x284>)
 810565e:	4293      	cmp	r3, r2
 8105660:	d01d      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	681b      	ldr	r3, [r3, #0]
 8105666:	4a1c      	ldr	r2, [pc, #112]	; (81056d8 <HAL_DMA_Abort_IT+0x288>)
 8105668:	4293      	cmp	r3, r2
 810566a:	d018      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	681b      	ldr	r3, [r3, #0]
 8105670:	4a1a      	ldr	r2, [pc, #104]	; (81056dc <HAL_DMA_Abort_IT+0x28c>)
 8105672:	4293      	cmp	r3, r2
 8105674:	d013      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	4a19      	ldr	r2, [pc, #100]	; (81056e0 <HAL_DMA_Abort_IT+0x290>)
 810567c:	4293      	cmp	r3, r2
 810567e:	d00e      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	4a17      	ldr	r2, [pc, #92]	; (81056e4 <HAL_DMA_Abort_IT+0x294>)
 8105686:	4293      	cmp	r3, r2
 8105688:	d009      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	4a16      	ldr	r2, [pc, #88]	; (81056e8 <HAL_DMA_Abort_IT+0x298>)
 8105690:	4293      	cmp	r3, r2
 8105692:	d004      	beq.n	810569e <HAL_DMA_Abort_IT+0x24e>
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	4a14      	ldr	r2, [pc, #80]	; (81056ec <HAL_DMA_Abort_IT+0x29c>)
 810569a:	4293      	cmp	r3, r2
 810569c:	d128      	bne.n	81056f0 <HAL_DMA_Abort_IT+0x2a0>
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	681a      	ldr	r2, [r3, #0]
 81056a4:	687b      	ldr	r3, [r7, #4]
 81056a6:	681b      	ldr	r3, [r3, #0]
 81056a8:	f022 0201 	bic.w	r2, r2, #1
 81056ac:	601a      	str	r2, [r3, #0]
 81056ae:	e027      	b.n	8105700 <HAL_DMA_Abort_IT+0x2b0>
 81056b0:	40020010 	.word	0x40020010
 81056b4:	40020028 	.word	0x40020028
 81056b8:	40020040 	.word	0x40020040
 81056bc:	40020058 	.word	0x40020058
 81056c0:	40020070 	.word	0x40020070
 81056c4:	40020088 	.word	0x40020088
 81056c8:	400200a0 	.word	0x400200a0
 81056cc:	400200b8 	.word	0x400200b8
 81056d0:	40020410 	.word	0x40020410
 81056d4:	40020428 	.word	0x40020428
 81056d8:	40020440 	.word	0x40020440
 81056dc:	40020458 	.word	0x40020458
 81056e0:	40020470 	.word	0x40020470
 81056e4:	40020488 	.word	0x40020488
 81056e8:	400204a0 	.word	0x400204a0
 81056ec:	400204b8 	.word	0x400204b8
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	681b      	ldr	r3, [r3, #0]
 81056f4:	681a      	ldr	r2, [r3, #0]
 81056f6:	687b      	ldr	r3, [r7, #4]
 81056f8:	681b      	ldr	r3, [r3, #0]
 81056fa:	f022 0201 	bic.w	r2, r2, #1
 81056fe:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	681b      	ldr	r3, [r3, #0]
 8105704:	4a5c      	ldr	r2, [pc, #368]	; (8105878 <HAL_DMA_Abort_IT+0x428>)
 8105706:	4293      	cmp	r3, r2
 8105708:	d072      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 810570a:	687b      	ldr	r3, [r7, #4]
 810570c:	681b      	ldr	r3, [r3, #0]
 810570e:	4a5b      	ldr	r2, [pc, #364]	; (810587c <HAL_DMA_Abort_IT+0x42c>)
 8105710:	4293      	cmp	r3, r2
 8105712:	d06d      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	681b      	ldr	r3, [r3, #0]
 8105718:	4a59      	ldr	r2, [pc, #356]	; (8105880 <HAL_DMA_Abort_IT+0x430>)
 810571a:	4293      	cmp	r3, r2
 810571c:	d068      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	681b      	ldr	r3, [r3, #0]
 8105722:	4a58      	ldr	r2, [pc, #352]	; (8105884 <HAL_DMA_Abort_IT+0x434>)
 8105724:	4293      	cmp	r3, r2
 8105726:	d063      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	681b      	ldr	r3, [r3, #0]
 810572c:	4a56      	ldr	r2, [pc, #344]	; (8105888 <HAL_DMA_Abort_IT+0x438>)
 810572e:	4293      	cmp	r3, r2
 8105730:	d05e      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	681b      	ldr	r3, [r3, #0]
 8105736:	4a55      	ldr	r2, [pc, #340]	; (810588c <HAL_DMA_Abort_IT+0x43c>)
 8105738:	4293      	cmp	r3, r2
 810573a:	d059      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	4a53      	ldr	r2, [pc, #332]	; (8105890 <HAL_DMA_Abort_IT+0x440>)
 8105742:	4293      	cmp	r3, r2
 8105744:	d054      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105746:	687b      	ldr	r3, [r7, #4]
 8105748:	681b      	ldr	r3, [r3, #0]
 810574a:	4a52      	ldr	r2, [pc, #328]	; (8105894 <HAL_DMA_Abort_IT+0x444>)
 810574c:	4293      	cmp	r3, r2
 810574e:	d04f      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105750:	687b      	ldr	r3, [r7, #4]
 8105752:	681b      	ldr	r3, [r3, #0]
 8105754:	4a50      	ldr	r2, [pc, #320]	; (8105898 <HAL_DMA_Abort_IT+0x448>)
 8105756:	4293      	cmp	r3, r2
 8105758:	d04a      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 810575a:	687b      	ldr	r3, [r7, #4]
 810575c:	681b      	ldr	r3, [r3, #0]
 810575e:	4a4f      	ldr	r2, [pc, #316]	; (810589c <HAL_DMA_Abort_IT+0x44c>)
 8105760:	4293      	cmp	r3, r2
 8105762:	d045      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	4a4d      	ldr	r2, [pc, #308]	; (81058a0 <HAL_DMA_Abort_IT+0x450>)
 810576a:	4293      	cmp	r3, r2
 810576c:	d040      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 810576e:	687b      	ldr	r3, [r7, #4]
 8105770:	681b      	ldr	r3, [r3, #0]
 8105772:	4a4c      	ldr	r2, [pc, #304]	; (81058a4 <HAL_DMA_Abort_IT+0x454>)
 8105774:	4293      	cmp	r3, r2
 8105776:	d03b      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105778:	687b      	ldr	r3, [r7, #4]
 810577a:	681b      	ldr	r3, [r3, #0]
 810577c:	4a4a      	ldr	r2, [pc, #296]	; (81058a8 <HAL_DMA_Abort_IT+0x458>)
 810577e:	4293      	cmp	r3, r2
 8105780:	d036      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	4a49      	ldr	r2, [pc, #292]	; (81058ac <HAL_DMA_Abort_IT+0x45c>)
 8105788:	4293      	cmp	r3, r2
 810578a:	d031      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	681b      	ldr	r3, [r3, #0]
 8105790:	4a47      	ldr	r2, [pc, #284]	; (81058b0 <HAL_DMA_Abort_IT+0x460>)
 8105792:	4293      	cmp	r3, r2
 8105794:	d02c      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	681b      	ldr	r3, [r3, #0]
 810579a:	4a46      	ldr	r2, [pc, #280]	; (81058b4 <HAL_DMA_Abort_IT+0x464>)
 810579c:	4293      	cmp	r3, r2
 810579e:	d027      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	4a44      	ldr	r2, [pc, #272]	; (81058b8 <HAL_DMA_Abort_IT+0x468>)
 81057a6:	4293      	cmp	r3, r2
 81057a8:	d022      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	4a43      	ldr	r2, [pc, #268]	; (81058bc <HAL_DMA_Abort_IT+0x46c>)
 81057b0:	4293      	cmp	r3, r2
 81057b2:	d01d      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	4a41      	ldr	r2, [pc, #260]	; (81058c0 <HAL_DMA_Abort_IT+0x470>)
 81057ba:	4293      	cmp	r3, r2
 81057bc:	d018      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 81057be:	687b      	ldr	r3, [r7, #4]
 81057c0:	681b      	ldr	r3, [r3, #0]
 81057c2:	4a40      	ldr	r2, [pc, #256]	; (81058c4 <HAL_DMA_Abort_IT+0x474>)
 81057c4:	4293      	cmp	r3, r2
 81057c6:	d013      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 81057c8:	687b      	ldr	r3, [r7, #4]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	4a3e      	ldr	r2, [pc, #248]	; (81058c8 <HAL_DMA_Abort_IT+0x478>)
 81057ce:	4293      	cmp	r3, r2
 81057d0:	d00e      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 81057d2:	687b      	ldr	r3, [r7, #4]
 81057d4:	681b      	ldr	r3, [r3, #0]
 81057d6:	4a3d      	ldr	r2, [pc, #244]	; (81058cc <HAL_DMA_Abort_IT+0x47c>)
 81057d8:	4293      	cmp	r3, r2
 81057da:	d009      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	4a3b      	ldr	r2, [pc, #236]	; (81058d0 <HAL_DMA_Abort_IT+0x480>)
 81057e2:	4293      	cmp	r3, r2
 81057e4:	d004      	beq.n	81057f0 <HAL_DMA_Abort_IT+0x3a0>
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	681b      	ldr	r3, [r3, #0]
 81057ea:	4a3a      	ldr	r2, [pc, #232]	; (81058d4 <HAL_DMA_Abort_IT+0x484>)
 81057ec:	4293      	cmp	r3, r2
 81057ee:	d101      	bne.n	81057f4 <HAL_DMA_Abort_IT+0x3a4>
 81057f0:	2301      	movs	r3, #1
 81057f2:	e000      	b.n	81057f6 <HAL_DMA_Abort_IT+0x3a6>
 81057f4:	2300      	movs	r3, #0
 81057f6:	2b00      	cmp	r3, #0
 81057f8:	d028      	beq.n	810584c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81057fe:	681a      	ldr	r2, [r3, #0]
 8105800:	687b      	ldr	r3, [r7, #4]
 8105802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105808:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810580a:	687b      	ldr	r3, [r7, #4]
 810580c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810580e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105814:	f003 031f 	and.w	r3, r3, #31
 8105818:	2201      	movs	r2, #1
 810581a:	409a      	lsls	r2, r3
 810581c:	68fb      	ldr	r3, [r7, #12]
 810581e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105824:	687a      	ldr	r2, [r7, #4]
 8105826:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105828:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810582e:	2b00      	cmp	r3, #0
 8105830:	d00c      	beq.n	810584c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105836:	681a      	ldr	r2, [r3, #0]
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810583c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105840:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105846:	687a      	ldr	r2, [r7, #4]
 8105848:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810584a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	2201      	movs	r2, #1
 8105850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	2200      	movs	r2, #0
 8105858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810585c:	687b      	ldr	r3, [r7, #4]
 810585e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105860:	2b00      	cmp	r3, #0
 8105862:	d003      	beq.n	810586c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105868:	6878      	ldr	r0, [r7, #4]
 810586a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810586c:	2300      	movs	r3, #0
}
 810586e:	4618      	mov	r0, r3
 8105870:	3710      	adds	r7, #16
 8105872:	46bd      	mov	sp, r7
 8105874:	bd80      	pop	{r7, pc}
 8105876:	bf00      	nop
 8105878:	40020010 	.word	0x40020010
 810587c:	40020028 	.word	0x40020028
 8105880:	40020040 	.word	0x40020040
 8105884:	40020058 	.word	0x40020058
 8105888:	40020070 	.word	0x40020070
 810588c:	40020088 	.word	0x40020088
 8105890:	400200a0 	.word	0x400200a0
 8105894:	400200b8 	.word	0x400200b8
 8105898:	40020410 	.word	0x40020410
 810589c:	40020428 	.word	0x40020428
 81058a0:	40020440 	.word	0x40020440
 81058a4:	40020458 	.word	0x40020458
 81058a8:	40020470 	.word	0x40020470
 81058ac:	40020488 	.word	0x40020488
 81058b0:	400204a0 	.word	0x400204a0
 81058b4:	400204b8 	.word	0x400204b8
 81058b8:	58025408 	.word	0x58025408
 81058bc:	5802541c 	.word	0x5802541c
 81058c0:	58025430 	.word	0x58025430
 81058c4:	58025444 	.word	0x58025444
 81058c8:	58025458 	.word	0x58025458
 81058cc:	5802546c 	.word	0x5802546c
 81058d0:	58025480 	.word	0x58025480
 81058d4:	58025494 	.word	0x58025494

081058d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81058d8:	b480      	push	{r7}
 81058da:	b089      	sub	sp, #36	; 0x24
 81058dc:	af00      	add	r7, sp, #0
 81058de:	6078      	str	r0, [r7, #4]
 81058e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81058e2:	2300      	movs	r3, #0
 81058e4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81058e6:	4b89      	ldr	r3, [pc, #548]	; (8105b0c <HAL_GPIO_Init+0x234>)
 81058e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81058ea:	e194      	b.n	8105c16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81058ec:	683b      	ldr	r3, [r7, #0]
 81058ee:	681a      	ldr	r2, [r3, #0]
 81058f0:	2101      	movs	r1, #1
 81058f2:	69fb      	ldr	r3, [r7, #28]
 81058f4:	fa01 f303 	lsl.w	r3, r1, r3
 81058f8:	4013      	ands	r3, r2
 81058fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81058fc:	693b      	ldr	r3, [r7, #16]
 81058fe:	2b00      	cmp	r3, #0
 8105900:	f000 8186 	beq.w	8105c10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8105904:	683b      	ldr	r3, [r7, #0]
 8105906:	685b      	ldr	r3, [r3, #4]
 8105908:	f003 0303 	and.w	r3, r3, #3
 810590c:	2b01      	cmp	r3, #1
 810590e:	d005      	beq.n	810591c <HAL_GPIO_Init+0x44>
 8105910:	683b      	ldr	r3, [r7, #0]
 8105912:	685b      	ldr	r3, [r3, #4]
 8105914:	f003 0303 	and.w	r3, r3, #3
 8105918:	2b02      	cmp	r3, #2
 810591a:	d130      	bne.n	810597e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	689b      	ldr	r3, [r3, #8]
 8105920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105922:	69fb      	ldr	r3, [r7, #28]
 8105924:	005b      	lsls	r3, r3, #1
 8105926:	2203      	movs	r2, #3
 8105928:	fa02 f303 	lsl.w	r3, r2, r3
 810592c:	43db      	mvns	r3, r3
 810592e:	69ba      	ldr	r2, [r7, #24]
 8105930:	4013      	ands	r3, r2
 8105932:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105934:	683b      	ldr	r3, [r7, #0]
 8105936:	68da      	ldr	r2, [r3, #12]
 8105938:	69fb      	ldr	r3, [r7, #28]
 810593a:	005b      	lsls	r3, r3, #1
 810593c:	fa02 f303 	lsl.w	r3, r2, r3
 8105940:	69ba      	ldr	r2, [r7, #24]
 8105942:	4313      	orrs	r3, r2
 8105944:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	69ba      	ldr	r2, [r7, #24]
 810594a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	685b      	ldr	r3, [r3, #4]
 8105950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105952:	2201      	movs	r2, #1
 8105954:	69fb      	ldr	r3, [r7, #28]
 8105956:	fa02 f303 	lsl.w	r3, r2, r3
 810595a:	43db      	mvns	r3, r3
 810595c:	69ba      	ldr	r2, [r7, #24]
 810595e:	4013      	ands	r3, r2
 8105960:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8105962:	683b      	ldr	r3, [r7, #0]
 8105964:	685b      	ldr	r3, [r3, #4]
 8105966:	091b      	lsrs	r3, r3, #4
 8105968:	f003 0201 	and.w	r2, r3, #1
 810596c:	69fb      	ldr	r3, [r7, #28]
 810596e:	fa02 f303 	lsl.w	r3, r2, r3
 8105972:	69ba      	ldr	r2, [r7, #24]
 8105974:	4313      	orrs	r3, r2
 8105976:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	69ba      	ldr	r2, [r7, #24]
 810597c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810597e:	683b      	ldr	r3, [r7, #0]
 8105980:	685b      	ldr	r3, [r3, #4]
 8105982:	f003 0303 	and.w	r3, r3, #3
 8105986:	2b03      	cmp	r3, #3
 8105988:	d017      	beq.n	81059ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	68db      	ldr	r3, [r3, #12]
 810598e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105990:	69fb      	ldr	r3, [r7, #28]
 8105992:	005b      	lsls	r3, r3, #1
 8105994:	2203      	movs	r2, #3
 8105996:	fa02 f303 	lsl.w	r3, r2, r3
 810599a:	43db      	mvns	r3, r3
 810599c:	69ba      	ldr	r2, [r7, #24]
 810599e:	4013      	ands	r3, r2
 81059a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81059a2:	683b      	ldr	r3, [r7, #0]
 81059a4:	689a      	ldr	r2, [r3, #8]
 81059a6:	69fb      	ldr	r3, [r7, #28]
 81059a8:	005b      	lsls	r3, r3, #1
 81059aa:	fa02 f303 	lsl.w	r3, r2, r3
 81059ae:	69ba      	ldr	r2, [r7, #24]
 81059b0:	4313      	orrs	r3, r2
 81059b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	69ba      	ldr	r2, [r7, #24]
 81059b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81059ba:	683b      	ldr	r3, [r7, #0]
 81059bc:	685b      	ldr	r3, [r3, #4]
 81059be:	f003 0303 	and.w	r3, r3, #3
 81059c2:	2b02      	cmp	r3, #2
 81059c4:	d123      	bne.n	8105a0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81059c6:	69fb      	ldr	r3, [r7, #28]
 81059c8:	08da      	lsrs	r2, r3, #3
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	3208      	adds	r2, #8
 81059ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81059d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81059d4:	69fb      	ldr	r3, [r7, #28]
 81059d6:	f003 0307 	and.w	r3, r3, #7
 81059da:	009b      	lsls	r3, r3, #2
 81059dc:	220f      	movs	r2, #15
 81059de:	fa02 f303 	lsl.w	r3, r2, r3
 81059e2:	43db      	mvns	r3, r3
 81059e4:	69ba      	ldr	r2, [r7, #24]
 81059e6:	4013      	ands	r3, r2
 81059e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81059ea:	683b      	ldr	r3, [r7, #0]
 81059ec:	691a      	ldr	r2, [r3, #16]
 81059ee:	69fb      	ldr	r3, [r7, #28]
 81059f0:	f003 0307 	and.w	r3, r3, #7
 81059f4:	009b      	lsls	r3, r3, #2
 81059f6:	fa02 f303 	lsl.w	r3, r2, r3
 81059fa:	69ba      	ldr	r2, [r7, #24]
 81059fc:	4313      	orrs	r3, r2
 81059fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105a00:	69fb      	ldr	r3, [r7, #28]
 8105a02:	08da      	lsrs	r2, r3, #3
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	3208      	adds	r2, #8
 8105a08:	69b9      	ldr	r1, [r7, #24]
 8105a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105a14:	69fb      	ldr	r3, [r7, #28]
 8105a16:	005b      	lsls	r3, r3, #1
 8105a18:	2203      	movs	r2, #3
 8105a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8105a1e:	43db      	mvns	r3, r3
 8105a20:	69ba      	ldr	r2, [r7, #24]
 8105a22:	4013      	ands	r3, r2
 8105a24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105a26:	683b      	ldr	r3, [r7, #0]
 8105a28:	685b      	ldr	r3, [r3, #4]
 8105a2a:	f003 0203 	and.w	r2, r3, #3
 8105a2e:	69fb      	ldr	r3, [r7, #28]
 8105a30:	005b      	lsls	r3, r3, #1
 8105a32:	fa02 f303 	lsl.w	r3, r2, r3
 8105a36:	69ba      	ldr	r2, [r7, #24]
 8105a38:	4313      	orrs	r3, r2
 8105a3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105a3c:	687b      	ldr	r3, [r7, #4]
 8105a3e:	69ba      	ldr	r2, [r7, #24]
 8105a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105a42:	683b      	ldr	r3, [r7, #0]
 8105a44:	685b      	ldr	r3, [r3, #4]
 8105a46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8105a4a:	2b00      	cmp	r3, #0
 8105a4c:	f000 80e0 	beq.w	8105c10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105a50:	4b2f      	ldr	r3, [pc, #188]	; (8105b10 <HAL_GPIO_Init+0x238>)
 8105a52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105a56:	4a2e      	ldr	r2, [pc, #184]	; (8105b10 <HAL_GPIO_Init+0x238>)
 8105a58:	f043 0302 	orr.w	r3, r3, #2
 8105a5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8105a60:	4b2b      	ldr	r3, [pc, #172]	; (8105b10 <HAL_GPIO_Init+0x238>)
 8105a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105a66:	f003 0302 	and.w	r3, r3, #2
 8105a6a:	60fb      	str	r3, [r7, #12]
 8105a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105a6e:	4a29      	ldr	r2, [pc, #164]	; (8105b14 <HAL_GPIO_Init+0x23c>)
 8105a70:	69fb      	ldr	r3, [r7, #28]
 8105a72:	089b      	lsrs	r3, r3, #2
 8105a74:	3302      	adds	r3, #2
 8105a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105a7c:	69fb      	ldr	r3, [r7, #28]
 8105a7e:	f003 0303 	and.w	r3, r3, #3
 8105a82:	009b      	lsls	r3, r3, #2
 8105a84:	220f      	movs	r2, #15
 8105a86:	fa02 f303 	lsl.w	r3, r2, r3
 8105a8a:	43db      	mvns	r3, r3
 8105a8c:	69ba      	ldr	r2, [r7, #24]
 8105a8e:	4013      	ands	r3, r2
 8105a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	4a20      	ldr	r2, [pc, #128]	; (8105b18 <HAL_GPIO_Init+0x240>)
 8105a96:	4293      	cmp	r3, r2
 8105a98:	d052      	beq.n	8105b40 <HAL_GPIO_Init+0x268>
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	4a1f      	ldr	r2, [pc, #124]	; (8105b1c <HAL_GPIO_Init+0x244>)
 8105a9e:	4293      	cmp	r3, r2
 8105aa0:	d031      	beq.n	8105b06 <HAL_GPIO_Init+0x22e>
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	4a1e      	ldr	r2, [pc, #120]	; (8105b20 <HAL_GPIO_Init+0x248>)
 8105aa6:	4293      	cmp	r3, r2
 8105aa8:	d02b      	beq.n	8105b02 <HAL_GPIO_Init+0x22a>
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	4a1d      	ldr	r2, [pc, #116]	; (8105b24 <HAL_GPIO_Init+0x24c>)
 8105aae:	4293      	cmp	r3, r2
 8105ab0:	d025      	beq.n	8105afe <HAL_GPIO_Init+0x226>
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	4a1c      	ldr	r2, [pc, #112]	; (8105b28 <HAL_GPIO_Init+0x250>)
 8105ab6:	4293      	cmp	r3, r2
 8105ab8:	d01f      	beq.n	8105afa <HAL_GPIO_Init+0x222>
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	4a1b      	ldr	r2, [pc, #108]	; (8105b2c <HAL_GPIO_Init+0x254>)
 8105abe:	4293      	cmp	r3, r2
 8105ac0:	d019      	beq.n	8105af6 <HAL_GPIO_Init+0x21e>
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	4a1a      	ldr	r2, [pc, #104]	; (8105b30 <HAL_GPIO_Init+0x258>)
 8105ac6:	4293      	cmp	r3, r2
 8105ac8:	d013      	beq.n	8105af2 <HAL_GPIO_Init+0x21a>
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	4a19      	ldr	r2, [pc, #100]	; (8105b34 <HAL_GPIO_Init+0x25c>)
 8105ace:	4293      	cmp	r3, r2
 8105ad0:	d00d      	beq.n	8105aee <HAL_GPIO_Init+0x216>
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	4a18      	ldr	r2, [pc, #96]	; (8105b38 <HAL_GPIO_Init+0x260>)
 8105ad6:	4293      	cmp	r3, r2
 8105ad8:	d007      	beq.n	8105aea <HAL_GPIO_Init+0x212>
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	4a17      	ldr	r2, [pc, #92]	; (8105b3c <HAL_GPIO_Init+0x264>)
 8105ade:	4293      	cmp	r3, r2
 8105ae0:	d101      	bne.n	8105ae6 <HAL_GPIO_Init+0x20e>
 8105ae2:	2309      	movs	r3, #9
 8105ae4:	e02d      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105ae6:	230a      	movs	r3, #10
 8105ae8:	e02b      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105aea:	2308      	movs	r3, #8
 8105aec:	e029      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105aee:	2307      	movs	r3, #7
 8105af0:	e027      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105af2:	2306      	movs	r3, #6
 8105af4:	e025      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105af6:	2305      	movs	r3, #5
 8105af8:	e023      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105afa:	2304      	movs	r3, #4
 8105afc:	e021      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105afe:	2303      	movs	r3, #3
 8105b00:	e01f      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105b02:	2302      	movs	r3, #2
 8105b04:	e01d      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105b06:	2301      	movs	r3, #1
 8105b08:	e01b      	b.n	8105b42 <HAL_GPIO_Init+0x26a>
 8105b0a:	bf00      	nop
 8105b0c:	580000c0 	.word	0x580000c0
 8105b10:	58024400 	.word	0x58024400
 8105b14:	58000400 	.word	0x58000400
 8105b18:	58020000 	.word	0x58020000
 8105b1c:	58020400 	.word	0x58020400
 8105b20:	58020800 	.word	0x58020800
 8105b24:	58020c00 	.word	0x58020c00
 8105b28:	58021000 	.word	0x58021000
 8105b2c:	58021400 	.word	0x58021400
 8105b30:	58021800 	.word	0x58021800
 8105b34:	58021c00 	.word	0x58021c00
 8105b38:	58022000 	.word	0x58022000
 8105b3c:	58022400 	.word	0x58022400
 8105b40:	2300      	movs	r3, #0
 8105b42:	69fa      	ldr	r2, [r7, #28]
 8105b44:	f002 0203 	and.w	r2, r2, #3
 8105b48:	0092      	lsls	r2, r2, #2
 8105b4a:	4093      	lsls	r3, r2
 8105b4c:	69ba      	ldr	r2, [r7, #24]
 8105b4e:	4313      	orrs	r3, r2
 8105b50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105b52:	4938      	ldr	r1, [pc, #224]	; (8105c34 <HAL_GPIO_Init+0x35c>)
 8105b54:	69fb      	ldr	r3, [r7, #28]
 8105b56:	089b      	lsrs	r3, r3, #2
 8105b58:	3302      	adds	r3, #2
 8105b5a:	69ba      	ldr	r2, [r7, #24]
 8105b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105b64:	681b      	ldr	r3, [r3, #0]
 8105b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b68:	693b      	ldr	r3, [r7, #16]
 8105b6a:	43db      	mvns	r3, r3
 8105b6c:	69ba      	ldr	r2, [r7, #24]
 8105b6e:	4013      	ands	r3, r2
 8105b70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105b72:	683b      	ldr	r3, [r7, #0]
 8105b74:	685b      	ldr	r3, [r3, #4]
 8105b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105b7a:	2b00      	cmp	r3, #0
 8105b7c:	d003      	beq.n	8105b86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8105b7e:	69ba      	ldr	r2, [r7, #24]
 8105b80:	693b      	ldr	r3, [r7, #16]
 8105b82:	4313      	orrs	r3, r2
 8105b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105b8a:	69bb      	ldr	r3, [r7, #24]
 8105b8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105b92:	685b      	ldr	r3, [r3, #4]
 8105b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b96:	693b      	ldr	r3, [r7, #16]
 8105b98:	43db      	mvns	r3, r3
 8105b9a:	69ba      	ldr	r2, [r7, #24]
 8105b9c:	4013      	ands	r3, r2
 8105b9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105ba0:	683b      	ldr	r3, [r7, #0]
 8105ba2:	685b      	ldr	r3, [r3, #4]
 8105ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105ba8:	2b00      	cmp	r3, #0
 8105baa:	d003      	beq.n	8105bb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8105bac:	69ba      	ldr	r2, [r7, #24]
 8105bae:	693b      	ldr	r3, [r7, #16]
 8105bb0:	4313      	orrs	r3, r2
 8105bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105bb8:	69bb      	ldr	r3, [r7, #24]
 8105bba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105bbc:	697b      	ldr	r3, [r7, #20]
 8105bbe:	685b      	ldr	r3, [r3, #4]
 8105bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105bc2:	693b      	ldr	r3, [r7, #16]
 8105bc4:	43db      	mvns	r3, r3
 8105bc6:	69ba      	ldr	r2, [r7, #24]
 8105bc8:	4013      	ands	r3, r2
 8105bca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105bcc:	683b      	ldr	r3, [r7, #0]
 8105bce:	685b      	ldr	r3, [r3, #4]
 8105bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105bd4:	2b00      	cmp	r3, #0
 8105bd6:	d003      	beq.n	8105be0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105bd8:	69ba      	ldr	r2, [r7, #24]
 8105bda:	693b      	ldr	r3, [r7, #16]
 8105bdc:	4313      	orrs	r3, r2
 8105bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105be0:	697b      	ldr	r3, [r7, #20]
 8105be2:	69ba      	ldr	r2, [r7, #24]
 8105be4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105be6:	697b      	ldr	r3, [r7, #20]
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105bec:	693b      	ldr	r3, [r7, #16]
 8105bee:	43db      	mvns	r3, r3
 8105bf0:	69ba      	ldr	r2, [r7, #24]
 8105bf2:	4013      	ands	r3, r2
 8105bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8105bf6:	683b      	ldr	r3, [r7, #0]
 8105bf8:	685b      	ldr	r3, [r3, #4]
 8105bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105bfe:	2b00      	cmp	r3, #0
 8105c00:	d003      	beq.n	8105c0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8105c02:	69ba      	ldr	r2, [r7, #24]
 8105c04:	693b      	ldr	r3, [r7, #16]
 8105c06:	4313      	orrs	r3, r2
 8105c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105c0a:	697b      	ldr	r3, [r7, #20]
 8105c0c:	69ba      	ldr	r2, [r7, #24]
 8105c0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105c10:	69fb      	ldr	r3, [r7, #28]
 8105c12:	3301      	adds	r3, #1
 8105c14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105c16:	683b      	ldr	r3, [r7, #0]
 8105c18:	681a      	ldr	r2, [r3, #0]
 8105c1a:	69fb      	ldr	r3, [r7, #28]
 8105c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8105c20:	2b00      	cmp	r3, #0
 8105c22:	f47f ae63 	bne.w	81058ec <HAL_GPIO_Init+0x14>
  }
}
 8105c26:	bf00      	nop
 8105c28:	bf00      	nop
 8105c2a:	3724      	adds	r7, #36	; 0x24
 8105c2c:	46bd      	mov	sp, r7
 8105c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c32:	4770      	bx	lr
 8105c34:	58000400 	.word	0x58000400

08105c38 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105c38:	b480      	push	{r7}
 8105c3a:	b083      	sub	sp, #12
 8105c3c:	af00      	add	r7, sp, #0
 8105c3e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105c40:	4b05      	ldr	r3, [pc, #20]	; (8105c58 <HAL_HSEM_ActivateNotification+0x20>)
 8105c42:	681a      	ldr	r2, [r3, #0]
 8105c44:	4904      	ldr	r1, [pc, #16]	; (8105c58 <HAL_HSEM_ActivateNotification+0x20>)
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	4313      	orrs	r3, r2
 8105c4a:	600b      	str	r3, [r1, #0]
#endif
}
 8105c4c:	bf00      	nop
 8105c4e:	370c      	adds	r7, #12
 8105c50:	46bd      	mov	sp, r7
 8105c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c56:	4770      	bx	lr
 8105c58:	58026510 	.word	0x58026510

08105c5c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105c5c:	b580      	push	{r7, lr}
 8105c5e:	b084      	sub	sp, #16
 8105c60:	af00      	add	r7, sp, #0
 8105c62:	60f8      	str	r0, [r7, #12]
 8105c64:	460b      	mov	r3, r1
 8105c66:	607a      	str	r2, [r7, #4]
 8105c68:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105c6a:	4b37      	ldr	r3, [pc, #220]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c6c:	681b      	ldr	r3, [r3, #0]
 8105c6e:	f023 0201 	bic.w	r2, r3, #1
 8105c72:	4935      	ldr	r1, [pc, #212]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c74:	68fb      	ldr	r3, [r7, #12]
 8105c76:	4313      	orrs	r3, r2
 8105c78:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	2b00      	cmp	r3, #0
 8105c7e:	d123      	bne.n	8105cc8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105c80:	f7ff f8b4 	bl	8104dec <HAL_GetCurrentCPUID>
 8105c84:	4603      	mov	r3, r0
 8105c86:	2b03      	cmp	r3, #3
 8105c88:	d158      	bne.n	8105d3c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105c8a:	4b2f      	ldr	r3, [pc, #188]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c8c:	691b      	ldr	r3, [r3, #16]
 8105c8e:	4a2e      	ldr	r2, [pc, #184]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c90:	f023 0301 	bic.w	r3, r3, #1
 8105c94:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105c96:	4b2d      	ldr	r3, [pc, #180]	; (8105d4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c98:	691b      	ldr	r3, [r3, #16]
 8105c9a:	4a2c      	ldr	r2, [pc, #176]	; (8105d4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105c9c:	f043 0304 	orr.w	r3, r3, #4
 8105ca0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8105ca2:	f3bf 8f4f 	dsb	sy
}
 8105ca6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105ca8:	f3bf 8f6f 	isb	sy
}
 8105cac:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105cae:	7afb      	ldrb	r3, [r7, #11]
 8105cb0:	2b01      	cmp	r3, #1
 8105cb2:	d101      	bne.n	8105cb8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105cb4:	bf30      	wfi
 8105cb6:	e000      	b.n	8105cba <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105cb8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105cba:	4b24      	ldr	r3, [pc, #144]	; (8105d4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cbc:	691b      	ldr	r3, [r3, #16]
 8105cbe:	4a23      	ldr	r2, [pc, #140]	; (8105d4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cc0:	f023 0304 	bic.w	r3, r3, #4
 8105cc4:	6113      	str	r3, [r2, #16]
 8105cc6:	e03c      	b.n	8105d42 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	2b01      	cmp	r3, #1
 8105ccc:	d123      	bne.n	8105d16 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105cce:	f7ff f88d 	bl	8104dec <HAL_GetCurrentCPUID>
 8105cd2:	4603      	mov	r3, r0
 8105cd4:	2b01      	cmp	r3, #1
 8105cd6:	d133      	bne.n	8105d40 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105cd8:	4b1b      	ldr	r3, [pc, #108]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cda:	695b      	ldr	r3, [r3, #20]
 8105cdc:	4a1a      	ldr	r2, [pc, #104]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cde:	f023 0302 	bic.w	r3, r3, #2
 8105ce2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105ce4:	4b19      	ldr	r3, [pc, #100]	; (8105d4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105ce6:	691b      	ldr	r3, [r3, #16]
 8105ce8:	4a18      	ldr	r2, [pc, #96]	; (8105d4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cea:	f043 0304 	orr.w	r3, r3, #4
 8105cee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105cf0:	f3bf 8f4f 	dsb	sy
}
 8105cf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105cf6:	f3bf 8f6f 	isb	sy
}
 8105cfa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105cfc:	7afb      	ldrb	r3, [r7, #11]
 8105cfe:	2b01      	cmp	r3, #1
 8105d00:	d101      	bne.n	8105d06 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105d02:	bf30      	wfi
 8105d04:	e000      	b.n	8105d08 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105d06:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d08:	4b10      	ldr	r3, [pc, #64]	; (8105d4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d0a:	691b      	ldr	r3, [r3, #16]
 8105d0c:	4a0f      	ldr	r2, [pc, #60]	; (8105d4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d0e:	f023 0304 	bic.w	r3, r3, #4
 8105d12:	6113      	str	r3, [r2, #16]
 8105d14:	e015      	b.n	8105d42 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105d16:	f7ff f869 	bl	8104dec <HAL_GetCurrentCPUID>
 8105d1a:	4603      	mov	r3, r0
 8105d1c:	2b03      	cmp	r3, #3
 8105d1e:	d106      	bne.n	8105d2e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105d20:	4b09      	ldr	r3, [pc, #36]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d22:	691b      	ldr	r3, [r3, #16]
 8105d24:	4a08      	ldr	r2, [pc, #32]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d26:	f023 0304 	bic.w	r3, r3, #4
 8105d2a:	6113      	str	r3, [r2, #16]
 8105d2c:	e009      	b.n	8105d42 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105d2e:	4b06      	ldr	r3, [pc, #24]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d30:	695b      	ldr	r3, [r3, #20]
 8105d32:	4a05      	ldr	r2, [pc, #20]	; (8105d48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d34:	f023 0304 	bic.w	r3, r3, #4
 8105d38:	6153      	str	r3, [r2, #20]
 8105d3a:	e002      	b.n	8105d42 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105d3c:	bf00      	nop
 8105d3e:	e000      	b.n	8105d42 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105d40:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105d42:	3710      	adds	r7, #16
 8105d44:	46bd      	mov	sp, r7
 8105d46:	bd80      	pop	{r7, pc}
 8105d48:	58024800 	.word	0x58024800
 8105d4c:	e000ed00 	.word	0xe000ed00

08105d50 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105d50:	b580      	push	{r7, lr}
 8105d52:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105d54:	f7ff f84a 	bl	8104dec <HAL_GetCurrentCPUID>
 8105d58:	4603      	mov	r3, r0
 8105d5a:	2b03      	cmp	r3, #3
 8105d5c:	d101      	bne.n	8105d62 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105d5e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105d60:	e001      	b.n	8105d66 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105d62:	bf40      	sev
    __WFE ();
 8105d64:	bf20      	wfe
}
 8105d66:	bf00      	nop
 8105d68:	bd80      	pop	{r7, pc}
	...

08105d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105d6c:	b480      	push	{r7}
 8105d6e:	b089      	sub	sp, #36	; 0x24
 8105d70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105d72:	4bb3      	ldr	r3, [pc, #716]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105d74:	691b      	ldr	r3, [r3, #16]
 8105d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105d7a:	2b18      	cmp	r3, #24
 8105d7c:	f200 8155 	bhi.w	810602a <HAL_RCC_GetSysClockFreq+0x2be>
 8105d80:	a201      	add	r2, pc, #4	; (adr r2, 8105d88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d86:	bf00      	nop
 8105d88:	08105ded 	.word	0x08105ded
 8105d8c:	0810602b 	.word	0x0810602b
 8105d90:	0810602b 	.word	0x0810602b
 8105d94:	0810602b 	.word	0x0810602b
 8105d98:	0810602b 	.word	0x0810602b
 8105d9c:	0810602b 	.word	0x0810602b
 8105da0:	0810602b 	.word	0x0810602b
 8105da4:	0810602b 	.word	0x0810602b
 8105da8:	08105e13 	.word	0x08105e13
 8105dac:	0810602b 	.word	0x0810602b
 8105db0:	0810602b 	.word	0x0810602b
 8105db4:	0810602b 	.word	0x0810602b
 8105db8:	0810602b 	.word	0x0810602b
 8105dbc:	0810602b 	.word	0x0810602b
 8105dc0:	0810602b 	.word	0x0810602b
 8105dc4:	0810602b 	.word	0x0810602b
 8105dc8:	08105e19 	.word	0x08105e19
 8105dcc:	0810602b 	.word	0x0810602b
 8105dd0:	0810602b 	.word	0x0810602b
 8105dd4:	0810602b 	.word	0x0810602b
 8105dd8:	0810602b 	.word	0x0810602b
 8105ddc:	0810602b 	.word	0x0810602b
 8105de0:	0810602b 	.word	0x0810602b
 8105de4:	0810602b 	.word	0x0810602b
 8105de8:	08105e1f 	.word	0x08105e1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105dec:	4b94      	ldr	r3, [pc, #592]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	f003 0320 	and.w	r3, r3, #32
 8105df4:	2b00      	cmp	r3, #0
 8105df6:	d009      	beq.n	8105e0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105df8:	4b91      	ldr	r3, [pc, #580]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105dfa:	681b      	ldr	r3, [r3, #0]
 8105dfc:	08db      	lsrs	r3, r3, #3
 8105dfe:	f003 0303 	and.w	r3, r3, #3
 8105e02:	4a90      	ldr	r2, [pc, #576]	; (8106044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105e04:	fa22 f303 	lsr.w	r3, r2, r3
 8105e08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8105e0a:	e111      	b.n	8106030 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105e0c:	4b8d      	ldr	r3, [pc, #564]	; (8106044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105e0e:	61bb      	str	r3, [r7, #24]
    break;
 8105e10:	e10e      	b.n	8106030 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8105e12:	4b8d      	ldr	r3, [pc, #564]	; (8106048 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105e14:	61bb      	str	r3, [r7, #24]
    break;
 8105e16:	e10b      	b.n	8106030 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8105e18:	4b8c      	ldr	r3, [pc, #560]	; (810604c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105e1a:	61bb      	str	r3, [r7, #24]
    break;
 8105e1c:	e108      	b.n	8106030 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105e1e:	4b88      	ldr	r3, [pc, #544]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e22:	f003 0303 	and.w	r3, r3, #3
 8105e26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105e28:	4b85      	ldr	r3, [pc, #532]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e2c:	091b      	lsrs	r3, r3, #4
 8105e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105e32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105e34:	4b82      	ldr	r3, [pc, #520]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e38:	f003 0301 	and.w	r3, r3, #1
 8105e3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105e3e:	4b80      	ldr	r3, [pc, #512]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105e42:	08db      	lsrs	r3, r3, #3
 8105e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105e48:	68fa      	ldr	r2, [r7, #12]
 8105e4a:	fb02 f303 	mul.w	r3, r2, r3
 8105e4e:	ee07 3a90 	vmov	s15, r3
 8105e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8105e5a:	693b      	ldr	r3, [r7, #16]
 8105e5c:	2b00      	cmp	r3, #0
 8105e5e:	f000 80e1 	beq.w	8106024 <HAL_RCC_GetSysClockFreq+0x2b8>
 8105e62:	697b      	ldr	r3, [r7, #20]
 8105e64:	2b02      	cmp	r3, #2
 8105e66:	f000 8083 	beq.w	8105f70 <HAL_RCC_GetSysClockFreq+0x204>
 8105e6a:	697b      	ldr	r3, [r7, #20]
 8105e6c:	2b02      	cmp	r3, #2
 8105e6e:	f200 80a1 	bhi.w	8105fb4 <HAL_RCC_GetSysClockFreq+0x248>
 8105e72:	697b      	ldr	r3, [r7, #20]
 8105e74:	2b00      	cmp	r3, #0
 8105e76:	d003      	beq.n	8105e80 <HAL_RCC_GetSysClockFreq+0x114>
 8105e78:	697b      	ldr	r3, [r7, #20]
 8105e7a:	2b01      	cmp	r3, #1
 8105e7c:	d056      	beq.n	8105f2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8105e7e:	e099      	b.n	8105fb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105e80:	4b6f      	ldr	r3, [pc, #444]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e82:	681b      	ldr	r3, [r3, #0]
 8105e84:	f003 0320 	and.w	r3, r3, #32
 8105e88:	2b00      	cmp	r3, #0
 8105e8a:	d02d      	beq.n	8105ee8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105e8c:	4b6c      	ldr	r3, [pc, #432]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e8e:	681b      	ldr	r3, [r3, #0]
 8105e90:	08db      	lsrs	r3, r3, #3
 8105e92:	f003 0303 	and.w	r3, r3, #3
 8105e96:	4a6b      	ldr	r2, [pc, #428]	; (8106044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105e98:	fa22 f303 	lsr.w	r3, r2, r3
 8105e9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105e9e:	687b      	ldr	r3, [r7, #4]
 8105ea0:	ee07 3a90 	vmov	s15, r3
 8105ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ea8:	693b      	ldr	r3, [r7, #16]
 8105eaa:	ee07 3a90 	vmov	s15, r3
 8105eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105eb6:	4b62      	ldr	r3, [pc, #392]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ebe:	ee07 3a90 	vmov	s15, r3
 8105ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105eca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8105ee6:	e087      	b.n	8105ff8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105ee8:	693b      	ldr	r3, [r7, #16]
 8105eea:	ee07 3a90 	vmov	s15, r3
 8105eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ef2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8106054 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105efa:	4b51      	ldr	r3, [pc, #324]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f02:	ee07 3a90 	vmov	s15, r3
 8105f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8105f0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105f2a:	e065      	b.n	8105ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105f2c:	693b      	ldr	r3, [r7, #16]
 8105f2e:	ee07 3a90 	vmov	s15, r3
 8105f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8106058 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f3e:	4b40      	ldr	r3, [pc, #256]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f46:	ee07 3a90 	vmov	s15, r3
 8105f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105f52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105f6e:	e043      	b.n	8105ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105f70:	693b      	ldr	r3, [r7, #16]
 8105f72:	ee07 3a90 	vmov	s15, r3
 8105f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810605c <HAL_RCC_GetSysClockFreq+0x2f0>
 8105f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f82:	4b2f      	ldr	r3, [pc, #188]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f8a:	ee07 3a90 	vmov	s15, r3
 8105f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8105f96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105fb2:	e021      	b.n	8105ff8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105fb4:	693b      	ldr	r3, [r7, #16]
 8105fb6:	ee07 3a90 	vmov	s15, r3
 8105fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8106058 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105fc6:	4b1e      	ldr	r3, [pc, #120]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105fce:	ee07 3a90 	vmov	s15, r3
 8105fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105fda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ff6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105ff8:	4b11      	ldr	r3, [pc, #68]	; (8106040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ffc:	0a5b      	lsrs	r3, r3, #9
 8105ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106002:	3301      	adds	r3, #1
 8106004:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8106006:	683b      	ldr	r3, [r7, #0]
 8106008:	ee07 3a90 	vmov	s15, r3
 810600c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106010:	edd7 6a07 	vldr	s13, [r7, #28]
 8106014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810601c:	ee17 3a90 	vmov	r3, s15
 8106020:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8106022:	e005      	b.n	8106030 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8106024:	2300      	movs	r3, #0
 8106026:	61bb      	str	r3, [r7, #24]
    break;
 8106028:	e002      	b.n	8106030 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810602a:	4b07      	ldr	r3, [pc, #28]	; (8106048 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810602c:	61bb      	str	r3, [r7, #24]
    break;
 810602e:	bf00      	nop
  }

  return sysclockfreq;
 8106030:	69bb      	ldr	r3, [r7, #24]
}
 8106032:	4618      	mov	r0, r3
 8106034:	3724      	adds	r7, #36	; 0x24
 8106036:	46bd      	mov	sp, r7
 8106038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810603c:	4770      	bx	lr
 810603e:	bf00      	nop
 8106040:	58024400 	.word	0x58024400
 8106044:	03d09000 	.word	0x03d09000
 8106048:	003d0900 	.word	0x003d0900
 810604c:	017d7840 	.word	0x017d7840
 8106050:	46000000 	.word	0x46000000
 8106054:	4c742400 	.word	0x4c742400
 8106058:	4a742400 	.word	0x4a742400
 810605c:	4bbebc20 	.word	0x4bbebc20

08106060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106060:	b580      	push	{r7, lr}
 8106062:	b082      	sub	sp, #8
 8106064:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106066:	f7ff fe81 	bl	8105d6c <HAL_RCC_GetSysClockFreq>
 810606a:	4602      	mov	r2, r0
 810606c:	4b11      	ldr	r3, [pc, #68]	; (81060b4 <HAL_RCC_GetHCLKFreq+0x54>)
 810606e:	699b      	ldr	r3, [r3, #24]
 8106070:	0a1b      	lsrs	r3, r3, #8
 8106072:	f003 030f 	and.w	r3, r3, #15
 8106076:	4910      	ldr	r1, [pc, #64]	; (81060b8 <HAL_RCC_GetHCLKFreq+0x58>)
 8106078:	5ccb      	ldrb	r3, [r1, r3]
 810607a:	f003 031f 	and.w	r3, r3, #31
 810607e:	fa22 f303 	lsr.w	r3, r2, r3
 8106082:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106084:	4b0b      	ldr	r3, [pc, #44]	; (81060b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8106086:	699b      	ldr	r3, [r3, #24]
 8106088:	f003 030f 	and.w	r3, r3, #15
 810608c:	4a0a      	ldr	r2, [pc, #40]	; (81060b8 <HAL_RCC_GetHCLKFreq+0x58>)
 810608e:	5cd3      	ldrb	r3, [r2, r3]
 8106090:	f003 031f 	and.w	r3, r3, #31
 8106094:	687a      	ldr	r2, [r7, #4]
 8106096:	fa22 f303 	lsr.w	r3, r2, r3
 810609a:	4a08      	ldr	r2, [pc, #32]	; (81060bc <HAL_RCC_GetHCLKFreq+0x5c>)
 810609c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810609e:	4b07      	ldr	r3, [pc, #28]	; (81060bc <HAL_RCC_GetHCLKFreq+0x5c>)
 81060a0:	681b      	ldr	r3, [r3, #0]
 81060a2:	4a07      	ldr	r2, [pc, #28]	; (81060c0 <HAL_RCC_GetHCLKFreq+0x60>)
 81060a4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81060a6:	4b05      	ldr	r3, [pc, #20]	; (81060bc <HAL_RCC_GetHCLKFreq+0x5c>)
 81060a8:	681b      	ldr	r3, [r3, #0]
}
 81060aa:	4618      	mov	r0, r3
 81060ac:	3708      	adds	r7, #8
 81060ae:	46bd      	mov	sp, r7
 81060b0:	bd80      	pop	{r7, pc}
 81060b2:	bf00      	nop
 81060b4:	58024400 	.word	0x58024400
 81060b8:	0810cf38 	.word	0x0810cf38
 81060bc:	10000040 	.word	0x10000040
 81060c0:	1000003c 	.word	0x1000003c

081060c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81060c4:	b580      	push	{r7, lr}
 81060c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81060c8:	f7ff ffca 	bl	8106060 <HAL_RCC_GetHCLKFreq>
 81060cc:	4602      	mov	r2, r0
 81060ce:	4b06      	ldr	r3, [pc, #24]	; (81060e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81060d0:	69db      	ldr	r3, [r3, #28]
 81060d2:	091b      	lsrs	r3, r3, #4
 81060d4:	f003 0307 	and.w	r3, r3, #7
 81060d8:	4904      	ldr	r1, [pc, #16]	; (81060ec <HAL_RCC_GetPCLK1Freq+0x28>)
 81060da:	5ccb      	ldrb	r3, [r1, r3]
 81060dc:	f003 031f 	and.w	r3, r3, #31
 81060e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81060e4:	4618      	mov	r0, r3
 81060e6:	bd80      	pop	{r7, pc}
 81060e8:	58024400 	.word	0x58024400
 81060ec:	0810cf38 	.word	0x0810cf38

081060f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81060f0:	b580      	push	{r7, lr}
 81060f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81060f4:	f7ff ffb4 	bl	8106060 <HAL_RCC_GetHCLKFreq>
 81060f8:	4602      	mov	r2, r0
 81060fa:	4b06      	ldr	r3, [pc, #24]	; (8106114 <HAL_RCC_GetPCLK2Freq+0x24>)
 81060fc:	69db      	ldr	r3, [r3, #28]
 81060fe:	0a1b      	lsrs	r3, r3, #8
 8106100:	f003 0307 	and.w	r3, r3, #7
 8106104:	4904      	ldr	r1, [pc, #16]	; (8106118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106106:	5ccb      	ldrb	r3, [r1, r3]
 8106108:	f003 031f 	and.w	r3, r3, #31
 810610c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106110:	4618      	mov	r0, r3
 8106112:	bd80      	pop	{r7, pc}
 8106114:	58024400 	.word	0x58024400
 8106118:	0810cf38 	.word	0x0810cf38

0810611c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810611c:	b580      	push	{r7, lr}
 810611e:	b086      	sub	sp, #24
 8106120:	af00      	add	r7, sp, #0
 8106122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106124:	2300      	movs	r3, #0
 8106126:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106128:	2300      	movs	r3, #0
 810612a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	681b      	ldr	r3, [r3, #0]
 8106130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106134:	2b00      	cmp	r3, #0
 8106136:	d03f      	beq.n	81061b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810613c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106140:	d02a      	beq.n	8106198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8106142:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106146:	d824      	bhi.n	8106192 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8106148:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810614c:	d018      	beq.n	8106180 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810614e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106152:	d81e      	bhi.n	8106192 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8106154:	2b00      	cmp	r3, #0
 8106156:	d003      	beq.n	8106160 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8106158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810615c:	d007      	beq.n	810616e <HAL_RCCEx_PeriphCLKConfig+0x52>
 810615e:	e018      	b.n	8106192 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106160:	4bab      	ldr	r3, [pc, #684]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106164:	4aaa      	ldr	r2, [pc, #680]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810616a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810616c:	e015      	b.n	810619a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	3304      	adds	r3, #4
 8106172:	2102      	movs	r1, #2
 8106174:	4618      	mov	r0, r3
 8106176:	f001 f9cf 	bl	8107518 <RCCEx_PLL2_Config>
 810617a:	4603      	mov	r3, r0
 810617c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810617e:	e00c      	b.n	810619a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106180:	687b      	ldr	r3, [r7, #4]
 8106182:	3324      	adds	r3, #36	; 0x24
 8106184:	2102      	movs	r1, #2
 8106186:	4618      	mov	r0, r3
 8106188:	f001 fa78 	bl	810767c <RCCEx_PLL3_Config>
 810618c:	4603      	mov	r3, r0
 810618e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106190:	e003      	b.n	810619a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106192:	2301      	movs	r3, #1
 8106194:	75fb      	strb	r3, [r7, #23]
      break;
 8106196:	e000      	b.n	810619a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8106198:	bf00      	nop
    }

    if(ret == HAL_OK)
 810619a:	7dfb      	ldrb	r3, [r7, #23]
 810619c:	2b00      	cmp	r3, #0
 810619e:	d109      	bne.n	81061b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81061a0:	4b9b      	ldr	r3, [pc, #620]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81061a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81061a8:	687b      	ldr	r3, [r7, #4]
 81061aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81061ac:	4998      	ldr	r1, [pc, #608]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81061ae:	4313      	orrs	r3, r2
 81061b0:	650b      	str	r3, [r1, #80]	; 0x50
 81061b2:	e001      	b.n	81061b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061b4:	7dfb      	ldrb	r3, [r7, #23]
 81061b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81061c0:	2b00      	cmp	r3, #0
 81061c2:	d03d      	beq.n	8106240 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81061c8:	2b04      	cmp	r3, #4
 81061ca:	d826      	bhi.n	810621a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81061cc:	a201      	add	r2, pc, #4	; (adr r2, 81061d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061d2:	bf00      	nop
 81061d4:	081061e9 	.word	0x081061e9
 81061d8:	081061f7 	.word	0x081061f7
 81061dc:	08106209 	.word	0x08106209
 81061e0:	08106221 	.word	0x08106221
 81061e4:	08106221 	.word	0x08106221
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061e8:	4b89      	ldr	r3, [pc, #548]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81061ec:	4a88      	ldr	r2, [pc, #544]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81061ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81061f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81061f4:	e015      	b.n	8106222 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	3304      	adds	r3, #4
 81061fa:	2100      	movs	r1, #0
 81061fc:	4618      	mov	r0, r3
 81061fe:	f001 f98b 	bl	8107518 <RCCEx_PLL2_Config>
 8106202:	4603      	mov	r3, r0
 8106204:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106206:	e00c      	b.n	8106222 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106208:	687b      	ldr	r3, [r7, #4]
 810620a:	3324      	adds	r3, #36	; 0x24
 810620c:	2100      	movs	r1, #0
 810620e:	4618      	mov	r0, r3
 8106210:	f001 fa34 	bl	810767c <RCCEx_PLL3_Config>
 8106214:	4603      	mov	r3, r0
 8106216:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106218:	e003      	b.n	8106222 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810621a:	2301      	movs	r3, #1
 810621c:	75fb      	strb	r3, [r7, #23]
      break;
 810621e:	e000      	b.n	8106222 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8106220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106222:	7dfb      	ldrb	r3, [r7, #23]
 8106224:	2b00      	cmp	r3, #0
 8106226:	d109      	bne.n	810623c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106228:	4b79      	ldr	r3, [pc, #484]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810622a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810622c:	f023 0207 	bic.w	r2, r3, #7
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106234:	4976      	ldr	r1, [pc, #472]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106236:	4313      	orrs	r3, r2
 8106238:	650b      	str	r3, [r1, #80]	; 0x50
 810623a:	e001      	b.n	8106240 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810623c:	7dfb      	ldrb	r3, [r7, #23]
 810623e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106240:	687b      	ldr	r3, [r7, #4]
 8106242:	681b      	ldr	r3, [r3, #0]
 8106244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106248:	2b00      	cmp	r3, #0
 810624a:	d042      	beq.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106254:	d02b      	beq.n	81062ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8106256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810625a:	d825      	bhi.n	81062a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810625c:	2bc0      	cmp	r3, #192	; 0xc0
 810625e:	d028      	beq.n	81062b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8106260:	2bc0      	cmp	r3, #192	; 0xc0
 8106262:	d821      	bhi.n	81062a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8106264:	2b80      	cmp	r3, #128	; 0x80
 8106266:	d016      	beq.n	8106296 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8106268:	2b80      	cmp	r3, #128	; 0x80
 810626a:	d81d      	bhi.n	81062a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810626c:	2b00      	cmp	r3, #0
 810626e:	d002      	beq.n	8106276 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8106270:	2b40      	cmp	r3, #64	; 0x40
 8106272:	d007      	beq.n	8106284 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8106274:	e018      	b.n	81062a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106276:	4b66      	ldr	r3, [pc, #408]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810627a:	4a65      	ldr	r2, [pc, #404]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810627c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8106282:	e017      	b.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	3304      	adds	r3, #4
 8106288:	2100      	movs	r1, #0
 810628a:	4618      	mov	r0, r3
 810628c:	f001 f944 	bl	8107518 <RCCEx_PLL2_Config>
 8106290:	4603      	mov	r3, r0
 8106292:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8106294:	e00e      	b.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	3324      	adds	r3, #36	; 0x24
 810629a:	2100      	movs	r1, #0
 810629c:	4618      	mov	r0, r3
 810629e:	f001 f9ed 	bl	810767c <RCCEx_PLL3_Config>
 81062a2:	4603      	mov	r3, r0
 81062a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81062a6:	e005      	b.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81062a8:	2301      	movs	r3, #1
 81062aa:	75fb      	strb	r3, [r7, #23]
      break;
 81062ac:	e002      	b.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81062ae:	bf00      	nop
 81062b0:	e000      	b.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81062b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81062b4:	7dfb      	ldrb	r3, [r7, #23]
 81062b6:	2b00      	cmp	r3, #0
 81062b8:	d109      	bne.n	81062ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81062ba:	4b55      	ldr	r3, [pc, #340]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81062bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81062be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81062c6:	4952      	ldr	r1, [pc, #328]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81062c8:	4313      	orrs	r3, r2
 81062ca:	650b      	str	r3, [r1, #80]	; 0x50
 81062cc:	e001      	b.n	81062d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062ce:	7dfb      	ldrb	r3, [r7, #23]
 81062d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	681b      	ldr	r3, [r3, #0]
 81062d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81062da:	2b00      	cmp	r3, #0
 81062dc:	d049      	beq.n	8106372 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81062e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81062e8:	d030      	beq.n	810634c <HAL_RCCEx_PeriphCLKConfig+0x230>
 81062ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81062ee:	d82a      	bhi.n	8106346 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81062f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81062f4:	d02c      	beq.n	8106350 <HAL_RCCEx_PeriphCLKConfig+0x234>
 81062f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81062fa:	d824      	bhi.n	8106346 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81062fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106300:	d018      	beq.n	8106334 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8106302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106306:	d81e      	bhi.n	8106346 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8106308:	2b00      	cmp	r3, #0
 810630a:	d003      	beq.n	8106314 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810630c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106310:	d007      	beq.n	8106322 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8106312:	e018      	b.n	8106346 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106314:	4b3e      	ldr	r3, [pc, #248]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106318:	4a3d      	ldr	r2, [pc, #244]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810631a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810631e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106320:	e017      	b.n	8106352 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	3304      	adds	r3, #4
 8106326:	2100      	movs	r1, #0
 8106328:	4618      	mov	r0, r3
 810632a:	f001 f8f5 	bl	8107518 <RCCEx_PLL2_Config>
 810632e:	4603      	mov	r3, r0
 8106330:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8106332:	e00e      	b.n	8106352 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	3324      	adds	r3, #36	; 0x24
 8106338:	2100      	movs	r1, #0
 810633a:	4618      	mov	r0, r3
 810633c:	f001 f99e 	bl	810767c <RCCEx_PLL3_Config>
 8106340:	4603      	mov	r3, r0
 8106342:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106344:	e005      	b.n	8106352 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8106346:	2301      	movs	r3, #1
 8106348:	75fb      	strb	r3, [r7, #23]
      break;
 810634a:	e002      	b.n	8106352 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810634c:	bf00      	nop
 810634e:	e000      	b.n	8106352 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8106350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106352:	7dfb      	ldrb	r3, [r7, #23]
 8106354:	2b00      	cmp	r3, #0
 8106356:	d10a      	bne.n	810636e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8106358:	4b2d      	ldr	r3, [pc, #180]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810635c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106366:	492a      	ldr	r1, [pc, #168]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106368:	4313      	orrs	r3, r2
 810636a:	658b      	str	r3, [r1, #88]	; 0x58
 810636c:	e001      	b.n	8106372 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810636e:	7dfb      	ldrb	r3, [r7, #23]
 8106370:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810637a:	2b00      	cmp	r3, #0
 810637c:	d04c      	beq.n	8106418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810637e:	687b      	ldr	r3, [r7, #4]
 8106380:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8106384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106388:	d030      	beq.n	81063ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810638a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810638e:	d82a      	bhi.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8106390:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106394:	d02c      	beq.n	81063f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8106396:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810639a:	d824      	bhi.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810639c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81063a0:	d018      	beq.n	81063d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81063a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81063a6:	d81e      	bhi.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81063a8:	2b00      	cmp	r3, #0
 81063aa:	d003      	beq.n	81063b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81063ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81063b0:	d007      	beq.n	81063c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81063b2:	e018      	b.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81063b4:	4b16      	ldr	r3, [pc, #88]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063b8:	4a15      	ldr	r2, [pc, #84]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81063ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81063be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81063c0:	e017      	b.n	81063f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	3304      	adds	r3, #4
 81063c6:	2100      	movs	r1, #0
 81063c8:	4618      	mov	r0, r3
 81063ca:	f001 f8a5 	bl	8107518 <RCCEx_PLL2_Config>
 81063ce:	4603      	mov	r3, r0
 81063d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81063d2:	e00e      	b.n	81063f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	3324      	adds	r3, #36	; 0x24
 81063d8:	2100      	movs	r1, #0
 81063da:	4618      	mov	r0, r3
 81063dc:	f001 f94e 	bl	810767c <RCCEx_PLL3_Config>
 81063e0:	4603      	mov	r3, r0
 81063e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81063e4:	e005      	b.n	81063f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81063e6:	2301      	movs	r3, #1
 81063e8:	75fb      	strb	r3, [r7, #23]
      break;
 81063ea:	e002      	b.n	81063f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81063ec:	bf00      	nop
 81063ee:	e000      	b.n	81063f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81063f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81063f2:	7dfb      	ldrb	r3, [r7, #23]
 81063f4:	2b00      	cmp	r3, #0
 81063f6:	d10d      	bne.n	8106414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81063f8:	4b05      	ldr	r3, [pc, #20]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8106406:	4902      	ldr	r1, [pc, #8]	; (8106410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106408:	4313      	orrs	r3, r2
 810640a:	658b      	str	r3, [r1, #88]	; 0x58
 810640c:	e004      	b.n	8106418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810640e:	bf00      	nop
 8106410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106414:	7dfb      	ldrb	r3, [r7, #23]
 8106416:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	681b      	ldr	r3, [r3, #0]
 810641c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106420:	2b00      	cmp	r3, #0
 8106422:	d032      	beq.n	810648a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106428:	2b30      	cmp	r3, #48	; 0x30
 810642a:	d01c      	beq.n	8106466 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810642c:	2b30      	cmp	r3, #48	; 0x30
 810642e:	d817      	bhi.n	8106460 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8106430:	2b20      	cmp	r3, #32
 8106432:	d00c      	beq.n	810644e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8106434:	2b20      	cmp	r3, #32
 8106436:	d813      	bhi.n	8106460 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8106438:	2b00      	cmp	r3, #0
 810643a:	d016      	beq.n	810646a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810643c:	2b10      	cmp	r3, #16
 810643e:	d10f      	bne.n	8106460 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106440:	4baf      	ldr	r3, [pc, #700]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106444:	4aae      	ldr	r2, [pc, #696]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810644a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810644c:	e00e      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	3304      	adds	r3, #4
 8106452:	2102      	movs	r1, #2
 8106454:	4618      	mov	r0, r3
 8106456:	f001 f85f 	bl	8107518 <RCCEx_PLL2_Config>
 810645a:	4603      	mov	r3, r0
 810645c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810645e:	e005      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8106460:	2301      	movs	r3, #1
 8106462:	75fb      	strb	r3, [r7, #23]
      break;
 8106464:	e002      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8106466:	bf00      	nop
 8106468:	e000      	b.n	810646c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810646a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810646c:	7dfb      	ldrb	r3, [r7, #23]
 810646e:	2b00      	cmp	r3, #0
 8106470:	d109      	bne.n	8106486 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106472:	4ba3      	ldr	r3, [pc, #652]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106476:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810647e:	49a0      	ldr	r1, [pc, #640]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106480:	4313      	orrs	r3, r2
 8106482:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106484:	e001      	b.n	810648a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106486:	7dfb      	ldrb	r3, [r7, #23]
 8106488:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	681b      	ldr	r3, [r3, #0]
 810648e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8106492:	2b00      	cmp	r3, #0
 8106494:	d047      	beq.n	8106526 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810649a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810649e:	d030      	beq.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81064a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81064a4:	d82a      	bhi.n	81064fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81064a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81064aa:	d02c      	beq.n	8106506 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81064ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81064b0:	d824      	bhi.n	81064fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81064b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81064b6:	d018      	beq.n	81064ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81064b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81064bc:	d81e      	bhi.n	81064fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81064be:	2b00      	cmp	r3, #0
 81064c0:	d003      	beq.n	81064ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81064c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81064c6:	d007      	beq.n	81064d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81064c8:	e018      	b.n	81064fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81064ca:	4b8d      	ldr	r3, [pc, #564]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064ce:	4a8c      	ldr	r2, [pc, #560]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81064d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81064d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81064d6:	e017      	b.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	3304      	adds	r3, #4
 81064dc:	2100      	movs	r1, #0
 81064de:	4618      	mov	r0, r3
 81064e0:	f001 f81a 	bl	8107518 <RCCEx_PLL2_Config>
 81064e4:	4603      	mov	r3, r0
 81064e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81064e8:	e00e      	b.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	3324      	adds	r3, #36	; 0x24
 81064ee:	2100      	movs	r1, #0
 81064f0:	4618      	mov	r0, r3
 81064f2:	f001 f8c3 	bl	810767c <RCCEx_PLL3_Config>
 81064f6:	4603      	mov	r3, r0
 81064f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81064fa:	e005      	b.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81064fc:	2301      	movs	r3, #1
 81064fe:	75fb      	strb	r3, [r7, #23]
      break;
 8106500:	e002      	b.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8106502:	bf00      	nop
 8106504:	e000      	b.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8106506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106508:	7dfb      	ldrb	r3, [r7, #23]
 810650a:	2b00      	cmp	r3, #0
 810650c:	d109      	bne.n	8106522 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810650e:	4b7c      	ldr	r3, [pc, #496]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106512:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810651a:	4979      	ldr	r1, [pc, #484]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810651c:	4313      	orrs	r3, r2
 810651e:	650b      	str	r3, [r1, #80]	; 0x50
 8106520:	e001      	b.n	8106526 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106522:	7dfb      	ldrb	r3, [r7, #23]
 8106524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	681b      	ldr	r3, [r3, #0]
 810652a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810652e:	2b00      	cmp	r3, #0
 8106530:	d049      	beq.n	81065c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8106532:	687b      	ldr	r3, [r7, #4]
 8106534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810653a:	d02e      	beq.n	810659a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 810653c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106540:	d828      	bhi.n	8106594 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8106542:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106546:	d02a      	beq.n	810659e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8106548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810654c:	d822      	bhi.n	8106594 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810654e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106552:	d026      	beq.n	81065a2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8106554:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106558:	d81c      	bhi.n	8106594 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810655a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810655e:	d010      	beq.n	8106582 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8106560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106564:	d816      	bhi.n	8106594 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8106566:	2b00      	cmp	r3, #0
 8106568:	d01d      	beq.n	81065a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810656a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810656e:	d111      	bne.n	8106594 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	3304      	adds	r3, #4
 8106574:	2101      	movs	r1, #1
 8106576:	4618      	mov	r0, r3
 8106578:	f000 ffce 	bl	8107518 <RCCEx_PLL2_Config>
 810657c:	4603      	mov	r3, r0
 810657e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8106580:	e012      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	3324      	adds	r3, #36	; 0x24
 8106586:	2101      	movs	r1, #1
 8106588:	4618      	mov	r0, r3
 810658a:	f001 f877 	bl	810767c <RCCEx_PLL3_Config>
 810658e:	4603      	mov	r3, r0
 8106590:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8106592:	e009      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106594:	2301      	movs	r3, #1
 8106596:	75fb      	strb	r3, [r7, #23]
      break;
 8106598:	e006      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810659a:	bf00      	nop
 810659c:	e004      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810659e:	bf00      	nop
 81065a0:	e002      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81065a2:	bf00      	nop
 81065a4:	e000      	b.n	81065a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81065a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81065a8:	7dfb      	ldrb	r3, [r7, #23]
 81065aa:	2b00      	cmp	r3, #0
 81065ac:	d109      	bne.n	81065c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81065ae:	4b54      	ldr	r3, [pc, #336]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81065b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81065b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81065ba:	4951      	ldr	r1, [pc, #324]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81065bc:	4313      	orrs	r3, r2
 81065be:	650b      	str	r3, [r1, #80]	; 0x50
 81065c0:	e001      	b.n	81065c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065c2:	7dfb      	ldrb	r3, [r7, #23]
 81065c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81065ce:	2b00      	cmp	r3, #0
 81065d0:	d04b      	beq.n	810666a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81065d2:	687b      	ldr	r3, [r7, #4]
 81065d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81065d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81065dc:	d02e      	beq.n	810663c <HAL_RCCEx_PeriphCLKConfig+0x520>
 81065de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81065e2:	d828      	bhi.n	8106636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81065e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81065e8:	d02a      	beq.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81065ee:	d822      	bhi.n	8106636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81065f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81065f4:	d026      	beq.n	8106644 <HAL_RCCEx_PeriphCLKConfig+0x528>
 81065f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81065fa:	d81c      	bhi.n	8106636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81065fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106600:	d010      	beq.n	8106624 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8106602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106606:	d816      	bhi.n	8106636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106608:	2b00      	cmp	r3, #0
 810660a:	d01d      	beq.n	8106648 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810660c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106610:	d111      	bne.n	8106636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	3304      	adds	r3, #4
 8106616:	2101      	movs	r1, #1
 8106618:	4618      	mov	r0, r3
 810661a:	f000 ff7d 	bl	8107518 <RCCEx_PLL2_Config>
 810661e:	4603      	mov	r3, r0
 8106620:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106622:	e012      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	3324      	adds	r3, #36	; 0x24
 8106628:	2101      	movs	r1, #1
 810662a:	4618      	mov	r0, r3
 810662c:	f001 f826 	bl	810767c <RCCEx_PLL3_Config>
 8106630:	4603      	mov	r3, r0
 8106632:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106634:	e009      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8106636:	2301      	movs	r3, #1
 8106638:	75fb      	strb	r3, [r7, #23]
      break;
 810663a:	e006      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810663c:	bf00      	nop
 810663e:	e004      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106640:	bf00      	nop
 8106642:	e002      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106644:	bf00      	nop
 8106646:	e000      	b.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106648:	bf00      	nop
    }

    if(ret == HAL_OK)
 810664a:	7dfb      	ldrb	r3, [r7, #23]
 810664c:	2b00      	cmp	r3, #0
 810664e:	d10a      	bne.n	8106666 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106650:	4b2b      	ldr	r3, [pc, #172]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106654:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810665e:	4928      	ldr	r1, [pc, #160]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106660:	4313      	orrs	r3, r2
 8106662:	658b      	str	r3, [r1, #88]	; 0x58
 8106664:	e001      	b.n	810666a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106666:	7dfb      	ldrb	r3, [r7, #23]
 8106668:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	681b      	ldr	r3, [r3, #0]
 810666e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106672:	2b00      	cmp	r3, #0
 8106674:	d02f      	beq.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810667a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810667e:	d00e      	beq.n	810669e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8106680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106684:	d814      	bhi.n	81066b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8106686:	2b00      	cmp	r3, #0
 8106688:	d015      	beq.n	81066b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810668a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810668e:	d10f      	bne.n	81066b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106690:	4b1b      	ldr	r3, [pc, #108]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106694:	4a1a      	ldr	r2, [pc, #104]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810669a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810669c:	e00c      	b.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	3304      	adds	r3, #4
 81066a2:	2101      	movs	r1, #1
 81066a4:	4618      	mov	r0, r3
 81066a6:	f000 ff37 	bl	8107518 <RCCEx_PLL2_Config>
 81066aa:	4603      	mov	r3, r0
 81066ac:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81066ae:	e003      	b.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81066b0:	2301      	movs	r3, #1
 81066b2:	75fb      	strb	r3, [r7, #23]
      break;
 81066b4:	e000      	b.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81066b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81066b8:	7dfb      	ldrb	r3, [r7, #23]
 81066ba:	2b00      	cmp	r3, #0
 81066bc:	d109      	bne.n	81066d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81066be:	4b10      	ldr	r3, [pc, #64]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81066c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81066c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81066ca:	490d      	ldr	r1, [pc, #52]	; (8106700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81066cc:	4313      	orrs	r3, r2
 81066ce:	650b      	str	r3, [r1, #80]	; 0x50
 81066d0:	e001      	b.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066d2:	7dfb      	ldrb	r3, [r7, #23]
 81066d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81066de:	2b00      	cmp	r3, #0
 81066e0:	d033      	beq.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81066e6:	2b03      	cmp	r3, #3
 81066e8:	d81c      	bhi.n	8106724 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81066ea:	a201      	add	r2, pc, #4	; (adr r2, 81066f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066f0:	0810672b 	.word	0x0810672b
 81066f4:	08106705 	.word	0x08106705
 81066f8:	08106713 	.word	0x08106713
 81066fc:	0810672b 	.word	0x0810672b
 8106700:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106704:	4bb9      	ldr	r3, [pc, #740]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106708:	4ab8      	ldr	r2, [pc, #736]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810670a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810670e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106710:	e00c      	b.n	810672c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	3304      	adds	r3, #4
 8106716:	2102      	movs	r1, #2
 8106718:	4618      	mov	r0, r3
 810671a:	f000 fefd 	bl	8107518 <RCCEx_PLL2_Config>
 810671e:	4603      	mov	r3, r0
 8106720:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106722:	e003      	b.n	810672c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8106724:	2301      	movs	r3, #1
 8106726:	75fb      	strb	r3, [r7, #23]
      break;
 8106728:	e000      	b.n	810672c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810672a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810672c:	7dfb      	ldrb	r3, [r7, #23]
 810672e:	2b00      	cmp	r3, #0
 8106730:	d109      	bne.n	8106746 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106732:	4bae      	ldr	r3, [pc, #696]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106736:	f023 0203 	bic.w	r2, r3, #3
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810673e:	49ab      	ldr	r1, [pc, #684]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106740:	4313      	orrs	r3, r2
 8106742:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106744:	e001      	b.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106746:	7dfb      	ldrb	r3, [r7, #23]
 8106748:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	681b      	ldr	r3, [r3, #0]
 810674e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106752:	2b00      	cmp	r3, #0
 8106754:	f000 8088 	beq.w	8106868 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106758:	4ba5      	ldr	r3, [pc, #660]	; (81069f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810675a:	681b      	ldr	r3, [r3, #0]
 810675c:	4aa4      	ldr	r2, [pc, #656]	; (81069f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810675e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106764:	f7fe fa26 	bl	8104bb4 <HAL_GetTick>
 8106768:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810676a:	e009      	b.n	8106780 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810676c:	f7fe fa22 	bl	8104bb4 <HAL_GetTick>
 8106770:	4602      	mov	r2, r0
 8106772:	693b      	ldr	r3, [r7, #16]
 8106774:	1ad3      	subs	r3, r2, r3
 8106776:	2b64      	cmp	r3, #100	; 0x64
 8106778:	d902      	bls.n	8106780 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810677a:	2303      	movs	r3, #3
 810677c:	75fb      	strb	r3, [r7, #23]
        break;
 810677e:	e005      	b.n	810678c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106780:	4b9b      	ldr	r3, [pc, #620]	; (81069f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106788:	2b00      	cmp	r3, #0
 810678a:	d0ef      	beq.n	810676c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810678c:	7dfb      	ldrb	r3, [r7, #23]
 810678e:	2b00      	cmp	r3, #0
 8106790:	d168      	bne.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106792:	4b96      	ldr	r3, [pc, #600]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106796:	687b      	ldr	r3, [r7, #4]
 8106798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810679c:	4053      	eors	r3, r2
 810679e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81067a2:	2b00      	cmp	r3, #0
 81067a4:	d013      	beq.n	81067ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81067a6:	4b91      	ldr	r3, [pc, #580]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81067aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81067ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81067b0:	4b8e      	ldr	r3, [pc, #568]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81067b4:	4a8d      	ldr	r2, [pc, #564]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81067b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81067ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81067bc:	4b8b      	ldr	r3, [pc, #556]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81067c0:	4a8a      	ldr	r2, [pc, #552]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81067c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81067c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81067c8:	4a88      	ldr	r2, [pc, #544]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81067ca:	68fb      	ldr	r3, [r7, #12]
 81067cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81067d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81067d8:	d115      	bne.n	8106806 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81067da:	f7fe f9eb 	bl	8104bb4 <HAL_GetTick>
 81067de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81067e0:	e00b      	b.n	81067fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81067e2:	f7fe f9e7 	bl	8104bb4 <HAL_GetTick>
 81067e6:	4602      	mov	r2, r0
 81067e8:	693b      	ldr	r3, [r7, #16]
 81067ea:	1ad3      	subs	r3, r2, r3
 81067ec:	f241 3288 	movw	r2, #5000	; 0x1388
 81067f0:	4293      	cmp	r3, r2
 81067f2:	d902      	bls.n	81067fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81067f4:	2303      	movs	r3, #3
 81067f6:	75fb      	strb	r3, [r7, #23]
            break;
 81067f8:	e005      	b.n	8106806 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81067fa:	4b7c      	ldr	r3, [pc, #496]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81067fe:	f003 0302 	and.w	r3, r3, #2
 8106802:	2b00      	cmp	r3, #0
 8106804:	d0ed      	beq.n	81067e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8106806:	7dfb      	ldrb	r3, [r7, #23]
 8106808:	2b00      	cmp	r3, #0
 810680a:	d128      	bne.n	810685e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810681a:	d10f      	bne.n	810683c <HAL_RCCEx_PeriphCLKConfig+0x720>
 810681c:	4b73      	ldr	r3, [pc, #460]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810681e:	691b      	ldr	r3, [r3, #16]
 8106820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810682a:	091b      	lsrs	r3, r3, #4
 810682c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106830:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8106834:	496d      	ldr	r1, [pc, #436]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106836:	4313      	orrs	r3, r2
 8106838:	610b      	str	r3, [r1, #16]
 810683a:	e005      	b.n	8106848 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 810683c:	4b6b      	ldr	r3, [pc, #428]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810683e:	691b      	ldr	r3, [r3, #16]
 8106840:	4a6a      	ldr	r2, [pc, #424]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106842:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106846:	6113      	str	r3, [r2, #16]
 8106848:	4b68      	ldr	r3, [pc, #416]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810684a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106856:	4965      	ldr	r1, [pc, #404]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106858:	4313      	orrs	r3, r2
 810685a:	670b      	str	r3, [r1, #112]	; 0x70
 810685c:	e004      	b.n	8106868 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810685e:	7dfb      	ldrb	r3, [r7, #23]
 8106860:	75bb      	strb	r3, [r7, #22]
 8106862:	e001      	b.n	8106868 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106864:	7dfb      	ldrb	r3, [r7, #23]
 8106866:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	681b      	ldr	r3, [r3, #0]
 810686c:	f003 0301 	and.w	r3, r3, #1
 8106870:	2b00      	cmp	r3, #0
 8106872:	d07e      	beq.n	8106972 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106878:	2b28      	cmp	r3, #40	; 0x28
 810687a:	d867      	bhi.n	810694c <HAL_RCCEx_PeriphCLKConfig+0x830>
 810687c:	a201      	add	r2, pc, #4	; (adr r2, 8106884 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106882:	bf00      	nop
 8106884:	08106953 	.word	0x08106953
 8106888:	0810694d 	.word	0x0810694d
 810688c:	0810694d 	.word	0x0810694d
 8106890:	0810694d 	.word	0x0810694d
 8106894:	0810694d 	.word	0x0810694d
 8106898:	0810694d 	.word	0x0810694d
 810689c:	0810694d 	.word	0x0810694d
 81068a0:	0810694d 	.word	0x0810694d
 81068a4:	08106929 	.word	0x08106929
 81068a8:	0810694d 	.word	0x0810694d
 81068ac:	0810694d 	.word	0x0810694d
 81068b0:	0810694d 	.word	0x0810694d
 81068b4:	0810694d 	.word	0x0810694d
 81068b8:	0810694d 	.word	0x0810694d
 81068bc:	0810694d 	.word	0x0810694d
 81068c0:	0810694d 	.word	0x0810694d
 81068c4:	0810693b 	.word	0x0810693b
 81068c8:	0810694d 	.word	0x0810694d
 81068cc:	0810694d 	.word	0x0810694d
 81068d0:	0810694d 	.word	0x0810694d
 81068d4:	0810694d 	.word	0x0810694d
 81068d8:	0810694d 	.word	0x0810694d
 81068dc:	0810694d 	.word	0x0810694d
 81068e0:	0810694d 	.word	0x0810694d
 81068e4:	08106953 	.word	0x08106953
 81068e8:	0810694d 	.word	0x0810694d
 81068ec:	0810694d 	.word	0x0810694d
 81068f0:	0810694d 	.word	0x0810694d
 81068f4:	0810694d 	.word	0x0810694d
 81068f8:	0810694d 	.word	0x0810694d
 81068fc:	0810694d 	.word	0x0810694d
 8106900:	0810694d 	.word	0x0810694d
 8106904:	08106953 	.word	0x08106953
 8106908:	0810694d 	.word	0x0810694d
 810690c:	0810694d 	.word	0x0810694d
 8106910:	0810694d 	.word	0x0810694d
 8106914:	0810694d 	.word	0x0810694d
 8106918:	0810694d 	.word	0x0810694d
 810691c:	0810694d 	.word	0x0810694d
 8106920:	0810694d 	.word	0x0810694d
 8106924:	08106953 	.word	0x08106953
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	3304      	adds	r3, #4
 810692c:	2101      	movs	r1, #1
 810692e:	4618      	mov	r0, r3
 8106930:	f000 fdf2 	bl	8107518 <RCCEx_PLL2_Config>
 8106934:	4603      	mov	r3, r0
 8106936:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106938:	e00c      	b.n	8106954 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	3324      	adds	r3, #36	; 0x24
 810693e:	2101      	movs	r1, #1
 8106940:	4618      	mov	r0, r3
 8106942:	f000 fe9b 	bl	810767c <RCCEx_PLL3_Config>
 8106946:	4603      	mov	r3, r0
 8106948:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810694a:	e003      	b.n	8106954 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810694c:	2301      	movs	r3, #1
 810694e:	75fb      	strb	r3, [r7, #23]
      break;
 8106950:	e000      	b.n	8106954 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8106952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106954:	7dfb      	ldrb	r3, [r7, #23]
 8106956:	2b00      	cmp	r3, #0
 8106958:	d109      	bne.n	810696e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810695a:	4b24      	ldr	r3, [pc, #144]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810695e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106966:	4921      	ldr	r1, [pc, #132]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106968:	4313      	orrs	r3, r2
 810696a:	654b      	str	r3, [r1, #84]	; 0x54
 810696c:	e001      	b.n	8106972 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810696e:	7dfb      	ldrb	r3, [r7, #23]
 8106970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106972:	687b      	ldr	r3, [r7, #4]
 8106974:	681b      	ldr	r3, [r3, #0]
 8106976:	f003 0302 	and.w	r3, r3, #2
 810697a:	2b00      	cmp	r3, #0
 810697c:	d03c      	beq.n	81069f8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106982:	2b05      	cmp	r3, #5
 8106984:	d820      	bhi.n	81069c8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8106986:	a201      	add	r2, pc, #4	; (adr r2, 810698c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8106988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810698c:	081069cf 	.word	0x081069cf
 8106990:	081069a5 	.word	0x081069a5
 8106994:	081069b7 	.word	0x081069b7
 8106998:	081069cf 	.word	0x081069cf
 810699c:	081069cf 	.word	0x081069cf
 81069a0:	081069cf 	.word	0x081069cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	3304      	adds	r3, #4
 81069a8:	2101      	movs	r1, #1
 81069aa:	4618      	mov	r0, r3
 81069ac:	f000 fdb4 	bl	8107518 <RCCEx_PLL2_Config>
 81069b0:	4603      	mov	r3, r0
 81069b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81069b4:	e00c      	b.n	81069d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81069b6:	687b      	ldr	r3, [r7, #4]
 81069b8:	3324      	adds	r3, #36	; 0x24
 81069ba:	2101      	movs	r1, #1
 81069bc:	4618      	mov	r0, r3
 81069be:	f000 fe5d 	bl	810767c <RCCEx_PLL3_Config>
 81069c2:	4603      	mov	r3, r0
 81069c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81069c6:	e003      	b.n	81069d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81069c8:	2301      	movs	r3, #1
 81069ca:	75fb      	strb	r3, [r7, #23]
      break;
 81069cc:	e000      	b.n	81069d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81069ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81069d0:	7dfb      	ldrb	r3, [r7, #23]
 81069d2:	2b00      	cmp	r3, #0
 81069d4:	d10e      	bne.n	81069f4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81069d6:	4b05      	ldr	r3, [pc, #20]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81069da:	f023 0207 	bic.w	r2, r3, #7
 81069de:	687b      	ldr	r3, [r7, #4]
 81069e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81069e2:	4902      	ldr	r1, [pc, #8]	; (81069ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81069e4:	4313      	orrs	r3, r2
 81069e6:	654b      	str	r3, [r1, #84]	; 0x54
 81069e8:	e006      	b.n	81069f8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81069ea:	bf00      	nop
 81069ec:	58024400 	.word	0x58024400
 81069f0:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069f4:	7dfb      	ldrb	r3, [r7, #23]
 81069f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	681b      	ldr	r3, [r3, #0]
 81069fc:	f003 0304 	and.w	r3, r3, #4
 8106a00:	2b00      	cmp	r3, #0
 8106a02:	d039      	beq.n	8106a78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106a0a:	2b05      	cmp	r3, #5
 8106a0c:	d820      	bhi.n	8106a50 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8106a0e:	a201      	add	r2, pc, #4	; (adr r2, 8106a14 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8106a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a14:	08106a57 	.word	0x08106a57
 8106a18:	08106a2d 	.word	0x08106a2d
 8106a1c:	08106a3f 	.word	0x08106a3f
 8106a20:	08106a57 	.word	0x08106a57
 8106a24:	08106a57 	.word	0x08106a57
 8106a28:	08106a57 	.word	0x08106a57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	3304      	adds	r3, #4
 8106a30:	2101      	movs	r1, #1
 8106a32:	4618      	mov	r0, r3
 8106a34:	f000 fd70 	bl	8107518 <RCCEx_PLL2_Config>
 8106a38:	4603      	mov	r3, r0
 8106a3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106a3c:	e00c      	b.n	8106a58 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	3324      	adds	r3, #36	; 0x24
 8106a42:	2101      	movs	r1, #1
 8106a44:	4618      	mov	r0, r3
 8106a46:	f000 fe19 	bl	810767c <RCCEx_PLL3_Config>
 8106a4a:	4603      	mov	r3, r0
 8106a4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106a4e:	e003      	b.n	8106a58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106a50:	2301      	movs	r3, #1
 8106a52:	75fb      	strb	r3, [r7, #23]
      break;
 8106a54:	e000      	b.n	8106a58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8106a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106a58:	7dfb      	ldrb	r3, [r7, #23]
 8106a5a:	2b00      	cmp	r3, #0
 8106a5c:	d10a      	bne.n	8106a74 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106a5e:	4bb7      	ldr	r3, [pc, #732]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106a62:	f023 0207 	bic.w	r2, r3, #7
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106a6c:	49b3      	ldr	r1, [pc, #716]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106a6e:	4313      	orrs	r3, r2
 8106a70:	658b      	str	r3, [r1, #88]	; 0x58
 8106a72:	e001      	b.n	8106a78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a74:	7dfb      	ldrb	r3, [r7, #23]
 8106a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106a78:	687b      	ldr	r3, [r7, #4]
 8106a7a:	681b      	ldr	r3, [r3, #0]
 8106a7c:	f003 0320 	and.w	r3, r3, #32
 8106a80:	2b00      	cmp	r3, #0
 8106a82:	d04b      	beq.n	8106b1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106a8e:	d02e      	beq.n	8106aee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8106a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106a94:	d828      	bhi.n	8106ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106a9a:	d02a      	beq.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8106a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106aa0:	d822      	bhi.n	8106ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106aa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106aa6:	d026      	beq.n	8106af6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8106aa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106aac:	d81c      	bhi.n	8106ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106ab2:	d010      	beq.n	8106ad6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8106ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106ab8:	d816      	bhi.n	8106ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106aba:	2b00      	cmp	r3, #0
 8106abc:	d01d      	beq.n	8106afa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8106abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106ac2:	d111      	bne.n	8106ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	3304      	adds	r3, #4
 8106ac8:	2100      	movs	r1, #0
 8106aca:	4618      	mov	r0, r3
 8106acc:	f000 fd24 	bl	8107518 <RCCEx_PLL2_Config>
 8106ad0:	4603      	mov	r3, r0
 8106ad2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106ad4:	e012      	b.n	8106afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106ad6:	687b      	ldr	r3, [r7, #4]
 8106ad8:	3324      	adds	r3, #36	; 0x24
 8106ada:	2102      	movs	r1, #2
 8106adc:	4618      	mov	r0, r3
 8106ade:	f000 fdcd 	bl	810767c <RCCEx_PLL3_Config>
 8106ae2:	4603      	mov	r3, r0
 8106ae4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106ae6:	e009      	b.n	8106afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106ae8:	2301      	movs	r3, #1
 8106aea:	75fb      	strb	r3, [r7, #23]
      break;
 8106aec:	e006      	b.n	8106afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106aee:	bf00      	nop
 8106af0:	e004      	b.n	8106afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106af2:	bf00      	nop
 8106af4:	e002      	b.n	8106afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106af6:	bf00      	nop
 8106af8:	e000      	b.n	8106afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106afc:	7dfb      	ldrb	r3, [r7, #23]
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	d10a      	bne.n	8106b18 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106b02:	4b8e      	ldr	r3, [pc, #568]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106b06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106b10:	498a      	ldr	r1, [pc, #552]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106b12:	4313      	orrs	r3, r2
 8106b14:	654b      	str	r3, [r1, #84]	; 0x54
 8106b16:	e001      	b.n	8106b1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b18:	7dfb      	ldrb	r3, [r7, #23]
 8106b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	681b      	ldr	r3, [r3, #0]
 8106b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106b24:	2b00      	cmp	r3, #0
 8106b26:	d04b      	beq.n	8106bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106b2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106b32:	d02e      	beq.n	8106b92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8106b34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106b38:	d828      	bhi.n	8106b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8106b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106b3e:	d02a      	beq.n	8106b96 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8106b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106b44:	d822      	bhi.n	8106b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8106b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106b4a:	d026      	beq.n	8106b9a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8106b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106b50:	d81c      	bhi.n	8106b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8106b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106b56:	d010      	beq.n	8106b7a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8106b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106b5c:	d816      	bhi.n	8106b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8106b5e:	2b00      	cmp	r3, #0
 8106b60:	d01d      	beq.n	8106b9e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8106b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106b66:	d111      	bne.n	8106b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	3304      	adds	r3, #4
 8106b6c:	2100      	movs	r1, #0
 8106b6e:	4618      	mov	r0, r3
 8106b70:	f000 fcd2 	bl	8107518 <RCCEx_PLL2_Config>
 8106b74:	4603      	mov	r3, r0
 8106b76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8106b78:	e012      	b.n	8106ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106b7a:	687b      	ldr	r3, [r7, #4]
 8106b7c:	3324      	adds	r3, #36	; 0x24
 8106b7e:	2102      	movs	r1, #2
 8106b80:	4618      	mov	r0, r3
 8106b82:	f000 fd7b 	bl	810767c <RCCEx_PLL3_Config>
 8106b86:	4603      	mov	r3, r0
 8106b88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8106b8a:	e009      	b.n	8106ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106b8c:	2301      	movs	r3, #1
 8106b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8106b90:	e006      	b.n	8106ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8106b92:	bf00      	nop
 8106b94:	e004      	b.n	8106ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8106b96:	bf00      	nop
 8106b98:	e002      	b.n	8106ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8106b9a:	bf00      	nop
 8106b9c:	e000      	b.n	8106ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8106b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106ba0:	7dfb      	ldrb	r3, [r7, #23]
 8106ba2:	2b00      	cmp	r3, #0
 8106ba4:	d10a      	bne.n	8106bbc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106ba6:	4b65      	ldr	r3, [pc, #404]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106baa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106bb4:	4961      	ldr	r1, [pc, #388]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106bb6:	4313      	orrs	r3, r2
 8106bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8106bba:	e001      	b.n	8106bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bbc:	7dfb      	ldrb	r3, [r7, #23]
 8106bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106bc8:	2b00      	cmp	r3, #0
 8106bca:	d04b      	beq.n	8106c64 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106bd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106bd6:	d02e      	beq.n	8106c36 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8106bd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106bdc:	d828      	bhi.n	8106c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8106bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106be2:	d02a      	beq.n	8106c3a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8106be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106be8:	d822      	bhi.n	8106c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8106bea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106bee:	d026      	beq.n	8106c3e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8106bf0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106bf4:	d81c      	bhi.n	8106c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8106bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106bfa:	d010      	beq.n	8106c1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8106bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106c00:	d816      	bhi.n	8106c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8106c02:	2b00      	cmp	r3, #0
 8106c04:	d01d      	beq.n	8106c42 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8106c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106c0a:	d111      	bne.n	8106c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	3304      	adds	r3, #4
 8106c10:	2100      	movs	r1, #0
 8106c12:	4618      	mov	r0, r3
 8106c14:	f000 fc80 	bl	8107518 <RCCEx_PLL2_Config>
 8106c18:	4603      	mov	r3, r0
 8106c1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106c1c:	e012      	b.n	8106c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	3324      	adds	r3, #36	; 0x24
 8106c22:	2102      	movs	r1, #2
 8106c24:	4618      	mov	r0, r3
 8106c26:	f000 fd29 	bl	810767c <RCCEx_PLL3_Config>
 8106c2a:	4603      	mov	r3, r0
 8106c2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106c2e:	e009      	b.n	8106c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106c30:	2301      	movs	r3, #1
 8106c32:	75fb      	strb	r3, [r7, #23]
      break;
 8106c34:	e006      	b.n	8106c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8106c36:	bf00      	nop
 8106c38:	e004      	b.n	8106c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8106c3a:	bf00      	nop
 8106c3c:	e002      	b.n	8106c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8106c3e:	bf00      	nop
 8106c40:	e000      	b.n	8106c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8106c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106c44:	7dfb      	ldrb	r3, [r7, #23]
 8106c46:	2b00      	cmp	r3, #0
 8106c48:	d10a      	bne.n	8106c60 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106c4a:	4b3c      	ldr	r3, [pc, #240]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106c58:	4938      	ldr	r1, [pc, #224]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106c5a:	4313      	orrs	r3, r2
 8106c5c:	658b      	str	r3, [r1, #88]	; 0x58
 8106c5e:	e001      	b.n	8106c64 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c60:	7dfb      	ldrb	r3, [r7, #23]
 8106c62:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106c64:	687b      	ldr	r3, [r7, #4]
 8106c66:	681b      	ldr	r3, [r3, #0]
 8106c68:	f003 0308 	and.w	r3, r3, #8
 8106c6c:	2b00      	cmp	r3, #0
 8106c6e:	d01a      	beq.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106c7a:	d10a      	bne.n	8106c92 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	3324      	adds	r3, #36	; 0x24
 8106c80:	2102      	movs	r1, #2
 8106c82:	4618      	mov	r0, r3
 8106c84:	f000 fcfa 	bl	810767c <RCCEx_PLL3_Config>
 8106c88:	4603      	mov	r3, r0
 8106c8a:	2b00      	cmp	r3, #0
 8106c8c:	d001      	beq.n	8106c92 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8106c8e:	2301      	movs	r3, #1
 8106c90:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106c92:	4b2a      	ldr	r3, [pc, #168]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8106c9a:	687b      	ldr	r3, [r7, #4]
 8106c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106ca0:	4926      	ldr	r1, [pc, #152]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106ca2:	4313      	orrs	r3, r2
 8106ca4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	681b      	ldr	r3, [r3, #0]
 8106caa:	f003 0310 	and.w	r3, r3, #16
 8106cae:	2b00      	cmp	r3, #0
 8106cb0:	d01a      	beq.n	8106ce8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106cbc:	d10a      	bne.n	8106cd4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	3324      	adds	r3, #36	; 0x24
 8106cc2:	2102      	movs	r1, #2
 8106cc4:	4618      	mov	r0, r3
 8106cc6:	f000 fcd9 	bl	810767c <RCCEx_PLL3_Config>
 8106cca:	4603      	mov	r3, r0
 8106ccc:	2b00      	cmp	r3, #0
 8106cce:	d001      	beq.n	8106cd4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8106cd0:	2301      	movs	r3, #1
 8106cd2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106cd4:	4b19      	ldr	r3, [pc, #100]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106ce2:	4916      	ldr	r1, [pc, #88]	; (8106d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106ce4:	4313      	orrs	r3, r2
 8106ce6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106cf0:	2b00      	cmp	r3, #0
 8106cf2:	d036      	beq.n	8106d62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106cfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106cfe:	d01f      	beq.n	8106d40 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8106d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106d04:	d817      	bhi.n	8106d36 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8106d06:	2b00      	cmp	r3, #0
 8106d08:	d003      	beq.n	8106d12 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8106d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106d0e:	d009      	beq.n	8106d24 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8106d10:	e011      	b.n	8106d36 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106d12:	687b      	ldr	r3, [r7, #4]
 8106d14:	3304      	adds	r3, #4
 8106d16:	2100      	movs	r1, #0
 8106d18:	4618      	mov	r0, r3
 8106d1a:	f000 fbfd 	bl	8107518 <RCCEx_PLL2_Config>
 8106d1e:	4603      	mov	r3, r0
 8106d20:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8106d22:	e00e      	b.n	8106d42 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	3324      	adds	r3, #36	; 0x24
 8106d28:	2102      	movs	r1, #2
 8106d2a:	4618      	mov	r0, r3
 8106d2c:	f000 fca6 	bl	810767c <RCCEx_PLL3_Config>
 8106d30:	4603      	mov	r3, r0
 8106d32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8106d34:	e005      	b.n	8106d42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106d36:	2301      	movs	r3, #1
 8106d38:	75fb      	strb	r3, [r7, #23]
      break;
 8106d3a:	e002      	b.n	8106d42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8106d3c:	58024400 	.word	0x58024400
      break;
 8106d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106d42:	7dfb      	ldrb	r3, [r7, #23]
 8106d44:	2b00      	cmp	r3, #0
 8106d46:	d10a      	bne.n	8106d5e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106d48:	4b93      	ldr	r3, [pc, #588]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8106d50:	687b      	ldr	r3, [r7, #4]
 8106d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106d56:	4990      	ldr	r1, [pc, #576]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106d58:	4313      	orrs	r3, r2
 8106d5a:	658b      	str	r3, [r1, #88]	; 0x58
 8106d5c:	e001      	b.n	8106d62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d5e:	7dfb      	ldrb	r3, [r7, #23]
 8106d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	681b      	ldr	r3, [r3, #0]
 8106d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8106d6a:	2b00      	cmp	r3, #0
 8106d6c:	d033      	beq.n	8106dd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8106d6e:	687b      	ldr	r3, [r7, #4]
 8106d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106d74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106d78:	d01c      	beq.n	8106db4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8106d7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106d7e:	d816      	bhi.n	8106dae <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8106d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106d84:	d003      	beq.n	8106d8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8106d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106d8a:	d007      	beq.n	8106d9c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8106d8c:	e00f      	b.n	8106dae <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d8e:	4b82      	ldr	r3, [pc, #520]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d92:	4a81      	ldr	r2, [pc, #516]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8106d9a:	e00c      	b.n	8106db6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	3324      	adds	r3, #36	; 0x24
 8106da0:	2101      	movs	r1, #1
 8106da2:	4618      	mov	r0, r3
 8106da4:	f000 fc6a 	bl	810767c <RCCEx_PLL3_Config>
 8106da8:	4603      	mov	r3, r0
 8106daa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8106dac:	e003      	b.n	8106db6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106dae:	2301      	movs	r3, #1
 8106db0:	75fb      	strb	r3, [r7, #23]
      break;
 8106db2:	e000      	b.n	8106db6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8106db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106db6:	7dfb      	ldrb	r3, [r7, #23]
 8106db8:	2b00      	cmp	r3, #0
 8106dba:	d10a      	bne.n	8106dd2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106dbc:	4b76      	ldr	r3, [pc, #472]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106dca:	4973      	ldr	r1, [pc, #460]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106dcc:	4313      	orrs	r3, r2
 8106dce:	654b      	str	r3, [r1, #84]	; 0x54
 8106dd0:	e001      	b.n	8106dd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dd2:	7dfb      	ldrb	r3, [r7, #23]
 8106dd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	681b      	ldr	r3, [r3, #0]
 8106dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106dde:	2b00      	cmp	r3, #0
 8106de0:	d029      	beq.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8106de2:	687b      	ldr	r3, [r7, #4]
 8106de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106de6:	2b00      	cmp	r3, #0
 8106de8:	d003      	beq.n	8106df2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8106dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106dee:	d007      	beq.n	8106e00 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8106df0:	e00f      	b.n	8106e12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106df2:	4b69      	ldr	r3, [pc, #420]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106df6:	4a68      	ldr	r2, [pc, #416]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106dfe:	e00b      	b.n	8106e18 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	3304      	adds	r3, #4
 8106e04:	2102      	movs	r1, #2
 8106e06:	4618      	mov	r0, r3
 8106e08:	f000 fb86 	bl	8107518 <RCCEx_PLL2_Config>
 8106e0c:	4603      	mov	r3, r0
 8106e0e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106e10:	e002      	b.n	8106e18 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8106e12:	2301      	movs	r3, #1
 8106e14:	75fb      	strb	r3, [r7, #23]
      break;
 8106e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106e18:	7dfb      	ldrb	r3, [r7, #23]
 8106e1a:	2b00      	cmp	r3, #0
 8106e1c:	d109      	bne.n	8106e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106e1e:	4b5e      	ldr	r3, [pc, #376]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106e22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106e26:	687b      	ldr	r3, [r7, #4]
 8106e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106e2a:	495b      	ldr	r1, [pc, #364]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106e2c:	4313      	orrs	r3, r2
 8106e2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106e30:	e001      	b.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e32:	7dfb      	ldrb	r3, [r7, #23]
 8106e34:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	681b      	ldr	r3, [r3, #0]
 8106e3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106e3e:	2b00      	cmp	r3, #0
 8106e40:	d00a      	beq.n	8106e58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8106e42:	687b      	ldr	r3, [r7, #4]
 8106e44:	3324      	adds	r3, #36	; 0x24
 8106e46:	2102      	movs	r1, #2
 8106e48:	4618      	mov	r0, r3
 8106e4a:	f000 fc17 	bl	810767c <RCCEx_PLL3_Config>
 8106e4e:	4603      	mov	r3, r0
 8106e50:	2b00      	cmp	r3, #0
 8106e52:	d001      	beq.n	8106e58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8106e54:	2301      	movs	r3, #1
 8106e56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	681b      	ldr	r3, [r3, #0]
 8106e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106e60:	2b00      	cmp	r3, #0
 8106e62:	d030      	beq.n	8106ec6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8106e64:	687b      	ldr	r3, [r7, #4]
 8106e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106e6c:	d017      	beq.n	8106e9e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8106e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106e72:	d811      	bhi.n	8106e98 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8106e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106e78:	d013      	beq.n	8106ea2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8106e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106e7e:	d80b      	bhi.n	8106e98 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8106e80:	2b00      	cmp	r3, #0
 8106e82:	d010      	beq.n	8106ea6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8106e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106e88:	d106      	bne.n	8106e98 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e8a:	4b43      	ldr	r3, [pc, #268]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e8e:	4a42      	ldr	r2, [pc, #264]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106e94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8106e96:	e007      	b.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106e98:	2301      	movs	r3, #1
 8106e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8106e9c:	e004      	b.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8106e9e:	bf00      	nop
 8106ea0:	e002      	b.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8106ea2:	bf00      	nop
 8106ea4:	e000      	b.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8106ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106ea8:	7dfb      	ldrb	r3, [r7, #23]
 8106eaa:	2b00      	cmp	r3, #0
 8106eac:	d109      	bne.n	8106ec2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106eae:	4b3a      	ldr	r3, [pc, #232]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106eba:	4937      	ldr	r1, [pc, #220]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106ebc:	4313      	orrs	r3, r2
 8106ebe:	654b      	str	r3, [r1, #84]	; 0x54
 8106ec0:	e001      	b.n	8106ec6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ec2:	7dfb      	ldrb	r3, [r7, #23]
 8106ec4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106ec6:	687b      	ldr	r3, [r7, #4]
 8106ec8:	681b      	ldr	r3, [r3, #0]
 8106eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106ece:	2b00      	cmp	r3, #0
 8106ed0:	d008      	beq.n	8106ee4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106ed2:	4b31      	ldr	r3, [pc, #196]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ed6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8106eda:	687b      	ldr	r3, [r7, #4]
 8106edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106ede:	492e      	ldr	r1, [pc, #184]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106ee0:	4313      	orrs	r3, r2
 8106ee2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106eec:	2b00      	cmp	r3, #0
 8106eee:	d009      	beq.n	8106f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106ef0:	4b29      	ldr	r3, [pc, #164]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106ef2:	691b      	ldr	r3, [r3, #16]
 8106ef4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106efe:	4926      	ldr	r1, [pc, #152]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f00:	4313      	orrs	r3, r2
 8106f02:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	681b      	ldr	r3, [r3, #0]
 8106f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106f0c:	2b00      	cmp	r3, #0
 8106f0e:	d008      	beq.n	8106f22 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106f10:	4b21      	ldr	r3, [pc, #132]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106f14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106f18:	687b      	ldr	r3, [r7, #4]
 8106f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106f1c:	491e      	ldr	r1, [pc, #120]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f1e:	4313      	orrs	r3, r2
 8106f20:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	681b      	ldr	r3, [r3, #0]
 8106f26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106f2a:	2b00      	cmp	r3, #0
 8106f2c:	d00d      	beq.n	8106f4a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106f2e:	4b1a      	ldr	r3, [pc, #104]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f30:	691b      	ldr	r3, [r3, #16]
 8106f32:	4a19      	ldr	r2, [pc, #100]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8106f38:	6113      	str	r3, [r2, #16]
 8106f3a:	4b17      	ldr	r3, [pc, #92]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f3c:	691a      	ldr	r2, [r3, #16]
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8106f44:	4914      	ldr	r1, [pc, #80]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f46:	4313      	orrs	r3, r2
 8106f48:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	681b      	ldr	r3, [r3, #0]
 8106f4e:	2b00      	cmp	r3, #0
 8106f50:	da08      	bge.n	8106f64 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106f52:	4b11      	ldr	r3, [pc, #68]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106f56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106f5e:	490e      	ldr	r1, [pc, #56]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f60:	4313      	orrs	r3, r2
 8106f62:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	681b      	ldr	r3, [r3, #0]
 8106f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106f6c:	2b00      	cmp	r3, #0
 8106f6e:	d009      	beq.n	8106f84 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106f70:	4b09      	ldr	r3, [pc, #36]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106f7e:	4906      	ldr	r1, [pc, #24]	; (8106f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8106f80:	4313      	orrs	r3, r2
 8106f82:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8106f84:	7dbb      	ldrb	r3, [r7, #22]
 8106f86:	2b00      	cmp	r3, #0
 8106f88:	d101      	bne.n	8106f8e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8106f8a:	2300      	movs	r3, #0
 8106f8c:	e000      	b.n	8106f90 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8106f8e:	2301      	movs	r3, #1
}
 8106f90:	4618      	mov	r0, r3
 8106f92:	3718      	adds	r7, #24
 8106f94:	46bd      	mov	sp, r7
 8106f96:	bd80      	pop	{r7, pc}
 8106f98:	58024400 	.word	0x58024400

08106f9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106f9c:	b580      	push	{r7, lr}
 8106f9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106fa0:	f7ff f85e 	bl	8106060 <HAL_RCC_GetHCLKFreq>
 8106fa4:	4602      	mov	r2, r0
 8106fa6:	4b06      	ldr	r3, [pc, #24]	; (8106fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106fa8:	6a1b      	ldr	r3, [r3, #32]
 8106faa:	091b      	lsrs	r3, r3, #4
 8106fac:	f003 0307 	and.w	r3, r3, #7
 8106fb0:	4904      	ldr	r1, [pc, #16]	; (8106fc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106fb2:	5ccb      	ldrb	r3, [r1, r3]
 8106fb4:	f003 031f 	and.w	r3, r3, #31
 8106fb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106fbc:	4618      	mov	r0, r3
 8106fbe:	bd80      	pop	{r7, pc}
 8106fc0:	58024400 	.word	0x58024400
 8106fc4:	0810cf38 	.word	0x0810cf38

08106fc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106fc8:	b480      	push	{r7}
 8106fca:	b089      	sub	sp, #36	; 0x24
 8106fcc:	af00      	add	r7, sp, #0
 8106fce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106fd0:	4ba1      	ldr	r3, [pc, #644]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fd4:	f003 0303 	and.w	r3, r3, #3
 8106fd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106fda:	4b9f      	ldr	r3, [pc, #636]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fde:	0b1b      	lsrs	r3, r3, #12
 8106fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106fe4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106fe6:	4b9c      	ldr	r3, [pc, #624]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106fea:	091b      	lsrs	r3, r3, #4
 8106fec:	f003 0301 	and.w	r3, r3, #1
 8106ff0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106ff2:	4b99      	ldr	r3, [pc, #612]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106ff6:	08db      	lsrs	r3, r3, #3
 8106ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106ffc:	693a      	ldr	r2, [r7, #16]
 8106ffe:	fb02 f303 	mul.w	r3, r2, r3
 8107002:	ee07 3a90 	vmov	s15, r3
 8107006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810700a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810700e:	697b      	ldr	r3, [r7, #20]
 8107010:	2b00      	cmp	r3, #0
 8107012:	f000 8111 	beq.w	8107238 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107016:	69bb      	ldr	r3, [r7, #24]
 8107018:	2b02      	cmp	r3, #2
 810701a:	f000 8083 	beq.w	8107124 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810701e:	69bb      	ldr	r3, [r7, #24]
 8107020:	2b02      	cmp	r3, #2
 8107022:	f200 80a1 	bhi.w	8107168 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107026:	69bb      	ldr	r3, [r7, #24]
 8107028:	2b00      	cmp	r3, #0
 810702a:	d003      	beq.n	8107034 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810702c:	69bb      	ldr	r3, [r7, #24]
 810702e:	2b01      	cmp	r3, #1
 8107030:	d056      	beq.n	81070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107032:	e099      	b.n	8107168 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107034:	4b88      	ldr	r3, [pc, #544]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107036:	681b      	ldr	r3, [r3, #0]
 8107038:	f003 0320 	and.w	r3, r3, #32
 810703c:	2b00      	cmp	r3, #0
 810703e:	d02d      	beq.n	810709c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107040:	4b85      	ldr	r3, [pc, #532]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107042:	681b      	ldr	r3, [r3, #0]
 8107044:	08db      	lsrs	r3, r3, #3
 8107046:	f003 0303 	and.w	r3, r3, #3
 810704a:	4a84      	ldr	r2, [pc, #528]	; (810725c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810704c:	fa22 f303 	lsr.w	r3, r2, r3
 8107050:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107052:	68bb      	ldr	r3, [r7, #8]
 8107054:	ee07 3a90 	vmov	s15, r3
 8107058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810705c:	697b      	ldr	r3, [r7, #20]
 810705e:	ee07 3a90 	vmov	s15, r3
 8107062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810706a:	4b7b      	ldr	r3, [pc, #492]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810706e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107072:	ee07 3a90 	vmov	s15, r3
 8107076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810707a:	ed97 6a03 	vldr	s12, [r7, #12]
 810707e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810708a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810708e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107096:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810709a:	e087      	b.n	81071ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810709c:	697b      	ldr	r3, [r7, #20]
 810709e:	ee07 3a90 	vmov	s15, r3
 81070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81070a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107264 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81070aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81070ae:	4b6a      	ldr	r3, [pc, #424]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81070b6:	ee07 3a90 	vmov	s15, r3
 81070ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81070be:	ed97 6a03 	vldr	s12, [r7, #12]
 81070c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81070c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81070ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81070ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81070d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81070d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81070da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81070de:	e065      	b.n	81071ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81070e0:	697b      	ldr	r3, [r7, #20]
 81070e2:	ee07 3a90 	vmov	s15, r3
 81070e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81070ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81070ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81070f2:	4b59      	ldr	r3, [pc, #356]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81070f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81070fa:	ee07 3a90 	vmov	s15, r3
 81070fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107102:	ed97 6a03 	vldr	s12, [r7, #12]
 8107106:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810710a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810710e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810711a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810711e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107122:	e043      	b.n	81071ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107124:	697b      	ldr	r3, [r7, #20]
 8107126:	ee07 3a90 	vmov	s15, r3
 810712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810712e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810726c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107136:	4b48      	ldr	r3, [pc, #288]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810713e:	ee07 3a90 	vmov	s15, r3
 8107142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107146:	ed97 6a03 	vldr	s12, [r7, #12]
 810714a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810714e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810715a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107166:	e021      	b.n	81071ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107168:	697b      	ldr	r3, [r7, #20]
 810716a:	ee07 3a90 	vmov	s15, r3
 810716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107172:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810717a:	4b37      	ldr	r3, [pc, #220]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107182:	ee07 3a90 	vmov	s15, r3
 8107186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810718a:	ed97 6a03 	vldr	s12, [r7, #12]
 810718e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107260 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81071a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81071aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81071ac:	4b2a      	ldr	r3, [pc, #168]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81071b0:	0a5b      	lsrs	r3, r3, #9
 81071b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81071b6:	ee07 3a90 	vmov	s15, r3
 81071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81071c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81071c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81071ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81071ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81071d2:	ee17 2a90 	vmov	r2, s15
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81071da:	4b1f      	ldr	r3, [pc, #124]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81071de:	0c1b      	lsrs	r3, r3, #16
 81071e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81071e4:	ee07 3a90 	vmov	s15, r3
 81071e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81071f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81071f4:	edd7 6a07 	vldr	s13, [r7, #28]
 81071f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81071fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107200:	ee17 2a90 	vmov	r2, s15
 8107204:	687b      	ldr	r3, [r7, #4]
 8107206:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8107208:	4b13      	ldr	r3, [pc, #76]	; (8107258 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810720c:	0e1b      	lsrs	r3, r3, #24
 810720e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107212:	ee07 3a90 	vmov	s15, r3
 8107216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810721a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810721e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107222:	edd7 6a07 	vldr	s13, [r7, #28]
 8107226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810722a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810722e:	ee17 2a90 	vmov	r2, s15
 8107232:	687b      	ldr	r3, [r7, #4]
 8107234:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107236:	e008      	b.n	810724a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107238:	687b      	ldr	r3, [r7, #4]
 810723a:	2200      	movs	r2, #0
 810723c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810723e:	687b      	ldr	r3, [r7, #4]
 8107240:	2200      	movs	r2, #0
 8107242:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	2200      	movs	r2, #0
 8107248:	609a      	str	r2, [r3, #8]
}
 810724a:	bf00      	nop
 810724c:	3724      	adds	r7, #36	; 0x24
 810724e:	46bd      	mov	sp, r7
 8107250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107254:	4770      	bx	lr
 8107256:	bf00      	nop
 8107258:	58024400 	.word	0x58024400
 810725c:	03d09000 	.word	0x03d09000
 8107260:	46000000 	.word	0x46000000
 8107264:	4c742400 	.word	0x4c742400
 8107268:	4a742400 	.word	0x4a742400
 810726c:	4bbebc20 	.word	0x4bbebc20

08107270 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8107270:	b480      	push	{r7}
 8107272:	b089      	sub	sp, #36	; 0x24
 8107274:	af00      	add	r7, sp, #0
 8107276:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107278:	4ba1      	ldr	r3, [pc, #644]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810727c:	f003 0303 	and.w	r3, r3, #3
 8107280:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8107282:	4b9f      	ldr	r3, [pc, #636]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107286:	0d1b      	lsrs	r3, r3, #20
 8107288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810728c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810728e:	4b9c      	ldr	r3, [pc, #624]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107292:	0a1b      	lsrs	r3, r3, #8
 8107294:	f003 0301 	and.w	r3, r3, #1
 8107298:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810729a:	4b99      	ldr	r3, [pc, #612]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810729e:	08db      	lsrs	r3, r3, #3
 81072a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81072a4:	693a      	ldr	r2, [r7, #16]
 81072a6:	fb02 f303 	mul.w	r3, r2, r3
 81072aa:	ee07 3a90 	vmov	s15, r3
 81072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81072b6:	697b      	ldr	r3, [r7, #20]
 81072b8:	2b00      	cmp	r3, #0
 81072ba:	f000 8111 	beq.w	81074e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81072be:	69bb      	ldr	r3, [r7, #24]
 81072c0:	2b02      	cmp	r3, #2
 81072c2:	f000 8083 	beq.w	81073cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81072c6:	69bb      	ldr	r3, [r7, #24]
 81072c8:	2b02      	cmp	r3, #2
 81072ca:	f200 80a1 	bhi.w	8107410 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81072ce:	69bb      	ldr	r3, [r7, #24]
 81072d0:	2b00      	cmp	r3, #0
 81072d2:	d003      	beq.n	81072dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81072d4:	69bb      	ldr	r3, [r7, #24]
 81072d6:	2b01      	cmp	r3, #1
 81072d8:	d056      	beq.n	8107388 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81072da:	e099      	b.n	8107410 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81072dc:	4b88      	ldr	r3, [pc, #544]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81072de:	681b      	ldr	r3, [r3, #0]
 81072e0:	f003 0320 	and.w	r3, r3, #32
 81072e4:	2b00      	cmp	r3, #0
 81072e6:	d02d      	beq.n	8107344 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81072e8:	4b85      	ldr	r3, [pc, #532]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	08db      	lsrs	r3, r3, #3
 81072ee:	f003 0303 	and.w	r3, r3, #3
 81072f2:	4a84      	ldr	r2, [pc, #528]	; (8107504 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81072f4:	fa22 f303 	lsr.w	r3, r2, r3
 81072f8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81072fa:	68bb      	ldr	r3, [r7, #8]
 81072fc:	ee07 3a90 	vmov	s15, r3
 8107300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107304:	697b      	ldr	r3, [r7, #20]
 8107306:	ee07 3a90 	vmov	s15, r3
 810730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810730e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107312:	4b7b      	ldr	r3, [pc, #492]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810731a:	ee07 3a90 	vmov	s15, r3
 810731e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107322:	ed97 6a03 	vldr	s12, [r7, #12]
 8107326:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810732a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810732e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810733a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810733e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8107342:	e087      	b.n	8107454 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107344:	697b      	ldr	r3, [r7, #20]
 8107346:	ee07 3a90 	vmov	s15, r3
 810734a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810734e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810750c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107356:	4b6a      	ldr	r3, [pc, #424]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810735a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810735e:	ee07 3a90 	vmov	s15, r3
 8107362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107366:	ed97 6a03 	vldr	s12, [r7, #12]
 810736a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810736e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810737a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810737e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107386:	e065      	b.n	8107454 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107388:	697b      	ldr	r3, [r7, #20]
 810738a:	ee07 3a90 	vmov	s15, r3
 810738e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107392:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810739a:	4b59      	ldr	r3, [pc, #356]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810739e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81073a2:	ee07 3a90 	vmov	s15, r3
 81073a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81073ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81073b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81073b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81073ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81073be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81073c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81073c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81073ca:	e043      	b.n	8107454 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81073cc:	697b      	ldr	r3, [r7, #20]
 81073ce:	ee07 3a90 	vmov	s15, r3
 81073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81073da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81073de:	4b48      	ldr	r3, [pc, #288]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81073e6:	ee07 3a90 	vmov	s15, r3
 81073ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81073f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81073f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81073fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81073fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107406:	ee67 7a27 	vmul.f32	s15, s14, s15
 810740a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810740e:	e021      	b.n	8107454 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107410:	697b      	ldr	r3, [r7, #20]
 8107412:	ee07 3a90 	vmov	s15, r3
 8107416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810741a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107422:	4b37      	ldr	r3, [pc, #220]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810742a:	ee07 3a90 	vmov	s15, r3
 810742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107432:	ed97 6a03 	vldr	s12, [r7, #12]
 8107436:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107508 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810744e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107452:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8107454:	4b2a      	ldr	r3, [pc, #168]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107458:	0a5b      	lsrs	r3, r3, #9
 810745a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810745e:	ee07 3a90 	vmov	s15, r3
 8107462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810746a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810746e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810747a:	ee17 2a90 	vmov	r2, s15
 810747e:	687b      	ldr	r3, [r7, #4]
 8107480:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8107482:	4b1f      	ldr	r3, [pc, #124]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107486:	0c1b      	lsrs	r3, r3, #16
 8107488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810748c:	ee07 3a90 	vmov	s15, r3
 8107490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107498:	ee37 7a87 	vadd.f32	s14, s15, s14
 810749c:	edd7 6a07 	vldr	s13, [r7, #28]
 81074a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81074a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81074a8:	ee17 2a90 	vmov	r2, s15
 81074ac:	687b      	ldr	r3, [r7, #4]
 81074ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81074b0:	4b13      	ldr	r3, [pc, #76]	; (8107500 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81074b4:	0e1b      	lsrs	r3, r3, #24
 81074b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81074ba:	ee07 3a90 	vmov	s15, r3
 81074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81074c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81074ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81074ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81074d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81074d6:	ee17 2a90 	vmov	r2, s15
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81074de:	e008      	b.n	81074f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81074e0:	687b      	ldr	r3, [r7, #4]
 81074e2:	2200      	movs	r2, #0
 81074e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	2200      	movs	r2, #0
 81074ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	2200      	movs	r2, #0
 81074f0:	609a      	str	r2, [r3, #8]
}
 81074f2:	bf00      	nop
 81074f4:	3724      	adds	r7, #36	; 0x24
 81074f6:	46bd      	mov	sp, r7
 81074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074fc:	4770      	bx	lr
 81074fe:	bf00      	nop
 8107500:	58024400 	.word	0x58024400
 8107504:	03d09000 	.word	0x03d09000
 8107508:	46000000 	.word	0x46000000
 810750c:	4c742400 	.word	0x4c742400
 8107510:	4a742400 	.word	0x4a742400
 8107514:	4bbebc20 	.word	0x4bbebc20

08107518 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107518:	b580      	push	{r7, lr}
 810751a:	b084      	sub	sp, #16
 810751c:	af00      	add	r7, sp, #0
 810751e:	6078      	str	r0, [r7, #4]
 8107520:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107522:	2300      	movs	r3, #0
 8107524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107526:	4b54      	ldr	r3, [pc, #336]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810752a:	f003 0303 	and.w	r3, r3, #3
 810752e:	2b03      	cmp	r3, #3
 8107530:	d101      	bne.n	8107536 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107532:	2301      	movs	r3, #1
 8107534:	e09b      	b.n	810766e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107536:	4b50      	ldr	r3, [pc, #320]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107538:	681b      	ldr	r3, [r3, #0]
 810753a:	4a4f      	ldr	r2, [pc, #316]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 810753c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8107540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107542:	f7fd fb37 	bl	8104bb4 <HAL_GetTick>
 8107546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107548:	e008      	b.n	810755c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810754a:	f7fd fb33 	bl	8104bb4 <HAL_GetTick>
 810754e:	4602      	mov	r2, r0
 8107550:	68bb      	ldr	r3, [r7, #8]
 8107552:	1ad3      	subs	r3, r2, r3
 8107554:	2b02      	cmp	r3, #2
 8107556:	d901      	bls.n	810755c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107558:	2303      	movs	r3, #3
 810755a:	e088      	b.n	810766e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810755c:	4b46      	ldr	r3, [pc, #280]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 810755e:	681b      	ldr	r3, [r3, #0]
 8107560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107564:	2b00      	cmp	r3, #0
 8107566:	d1f0      	bne.n	810754a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107568:	4b43      	ldr	r3, [pc, #268]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 810756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810756c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	681b      	ldr	r3, [r3, #0]
 8107574:	031b      	lsls	r3, r3, #12
 8107576:	4940      	ldr	r1, [pc, #256]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107578:	4313      	orrs	r3, r2
 810757a:	628b      	str	r3, [r1, #40]	; 0x28
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	685b      	ldr	r3, [r3, #4]
 8107580:	3b01      	subs	r3, #1
 8107582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	689b      	ldr	r3, [r3, #8]
 810758a:	3b01      	subs	r3, #1
 810758c:	025b      	lsls	r3, r3, #9
 810758e:	b29b      	uxth	r3, r3
 8107590:	431a      	orrs	r2, r3
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	68db      	ldr	r3, [r3, #12]
 8107596:	3b01      	subs	r3, #1
 8107598:	041b      	lsls	r3, r3, #16
 810759a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810759e:	431a      	orrs	r2, r3
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	691b      	ldr	r3, [r3, #16]
 81075a4:	3b01      	subs	r3, #1
 81075a6:	061b      	lsls	r3, r3, #24
 81075a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81075ac:	4932      	ldr	r1, [pc, #200]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075ae:	4313      	orrs	r3, r2
 81075b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81075b2:	4b31      	ldr	r3, [pc, #196]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81075b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81075ba:	687b      	ldr	r3, [r7, #4]
 81075bc:	695b      	ldr	r3, [r3, #20]
 81075be:	492e      	ldr	r1, [pc, #184]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075c0:	4313      	orrs	r3, r2
 81075c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81075c4:	4b2c      	ldr	r3, [pc, #176]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81075c8:	f023 0220 	bic.w	r2, r3, #32
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	699b      	ldr	r3, [r3, #24]
 81075d0:	4929      	ldr	r1, [pc, #164]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075d2:	4313      	orrs	r3, r2
 81075d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81075d6:	4b28      	ldr	r3, [pc, #160]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81075da:	4a27      	ldr	r2, [pc, #156]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075dc:	f023 0310 	bic.w	r3, r3, #16
 81075e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81075e2:	4b25      	ldr	r3, [pc, #148]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81075ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81075ee:	687a      	ldr	r2, [r7, #4]
 81075f0:	69d2      	ldr	r2, [r2, #28]
 81075f2:	00d2      	lsls	r2, r2, #3
 81075f4:	4920      	ldr	r1, [pc, #128]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075f6:	4313      	orrs	r3, r2
 81075f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81075fa:	4b1f      	ldr	r3, [pc, #124]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 81075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81075fe:	4a1e      	ldr	r2, [pc, #120]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107600:	f043 0310 	orr.w	r3, r3, #16
 8107604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107606:	683b      	ldr	r3, [r7, #0]
 8107608:	2b00      	cmp	r3, #0
 810760a:	d106      	bne.n	810761a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810760c:	4b1a      	ldr	r3, [pc, #104]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 810760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107610:	4a19      	ldr	r2, [pc, #100]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107618:	e00f      	b.n	810763a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810761a:	683b      	ldr	r3, [r7, #0]
 810761c:	2b01      	cmp	r3, #1
 810761e:	d106      	bne.n	810762e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107620:	4b15      	ldr	r3, [pc, #84]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107624:	4a14      	ldr	r2, [pc, #80]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810762a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810762c:	e005      	b.n	810763a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810762e:	4b12      	ldr	r3, [pc, #72]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107632:	4a11      	ldr	r2, [pc, #68]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107638:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810763a:	4b0f      	ldr	r3, [pc, #60]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 810763c:	681b      	ldr	r3, [r3, #0]
 810763e:	4a0e      	ldr	r2, [pc, #56]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107640:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107646:	f7fd fab5 	bl	8104bb4 <HAL_GetTick>
 810764a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810764c:	e008      	b.n	8107660 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810764e:	f7fd fab1 	bl	8104bb4 <HAL_GetTick>
 8107652:	4602      	mov	r2, r0
 8107654:	68bb      	ldr	r3, [r7, #8]
 8107656:	1ad3      	subs	r3, r2, r3
 8107658:	2b02      	cmp	r3, #2
 810765a:	d901      	bls.n	8107660 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810765c:	2303      	movs	r3, #3
 810765e:	e006      	b.n	810766e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107660:	4b05      	ldr	r3, [pc, #20]	; (8107678 <RCCEx_PLL2_Config+0x160>)
 8107662:	681b      	ldr	r3, [r3, #0]
 8107664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107668:	2b00      	cmp	r3, #0
 810766a:	d0f0      	beq.n	810764e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810766c:	7bfb      	ldrb	r3, [r7, #15]
}
 810766e:	4618      	mov	r0, r3
 8107670:	3710      	adds	r7, #16
 8107672:	46bd      	mov	sp, r7
 8107674:	bd80      	pop	{r7, pc}
 8107676:	bf00      	nop
 8107678:	58024400 	.word	0x58024400

0810767c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810767c:	b580      	push	{r7, lr}
 810767e:	b084      	sub	sp, #16
 8107680:	af00      	add	r7, sp, #0
 8107682:	6078      	str	r0, [r7, #4]
 8107684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107686:	2300      	movs	r3, #0
 8107688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810768a:	4b54      	ldr	r3, [pc, #336]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 810768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810768e:	f003 0303 	and.w	r3, r3, #3
 8107692:	2b03      	cmp	r3, #3
 8107694:	d101      	bne.n	810769a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107696:	2301      	movs	r3, #1
 8107698:	e09b      	b.n	81077d2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810769a:	4b50      	ldr	r3, [pc, #320]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 810769c:	681b      	ldr	r3, [r3, #0]
 810769e:	4a4f      	ldr	r2, [pc, #316]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 81076a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81076a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81076a6:	f7fd fa85 	bl	8104bb4 <HAL_GetTick>
 81076aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81076ac:	e008      	b.n	81076c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81076ae:	f7fd fa81 	bl	8104bb4 <HAL_GetTick>
 81076b2:	4602      	mov	r2, r0
 81076b4:	68bb      	ldr	r3, [r7, #8]
 81076b6:	1ad3      	subs	r3, r2, r3
 81076b8:	2b02      	cmp	r3, #2
 81076ba:	d901      	bls.n	81076c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81076bc:	2303      	movs	r3, #3
 81076be:	e088      	b.n	81077d2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81076c0:	4b46      	ldr	r3, [pc, #280]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 81076c2:	681b      	ldr	r3, [r3, #0]
 81076c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81076c8:	2b00      	cmp	r3, #0
 81076ca:	d1f0      	bne.n	81076ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81076cc:	4b43      	ldr	r3, [pc, #268]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 81076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81076d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81076d4:	687b      	ldr	r3, [r7, #4]
 81076d6:	681b      	ldr	r3, [r3, #0]
 81076d8:	051b      	lsls	r3, r3, #20
 81076da:	4940      	ldr	r1, [pc, #256]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 81076dc:	4313      	orrs	r3, r2
 81076de:	628b      	str	r3, [r1, #40]	; 0x28
 81076e0:	687b      	ldr	r3, [r7, #4]
 81076e2:	685b      	ldr	r3, [r3, #4]
 81076e4:	3b01      	subs	r3, #1
 81076e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	689b      	ldr	r3, [r3, #8]
 81076ee:	3b01      	subs	r3, #1
 81076f0:	025b      	lsls	r3, r3, #9
 81076f2:	b29b      	uxth	r3, r3
 81076f4:	431a      	orrs	r2, r3
 81076f6:	687b      	ldr	r3, [r7, #4]
 81076f8:	68db      	ldr	r3, [r3, #12]
 81076fa:	3b01      	subs	r3, #1
 81076fc:	041b      	lsls	r3, r3, #16
 81076fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107702:	431a      	orrs	r2, r3
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	691b      	ldr	r3, [r3, #16]
 8107708:	3b01      	subs	r3, #1
 810770a:	061b      	lsls	r3, r3, #24
 810770c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107710:	4932      	ldr	r1, [pc, #200]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107712:	4313      	orrs	r3, r2
 8107714:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107716:	4b31      	ldr	r3, [pc, #196]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810771a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810771e:	687b      	ldr	r3, [r7, #4]
 8107720:	695b      	ldr	r3, [r3, #20]
 8107722:	492e      	ldr	r1, [pc, #184]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107724:	4313      	orrs	r3, r2
 8107726:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107728:	4b2c      	ldr	r3, [pc, #176]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 810772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810772c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107730:	687b      	ldr	r3, [r7, #4]
 8107732:	699b      	ldr	r3, [r3, #24]
 8107734:	4929      	ldr	r1, [pc, #164]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107736:	4313      	orrs	r3, r2
 8107738:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810773a:	4b28      	ldr	r3, [pc, #160]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 810773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810773e:	4a27      	ldr	r2, [pc, #156]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107744:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107746:	4b25      	ldr	r3, [pc, #148]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810774a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810774e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107752:	687a      	ldr	r2, [r7, #4]
 8107754:	69d2      	ldr	r2, [r2, #28]
 8107756:	00d2      	lsls	r2, r2, #3
 8107758:	4920      	ldr	r1, [pc, #128]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 810775a:	4313      	orrs	r3, r2
 810775c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810775e:	4b1f      	ldr	r3, [pc, #124]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107762:	4a1e      	ldr	r2, [pc, #120]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810776a:	683b      	ldr	r3, [r7, #0]
 810776c:	2b00      	cmp	r3, #0
 810776e:	d106      	bne.n	810777e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107770:	4b1a      	ldr	r3, [pc, #104]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107774:	4a19      	ldr	r2, [pc, #100]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810777a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810777c:	e00f      	b.n	810779e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810777e:	683b      	ldr	r3, [r7, #0]
 8107780:	2b01      	cmp	r3, #1
 8107782:	d106      	bne.n	8107792 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107784:	4b15      	ldr	r3, [pc, #84]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107788:	4a14      	ldr	r2, [pc, #80]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 810778a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810778e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107790:	e005      	b.n	810779e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107792:	4b12      	ldr	r3, [pc, #72]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107796:	4a11      	ldr	r2, [pc, #68]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 8107798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810779c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810779e:	4b0f      	ldr	r3, [pc, #60]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 81077a0:	681b      	ldr	r3, [r3, #0]
 81077a2:	4a0e      	ldr	r2, [pc, #56]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 81077a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81077a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81077aa:	f7fd fa03 	bl	8104bb4 <HAL_GetTick>
 81077ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81077b0:	e008      	b.n	81077c4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81077b2:	f7fd f9ff 	bl	8104bb4 <HAL_GetTick>
 81077b6:	4602      	mov	r2, r0
 81077b8:	68bb      	ldr	r3, [r7, #8]
 81077ba:	1ad3      	subs	r3, r2, r3
 81077bc:	2b02      	cmp	r3, #2
 81077be:	d901      	bls.n	81077c4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81077c0:	2303      	movs	r3, #3
 81077c2:	e006      	b.n	81077d2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81077c4:	4b05      	ldr	r3, [pc, #20]	; (81077dc <RCCEx_PLL3_Config+0x160>)
 81077c6:	681b      	ldr	r3, [r3, #0]
 81077c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81077cc:	2b00      	cmp	r3, #0
 81077ce:	d0f0      	beq.n	81077b2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 81077d2:	4618      	mov	r0, r3
 81077d4:	3710      	adds	r7, #16
 81077d6:	46bd      	mov	sp, r7
 81077d8:	bd80      	pop	{r7, pc}
 81077da:	bf00      	nop
 81077dc:	58024400 	.word	0x58024400

081077e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81077e0:	b580      	push	{r7, lr}
 81077e2:	b082      	sub	sp, #8
 81077e4:	af00      	add	r7, sp, #0
 81077e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	2b00      	cmp	r3, #0
 81077ec:	d101      	bne.n	81077f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81077ee:	2301      	movs	r3, #1
 81077f0:	e042      	b.n	8107878 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81077f8:	2b00      	cmp	r3, #0
 81077fa:	d106      	bne.n	810780a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81077fc:	687b      	ldr	r3, [r7, #4]
 81077fe:	2200      	movs	r2, #0
 8107800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107804:	6878      	ldr	r0, [r7, #4]
 8107806:	f7fc ff9b 	bl	8104740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810780a:	687b      	ldr	r3, [r7, #4]
 810780c:	2224      	movs	r2, #36	; 0x24
 810780e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	681b      	ldr	r3, [r3, #0]
 8107816:	681a      	ldr	r2, [r3, #0]
 8107818:	687b      	ldr	r3, [r7, #4]
 810781a:	681b      	ldr	r3, [r3, #0]
 810781c:	f022 0201 	bic.w	r2, r2, #1
 8107820:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107822:	6878      	ldr	r0, [r7, #4]
 8107824:	f000 fce0 	bl	81081e8 <UART_SetConfig>
 8107828:	4603      	mov	r3, r0
 810782a:	2b01      	cmp	r3, #1
 810782c:	d101      	bne.n	8107832 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810782e:	2301      	movs	r3, #1
 8107830:	e022      	b.n	8107878 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107832:	687b      	ldr	r3, [r7, #4]
 8107834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107836:	2b00      	cmp	r3, #0
 8107838:	d002      	beq.n	8107840 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810783a:	6878      	ldr	r0, [r7, #4]
 810783c:	f001 fa34 	bl	8108ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107840:	687b      	ldr	r3, [r7, #4]
 8107842:	681b      	ldr	r3, [r3, #0]
 8107844:	685a      	ldr	r2, [r3, #4]
 8107846:	687b      	ldr	r3, [r7, #4]
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810784e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	681b      	ldr	r3, [r3, #0]
 8107854:	689a      	ldr	r2, [r3, #8]
 8107856:	687b      	ldr	r3, [r7, #4]
 8107858:	681b      	ldr	r3, [r3, #0]
 810785a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810785e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	681b      	ldr	r3, [r3, #0]
 8107864:	681a      	ldr	r2, [r3, #0]
 8107866:	687b      	ldr	r3, [r7, #4]
 8107868:	681b      	ldr	r3, [r3, #0]
 810786a:	f042 0201 	orr.w	r2, r2, #1
 810786e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107870:	6878      	ldr	r0, [r7, #4]
 8107872:	f001 fabb 	bl	8108dec <UART_CheckIdleState>
 8107876:	4603      	mov	r3, r0
}
 8107878:	4618      	mov	r0, r3
 810787a:	3708      	adds	r7, #8
 810787c:	46bd      	mov	sp, r7
 810787e:	bd80      	pop	{r7, pc}

08107880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107880:	b580      	push	{r7, lr}
 8107882:	b08a      	sub	sp, #40	; 0x28
 8107884:	af02      	add	r7, sp, #8
 8107886:	60f8      	str	r0, [r7, #12]
 8107888:	60b9      	str	r1, [r7, #8]
 810788a:	603b      	str	r3, [r7, #0]
 810788c:	4613      	mov	r3, r2
 810788e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107890:	68fb      	ldr	r3, [r7, #12]
 8107892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107896:	2b20      	cmp	r3, #32
 8107898:	f040 8083 	bne.w	81079a2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 810789c:	68bb      	ldr	r3, [r7, #8]
 810789e:	2b00      	cmp	r3, #0
 81078a0:	d002      	beq.n	81078a8 <HAL_UART_Transmit+0x28>
 81078a2:	88fb      	ldrh	r3, [r7, #6]
 81078a4:	2b00      	cmp	r3, #0
 81078a6:	d101      	bne.n	81078ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81078a8:	2301      	movs	r3, #1
 81078aa:	e07b      	b.n	81079a4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81078ac:	68fb      	ldr	r3, [r7, #12]
 81078ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81078b2:	2b01      	cmp	r3, #1
 81078b4:	d101      	bne.n	81078ba <HAL_UART_Transmit+0x3a>
 81078b6:	2302      	movs	r3, #2
 81078b8:	e074      	b.n	81079a4 <HAL_UART_Transmit+0x124>
 81078ba:	68fb      	ldr	r3, [r7, #12]
 81078bc:	2201      	movs	r2, #1
 81078be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81078c2:	68fb      	ldr	r3, [r7, #12]
 81078c4:	2200      	movs	r2, #0
 81078c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81078ca:	68fb      	ldr	r3, [r7, #12]
 81078cc:	2221      	movs	r2, #33	; 0x21
 81078ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81078d2:	f7fd f96f 	bl	8104bb4 <HAL_GetTick>
 81078d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81078d8:	68fb      	ldr	r3, [r7, #12]
 81078da:	88fa      	ldrh	r2, [r7, #6]
 81078dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81078e0:	68fb      	ldr	r3, [r7, #12]
 81078e2:	88fa      	ldrh	r2, [r7, #6]
 81078e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81078e8:	68fb      	ldr	r3, [r7, #12]
 81078ea:	689b      	ldr	r3, [r3, #8]
 81078ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81078f0:	d108      	bne.n	8107904 <HAL_UART_Transmit+0x84>
 81078f2:	68fb      	ldr	r3, [r7, #12]
 81078f4:	691b      	ldr	r3, [r3, #16]
 81078f6:	2b00      	cmp	r3, #0
 81078f8:	d104      	bne.n	8107904 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81078fa:	2300      	movs	r3, #0
 81078fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81078fe:	68bb      	ldr	r3, [r7, #8]
 8107900:	61bb      	str	r3, [r7, #24]
 8107902:	e003      	b.n	810790c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8107904:	68bb      	ldr	r3, [r7, #8]
 8107906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107908:	2300      	movs	r3, #0
 810790a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810790c:	68fb      	ldr	r3, [r7, #12]
 810790e:	2200      	movs	r2, #0
 8107910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8107914:	e02c      	b.n	8107970 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107916:	683b      	ldr	r3, [r7, #0]
 8107918:	9300      	str	r3, [sp, #0]
 810791a:	697b      	ldr	r3, [r7, #20]
 810791c:	2200      	movs	r2, #0
 810791e:	2180      	movs	r1, #128	; 0x80
 8107920:	68f8      	ldr	r0, [r7, #12]
 8107922:	f001 faae 	bl	8108e82 <UART_WaitOnFlagUntilTimeout>
 8107926:	4603      	mov	r3, r0
 8107928:	2b00      	cmp	r3, #0
 810792a:	d001      	beq.n	8107930 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 810792c:	2303      	movs	r3, #3
 810792e:	e039      	b.n	81079a4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8107930:	69fb      	ldr	r3, [r7, #28]
 8107932:	2b00      	cmp	r3, #0
 8107934:	d10b      	bne.n	810794e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107936:	69bb      	ldr	r3, [r7, #24]
 8107938:	881b      	ldrh	r3, [r3, #0]
 810793a:	461a      	mov	r2, r3
 810793c:	68fb      	ldr	r3, [r7, #12]
 810793e:	681b      	ldr	r3, [r3, #0]
 8107940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107944:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107946:	69bb      	ldr	r3, [r7, #24]
 8107948:	3302      	adds	r3, #2
 810794a:	61bb      	str	r3, [r7, #24]
 810794c:	e007      	b.n	810795e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810794e:	69fb      	ldr	r3, [r7, #28]
 8107950:	781a      	ldrb	r2, [r3, #0]
 8107952:	68fb      	ldr	r3, [r7, #12]
 8107954:	681b      	ldr	r3, [r3, #0]
 8107956:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107958:	69fb      	ldr	r3, [r7, #28]
 810795a:	3301      	adds	r3, #1
 810795c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810795e:	68fb      	ldr	r3, [r7, #12]
 8107960:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107964:	b29b      	uxth	r3, r3
 8107966:	3b01      	subs	r3, #1
 8107968:	b29a      	uxth	r2, r3
 810796a:	68fb      	ldr	r3, [r7, #12]
 810796c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107970:	68fb      	ldr	r3, [r7, #12]
 8107972:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107976:	b29b      	uxth	r3, r3
 8107978:	2b00      	cmp	r3, #0
 810797a:	d1cc      	bne.n	8107916 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810797c:	683b      	ldr	r3, [r7, #0]
 810797e:	9300      	str	r3, [sp, #0]
 8107980:	697b      	ldr	r3, [r7, #20]
 8107982:	2200      	movs	r2, #0
 8107984:	2140      	movs	r1, #64	; 0x40
 8107986:	68f8      	ldr	r0, [r7, #12]
 8107988:	f001 fa7b 	bl	8108e82 <UART_WaitOnFlagUntilTimeout>
 810798c:	4603      	mov	r3, r0
 810798e:	2b00      	cmp	r3, #0
 8107990:	d001      	beq.n	8107996 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107992:	2303      	movs	r3, #3
 8107994:	e006      	b.n	81079a4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107996:	68fb      	ldr	r3, [r7, #12]
 8107998:	2220      	movs	r2, #32
 810799a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810799e:	2300      	movs	r3, #0
 81079a0:	e000      	b.n	81079a4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81079a2:	2302      	movs	r3, #2
  }
}
 81079a4:	4618      	mov	r0, r3
 81079a6:	3720      	adds	r7, #32
 81079a8:	46bd      	mov	sp, r7
 81079aa:	bd80      	pop	{r7, pc}

081079ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 81079ac:	b580      	push	{r7, lr}
 81079ae:	b08a      	sub	sp, #40	; 0x28
 81079b0:	af00      	add	r7, sp, #0
 81079b2:	60f8      	str	r0, [r7, #12]
 81079b4:	60b9      	str	r1, [r7, #8]
 81079b6:	4613      	mov	r3, r2
 81079b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 81079ba:	68fb      	ldr	r3, [r7, #12]
 81079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81079c0:	2b20      	cmp	r3, #32
 81079c2:	d142      	bne.n	8107a4a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 81079c4:	68bb      	ldr	r3, [r7, #8]
 81079c6:	2b00      	cmp	r3, #0
 81079c8:	d002      	beq.n	81079d0 <HAL_UART_Receive_IT+0x24>
 81079ca:	88fb      	ldrh	r3, [r7, #6]
 81079cc:	2b00      	cmp	r3, #0
 81079ce:	d101      	bne.n	81079d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 81079d0:	2301      	movs	r3, #1
 81079d2:	e03b      	b.n	8107a4c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 81079d4:	68fb      	ldr	r3, [r7, #12]
 81079d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81079da:	2b01      	cmp	r3, #1
 81079dc:	d101      	bne.n	81079e2 <HAL_UART_Receive_IT+0x36>
 81079de:	2302      	movs	r3, #2
 81079e0:	e034      	b.n	8107a4c <HAL_UART_Receive_IT+0xa0>
 81079e2:	68fb      	ldr	r3, [r7, #12]
 81079e4:	2201      	movs	r2, #1
 81079e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81079ea:	68fb      	ldr	r3, [r7, #12]
 81079ec:	2200      	movs	r2, #0
 81079ee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 81079f0:	68fb      	ldr	r3, [r7, #12]
 81079f2:	681b      	ldr	r3, [r3, #0]
 81079f4:	4a17      	ldr	r2, [pc, #92]	; (8107a54 <HAL_UART_Receive_IT+0xa8>)
 81079f6:	4293      	cmp	r3, r2
 81079f8:	d01f      	beq.n	8107a3a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 81079fa:	68fb      	ldr	r3, [r7, #12]
 81079fc:	681b      	ldr	r3, [r3, #0]
 81079fe:	685b      	ldr	r3, [r3, #4]
 8107a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8107a04:	2b00      	cmp	r3, #0
 8107a06:	d018      	beq.n	8107a3a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8107a08:	68fb      	ldr	r3, [r7, #12]
 8107a0a:	681b      	ldr	r3, [r3, #0]
 8107a0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107a0e:	697b      	ldr	r3, [r7, #20]
 8107a10:	e853 3f00 	ldrex	r3, [r3]
 8107a14:	613b      	str	r3, [r7, #16]
   return(result);
 8107a16:	693b      	ldr	r3, [r7, #16]
 8107a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8107a1e:	68fb      	ldr	r3, [r7, #12]
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	461a      	mov	r2, r3
 8107a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107a26:	623b      	str	r3, [r7, #32]
 8107a28:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107a2a:	69f9      	ldr	r1, [r7, #28]
 8107a2c:	6a3a      	ldr	r2, [r7, #32]
 8107a2e:	e841 2300 	strex	r3, r2, [r1]
 8107a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8107a34:	69bb      	ldr	r3, [r7, #24]
 8107a36:	2b00      	cmp	r3, #0
 8107a38:	d1e6      	bne.n	8107a08 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8107a3a:	88fb      	ldrh	r3, [r7, #6]
 8107a3c:	461a      	mov	r2, r3
 8107a3e:	68b9      	ldr	r1, [r7, #8]
 8107a40:	68f8      	ldr	r0, [r7, #12]
 8107a42:	f001 fae7 	bl	8109014 <UART_Start_Receive_IT>
 8107a46:	4603      	mov	r3, r0
 8107a48:	e000      	b.n	8107a4c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8107a4a:	2302      	movs	r3, #2
  }
}
 8107a4c:	4618      	mov	r0, r3
 8107a4e:	3728      	adds	r7, #40	; 0x28
 8107a50:	46bd      	mov	sp, r7
 8107a52:	bd80      	pop	{r7, pc}
 8107a54:	58000c00 	.word	0x58000c00

08107a58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8107a58:	b580      	push	{r7, lr}
 8107a5a:	b0ba      	sub	sp, #232	; 0xe8
 8107a5c:	af00      	add	r7, sp, #0
 8107a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8107a60:	687b      	ldr	r3, [r7, #4]
 8107a62:	681b      	ldr	r3, [r3, #0]
 8107a64:	69db      	ldr	r3, [r3, #28]
 8107a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8107a6a:	687b      	ldr	r3, [r7, #4]
 8107a6c:	681b      	ldr	r3, [r3, #0]
 8107a6e:	681b      	ldr	r3, [r3, #0]
 8107a70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	681b      	ldr	r3, [r3, #0]
 8107a78:	689b      	ldr	r3, [r3, #8]
 8107a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8107a7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8107a82:	f640 030f 	movw	r3, #2063	; 0x80f
 8107a86:	4013      	ands	r3, r2
 8107a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8107a8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8107a90:	2b00      	cmp	r3, #0
 8107a92:	d11b      	bne.n	8107acc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8107a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8107a98:	f003 0320 	and.w	r3, r3, #32
 8107a9c:	2b00      	cmp	r3, #0
 8107a9e:	d015      	beq.n	8107acc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8107aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8107aa4:	f003 0320 	and.w	r3, r3, #32
 8107aa8:	2b00      	cmp	r3, #0
 8107aaa:	d105      	bne.n	8107ab8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8107aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8107ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107ab4:	2b00      	cmp	r3, #0
 8107ab6:	d009      	beq.n	8107acc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8107ab8:	687b      	ldr	r3, [r7, #4]
 8107aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107abc:	2b00      	cmp	r3, #0
 8107abe:	f000 835c 	beq.w	810817a <HAL_UART_IRQHandler+0x722>
      {
        huart->RxISR(huart);
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107ac6:	6878      	ldr	r0, [r7, #4]
 8107ac8:	4798      	blx	r3
      }
      return;
 8107aca:	e356      	b.n	810817a <HAL_UART_IRQHandler+0x722>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8107acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8107ad0:	2b00      	cmp	r3, #0
 8107ad2:	f000 811f 	beq.w	8107d14 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8107ad6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8107ada:	4b8b      	ldr	r3, [pc, #556]	; (8107d08 <HAL_UART_IRQHandler+0x2b0>)
 8107adc:	4013      	ands	r3, r2
 8107ade:	2b00      	cmp	r3, #0
 8107ae0:	d106      	bne.n	8107af0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8107ae2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8107ae6:	4b89      	ldr	r3, [pc, #548]	; (8107d0c <HAL_UART_IRQHandler+0x2b4>)
 8107ae8:	4013      	ands	r3, r2
 8107aea:	2b00      	cmp	r3, #0
 8107aec:	f000 8112 	beq.w	8107d14 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8107af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8107af4:	f003 0301 	and.w	r3, r3, #1
 8107af8:	2b00      	cmp	r3, #0
 8107afa:	d011      	beq.n	8107b20 <HAL_UART_IRQHandler+0xc8>
 8107afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8107b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107b04:	2b00      	cmp	r3, #0
 8107b06:	d00b      	beq.n	8107b20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	2201      	movs	r2, #1
 8107b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8107b10:	687b      	ldr	r3, [r7, #4]
 8107b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107b16:	f043 0201 	orr.w	r2, r3, #1
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8107b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8107b24:	f003 0302 	and.w	r3, r3, #2
 8107b28:	2b00      	cmp	r3, #0
 8107b2a:	d011      	beq.n	8107b50 <HAL_UART_IRQHandler+0xf8>
 8107b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8107b30:	f003 0301 	and.w	r3, r3, #1
 8107b34:	2b00      	cmp	r3, #0
 8107b36:	d00b      	beq.n	8107b50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8107b38:	687b      	ldr	r3, [r7, #4]
 8107b3a:	681b      	ldr	r3, [r3, #0]
 8107b3c:	2202      	movs	r2, #2
 8107b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8107b40:	687b      	ldr	r3, [r7, #4]
 8107b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107b46:	f043 0204 	orr.w	r2, r3, #4
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8107b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8107b54:	f003 0304 	and.w	r3, r3, #4
 8107b58:	2b00      	cmp	r3, #0
 8107b5a:	d011      	beq.n	8107b80 <HAL_UART_IRQHandler+0x128>
 8107b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8107b60:	f003 0301 	and.w	r3, r3, #1
 8107b64:	2b00      	cmp	r3, #0
 8107b66:	d00b      	beq.n	8107b80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8107b68:	687b      	ldr	r3, [r7, #4]
 8107b6a:	681b      	ldr	r3, [r3, #0]
 8107b6c:	2204      	movs	r2, #4
 8107b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107b76:	f043 0202 	orr.w	r2, r3, #2
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8107b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8107b84:	f003 0308 	and.w	r3, r3, #8
 8107b88:	2b00      	cmp	r3, #0
 8107b8a:	d017      	beq.n	8107bbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8107b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8107b90:	f003 0320 	and.w	r3, r3, #32
 8107b94:	2b00      	cmp	r3, #0
 8107b96:	d105      	bne.n	8107ba4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8107b98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8107b9c:	4b5a      	ldr	r3, [pc, #360]	; (8107d08 <HAL_UART_IRQHandler+0x2b0>)
 8107b9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8107ba0:	2b00      	cmp	r3, #0
 8107ba2:	d00b      	beq.n	8107bbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	681b      	ldr	r3, [r3, #0]
 8107ba8:	2208      	movs	r2, #8
 8107baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107bb2:	f043 0208 	orr.w	r2, r3, #8
 8107bb6:	687b      	ldr	r3, [r7, #4]
 8107bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8107bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8107bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107bc4:	2b00      	cmp	r3, #0
 8107bc6:	d012      	beq.n	8107bee <HAL_UART_IRQHandler+0x196>
 8107bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8107bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8107bd0:	2b00      	cmp	r3, #0
 8107bd2:	d00c      	beq.n	8107bee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	681b      	ldr	r3, [r3, #0]
 8107bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107be4:	f043 0220 	orr.w	r2, r3, #32
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107bf4:	2b00      	cmp	r3, #0
 8107bf6:	f000 82c2 	beq.w	810817e <HAL_UART_IRQHandler+0x726>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8107bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8107bfe:	f003 0320 	and.w	r3, r3, #32
 8107c02:	2b00      	cmp	r3, #0
 8107c04:	d013      	beq.n	8107c2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8107c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8107c0a:	f003 0320 	and.w	r3, r3, #32
 8107c0e:	2b00      	cmp	r3, #0
 8107c10:	d105      	bne.n	8107c1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8107c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8107c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107c1a:	2b00      	cmp	r3, #0
 8107c1c:	d007      	beq.n	8107c2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107c22:	2b00      	cmp	r3, #0
 8107c24:	d003      	beq.n	8107c2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107c2a:	6878      	ldr	r0, [r7, #4]
 8107c2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8107c38:	687b      	ldr	r3, [r7, #4]
 8107c3a:	681b      	ldr	r3, [r3, #0]
 8107c3c:	689b      	ldr	r3, [r3, #8]
 8107c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107c42:	2b40      	cmp	r3, #64	; 0x40
 8107c44:	d005      	beq.n	8107c52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8107c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8107c4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8107c4e:	2b00      	cmp	r3, #0
 8107c50:	d04f      	beq.n	8107cf2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8107c52:	6878      	ldr	r0, [r7, #4]
 8107c54:	f001 fb08 	bl	8109268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	681b      	ldr	r3, [r3, #0]
 8107c5c:	689b      	ldr	r3, [r3, #8]
 8107c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107c62:	2b40      	cmp	r3, #64	; 0x40
 8107c64:	d141      	bne.n	8107cea <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8107c66:	687b      	ldr	r3, [r7, #4]
 8107c68:	681b      	ldr	r3, [r3, #0]
 8107c6a:	3308      	adds	r3, #8
 8107c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8107c74:	e853 3f00 	ldrex	r3, [r3]
 8107c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8107c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8107c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8107c88:	687b      	ldr	r3, [r7, #4]
 8107c8a:	681b      	ldr	r3, [r3, #0]
 8107c8c:	3308      	adds	r3, #8
 8107c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8107c92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8107c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8107c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8107ca2:	e841 2300 	strex	r3, r2, [r1]
 8107ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8107caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8107cae:	2b00      	cmp	r3, #0
 8107cb0:	d1d9      	bne.n	8107c66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8107cb2:	687b      	ldr	r3, [r7, #4]
 8107cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107cb6:	2b00      	cmp	r3, #0
 8107cb8:	d013      	beq.n	8107ce2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107cbe:	4a14      	ldr	r2, [pc, #80]	; (8107d10 <HAL_UART_IRQHandler+0x2b8>)
 8107cc0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107cc6:	4618      	mov	r0, r3
 8107cc8:	f7fd fbc2 	bl	8105450 <HAL_DMA_Abort_IT>
 8107ccc:	4603      	mov	r3, r0
 8107cce:	2b00      	cmp	r3, #0
 8107cd0:	d017      	beq.n	8107d02 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107cd8:	687a      	ldr	r2, [r7, #4]
 8107cda:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8107cdc:	4610      	mov	r0, r2
 8107cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8107ce0:	e00f      	b.n	8107d02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8107ce2:	6878      	ldr	r0, [r7, #4]
 8107ce4:	f000 fa6a 	bl	81081bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8107ce8:	e00b      	b.n	8107d02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8107cea:	6878      	ldr	r0, [r7, #4]
 8107cec:	f000 fa66 	bl	81081bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8107cf0:	e007      	b.n	8107d02 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8107cf2:	6878      	ldr	r0, [r7, #4]
 8107cf4:	f000 fa62 	bl	81081bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107cf8:	687b      	ldr	r3, [r7, #4]
 8107cfa:	2200      	movs	r2, #0
 8107cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8107d00:	e23d      	b.n	810817e <HAL_UART_IRQHandler+0x726>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8107d02:	bf00      	nop
    return;
 8107d04:	e23b      	b.n	810817e <HAL_UART_IRQHandler+0x726>
 8107d06:	bf00      	nop
 8107d08:	10000001 	.word	0x10000001
 8107d0c:	04000120 	.word	0x04000120
 8107d10:	08109335 	.word	0x08109335

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107d18:	2b01      	cmp	r3, #1
 8107d1a:	f040 81d0 	bne.w	81080be <HAL_UART_IRQHandler+0x666>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8107d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8107d22:	f003 0310 	and.w	r3, r3, #16
 8107d26:	2b00      	cmp	r3, #0
 8107d28:	f000 81c9 	beq.w	81080be <HAL_UART_IRQHandler+0x666>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8107d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8107d30:	f003 0310 	and.w	r3, r3, #16
 8107d34:	2b00      	cmp	r3, #0
 8107d36:	f000 81c2 	beq.w	81080be <HAL_UART_IRQHandler+0x666>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	2210      	movs	r2, #16
 8107d40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	689b      	ldr	r3, [r3, #8]
 8107d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107d4c:	2b40      	cmp	r3, #64	; 0x40
 8107d4e:	f040 813b 	bne.w	8107fc8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8107d52:	687b      	ldr	r3, [r7, #4]
 8107d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107d56:	681b      	ldr	r3, [r3, #0]
 8107d58:	4a8b      	ldr	r2, [pc, #556]	; (8107f88 <HAL_UART_IRQHandler+0x530>)
 8107d5a:	4293      	cmp	r3, r2
 8107d5c:	d059      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107d5e:	687b      	ldr	r3, [r7, #4]
 8107d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107d62:	681b      	ldr	r3, [r3, #0]
 8107d64:	4a89      	ldr	r2, [pc, #548]	; (8107f8c <HAL_UART_IRQHandler+0x534>)
 8107d66:	4293      	cmp	r3, r2
 8107d68:	d053      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107d6e:	681b      	ldr	r3, [r3, #0]
 8107d70:	4a87      	ldr	r2, [pc, #540]	; (8107f90 <HAL_UART_IRQHandler+0x538>)
 8107d72:	4293      	cmp	r3, r2
 8107d74:	d04d      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107d7a:	681b      	ldr	r3, [r3, #0]
 8107d7c:	4a85      	ldr	r2, [pc, #532]	; (8107f94 <HAL_UART_IRQHandler+0x53c>)
 8107d7e:	4293      	cmp	r3, r2
 8107d80:	d047      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107d82:	687b      	ldr	r3, [r7, #4]
 8107d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107d86:	681b      	ldr	r3, [r3, #0]
 8107d88:	4a83      	ldr	r2, [pc, #524]	; (8107f98 <HAL_UART_IRQHandler+0x540>)
 8107d8a:	4293      	cmp	r3, r2
 8107d8c:	d041      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107d8e:	687b      	ldr	r3, [r7, #4]
 8107d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107d92:	681b      	ldr	r3, [r3, #0]
 8107d94:	4a81      	ldr	r2, [pc, #516]	; (8107f9c <HAL_UART_IRQHandler+0x544>)
 8107d96:	4293      	cmp	r3, r2
 8107d98:	d03b      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107d9a:	687b      	ldr	r3, [r7, #4]
 8107d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107d9e:	681b      	ldr	r3, [r3, #0]
 8107da0:	4a7f      	ldr	r2, [pc, #508]	; (8107fa0 <HAL_UART_IRQHandler+0x548>)
 8107da2:	4293      	cmp	r3, r2
 8107da4:	d035      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107da6:	687b      	ldr	r3, [r7, #4]
 8107da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107daa:	681b      	ldr	r3, [r3, #0]
 8107dac:	4a7d      	ldr	r2, [pc, #500]	; (8107fa4 <HAL_UART_IRQHandler+0x54c>)
 8107dae:	4293      	cmp	r3, r2
 8107db0:	d02f      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107db6:	681b      	ldr	r3, [r3, #0]
 8107db8:	4a7b      	ldr	r2, [pc, #492]	; (8107fa8 <HAL_UART_IRQHandler+0x550>)
 8107dba:	4293      	cmp	r3, r2
 8107dbc:	d029      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107dc2:	681b      	ldr	r3, [r3, #0]
 8107dc4:	4a79      	ldr	r2, [pc, #484]	; (8107fac <HAL_UART_IRQHandler+0x554>)
 8107dc6:	4293      	cmp	r3, r2
 8107dc8:	d023      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107dca:	687b      	ldr	r3, [r7, #4]
 8107dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107dce:	681b      	ldr	r3, [r3, #0]
 8107dd0:	4a77      	ldr	r2, [pc, #476]	; (8107fb0 <HAL_UART_IRQHandler+0x558>)
 8107dd2:	4293      	cmp	r3, r2
 8107dd4:	d01d      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107dda:	681b      	ldr	r3, [r3, #0]
 8107ddc:	4a75      	ldr	r2, [pc, #468]	; (8107fb4 <HAL_UART_IRQHandler+0x55c>)
 8107dde:	4293      	cmp	r3, r2
 8107de0:	d017      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107de6:	681b      	ldr	r3, [r3, #0]
 8107de8:	4a73      	ldr	r2, [pc, #460]	; (8107fb8 <HAL_UART_IRQHandler+0x560>)
 8107dea:	4293      	cmp	r3, r2
 8107dec:	d011      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107dee:	687b      	ldr	r3, [r7, #4]
 8107df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107df2:	681b      	ldr	r3, [r3, #0]
 8107df4:	4a71      	ldr	r2, [pc, #452]	; (8107fbc <HAL_UART_IRQHandler+0x564>)
 8107df6:	4293      	cmp	r3, r2
 8107df8:	d00b      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107dfa:	687b      	ldr	r3, [r7, #4]
 8107dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107dfe:	681b      	ldr	r3, [r3, #0]
 8107e00:	4a6f      	ldr	r2, [pc, #444]	; (8107fc0 <HAL_UART_IRQHandler+0x568>)
 8107e02:	4293      	cmp	r3, r2
 8107e04:	d005      	beq.n	8107e12 <HAL_UART_IRQHandler+0x3ba>
 8107e06:	687b      	ldr	r3, [r7, #4]
 8107e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107e0a:	681b      	ldr	r3, [r3, #0]
 8107e0c:	4a6d      	ldr	r2, [pc, #436]	; (8107fc4 <HAL_UART_IRQHandler+0x56c>)
 8107e0e:	4293      	cmp	r3, r2
 8107e10:	d105      	bne.n	8107e1e <HAL_UART_IRQHandler+0x3c6>
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107e16:	681b      	ldr	r3, [r3, #0]
 8107e18:	685b      	ldr	r3, [r3, #4]
 8107e1a:	b29b      	uxth	r3, r3
 8107e1c:	e004      	b.n	8107e28 <HAL_UART_IRQHandler+0x3d0>
 8107e1e:	687b      	ldr	r3, [r7, #4]
 8107e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107e22:	681b      	ldr	r3, [r3, #0]
 8107e24:	685b      	ldr	r3, [r3, #4]
 8107e26:	b29b      	uxth	r3, r3
 8107e28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8107e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8107e30:	2b00      	cmp	r3, #0
 8107e32:	f000 81a6 	beq.w	8108182 <HAL_UART_IRQHandler+0x72a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8107e36:	687b      	ldr	r3, [r7, #4]
 8107e38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8107e3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8107e40:	429a      	cmp	r2, r3
 8107e42:	f080 819e 	bcs.w	8108182 <HAL_UART_IRQHandler+0x72a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8107e46:	687b      	ldr	r3, [r7, #4]
 8107e48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8107e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107e54:	69db      	ldr	r3, [r3, #28]
 8107e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107e5a:	f000 8086 	beq.w	8107f6a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	681b      	ldr	r3, [r3, #0]
 8107e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8107e6a:	e853 3f00 	ldrex	r3, [r3]
 8107e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8107e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8107e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107e7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8107e7e:	687b      	ldr	r3, [r7, #4]
 8107e80:	681b      	ldr	r3, [r3, #0]
 8107e82:	461a      	mov	r2, r3
 8107e84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8107e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8107e8c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107e90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8107e94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8107e98:	e841 2300 	strex	r3, r2, [r1]
 8107e9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8107ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8107ea4:	2b00      	cmp	r3, #0
 8107ea6:	d1da      	bne.n	8107e5e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	681b      	ldr	r3, [r3, #0]
 8107eac:	3308      	adds	r3, #8
 8107eae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8107eb2:	e853 3f00 	ldrex	r3, [r3]
 8107eb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8107eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8107eba:	f023 0301 	bic.w	r3, r3, #1
 8107ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	681b      	ldr	r3, [r3, #0]
 8107ec6:	3308      	adds	r3, #8
 8107ec8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8107ecc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8107ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ed2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8107ed4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8107ed8:	e841 2300 	strex	r3, r2, [r1]
 8107edc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8107ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107ee0:	2b00      	cmp	r3, #0
 8107ee2:	d1e1      	bne.n	8107ea8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8107ee4:	687b      	ldr	r3, [r7, #4]
 8107ee6:	681b      	ldr	r3, [r3, #0]
 8107ee8:	3308      	adds	r3, #8
 8107eea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8107eee:	e853 3f00 	ldrex	r3, [r3]
 8107ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8107ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8107ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8107efe:	687b      	ldr	r3, [r7, #4]
 8107f00:	681b      	ldr	r3, [r3, #0]
 8107f02:	3308      	adds	r3, #8
 8107f04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8107f08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8107f0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107f0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8107f0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8107f10:	e841 2300 	strex	r3, r2, [r1]
 8107f14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8107f16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107f18:	2b00      	cmp	r3, #0
 8107f1a:	d1e3      	bne.n	8107ee4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	2220      	movs	r2, #32
 8107f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107f24:	687b      	ldr	r3, [r7, #4]
 8107f26:	2200      	movs	r2, #0
 8107f28:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	681b      	ldr	r3, [r3, #0]
 8107f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107f32:	e853 3f00 	ldrex	r3, [r3]
 8107f36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8107f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8107f3a:	f023 0310 	bic.w	r3, r3, #16
 8107f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8107f42:	687b      	ldr	r3, [r7, #4]
 8107f44:	681b      	ldr	r3, [r3, #0]
 8107f46:	461a      	mov	r2, r3
 8107f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8107f4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8107f4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107f50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8107f52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8107f54:	e841 2300 	strex	r3, r2, [r1]
 8107f58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8107f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107f5c:	2b00      	cmp	r3, #0
 8107f5e:	d1e4      	bne.n	8107f2a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107f64:	4618      	mov	r0, r3
 8107f66:	f7fc ff55 	bl	8104e14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8107f76:	b29b      	uxth	r3, r3
 8107f78:	1ad3      	subs	r3, r2, r3
 8107f7a:	b29b      	uxth	r3, r3
 8107f7c:	4619      	mov	r1, r3
 8107f7e:	6878      	ldr	r0, [r7, #4]
 8107f80:	f000 f926 	bl	81081d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8107f84:	e0fd      	b.n	8108182 <HAL_UART_IRQHandler+0x72a>
 8107f86:	bf00      	nop
 8107f88:	40020010 	.word	0x40020010
 8107f8c:	40020028 	.word	0x40020028
 8107f90:	40020040 	.word	0x40020040
 8107f94:	40020058 	.word	0x40020058
 8107f98:	40020070 	.word	0x40020070
 8107f9c:	40020088 	.word	0x40020088
 8107fa0:	400200a0 	.word	0x400200a0
 8107fa4:	400200b8 	.word	0x400200b8
 8107fa8:	40020410 	.word	0x40020410
 8107fac:	40020428 	.word	0x40020428
 8107fb0:	40020440 	.word	0x40020440
 8107fb4:	40020458 	.word	0x40020458
 8107fb8:	40020470 	.word	0x40020470
 8107fbc:	40020488 	.word	0x40020488
 8107fc0:	400204a0 	.word	0x400204a0
 8107fc4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8107fc8:	687b      	ldr	r3, [r7, #4]
 8107fca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8107fce:	687b      	ldr	r3, [r7, #4]
 8107fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8107fd4:	b29b      	uxth	r3, r3
 8107fd6:	1ad3      	subs	r3, r2, r3
 8107fd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8107fe2:	b29b      	uxth	r3, r3
 8107fe4:	2b00      	cmp	r3, #0
 8107fe6:	f000 80ce 	beq.w	8108186 <HAL_UART_IRQHandler+0x72e>
          && (nb_rx_data > 0U))
 8107fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8107fee:	2b00      	cmp	r3, #0
 8107ff0:	f000 80c9 	beq.w	8108186 <HAL_UART_IRQHandler+0x72e>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107ffc:	e853 3f00 	ldrex	r3, [r3]
 8108000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	681b      	ldr	r3, [r3, #0]
 8108010:	461a      	mov	r2, r3
 8108012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8108016:	647b      	str	r3, [r7, #68]	; 0x44
 8108018:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810801a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810801c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810801e:	e841 2300 	strex	r3, r2, [r1]
 8108022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108026:	2b00      	cmp	r3, #0
 8108028:	d1e4      	bne.n	8107ff4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	681b      	ldr	r3, [r3, #0]
 810802e:	3308      	adds	r3, #8
 8108030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108034:	e853 3f00 	ldrex	r3, [r3]
 8108038:	623b      	str	r3, [r7, #32]
   return(result);
 810803a:	6a3b      	ldr	r3, [r7, #32]
 810803c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108040:	f023 0301 	bic.w	r3, r3, #1
 8108044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8108048:	687b      	ldr	r3, [r7, #4]
 810804a:	681b      	ldr	r3, [r3, #0]
 810804c:	3308      	adds	r3, #8
 810804e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8108052:	633a      	str	r2, [r7, #48]	; 0x30
 8108054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810805a:	e841 2300 	strex	r3, r2, [r1]
 810805e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108062:	2b00      	cmp	r3, #0
 8108064:	d1e1      	bne.n	810802a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	2220      	movs	r2, #32
 810806a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	2200      	movs	r2, #0
 8108072:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	2200      	movs	r2, #0
 8108078:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810807a:	687b      	ldr	r3, [r7, #4]
 810807c:	681b      	ldr	r3, [r3, #0]
 810807e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108080:	693b      	ldr	r3, [r7, #16]
 8108082:	e853 3f00 	ldrex	r3, [r3]
 8108086:	60fb      	str	r3, [r7, #12]
   return(result);
 8108088:	68fb      	ldr	r3, [r7, #12]
 810808a:	f023 0310 	bic.w	r3, r3, #16
 810808e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8108092:	687b      	ldr	r3, [r7, #4]
 8108094:	681b      	ldr	r3, [r3, #0]
 8108096:	461a      	mov	r2, r3
 8108098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810809c:	61fb      	str	r3, [r7, #28]
 810809e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81080a0:	69b9      	ldr	r1, [r7, #24]
 81080a2:	69fa      	ldr	r2, [r7, #28]
 81080a4:	e841 2300 	strex	r3, r2, [r1]
 81080a8:	617b      	str	r3, [r7, #20]
   return(result);
 81080aa:	697b      	ldr	r3, [r7, #20]
 81080ac:	2b00      	cmp	r3, #0
 81080ae:	d1e4      	bne.n	810807a <HAL_UART_IRQHandler+0x622>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 81080b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 81080b4:	4619      	mov	r1, r3
 81080b6:	6878      	ldr	r0, [r7, #4]
 81080b8:	f000 f88a 	bl	81081d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 81080bc:	e063      	b.n	8108186 <HAL_UART_IRQHandler+0x72e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81080be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81080c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d00e      	beq.n	81080e8 <HAL_UART_IRQHandler+0x690>
 81080ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81080ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81080d2:	2b00      	cmp	r3, #0
 81080d4:	d008      	beq.n	81080e8 <HAL_UART_IRQHandler+0x690>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	681b      	ldr	r3, [r3, #0]
 81080da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 81080de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 81080e0:	6878      	ldr	r0, [r7, #4]
 81080e2:	f001 fdc5 	bl	8109c70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81080e6:	e051      	b.n	810818c <HAL_UART_IRQHandler+0x734>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81080ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81080f0:	2b00      	cmp	r3, #0
 81080f2:	d014      	beq.n	810811e <HAL_UART_IRQHandler+0x6c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81080f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81080f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81080fc:	2b00      	cmp	r3, #0
 81080fe:	d105      	bne.n	810810c <HAL_UART_IRQHandler+0x6b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8108100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8108104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8108108:	2b00      	cmp	r3, #0
 810810a:	d008      	beq.n	810811e <HAL_UART_IRQHandler+0x6c6>
  {
    if (huart->TxISR != NULL)
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108110:	2b00      	cmp	r3, #0
 8108112:	d03a      	beq.n	810818a <HAL_UART_IRQHandler+0x732>
    {
      huart->TxISR(huart);
 8108114:	687b      	ldr	r3, [r7, #4]
 8108116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108118:	6878      	ldr	r0, [r7, #4]
 810811a:	4798      	blx	r3
    }
    return;
 810811c:	e035      	b.n	810818a <HAL_UART_IRQHandler+0x732>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810811e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108126:	2b00      	cmp	r3, #0
 8108128:	d009      	beq.n	810813e <HAL_UART_IRQHandler+0x6e6>
 810812a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810812e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108132:	2b00      	cmp	r3, #0
 8108134:	d003      	beq.n	810813e <HAL_UART_IRQHandler+0x6e6>
  {
    UART_EndTransmit_IT(huart);
 8108136:	6878      	ldr	r0, [r7, #4]
 8108138:	f001 f912 	bl	8109360 <UART_EndTransmit_IT>
    return;
 810813c:	e026      	b.n	810818c <HAL_UART_IRQHandler+0x734>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8108146:	2b00      	cmp	r3, #0
 8108148:	d009      	beq.n	810815e <HAL_UART_IRQHandler+0x706>
 810814a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810814e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8108152:	2b00      	cmp	r3, #0
 8108154:	d003      	beq.n	810815e <HAL_UART_IRQHandler+0x706>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8108156:	6878      	ldr	r0, [r7, #4]
 8108158:	f001 fd9e 	bl	8109c98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810815c:	e016      	b.n	810818c <HAL_UART_IRQHandler+0x734>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810815e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8108166:	2b00      	cmp	r3, #0
 8108168:	d010      	beq.n	810818c <HAL_UART_IRQHandler+0x734>
 810816a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810816e:	2b00      	cmp	r3, #0
 8108170:	da0c      	bge.n	810818c <HAL_UART_IRQHandler+0x734>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8108172:	6878      	ldr	r0, [r7, #4]
 8108174:	f001 fd86 	bl	8109c84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8108178:	e008      	b.n	810818c <HAL_UART_IRQHandler+0x734>
      return;
 810817a:	bf00      	nop
 810817c:	e006      	b.n	810818c <HAL_UART_IRQHandler+0x734>
    return;
 810817e:	bf00      	nop
 8108180:	e004      	b.n	810818c <HAL_UART_IRQHandler+0x734>
      return;
 8108182:	bf00      	nop
 8108184:	e002      	b.n	810818c <HAL_UART_IRQHandler+0x734>
      return;
 8108186:	bf00      	nop
 8108188:	e000      	b.n	810818c <HAL_UART_IRQHandler+0x734>
    return;
 810818a:	bf00      	nop
  }
}
 810818c:	37e8      	adds	r7, #232	; 0xe8
 810818e:	46bd      	mov	sp, r7
 8108190:	bd80      	pop	{r7, pc}
 8108192:	bf00      	nop

08108194 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8108194:	b480      	push	{r7}
 8108196:	b083      	sub	sp, #12
 8108198:	af00      	add	r7, sp, #0
 810819a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810819c:	bf00      	nop
 810819e:	370c      	adds	r7, #12
 81081a0:	46bd      	mov	sp, r7
 81081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081a6:	4770      	bx	lr

081081a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 81081a8:	b480      	push	{r7}
 81081aa:	b083      	sub	sp, #12
 81081ac:	af00      	add	r7, sp, #0
 81081ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 81081b0:	bf00      	nop
 81081b2:	370c      	adds	r7, #12
 81081b4:	46bd      	mov	sp, r7
 81081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081ba:	4770      	bx	lr

081081bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 81081bc:	b480      	push	{r7}
 81081be:	b083      	sub	sp, #12
 81081c0:	af00      	add	r7, sp, #0
 81081c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 81081c4:	bf00      	nop
 81081c6:	370c      	adds	r7, #12
 81081c8:	46bd      	mov	sp, r7
 81081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081ce:	4770      	bx	lr

081081d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 81081d0:	b480      	push	{r7}
 81081d2:	b083      	sub	sp, #12
 81081d4:	af00      	add	r7, sp, #0
 81081d6:	6078      	str	r0, [r7, #4]
 81081d8:	460b      	mov	r3, r1
 81081da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 81081dc:	bf00      	nop
 81081de:	370c      	adds	r7, #12
 81081e0:	46bd      	mov	sp, r7
 81081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081e6:	4770      	bx	lr

081081e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81081e8:	b5b0      	push	{r4, r5, r7, lr}
 81081ea:	b08e      	sub	sp, #56	; 0x38
 81081ec:	af00      	add	r7, sp, #0
 81081ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81081f0:	2300      	movs	r3, #0
 81081f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	689a      	ldr	r2, [r3, #8]
 81081fa:	687b      	ldr	r3, [r7, #4]
 81081fc:	691b      	ldr	r3, [r3, #16]
 81081fe:	431a      	orrs	r2, r3
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	695b      	ldr	r3, [r3, #20]
 8108204:	431a      	orrs	r2, r3
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	69db      	ldr	r3, [r3, #28]
 810820a:	4313      	orrs	r3, r2
 810820c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810820e:	687b      	ldr	r3, [r7, #4]
 8108210:	681b      	ldr	r3, [r3, #0]
 8108212:	681a      	ldr	r2, [r3, #0]
 8108214:	4bc0      	ldr	r3, [pc, #768]	; (8108518 <UART_SetConfig+0x330>)
 8108216:	4013      	ands	r3, r2
 8108218:	687a      	ldr	r2, [r7, #4]
 810821a:	6812      	ldr	r2, [r2, #0]
 810821c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810821e:	430b      	orrs	r3, r1
 8108220:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108222:	687b      	ldr	r3, [r7, #4]
 8108224:	681b      	ldr	r3, [r3, #0]
 8108226:	685b      	ldr	r3, [r3, #4]
 8108228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810822c:	687b      	ldr	r3, [r7, #4]
 810822e:	68da      	ldr	r2, [r3, #12]
 8108230:	687b      	ldr	r3, [r7, #4]
 8108232:	681b      	ldr	r3, [r3, #0]
 8108234:	430a      	orrs	r2, r1
 8108236:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108238:	687b      	ldr	r3, [r7, #4]
 810823a:	699b      	ldr	r3, [r3, #24]
 810823c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	4ab6      	ldr	r2, [pc, #728]	; (810851c <UART_SetConfig+0x334>)
 8108244:	4293      	cmp	r3, r2
 8108246:	d004      	beq.n	8108252 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108248:	687b      	ldr	r3, [r7, #4]
 810824a:	6a1b      	ldr	r3, [r3, #32]
 810824c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810824e:	4313      	orrs	r3, r2
 8108250:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	681b      	ldr	r3, [r3, #0]
 8108256:	689b      	ldr	r3, [r3, #8]
 8108258:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810825c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108260:	687a      	ldr	r2, [r7, #4]
 8108262:	6812      	ldr	r2, [r2, #0]
 8108264:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8108266:	430b      	orrs	r3, r1
 8108268:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810826a:	687b      	ldr	r3, [r7, #4]
 810826c:	681b      	ldr	r3, [r3, #0]
 810826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108270:	f023 010f 	bic.w	r1, r3, #15
 8108274:	687b      	ldr	r3, [r7, #4]
 8108276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108278:	687b      	ldr	r3, [r7, #4]
 810827a:	681b      	ldr	r3, [r3, #0]
 810827c:	430a      	orrs	r2, r1
 810827e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108280:	687b      	ldr	r3, [r7, #4]
 8108282:	681b      	ldr	r3, [r3, #0]
 8108284:	4aa6      	ldr	r2, [pc, #664]	; (8108520 <UART_SetConfig+0x338>)
 8108286:	4293      	cmp	r3, r2
 8108288:	d176      	bne.n	8108378 <UART_SetConfig+0x190>
 810828a:	4ba6      	ldr	r3, [pc, #664]	; (8108524 <UART_SetConfig+0x33c>)
 810828c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810828e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108292:	2b28      	cmp	r3, #40	; 0x28
 8108294:	d86c      	bhi.n	8108370 <UART_SetConfig+0x188>
 8108296:	a201      	add	r2, pc, #4	; (adr r2, 810829c <UART_SetConfig+0xb4>)
 8108298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810829c:	08108341 	.word	0x08108341
 81082a0:	08108371 	.word	0x08108371
 81082a4:	08108371 	.word	0x08108371
 81082a8:	08108371 	.word	0x08108371
 81082ac:	08108371 	.word	0x08108371
 81082b0:	08108371 	.word	0x08108371
 81082b4:	08108371 	.word	0x08108371
 81082b8:	08108371 	.word	0x08108371
 81082bc:	08108349 	.word	0x08108349
 81082c0:	08108371 	.word	0x08108371
 81082c4:	08108371 	.word	0x08108371
 81082c8:	08108371 	.word	0x08108371
 81082cc:	08108371 	.word	0x08108371
 81082d0:	08108371 	.word	0x08108371
 81082d4:	08108371 	.word	0x08108371
 81082d8:	08108371 	.word	0x08108371
 81082dc:	08108351 	.word	0x08108351
 81082e0:	08108371 	.word	0x08108371
 81082e4:	08108371 	.word	0x08108371
 81082e8:	08108371 	.word	0x08108371
 81082ec:	08108371 	.word	0x08108371
 81082f0:	08108371 	.word	0x08108371
 81082f4:	08108371 	.word	0x08108371
 81082f8:	08108371 	.word	0x08108371
 81082fc:	08108359 	.word	0x08108359
 8108300:	08108371 	.word	0x08108371
 8108304:	08108371 	.word	0x08108371
 8108308:	08108371 	.word	0x08108371
 810830c:	08108371 	.word	0x08108371
 8108310:	08108371 	.word	0x08108371
 8108314:	08108371 	.word	0x08108371
 8108318:	08108371 	.word	0x08108371
 810831c:	08108361 	.word	0x08108361
 8108320:	08108371 	.word	0x08108371
 8108324:	08108371 	.word	0x08108371
 8108328:	08108371 	.word	0x08108371
 810832c:	08108371 	.word	0x08108371
 8108330:	08108371 	.word	0x08108371
 8108334:	08108371 	.word	0x08108371
 8108338:	08108371 	.word	0x08108371
 810833c:	08108369 	.word	0x08108369
 8108340:	2301      	movs	r3, #1
 8108342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108346:	e220      	b.n	810878a <UART_SetConfig+0x5a2>
 8108348:	2304      	movs	r3, #4
 810834a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810834e:	e21c      	b.n	810878a <UART_SetConfig+0x5a2>
 8108350:	2308      	movs	r3, #8
 8108352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108356:	e218      	b.n	810878a <UART_SetConfig+0x5a2>
 8108358:	2310      	movs	r3, #16
 810835a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810835e:	e214      	b.n	810878a <UART_SetConfig+0x5a2>
 8108360:	2320      	movs	r3, #32
 8108362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108366:	e210      	b.n	810878a <UART_SetConfig+0x5a2>
 8108368:	2340      	movs	r3, #64	; 0x40
 810836a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810836e:	e20c      	b.n	810878a <UART_SetConfig+0x5a2>
 8108370:	2380      	movs	r3, #128	; 0x80
 8108372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108376:	e208      	b.n	810878a <UART_SetConfig+0x5a2>
 8108378:	687b      	ldr	r3, [r7, #4]
 810837a:	681b      	ldr	r3, [r3, #0]
 810837c:	4a6a      	ldr	r2, [pc, #424]	; (8108528 <UART_SetConfig+0x340>)
 810837e:	4293      	cmp	r3, r2
 8108380:	d130      	bne.n	81083e4 <UART_SetConfig+0x1fc>
 8108382:	4b68      	ldr	r3, [pc, #416]	; (8108524 <UART_SetConfig+0x33c>)
 8108384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108386:	f003 0307 	and.w	r3, r3, #7
 810838a:	2b05      	cmp	r3, #5
 810838c:	d826      	bhi.n	81083dc <UART_SetConfig+0x1f4>
 810838e:	a201      	add	r2, pc, #4	; (adr r2, 8108394 <UART_SetConfig+0x1ac>)
 8108390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108394:	081083ad 	.word	0x081083ad
 8108398:	081083b5 	.word	0x081083b5
 810839c:	081083bd 	.word	0x081083bd
 81083a0:	081083c5 	.word	0x081083c5
 81083a4:	081083cd 	.word	0x081083cd
 81083a8:	081083d5 	.word	0x081083d5
 81083ac:	2300      	movs	r3, #0
 81083ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083b2:	e1ea      	b.n	810878a <UART_SetConfig+0x5a2>
 81083b4:	2304      	movs	r3, #4
 81083b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083ba:	e1e6      	b.n	810878a <UART_SetConfig+0x5a2>
 81083bc:	2308      	movs	r3, #8
 81083be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083c2:	e1e2      	b.n	810878a <UART_SetConfig+0x5a2>
 81083c4:	2310      	movs	r3, #16
 81083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083ca:	e1de      	b.n	810878a <UART_SetConfig+0x5a2>
 81083cc:	2320      	movs	r3, #32
 81083ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083d2:	e1da      	b.n	810878a <UART_SetConfig+0x5a2>
 81083d4:	2340      	movs	r3, #64	; 0x40
 81083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083da:	e1d6      	b.n	810878a <UART_SetConfig+0x5a2>
 81083dc:	2380      	movs	r3, #128	; 0x80
 81083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81083e2:	e1d2      	b.n	810878a <UART_SetConfig+0x5a2>
 81083e4:	687b      	ldr	r3, [r7, #4]
 81083e6:	681b      	ldr	r3, [r3, #0]
 81083e8:	4a50      	ldr	r2, [pc, #320]	; (810852c <UART_SetConfig+0x344>)
 81083ea:	4293      	cmp	r3, r2
 81083ec:	d130      	bne.n	8108450 <UART_SetConfig+0x268>
 81083ee:	4b4d      	ldr	r3, [pc, #308]	; (8108524 <UART_SetConfig+0x33c>)
 81083f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81083f2:	f003 0307 	and.w	r3, r3, #7
 81083f6:	2b05      	cmp	r3, #5
 81083f8:	d826      	bhi.n	8108448 <UART_SetConfig+0x260>
 81083fa:	a201      	add	r2, pc, #4	; (adr r2, 8108400 <UART_SetConfig+0x218>)
 81083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108400:	08108419 	.word	0x08108419
 8108404:	08108421 	.word	0x08108421
 8108408:	08108429 	.word	0x08108429
 810840c:	08108431 	.word	0x08108431
 8108410:	08108439 	.word	0x08108439
 8108414:	08108441 	.word	0x08108441
 8108418:	2300      	movs	r3, #0
 810841a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810841e:	e1b4      	b.n	810878a <UART_SetConfig+0x5a2>
 8108420:	2304      	movs	r3, #4
 8108422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108426:	e1b0      	b.n	810878a <UART_SetConfig+0x5a2>
 8108428:	2308      	movs	r3, #8
 810842a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810842e:	e1ac      	b.n	810878a <UART_SetConfig+0x5a2>
 8108430:	2310      	movs	r3, #16
 8108432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108436:	e1a8      	b.n	810878a <UART_SetConfig+0x5a2>
 8108438:	2320      	movs	r3, #32
 810843a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810843e:	e1a4      	b.n	810878a <UART_SetConfig+0x5a2>
 8108440:	2340      	movs	r3, #64	; 0x40
 8108442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108446:	e1a0      	b.n	810878a <UART_SetConfig+0x5a2>
 8108448:	2380      	movs	r3, #128	; 0x80
 810844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810844e:	e19c      	b.n	810878a <UART_SetConfig+0x5a2>
 8108450:	687b      	ldr	r3, [r7, #4]
 8108452:	681b      	ldr	r3, [r3, #0]
 8108454:	4a36      	ldr	r2, [pc, #216]	; (8108530 <UART_SetConfig+0x348>)
 8108456:	4293      	cmp	r3, r2
 8108458:	d130      	bne.n	81084bc <UART_SetConfig+0x2d4>
 810845a:	4b32      	ldr	r3, [pc, #200]	; (8108524 <UART_SetConfig+0x33c>)
 810845c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810845e:	f003 0307 	and.w	r3, r3, #7
 8108462:	2b05      	cmp	r3, #5
 8108464:	d826      	bhi.n	81084b4 <UART_SetConfig+0x2cc>
 8108466:	a201      	add	r2, pc, #4	; (adr r2, 810846c <UART_SetConfig+0x284>)
 8108468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810846c:	08108485 	.word	0x08108485
 8108470:	0810848d 	.word	0x0810848d
 8108474:	08108495 	.word	0x08108495
 8108478:	0810849d 	.word	0x0810849d
 810847c:	081084a5 	.word	0x081084a5
 8108480:	081084ad 	.word	0x081084ad
 8108484:	2300      	movs	r3, #0
 8108486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810848a:	e17e      	b.n	810878a <UART_SetConfig+0x5a2>
 810848c:	2304      	movs	r3, #4
 810848e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108492:	e17a      	b.n	810878a <UART_SetConfig+0x5a2>
 8108494:	2308      	movs	r3, #8
 8108496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810849a:	e176      	b.n	810878a <UART_SetConfig+0x5a2>
 810849c:	2310      	movs	r3, #16
 810849e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084a2:	e172      	b.n	810878a <UART_SetConfig+0x5a2>
 81084a4:	2320      	movs	r3, #32
 81084a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084aa:	e16e      	b.n	810878a <UART_SetConfig+0x5a2>
 81084ac:	2340      	movs	r3, #64	; 0x40
 81084ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084b2:	e16a      	b.n	810878a <UART_SetConfig+0x5a2>
 81084b4:	2380      	movs	r3, #128	; 0x80
 81084b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084ba:	e166      	b.n	810878a <UART_SetConfig+0x5a2>
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	4a1c      	ldr	r2, [pc, #112]	; (8108534 <UART_SetConfig+0x34c>)
 81084c2:	4293      	cmp	r3, r2
 81084c4:	d140      	bne.n	8108548 <UART_SetConfig+0x360>
 81084c6:	4b17      	ldr	r3, [pc, #92]	; (8108524 <UART_SetConfig+0x33c>)
 81084c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81084ca:	f003 0307 	and.w	r3, r3, #7
 81084ce:	2b05      	cmp	r3, #5
 81084d0:	d836      	bhi.n	8108540 <UART_SetConfig+0x358>
 81084d2:	a201      	add	r2, pc, #4	; (adr r2, 81084d8 <UART_SetConfig+0x2f0>)
 81084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084d8:	081084f1 	.word	0x081084f1
 81084dc:	081084f9 	.word	0x081084f9
 81084e0:	08108501 	.word	0x08108501
 81084e4:	08108509 	.word	0x08108509
 81084e8:	08108511 	.word	0x08108511
 81084ec:	08108539 	.word	0x08108539
 81084f0:	2300      	movs	r3, #0
 81084f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084f6:	e148      	b.n	810878a <UART_SetConfig+0x5a2>
 81084f8:	2304      	movs	r3, #4
 81084fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084fe:	e144      	b.n	810878a <UART_SetConfig+0x5a2>
 8108500:	2308      	movs	r3, #8
 8108502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108506:	e140      	b.n	810878a <UART_SetConfig+0x5a2>
 8108508:	2310      	movs	r3, #16
 810850a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810850e:	e13c      	b.n	810878a <UART_SetConfig+0x5a2>
 8108510:	2320      	movs	r3, #32
 8108512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108516:	e138      	b.n	810878a <UART_SetConfig+0x5a2>
 8108518:	cfff69f3 	.word	0xcfff69f3
 810851c:	58000c00 	.word	0x58000c00
 8108520:	40011000 	.word	0x40011000
 8108524:	58024400 	.word	0x58024400
 8108528:	40004400 	.word	0x40004400
 810852c:	40004800 	.word	0x40004800
 8108530:	40004c00 	.word	0x40004c00
 8108534:	40005000 	.word	0x40005000
 8108538:	2340      	movs	r3, #64	; 0x40
 810853a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810853e:	e124      	b.n	810878a <UART_SetConfig+0x5a2>
 8108540:	2380      	movs	r3, #128	; 0x80
 8108542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108546:	e120      	b.n	810878a <UART_SetConfig+0x5a2>
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	681b      	ldr	r3, [r3, #0]
 810854c:	4acc      	ldr	r2, [pc, #816]	; (8108880 <UART_SetConfig+0x698>)
 810854e:	4293      	cmp	r3, r2
 8108550:	d176      	bne.n	8108640 <UART_SetConfig+0x458>
 8108552:	4bcc      	ldr	r3, [pc, #816]	; (8108884 <UART_SetConfig+0x69c>)
 8108554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810855a:	2b28      	cmp	r3, #40	; 0x28
 810855c:	d86c      	bhi.n	8108638 <UART_SetConfig+0x450>
 810855e:	a201      	add	r2, pc, #4	; (adr r2, 8108564 <UART_SetConfig+0x37c>)
 8108560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108564:	08108609 	.word	0x08108609
 8108568:	08108639 	.word	0x08108639
 810856c:	08108639 	.word	0x08108639
 8108570:	08108639 	.word	0x08108639
 8108574:	08108639 	.word	0x08108639
 8108578:	08108639 	.word	0x08108639
 810857c:	08108639 	.word	0x08108639
 8108580:	08108639 	.word	0x08108639
 8108584:	08108611 	.word	0x08108611
 8108588:	08108639 	.word	0x08108639
 810858c:	08108639 	.word	0x08108639
 8108590:	08108639 	.word	0x08108639
 8108594:	08108639 	.word	0x08108639
 8108598:	08108639 	.word	0x08108639
 810859c:	08108639 	.word	0x08108639
 81085a0:	08108639 	.word	0x08108639
 81085a4:	08108619 	.word	0x08108619
 81085a8:	08108639 	.word	0x08108639
 81085ac:	08108639 	.word	0x08108639
 81085b0:	08108639 	.word	0x08108639
 81085b4:	08108639 	.word	0x08108639
 81085b8:	08108639 	.word	0x08108639
 81085bc:	08108639 	.word	0x08108639
 81085c0:	08108639 	.word	0x08108639
 81085c4:	08108621 	.word	0x08108621
 81085c8:	08108639 	.word	0x08108639
 81085cc:	08108639 	.word	0x08108639
 81085d0:	08108639 	.word	0x08108639
 81085d4:	08108639 	.word	0x08108639
 81085d8:	08108639 	.word	0x08108639
 81085dc:	08108639 	.word	0x08108639
 81085e0:	08108639 	.word	0x08108639
 81085e4:	08108629 	.word	0x08108629
 81085e8:	08108639 	.word	0x08108639
 81085ec:	08108639 	.word	0x08108639
 81085f0:	08108639 	.word	0x08108639
 81085f4:	08108639 	.word	0x08108639
 81085f8:	08108639 	.word	0x08108639
 81085fc:	08108639 	.word	0x08108639
 8108600:	08108639 	.word	0x08108639
 8108604:	08108631 	.word	0x08108631
 8108608:	2301      	movs	r3, #1
 810860a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810860e:	e0bc      	b.n	810878a <UART_SetConfig+0x5a2>
 8108610:	2304      	movs	r3, #4
 8108612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108616:	e0b8      	b.n	810878a <UART_SetConfig+0x5a2>
 8108618:	2308      	movs	r3, #8
 810861a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810861e:	e0b4      	b.n	810878a <UART_SetConfig+0x5a2>
 8108620:	2310      	movs	r3, #16
 8108622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108626:	e0b0      	b.n	810878a <UART_SetConfig+0x5a2>
 8108628:	2320      	movs	r3, #32
 810862a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810862e:	e0ac      	b.n	810878a <UART_SetConfig+0x5a2>
 8108630:	2340      	movs	r3, #64	; 0x40
 8108632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108636:	e0a8      	b.n	810878a <UART_SetConfig+0x5a2>
 8108638:	2380      	movs	r3, #128	; 0x80
 810863a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810863e:	e0a4      	b.n	810878a <UART_SetConfig+0x5a2>
 8108640:	687b      	ldr	r3, [r7, #4]
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	4a90      	ldr	r2, [pc, #576]	; (8108888 <UART_SetConfig+0x6a0>)
 8108646:	4293      	cmp	r3, r2
 8108648:	d130      	bne.n	81086ac <UART_SetConfig+0x4c4>
 810864a:	4b8e      	ldr	r3, [pc, #568]	; (8108884 <UART_SetConfig+0x69c>)
 810864c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810864e:	f003 0307 	and.w	r3, r3, #7
 8108652:	2b05      	cmp	r3, #5
 8108654:	d826      	bhi.n	81086a4 <UART_SetConfig+0x4bc>
 8108656:	a201      	add	r2, pc, #4	; (adr r2, 810865c <UART_SetConfig+0x474>)
 8108658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810865c:	08108675 	.word	0x08108675
 8108660:	0810867d 	.word	0x0810867d
 8108664:	08108685 	.word	0x08108685
 8108668:	0810868d 	.word	0x0810868d
 810866c:	08108695 	.word	0x08108695
 8108670:	0810869d 	.word	0x0810869d
 8108674:	2300      	movs	r3, #0
 8108676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810867a:	e086      	b.n	810878a <UART_SetConfig+0x5a2>
 810867c:	2304      	movs	r3, #4
 810867e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108682:	e082      	b.n	810878a <UART_SetConfig+0x5a2>
 8108684:	2308      	movs	r3, #8
 8108686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810868a:	e07e      	b.n	810878a <UART_SetConfig+0x5a2>
 810868c:	2310      	movs	r3, #16
 810868e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108692:	e07a      	b.n	810878a <UART_SetConfig+0x5a2>
 8108694:	2320      	movs	r3, #32
 8108696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810869a:	e076      	b.n	810878a <UART_SetConfig+0x5a2>
 810869c:	2340      	movs	r3, #64	; 0x40
 810869e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81086a2:	e072      	b.n	810878a <UART_SetConfig+0x5a2>
 81086a4:	2380      	movs	r3, #128	; 0x80
 81086a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81086aa:	e06e      	b.n	810878a <UART_SetConfig+0x5a2>
 81086ac:	687b      	ldr	r3, [r7, #4]
 81086ae:	681b      	ldr	r3, [r3, #0]
 81086b0:	4a76      	ldr	r2, [pc, #472]	; (810888c <UART_SetConfig+0x6a4>)
 81086b2:	4293      	cmp	r3, r2
 81086b4:	d130      	bne.n	8108718 <UART_SetConfig+0x530>
 81086b6:	4b73      	ldr	r3, [pc, #460]	; (8108884 <UART_SetConfig+0x69c>)
 81086b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81086ba:	f003 0307 	and.w	r3, r3, #7
 81086be:	2b05      	cmp	r3, #5
 81086c0:	d826      	bhi.n	8108710 <UART_SetConfig+0x528>
 81086c2:	a201      	add	r2, pc, #4	; (adr r2, 81086c8 <UART_SetConfig+0x4e0>)
 81086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81086c8:	081086e1 	.word	0x081086e1
 81086cc:	081086e9 	.word	0x081086e9
 81086d0:	081086f1 	.word	0x081086f1
 81086d4:	081086f9 	.word	0x081086f9
 81086d8:	08108701 	.word	0x08108701
 81086dc:	08108709 	.word	0x08108709
 81086e0:	2300      	movs	r3, #0
 81086e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81086e6:	e050      	b.n	810878a <UART_SetConfig+0x5a2>
 81086e8:	2304      	movs	r3, #4
 81086ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81086ee:	e04c      	b.n	810878a <UART_SetConfig+0x5a2>
 81086f0:	2308      	movs	r3, #8
 81086f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81086f6:	e048      	b.n	810878a <UART_SetConfig+0x5a2>
 81086f8:	2310      	movs	r3, #16
 81086fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81086fe:	e044      	b.n	810878a <UART_SetConfig+0x5a2>
 8108700:	2320      	movs	r3, #32
 8108702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108706:	e040      	b.n	810878a <UART_SetConfig+0x5a2>
 8108708:	2340      	movs	r3, #64	; 0x40
 810870a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810870e:	e03c      	b.n	810878a <UART_SetConfig+0x5a2>
 8108710:	2380      	movs	r3, #128	; 0x80
 8108712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108716:	e038      	b.n	810878a <UART_SetConfig+0x5a2>
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	4a5c      	ldr	r2, [pc, #368]	; (8108890 <UART_SetConfig+0x6a8>)
 810871e:	4293      	cmp	r3, r2
 8108720:	d130      	bne.n	8108784 <UART_SetConfig+0x59c>
 8108722:	4b58      	ldr	r3, [pc, #352]	; (8108884 <UART_SetConfig+0x69c>)
 8108724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108726:	f003 0307 	and.w	r3, r3, #7
 810872a:	2b05      	cmp	r3, #5
 810872c:	d826      	bhi.n	810877c <UART_SetConfig+0x594>
 810872e:	a201      	add	r2, pc, #4	; (adr r2, 8108734 <UART_SetConfig+0x54c>)
 8108730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108734:	0810874d 	.word	0x0810874d
 8108738:	08108755 	.word	0x08108755
 810873c:	0810875d 	.word	0x0810875d
 8108740:	08108765 	.word	0x08108765
 8108744:	0810876d 	.word	0x0810876d
 8108748:	08108775 	.word	0x08108775
 810874c:	2302      	movs	r3, #2
 810874e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108752:	e01a      	b.n	810878a <UART_SetConfig+0x5a2>
 8108754:	2304      	movs	r3, #4
 8108756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810875a:	e016      	b.n	810878a <UART_SetConfig+0x5a2>
 810875c:	2308      	movs	r3, #8
 810875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108762:	e012      	b.n	810878a <UART_SetConfig+0x5a2>
 8108764:	2310      	movs	r3, #16
 8108766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810876a:	e00e      	b.n	810878a <UART_SetConfig+0x5a2>
 810876c:	2320      	movs	r3, #32
 810876e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108772:	e00a      	b.n	810878a <UART_SetConfig+0x5a2>
 8108774:	2340      	movs	r3, #64	; 0x40
 8108776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810877a:	e006      	b.n	810878a <UART_SetConfig+0x5a2>
 810877c:	2380      	movs	r3, #128	; 0x80
 810877e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108782:	e002      	b.n	810878a <UART_SetConfig+0x5a2>
 8108784:	2380      	movs	r3, #128	; 0x80
 8108786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810878a:	687b      	ldr	r3, [r7, #4]
 810878c:	681b      	ldr	r3, [r3, #0]
 810878e:	4a40      	ldr	r2, [pc, #256]	; (8108890 <UART_SetConfig+0x6a8>)
 8108790:	4293      	cmp	r3, r2
 8108792:	f040 80ef 	bne.w	8108974 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810879a:	2b20      	cmp	r3, #32
 810879c:	dc46      	bgt.n	810882c <UART_SetConfig+0x644>
 810879e:	2b02      	cmp	r3, #2
 81087a0:	f2c0 8081 	blt.w	81088a6 <UART_SetConfig+0x6be>
 81087a4:	3b02      	subs	r3, #2
 81087a6:	2b1e      	cmp	r3, #30
 81087a8:	d87d      	bhi.n	81088a6 <UART_SetConfig+0x6be>
 81087aa:	a201      	add	r2, pc, #4	; (adr r2, 81087b0 <UART_SetConfig+0x5c8>)
 81087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087b0:	08108833 	.word	0x08108833
 81087b4:	081088a7 	.word	0x081088a7
 81087b8:	0810883b 	.word	0x0810883b
 81087bc:	081088a7 	.word	0x081088a7
 81087c0:	081088a7 	.word	0x081088a7
 81087c4:	081088a7 	.word	0x081088a7
 81087c8:	0810884b 	.word	0x0810884b
 81087cc:	081088a7 	.word	0x081088a7
 81087d0:	081088a7 	.word	0x081088a7
 81087d4:	081088a7 	.word	0x081088a7
 81087d8:	081088a7 	.word	0x081088a7
 81087dc:	081088a7 	.word	0x081088a7
 81087e0:	081088a7 	.word	0x081088a7
 81087e4:	081088a7 	.word	0x081088a7
 81087e8:	0810885b 	.word	0x0810885b
 81087ec:	081088a7 	.word	0x081088a7
 81087f0:	081088a7 	.word	0x081088a7
 81087f4:	081088a7 	.word	0x081088a7
 81087f8:	081088a7 	.word	0x081088a7
 81087fc:	081088a7 	.word	0x081088a7
 8108800:	081088a7 	.word	0x081088a7
 8108804:	081088a7 	.word	0x081088a7
 8108808:	081088a7 	.word	0x081088a7
 810880c:	081088a7 	.word	0x081088a7
 8108810:	081088a7 	.word	0x081088a7
 8108814:	081088a7 	.word	0x081088a7
 8108818:	081088a7 	.word	0x081088a7
 810881c:	081088a7 	.word	0x081088a7
 8108820:	081088a7 	.word	0x081088a7
 8108824:	081088a7 	.word	0x081088a7
 8108828:	08108899 	.word	0x08108899
 810882c:	2b40      	cmp	r3, #64	; 0x40
 810882e:	d036      	beq.n	810889e <UART_SetConfig+0x6b6>
 8108830:	e039      	b.n	81088a6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108832:	f7fe fbb3 	bl	8106f9c <HAL_RCCEx_GetD3PCLK1Freq>
 8108836:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108838:	e03b      	b.n	81088b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810883a:	f107 0314 	add.w	r3, r7, #20
 810883e:	4618      	mov	r0, r3
 8108840:	f7fe fbc2 	bl	8106fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108844:	69bb      	ldr	r3, [r7, #24]
 8108846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108848:	e033      	b.n	81088b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810884a:	f107 0308 	add.w	r3, r7, #8
 810884e:	4618      	mov	r0, r3
 8108850:	f7fe fd0e 	bl	8107270 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108854:	68fb      	ldr	r3, [r7, #12]
 8108856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108858:	e02b      	b.n	81088b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810885a:	4b0a      	ldr	r3, [pc, #40]	; (8108884 <UART_SetConfig+0x69c>)
 810885c:	681b      	ldr	r3, [r3, #0]
 810885e:	f003 0320 	and.w	r3, r3, #32
 8108862:	2b00      	cmp	r3, #0
 8108864:	d009      	beq.n	810887a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108866:	4b07      	ldr	r3, [pc, #28]	; (8108884 <UART_SetConfig+0x69c>)
 8108868:	681b      	ldr	r3, [r3, #0]
 810886a:	08db      	lsrs	r3, r3, #3
 810886c:	f003 0303 	and.w	r3, r3, #3
 8108870:	4a08      	ldr	r2, [pc, #32]	; (8108894 <UART_SetConfig+0x6ac>)
 8108872:	fa22 f303 	lsr.w	r3, r2, r3
 8108876:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108878:	e01b      	b.n	81088b2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810887a:	4b06      	ldr	r3, [pc, #24]	; (8108894 <UART_SetConfig+0x6ac>)
 810887c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810887e:	e018      	b.n	81088b2 <UART_SetConfig+0x6ca>
 8108880:	40011400 	.word	0x40011400
 8108884:	58024400 	.word	0x58024400
 8108888:	40007800 	.word	0x40007800
 810888c:	40007c00 	.word	0x40007c00
 8108890:	58000c00 	.word	0x58000c00
 8108894:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108898:	4bc4      	ldr	r3, [pc, #784]	; (8108bac <UART_SetConfig+0x9c4>)
 810889a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810889c:	e009      	b.n	81088b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810889e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81088a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81088a4:	e005      	b.n	81088b2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 81088a6:	2300      	movs	r3, #0
 81088a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81088aa:	2301      	movs	r3, #1
 81088ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81088b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81088b4:	2b00      	cmp	r3, #0
 81088b6:	f000 81da 	beq.w	8108c6e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81088ba:	687b      	ldr	r3, [r7, #4]
 81088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81088be:	4abc      	ldr	r2, [pc, #752]	; (8108bb0 <UART_SetConfig+0x9c8>)
 81088c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81088c4:	461a      	mov	r2, r3
 81088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81088c8:	fbb3 f3f2 	udiv	r3, r3, r2
 81088cc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81088ce:	687b      	ldr	r3, [r7, #4]
 81088d0:	685a      	ldr	r2, [r3, #4]
 81088d2:	4613      	mov	r3, r2
 81088d4:	005b      	lsls	r3, r3, #1
 81088d6:	4413      	add	r3, r2
 81088d8:	6a3a      	ldr	r2, [r7, #32]
 81088da:	429a      	cmp	r2, r3
 81088dc:	d305      	bcc.n	81088ea <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81088de:	687b      	ldr	r3, [r7, #4]
 81088e0:	685b      	ldr	r3, [r3, #4]
 81088e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81088e4:	6a3a      	ldr	r2, [r7, #32]
 81088e6:	429a      	cmp	r2, r3
 81088e8:	d903      	bls.n	81088f2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 81088ea:	2301      	movs	r3, #1
 81088ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81088f0:	e1bd      	b.n	8108c6e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81088f4:	4618      	mov	r0, r3
 81088f6:	f04f 0100 	mov.w	r1, #0
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81088fe:	4aac      	ldr	r2, [pc, #688]	; (8108bb0 <UART_SetConfig+0x9c8>)
 8108900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108904:	b29a      	uxth	r2, r3
 8108906:	f04f 0300 	mov.w	r3, #0
 810890a:	f7f7 fcf1 	bl	81002f0 <__aeabi_uldivmod>
 810890e:	4602      	mov	r2, r0
 8108910:	460b      	mov	r3, r1
 8108912:	4610      	mov	r0, r2
 8108914:	4619      	mov	r1, r3
 8108916:	f04f 0200 	mov.w	r2, #0
 810891a:	f04f 0300 	mov.w	r3, #0
 810891e:	020b      	lsls	r3, r1, #8
 8108920:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108924:	0202      	lsls	r2, r0, #8
 8108926:	6879      	ldr	r1, [r7, #4]
 8108928:	6849      	ldr	r1, [r1, #4]
 810892a:	0849      	lsrs	r1, r1, #1
 810892c:	4608      	mov	r0, r1
 810892e:	f04f 0100 	mov.w	r1, #0
 8108932:	1814      	adds	r4, r2, r0
 8108934:	eb43 0501 	adc.w	r5, r3, r1
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	685b      	ldr	r3, [r3, #4]
 810893c:	461a      	mov	r2, r3
 810893e:	f04f 0300 	mov.w	r3, #0
 8108942:	4620      	mov	r0, r4
 8108944:	4629      	mov	r1, r5
 8108946:	f7f7 fcd3 	bl	81002f0 <__aeabi_uldivmod>
 810894a:	4602      	mov	r2, r0
 810894c:	460b      	mov	r3, r1
 810894e:	4613      	mov	r3, r2
 8108950:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108958:	d308      	bcc.n	810896c <UART_SetConfig+0x784>
 810895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810895c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108960:	d204      	bcs.n	810896c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8108962:	687b      	ldr	r3, [r7, #4]
 8108964:	681b      	ldr	r3, [r3, #0]
 8108966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108968:	60da      	str	r2, [r3, #12]
 810896a:	e180      	b.n	8108c6e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810896c:	2301      	movs	r3, #1
 810896e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8108972:	e17c      	b.n	8108c6e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108974:	687b      	ldr	r3, [r7, #4]
 8108976:	69db      	ldr	r3, [r3, #28]
 8108978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810897c:	f040 80be 	bne.w	8108afc <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8108980:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108984:	2b20      	cmp	r3, #32
 8108986:	dc49      	bgt.n	8108a1c <UART_SetConfig+0x834>
 8108988:	2b00      	cmp	r3, #0
 810898a:	db7c      	blt.n	8108a86 <UART_SetConfig+0x89e>
 810898c:	2b20      	cmp	r3, #32
 810898e:	d87a      	bhi.n	8108a86 <UART_SetConfig+0x89e>
 8108990:	a201      	add	r2, pc, #4	; (adr r2, 8108998 <UART_SetConfig+0x7b0>)
 8108992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108996:	bf00      	nop
 8108998:	08108a23 	.word	0x08108a23
 810899c:	08108a2b 	.word	0x08108a2b
 81089a0:	08108a87 	.word	0x08108a87
 81089a4:	08108a87 	.word	0x08108a87
 81089a8:	08108a33 	.word	0x08108a33
 81089ac:	08108a87 	.word	0x08108a87
 81089b0:	08108a87 	.word	0x08108a87
 81089b4:	08108a87 	.word	0x08108a87
 81089b8:	08108a43 	.word	0x08108a43
 81089bc:	08108a87 	.word	0x08108a87
 81089c0:	08108a87 	.word	0x08108a87
 81089c4:	08108a87 	.word	0x08108a87
 81089c8:	08108a87 	.word	0x08108a87
 81089cc:	08108a87 	.word	0x08108a87
 81089d0:	08108a87 	.word	0x08108a87
 81089d4:	08108a87 	.word	0x08108a87
 81089d8:	08108a53 	.word	0x08108a53
 81089dc:	08108a87 	.word	0x08108a87
 81089e0:	08108a87 	.word	0x08108a87
 81089e4:	08108a87 	.word	0x08108a87
 81089e8:	08108a87 	.word	0x08108a87
 81089ec:	08108a87 	.word	0x08108a87
 81089f0:	08108a87 	.word	0x08108a87
 81089f4:	08108a87 	.word	0x08108a87
 81089f8:	08108a87 	.word	0x08108a87
 81089fc:	08108a87 	.word	0x08108a87
 8108a00:	08108a87 	.word	0x08108a87
 8108a04:	08108a87 	.word	0x08108a87
 8108a08:	08108a87 	.word	0x08108a87
 8108a0c:	08108a87 	.word	0x08108a87
 8108a10:	08108a87 	.word	0x08108a87
 8108a14:	08108a87 	.word	0x08108a87
 8108a18:	08108a79 	.word	0x08108a79
 8108a1c:	2b40      	cmp	r3, #64	; 0x40
 8108a1e:	d02e      	beq.n	8108a7e <UART_SetConfig+0x896>
 8108a20:	e031      	b.n	8108a86 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108a22:	f7fd fb4f 	bl	81060c4 <HAL_RCC_GetPCLK1Freq>
 8108a26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108a28:	e033      	b.n	8108a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108a2a:	f7fd fb61 	bl	81060f0 <HAL_RCC_GetPCLK2Freq>
 8108a2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108a30:	e02f      	b.n	8108a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108a32:	f107 0314 	add.w	r3, r7, #20
 8108a36:	4618      	mov	r0, r3
 8108a38:	f7fe fac6 	bl	8106fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108a3c:	69bb      	ldr	r3, [r7, #24]
 8108a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a40:	e027      	b.n	8108a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108a42:	f107 0308 	add.w	r3, r7, #8
 8108a46:	4618      	mov	r0, r3
 8108a48:	f7fe fc12 	bl	8107270 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108a4c:	68fb      	ldr	r3, [r7, #12]
 8108a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a50:	e01f      	b.n	8108a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108a52:	4b58      	ldr	r3, [pc, #352]	; (8108bb4 <UART_SetConfig+0x9cc>)
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	f003 0320 	and.w	r3, r3, #32
 8108a5a:	2b00      	cmp	r3, #0
 8108a5c:	d009      	beq.n	8108a72 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108a5e:	4b55      	ldr	r3, [pc, #340]	; (8108bb4 <UART_SetConfig+0x9cc>)
 8108a60:	681b      	ldr	r3, [r3, #0]
 8108a62:	08db      	lsrs	r3, r3, #3
 8108a64:	f003 0303 	and.w	r3, r3, #3
 8108a68:	4a53      	ldr	r2, [pc, #332]	; (8108bb8 <UART_SetConfig+0x9d0>)
 8108a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8108a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108a70:	e00f      	b.n	8108a92 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8108a72:	4b51      	ldr	r3, [pc, #324]	; (8108bb8 <UART_SetConfig+0x9d0>)
 8108a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a76:	e00c      	b.n	8108a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108a78:	4b4c      	ldr	r3, [pc, #304]	; (8108bac <UART_SetConfig+0x9c4>)
 8108a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a7c:	e009      	b.n	8108a92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108a84:	e005      	b.n	8108a92 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8108a86:	2300      	movs	r3, #0
 8108a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108a8a:	2301      	movs	r3, #1
 8108a8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108a90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108a94:	2b00      	cmp	r3, #0
 8108a96:	f000 80ea 	beq.w	8108c6e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a9e:	4a44      	ldr	r2, [pc, #272]	; (8108bb0 <UART_SetConfig+0x9c8>)
 8108aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108aa4:	461a      	mov	r2, r3
 8108aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8108aac:	005a      	lsls	r2, r3, #1
 8108aae:	687b      	ldr	r3, [r7, #4]
 8108ab0:	685b      	ldr	r3, [r3, #4]
 8108ab2:	085b      	lsrs	r3, r3, #1
 8108ab4:	441a      	add	r2, r3
 8108ab6:	687b      	ldr	r3, [r7, #4]
 8108ab8:	685b      	ldr	r3, [r3, #4]
 8108aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8108abe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ac2:	2b0f      	cmp	r3, #15
 8108ac4:	d916      	bls.n	8108af4 <UART_SetConfig+0x90c>
 8108ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108acc:	d212      	bcs.n	8108af4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ad0:	b29b      	uxth	r3, r3
 8108ad2:	f023 030f 	bic.w	r3, r3, #15
 8108ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108ada:	085b      	lsrs	r3, r3, #1
 8108adc:	b29b      	uxth	r3, r3
 8108ade:	f003 0307 	and.w	r3, r3, #7
 8108ae2:	b29a      	uxth	r2, r3
 8108ae4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8108ae6:	4313      	orrs	r3, r2
 8108ae8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	681b      	ldr	r3, [r3, #0]
 8108aee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8108af0:	60da      	str	r2, [r3, #12]
 8108af2:	e0bc      	b.n	8108c6e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8108af4:	2301      	movs	r3, #1
 8108af6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8108afa:	e0b8      	b.n	8108c6e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8108afc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108b00:	2b20      	cmp	r3, #32
 8108b02:	dc4b      	bgt.n	8108b9c <UART_SetConfig+0x9b4>
 8108b04:	2b00      	cmp	r3, #0
 8108b06:	f2c0 8087 	blt.w	8108c18 <UART_SetConfig+0xa30>
 8108b0a:	2b20      	cmp	r3, #32
 8108b0c:	f200 8084 	bhi.w	8108c18 <UART_SetConfig+0xa30>
 8108b10:	a201      	add	r2, pc, #4	; (adr r2, 8108b18 <UART_SetConfig+0x930>)
 8108b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b16:	bf00      	nop
 8108b18:	08108ba3 	.word	0x08108ba3
 8108b1c:	08108bbd 	.word	0x08108bbd
 8108b20:	08108c19 	.word	0x08108c19
 8108b24:	08108c19 	.word	0x08108c19
 8108b28:	08108bc5 	.word	0x08108bc5
 8108b2c:	08108c19 	.word	0x08108c19
 8108b30:	08108c19 	.word	0x08108c19
 8108b34:	08108c19 	.word	0x08108c19
 8108b38:	08108bd5 	.word	0x08108bd5
 8108b3c:	08108c19 	.word	0x08108c19
 8108b40:	08108c19 	.word	0x08108c19
 8108b44:	08108c19 	.word	0x08108c19
 8108b48:	08108c19 	.word	0x08108c19
 8108b4c:	08108c19 	.word	0x08108c19
 8108b50:	08108c19 	.word	0x08108c19
 8108b54:	08108c19 	.word	0x08108c19
 8108b58:	08108be5 	.word	0x08108be5
 8108b5c:	08108c19 	.word	0x08108c19
 8108b60:	08108c19 	.word	0x08108c19
 8108b64:	08108c19 	.word	0x08108c19
 8108b68:	08108c19 	.word	0x08108c19
 8108b6c:	08108c19 	.word	0x08108c19
 8108b70:	08108c19 	.word	0x08108c19
 8108b74:	08108c19 	.word	0x08108c19
 8108b78:	08108c19 	.word	0x08108c19
 8108b7c:	08108c19 	.word	0x08108c19
 8108b80:	08108c19 	.word	0x08108c19
 8108b84:	08108c19 	.word	0x08108c19
 8108b88:	08108c19 	.word	0x08108c19
 8108b8c:	08108c19 	.word	0x08108c19
 8108b90:	08108c19 	.word	0x08108c19
 8108b94:	08108c19 	.word	0x08108c19
 8108b98:	08108c0b 	.word	0x08108c0b
 8108b9c:	2b40      	cmp	r3, #64	; 0x40
 8108b9e:	d037      	beq.n	8108c10 <UART_SetConfig+0xa28>
 8108ba0:	e03a      	b.n	8108c18 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108ba2:	f7fd fa8f 	bl	81060c4 <HAL_RCC_GetPCLK1Freq>
 8108ba6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108ba8:	e03c      	b.n	8108c24 <UART_SetConfig+0xa3c>
 8108baa:	bf00      	nop
 8108bac:	003d0900 	.word	0x003d0900
 8108bb0:	0810cfa8 	.word	0x0810cfa8
 8108bb4:	58024400 	.word	0x58024400
 8108bb8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108bbc:	f7fd fa98 	bl	81060f0 <HAL_RCC_GetPCLK2Freq>
 8108bc0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108bc2:	e02f      	b.n	8108c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108bc4:	f107 0314 	add.w	r3, r7, #20
 8108bc8:	4618      	mov	r0, r3
 8108bca:	f7fe f9fd 	bl	8106fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108bce:	69bb      	ldr	r3, [r7, #24]
 8108bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108bd2:	e027      	b.n	8108c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108bd4:	f107 0308 	add.w	r3, r7, #8
 8108bd8:	4618      	mov	r0, r3
 8108bda:	f7fe fb49 	bl	8107270 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108bde:	68fb      	ldr	r3, [r7, #12]
 8108be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108be2:	e01f      	b.n	8108c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108be4:	4b2c      	ldr	r3, [pc, #176]	; (8108c98 <UART_SetConfig+0xab0>)
 8108be6:	681b      	ldr	r3, [r3, #0]
 8108be8:	f003 0320 	and.w	r3, r3, #32
 8108bec:	2b00      	cmp	r3, #0
 8108bee:	d009      	beq.n	8108c04 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108bf0:	4b29      	ldr	r3, [pc, #164]	; (8108c98 <UART_SetConfig+0xab0>)
 8108bf2:	681b      	ldr	r3, [r3, #0]
 8108bf4:	08db      	lsrs	r3, r3, #3
 8108bf6:	f003 0303 	and.w	r3, r3, #3
 8108bfa:	4a28      	ldr	r2, [pc, #160]	; (8108c9c <UART_SetConfig+0xab4>)
 8108bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8108c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108c02:	e00f      	b.n	8108c24 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8108c04:	4b25      	ldr	r3, [pc, #148]	; (8108c9c <UART_SetConfig+0xab4>)
 8108c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108c08:	e00c      	b.n	8108c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108c0a:	4b25      	ldr	r3, [pc, #148]	; (8108ca0 <UART_SetConfig+0xab8>)
 8108c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108c0e:	e009      	b.n	8108c24 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108c16:	e005      	b.n	8108c24 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8108c18:	2300      	movs	r3, #0
 8108c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108c1c:	2301      	movs	r3, #1
 8108c1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108c22:	bf00      	nop
    }

    if (pclk != 0U)
 8108c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c26:	2b00      	cmp	r3, #0
 8108c28:	d021      	beq.n	8108c6e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108c2a:	687b      	ldr	r3, [r7, #4]
 8108c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108c2e:	4a1d      	ldr	r2, [pc, #116]	; (8108ca4 <UART_SetConfig+0xabc>)
 8108c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108c34:	461a      	mov	r2, r3
 8108c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c38:	fbb3 f2f2 	udiv	r2, r3, r2
 8108c3c:	687b      	ldr	r3, [r7, #4]
 8108c3e:	685b      	ldr	r3, [r3, #4]
 8108c40:	085b      	lsrs	r3, r3, #1
 8108c42:	441a      	add	r2, r3
 8108c44:	687b      	ldr	r3, [r7, #4]
 8108c46:	685b      	ldr	r3, [r3, #4]
 8108c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8108c4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c50:	2b0f      	cmp	r3, #15
 8108c52:	d909      	bls.n	8108c68 <UART_SetConfig+0xa80>
 8108c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108c5a:	d205      	bcs.n	8108c68 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8108c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c5e:	b29a      	uxth	r2, r3
 8108c60:	687b      	ldr	r3, [r7, #4]
 8108c62:	681b      	ldr	r3, [r3, #0]
 8108c64:	60da      	str	r2, [r3, #12]
 8108c66:	e002      	b.n	8108c6e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8108c68:	2301      	movs	r3, #1
 8108c6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	2201      	movs	r2, #1
 8108c72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108c76:	687b      	ldr	r3, [r7, #4]
 8108c78:	2201      	movs	r2, #1
 8108c7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	2200      	movs	r2, #0
 8108c82:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8108c84:	687b      	ldr	r3, [r7, #4]
 8108c86:	2200      	movs	r2, #0
 8108c88:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8108c8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8108c8e:	4618      	mov	r0, r3
 8108c90:	3738      	adds	r7, #56	; 0x38
 8108c92:	46bd      	mov	sp, r7
 8108c94:	bdb0      	pop	{r4, r5, r7, pc}
 8108c96:	bf00      	nop
 8108c98:	58024400 	.word	0x58024400
 8108c9c:	03d09000 	.word	0x03d09000
 8108ca0:	003d0900 	.word	0x003d0900
 8108ca4:	0810cfa8 	.word	0x0810cfa8

08108ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108ca8:	b480      	push	{r7}
 8108caa:	b083      	sub	sp, #12
 8108cac:	af00      	add	r7, sp, #0
 8108cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108cb0:	687b      	ldr	r3, [r7, #4]
 8108cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108cb4:	f003 0301 	and.w	r3, r3, #1
 8108cb8:	2b00      	cmp	r3, #0
 8108cba:	d00a      	beq.n	8108cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108cbc:	687b      	ldr	r3, [r7, #4]
 8108cbe:	681b      	ldr	r3, [r3, #0]
 8108cc0:	685b      	ldr	r3, [r3, #4]
 8108cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108cc6:	687b      	ldr	r3, [r7, #4]
 8108cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	681b      	ldr	r3, [r3, #0]
 8108cce:	430a      	orrs	r2, r1
 8108cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108cd2:	687b      	ldr	r3, [r7, #4]
 8108cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108cd6:	f003 0302 	and.w	r3, r3, #2
 8108cda:	2b00      	cmp	r3, #0
 8108cdc:	d00a      	beq.n	8108cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108cde:	687b      	ldr	r3, [r7, #4]
 8108ce0:	681b      	ldr	r3, [r3, #0]
 8108ce2:	685b      	ldr	r3, [r3, #4]
 8108ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108ce8:	687b      	ldr	r3, [r7, #4]
 8108cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108cec:	687b      	ldr	r3, [r7, #4]
 8108cee:	681b      	ldr	r3, [r3, #0]
 8108cf0:	430a      	orrs	r2, r1
 8108cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108cf8:	f003 0304 	and.w	r3, r3, #4
 8108cfc:	2b00      	cmp	r3, #0
 8108cfe:	d00a      	beq.n	8108d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	681b      	ldr	r3, [r3, #0]
 8108d04:	685b      	ldr	r3, [r3, #4]
 8108d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108d0a:	687b      	ldr	r3, [r7, #4]
 8108d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108d0e:	687b      	ldr	r3, [r7, #4]
 8108d10:	681b      	ldr	r3, [r3, #0]
 8108d12:	430a      	orrs	r2, r1
 8108d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108d16:	687b      	ldr	r3, [r7, #4]
 8108d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d1a:	f003 0308 	and.w	r3, r3, #8
 8108d1e:	2b00      	cmp	r3, #0
 8108d20:	d00a      	beq.n	8108d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	685b      	ldr	r3, [r3, #4]
 8108d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108d30:	687b      	ldr	r3, [r7, #4]
 8108d32:	681b      	ldr	r3, [r3, #0]
 8108d34:	430a      	orrs	r2, r1
 8108d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108d38:	687b      	ldr	r3, [r7, #4]
 8108d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d3c:	f003 0310 	and.w	r3, r3, #16
 8108d40:	2b00      	cmp	r3, #0
 8108d42:	d00a      	beq.n	8108d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108d44:	687b      	ldr	r3, [r7, #4]
 8108d46:	681b      	ldr	r3, [r3, #0]
 8108d48:	689b      	ldr	r3, [r3, #8]
 8108d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	681b      	ldr	r3, [r3, #0]
 8108d56:	430a      	orrs	r2, r1
 8108d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108d5a:	687b      	ldr	r3, [r7, #4]
 8108d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d5e:	f003 0320 	and.w	r3, r3, #32
 8108d62:	2b00      	cmp	r3, #0
 8108d64:	d00a      	beq.n	8108d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108d66:	687b      	ldr	r3, [r7, #4]
 8108d68:	681b      	ldr	r3, [r3, #0]
 8108d6a:	689b      	ldr	r3, [r3, #8]
 8108d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108d70:	687b      	ldr	r3, [r7, #4]
 8108d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108d74:	687b      	ldr	r3, [r7, #4]
 8108d76:	681b      	ldr	r3, [r3, #0]
 8108d78:	430a      	orrs	r2, r1
 8108d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108d7c:	687b      	ldr	r3, [r7, #4]
 8108d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108d84:	2b00      	cmp	r3, #0
 8108d86:	d01a      	beq.n	8108dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108d88:	687b      	ldr	r3, [r7, #4]
 8108d8a:	681b      	ldr	r3, [r3, #0]
 8108d8c:	685b      	ldr	r3, [r3, #4]
 8108d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108d92:	687b      	ldr	r3, [r7, #4]
 8108d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108d96:	687b      	ldr	r3, [r7, #4]
 8108d98:	681b      	ldr	r3, [r3, #0]
 8108d9a:	430a      	orrs	r2, r1
 8108d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108da6:	d10a      	bne.n	8108dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	681b      	ldr	r3, [r3, #0]
 8108dac:	685b      	ldr	r3, [r3, #4]
 8108dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108db2:	687b      	ldr	r3, [r7, #4]
 8108db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108db6:	687b      	ldr	r3, [r7, #4]
 8108db8:	681b      	ldr	r3, [r3, #0]
 8108dba:	430a      	orrs	r2, r1
 8108dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108dbe:	687b      	ldr	r3, [r7, #4]
 8108dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108dc6:	2b00      	cmp	r3, #0
 8108dc8:	d00a      	beq.n	8108de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	681b      	ldr	r3, [r3, #0]
 8108dce:	685b      	ldr	r3, [r3, #4]
 8108dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108dd4:	687b      	ldr	r3, [r7, #4]
 8108dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108dd8:	687b      	ldr	r3, [r7, #4]
 8108dda:	681b      	ldr	r3, [r3, #0]
 8108ddc:	430a      	orrs	r2, r1
 8108dde:	605a      	str	r2, [r3, #4]
  }
}
 8108de0:	bf00      	nop
 8108de2:	370c      	adds	r7, #12
 8108de4:	46bd      	mov	sp, r7
 8108de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dea:	4770      	bx	lr

08108dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108dec:	b580      	push	{r7, lr}
 8108dee:	b086      	sub	sp, #24
 8108df0:	af02      	add	r7, sp, #8
 8108df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108df4:	687b      	ldr	r3, [r7, #4]
 8108df6:	2200      	movs	r2, #0
 8108df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108dfc:	f7fb feda 	bl	8104bb4 <HAL_GetTick>
 8108e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108e02:	687b      	ldr	r3, [r7, #4]
 8108e04:	681b      	ldr	r3, [r3, #0]
 8108e06:	681b      	ldr	r3, [r3, #0]
 8108e08:	f003 0308 	and.w	r3, r3, #8
 8108e0c:	2b08      	cmp	r3, #8
 8108e0e:	d10e      	bne.n	8108e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108e14:	9300      	str	r3, [sp, #0]
 8108e16:	68fb      	ldr	r3, [r7, #12]
 8108e18:	2200      	movs	r2, #0
 8108e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108e1e:	6878      	ldr	r0, [r7, #4]
 8108e20:	f000 f82f 	bl	8108e82 <UART_WaitOnFlagUntilTimeout>
 8108e24:	4603      	mov	r3, r0
 8108e26:	2b00      	cmp	r3, #0
 8108e28:	d001      	beq.n	8108e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108e2a:	2303      	movs	r3, #3
 8108e2c:	e025      	b.n	8108e7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	681b      	ldr	r3, [r3, #0]
 8108e32:	681b      	ldr	r3, [r3, #0]
 8108e34:	f003 0304 	and.w	r3, r3, #4
 8108e38:	2b04      	cmp	r3, #4
 8108e3a:	d10e      	bne.n	8108e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108e40:	9300      	str	r3, [sp, #0]
 8108e42:	68fb      	ldr	r3, [r7, #12]
 8108e44:	2200      	movs	r2, #0
 8108e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108e4a:	6878      	ldr	r0, [r7, #4]
 8108e4c:	f000 f819 	bl	8108e82 <UART_WaitOnFlagUntilTimeout>
 8108e50:	4603      	mov	r3, r0
 8108e52:	2b00      	cmp	r3, #0
 8108e54:	d001      	beq.n	8108e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108e56:	2303      	movs	r3, #3
 8108e58:	e00f      	b.n	8108e7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108e5a:	687b      	ldr	r3, [r7, #4]
 8108e5c:	2220      	movs	r2, #32
 8108e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	2220      	movs	r2, #32
 8108e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108e6a:	687b      	ldr	r3, [r7, #4]
 8108e6c:	2200      	movs	r2, #0
 8108e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8108e70:	687b      	ldr	r3, [r7, #4]
 8108e72:	2200      	movs	r2, #0
 8108e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108e78:	2300      	movs	r3, #0
}
 8108e7a:	4618      	mov	r0, r3
 8108e7c:	3710      	adds	r7, #16
 8108e7e:	46bd      	mov	sp, r7
 8108e80:	bd80      	pop	{r7, pc}

08108e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108e82:	b580      	push	{r7, lr}
 8108e84:	b09c      	sub	sp, #112	; 0x70
 8108e86:	af00      	add	r7, sp, #0
 8108e88:	60f8      	str	r0, [r7, #12]
 8108e8a:	60b9      	str	r1, [r7, #8]
 8108e8c:	603b      	str	r3, [r7, #0]
 8108e8e:	4613      	mov	r3, r2
 8108e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108e92:	e0a9      	b.n	8108fe8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108e9a:	f000 80a5 	beq.w	8108fe8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108e9e:	f7fb fe89 	bl	8104bb4 <HAL_GetTick>
 8108ea2:	4602      	mov	r2, r0
 8108ea4:	683b      	ldr	r3, [r7, #0]
 8108ea6:	1ad3      	subs	r3, r2, r3
 8108ea8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8108eaa:	429a      	cmp	r2, r3
 8108eac:	d302      	bcc.n	8108eb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8108eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108eb0:	2b00      	cmp	r3, #0
 8108eb2:	d140      	bne.n	8108f36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108eb4:	68fb      	ldr	r3, [r7, #12]
 8108eb6:	681b      	ldr	r3, [r3, #0]
 8108eb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108ebc:	e853 3f00 	ldrex	r3, [r3]
 8108ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8108ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8108eca:	68fb      	ldr	r3, [r7, #12]
 8108ecc:	681b      	ldr	r3, [r3, #0]
 8108ece:	461a      	mov	r2, r3
 8108ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8108ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8108ed4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108ed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8108ed8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8108eda:	e841 2300 	strex	r3, r2, [r1]
 8108ede:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8108ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108ee2:	2b00      	cmp	r3, #0
 8108ee4:	d1e6      	bne.n	8108eb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108ee6:	68fb      	ldr	r3, [r7, #12]
 8108ee8:	681b      	ldr	r3, [r3, #0]
 8108eea:	3308      	adds	r3, #8
 8108eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ef0:	e853 3f00 	ldrex	r3, [r3]
 8108ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108ef8:	f023 0301 	bic.w	r3, r3, #1
 8108efc:	663b      	str	r3, [r7, #96]	; 0x60
 8108efe:	68fb      	ldr	r3, [r7, #12]
 8108f00:	681b      	ldr	r3, [r3, #0]
 8108f02:	3308      	adds	r3, #8
 8108f04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8108f06:	64ba      	str	r2, [r7, #72]	; 0x48
 8108f08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108f0e:	e841 2300 	strex	r3, r2, [r1]
 8108f12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8108f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8108f16:	2b00      	cmp	r3, #0
 8108f18:	d1e5      	bne.n	8108ee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8108f1a:	68fb      	ldr	r3, [r7, #12]
 8108f1c:	2220      	movs	r2, #32
 8108f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8108f22:	68fb      	ldr	r3, [r7, #12]
 8108f24:	2220      	movs	r2, #32
 8108f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8108f2a:	68fb      	ldr	r3, [r7, #12]
 8108f2c:	2200      	movs	r2, #0
 8108f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8108f32:	2303      	movs	r3, #3
 8108f34:	e069      	b.n	810900a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108f36:	68fb      	ldr	r3, [r7, #12]
 8108f38:	681b      	ldr	r3, [r3, #0]
 8108f3a:	681b      	ldr	r3, [r3, #0]
 8108f3c:	f003 0304 	and.w	r3, r3, #4
 8108f40:	2b00      	cmp	r3, #0
 8108f42:	d051      	beq.n	8108fe8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108f44:	68fb      	ldr	r3, [r7, #12]
 8108f46:	681b      	ldr	r3, [r3, #0]
 8108f48:	69db      	ldr	r3, [r3, #28]
 8108f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108f52:	d149      	bne.n	8108fe8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108f54:	68fb      	ldr	r3, [r7, #12]
 8108f56:	681b      	ldr	r3, [r3, #0]
 8108f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108f5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108f5e:	68fb      	ldr	r3, [r7, #12]
 8108f60:	681b      	ldr	r3, [r3, #0]
 8108f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108f66:	e853 3f00 	ldrex	r3, [r3]
 8108f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108f74:	68fb      	ldr	r3, [r7, #12]
 8108f76:	681b      	ldr	r3, [r3, #0]
 8108f78:	461a      	mov	r2, r3
 8108f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8108f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8108f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108f84:	e841 2300 	strex	r3, r2, [r1]
 8108f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8108f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108f8c:	2b00      	cmp	r3, #0
 8108f8e:	d1e6      	bne.n	8108f5e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108f90:	68fb      	ldr	r3, [r7, #12]
 8108f92:	681b      	ldr	r3, [r3, #0]
 8108f94:	3308      	adds	r3, #8
 8108f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108f98:	697b      	ldr	r3, [r7, #20]
 8108f9a:	e853 3f00 	ldrex	r3, [r3]
 8108f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8108fa0:	693b      	ldr	r3, [r7, #16]
 8108fa2:	f023 0301 	bic.w	r3, r3, #1
 8108fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8108fa8:	68fb      	ldr	r3, [r7, #12]
 8108faa:	681b      	ldr	r3, [r3, #0]
 8108fac:	3308      	adds	r3, #8
 8108fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8108fb0:	623a      	str	r2, [r7, #32]
 8108fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108fb4:	69f9      	ldr	r1, [r7, #28]
 8108fb6:	6a3a      	ldr	r2, [r7, #32]
 8108fb8:	e841 2300 	strex	r3, r2, [r1]
 8108fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8108fbe:	69bb      	ldr	r3, [r7, #24]
 8108fc0:	2b00      	cmp	r3, #0
 8108fc2:	d1e5      	bne.n	8108f90 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8108fc4:	68fb      	ldr	r3, [r7, #12]
 8108fc6:	2220      	movs	r2, #32
 8108fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8108fcc:	68fb      	ldr	r3, [r7, #12]
 8108fce:	2220      	movs	r2, #32
 8108fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108fd4:	68fb      	ldr	r3, [r7, #12]
 8108fd6:	2220      	movs	r2, #32
 8108fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108fdc:	68fb      	ldr	r3, [r7, #12]
 8108fde:	2200      	movs	r2, #0
 8108fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8108fe4:	2303      	movs	r3, #3
 8108fe6:	e010      	b.n	810900a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108fe8:	68fb      	ldr	r3, [r7, #12]
 8108fea:	681b      	ldr	r3, [r3, #0]
 8108fec:	69da      	ldr	r2, [r3, #28]
 8108fee:	68bb      	ldr	r3, [r7, #8]
 8108ff0:	4013      	ands	r3, r2
 8108ff2:	68ba      	ldr	r2, [r7, #8]
 8108ff4:	429a      	cmp	r2, r3
 8108ff6:	bf0c      	ite	eq
 8108ff8:	2301      	moveq	r3, #1
 8108ffa:	2300      	movne	r3, #0
 8108ffc:	b2db      	uxtb	r3, r3
 8108ffe:	461a      	mov	r2, r3
 8109000:	79fb      	ldrb	r3, [r7, #7]
 8109002:	429a      	cmp	r2, r3
 8109004:	f43f af46 	beq.w	8108e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109008:	2300      	movs	r3, #0
}
 810900a:	4618      	mov	r0, r3
 810900c:	3770      	adds	r7, #112	; 0x70
 810900e:	46bd      	mov	sp, r7
 8109010:	bd80      	pop	{r7, pc}
	...

08109014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8109014:	b480      	push	{r7}
 8109016:	b0a3      	sub	sp, #140	; 0x8c
 8109018:	af00      	add	r7, sp, #0
 810901a:	60f8      	str	r0, [r7, #12]
 810901c:	60b9      	str	r1, [r7, #8]
 810901e:	4613      	mov	r3, r2
 8109020:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8109022:	68fb      	ldr	r3, [r7, #12]
 8109024:	68ba      	ldr	r2, [r7, #8]
 8109026:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8109028:	68fb      	ldr	r3, [r7, #12]
 810902a:	88fa      	ldrh	r2, [r7, #6]
 810902c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8109030:	68fb      	ldr	r3, [r7, #12]
 8109032:	88fa      	ldrh	r2, [r7, #6]
 8109034:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8109038:	68fb      	ldr	r3, [r7, #12]
 810903a:	2200      	movs	r2, #0
 810903c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810903e:	68fb      	ldr	r3, [r7, #12]
 8109040:	689b      	ldr	r3, [r3, #8]
 8109042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109046:	d10e      	bne.n	8109066 <UART_Start_Receive_IT+0x52>
 8109048:	68fb      	ldr	r3, [r7, #12]
 810904a:	691b      	ldr	r3, [r3, #16]
 810904c:	2b00      	cmp	r3, #0
 810904e:	d105      	bne.n	810905c <UART_Start_Receive_IT+0x48>
 8109050:	68fb      	ldr	r3, [r7, #12]
 8109052:	f240 12ff 	movw	r2, #511	; 0x1ff
 8109056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810905a:	e02d      	b.n	81090b8 <UART_Start_Receive_IT+0xa4>
 810905c:	68fb      	ldr	r3, [r7, #12]
 810905e:	22ff      	movs	r2, #255	; 0xff
 8109060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8109064:	e028      	b.n	81090b8 <UART_Start_Receive_IT+0xa4>
 8109066:	68fb      	ldr	r3, [r7, #12]
 8109068:	689b      	ldr	r3, [r3, #8]
 810906a:	2b00      	cmp	r3, #0
 810906c:	d10d      	bne.n	810908a <UART_Start_Receive_IT+0x76>
 810906e:	68fb      	ldr	r3, [r7, #12]
 8109070:	691b      	ldr	r3, [r3, #16]
 8109072:	2b00      	cmp	r3, #0
 8109074:	d104      	bne.n	8109080 <UART_Start_Receive_IT+0x6c>
 8109076:	68fb      	ldr	r3, [r7, #12]
 8109078:	22ff      	movs	r2, #255	; 0xff
 810907a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810907e:	e01b      	b.n	81090b8 <UART_Start_Receive_IT+0xa4>
 8109080:	68fb      	ldr	r3, [r7, #12]
 8109082:	227f      	movs	r2, #127	; 0x7f
 8109084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8109088:	e016      	b.n	81090b8 <UART_Start_Receive_IT+0xa4>
 810908a:	68fb      	ldr	r3, [r7, #12]
 810908c:	689b      	ldr	r3, [r3, #8]
 810908e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109092:	d10d      	bne.n	81090b0 <UART_Start_Receive_IT+0x9c>
 8109094:	68fb      	ldr	r3, [r7, #12]
 8109096:	691b      	ldr	r3, [r3, #16]
 8109098:	2b00      	cmp	r3, #0
 810909a:	d104      	bne.n	81090a6 <UART_Start_Receive_IT+0x92>
 810909c:	68fb      	ldr	r3, [r7, #12]
 810909e:	227f      	movs	r2, #127	; 0x7f
 81090a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81090a4:	e008      	b.n	81090b8 <UART_Start_Receive_IT+0xa4>
 81090a6:	68fb      	ldr	r3, [r7, #12]
 81090a8:	223f      	movs	r2, #63	; 0x3f
 81090aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81090ae:	e003      	b.n	81090b8 <UART_Start_Receive_IT+0xa4>
 81090b0:	68fb      	ldr	r3, [r7, #12]
 81090b2:	2200      	movs	r2, #0
 81090b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81090b8:	68fb      	ldr	r3, [r7, #12]
 81090ba:	2200      	movs	r2, #0
 81090bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 81090c0:	68fb      	ldr	r3, [r7, #12]
 81090c2:	2222      	movs	r2, #34	; 0x22
 81090c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81090c8:	68fb      	ldr	r3, [r7, #12]
 81090ca:	681b      	ldr	r3, [r3, #0]
 81090cc:	3308      	adds	r3, #8
 81090ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81090d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81090d2:	e853 3f00 	ldrex	r3, [r3]
 81090d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 81090d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81090da:	f043 0301 	orr.w	r3, r3, #1
 81090de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 81090e2:	68fb      	ldr	r3, [r7, #12]
 81090e4:	681b      	ldr	r3, [r3, #0]
 81090e6:	3308      	adds	r3, #8
 81090e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 81090ec:	673a      	str	r2, [r7, #112]	; 0x70
 81090ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81090f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 81090f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 81090f4:	e841 2300 	strex	r3, r2, [r1]
 81090f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 81090fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81090fc:	2b00      	cmp	r3, #0
 81090fe:	d1e3      	bne.n	81090c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8109100:	68fb      	ldr	r3, [r7, #12]
 8109102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109108:	d153      	bne.n	81091b2 <UART_Start_Receive_IT+0x19e>
 810910a:	68fb      	ldr	r3, [r7, #12]
 810910c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8109110:	88fa      	ldrh	r2, [r7, #6]
 8109112:	429a      	cmp	r2, r3
 8109114:	d34d      	bcc.n	81091b2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109116:	68fb      	ldr	r3, [r7, #12]
 8109118:	689b      	ldr	r3, [r3, #8]
 810911a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810911e:	d107      	bne.n	8109130 <UART_Start_Receive_IT+0x11c>
 8109120:	68fb      	ldr	r3, [r7, #12]
 8109122:	691b      	ldr	r3, [r3, #16]
 8109124:	2b00      	cmp	r3, #0
 8109126:	d103      	bne.n	8109130 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8109128:	68fb      	ldr	r3, [r7, #12]
 810912a:	4a4b      	ldr	r2, [pc, #300]	; (8109258 <UART_Start_Receive_IT+0x244>)
 810912c:	671a      	str	r2, [r3, #112]	; 0x70
 810912e:	e002      	b.n	8109136 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8109130:	68fb      	ldr	r3, [r7, #12]
 8109132:	4a4a      	ldr	r2, [pc, #296]	; (810925c <UART_Start_Receive_IT+0x248>)
 8109134:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8109136:	68fb      	ldr	r3, [r7, #12]
 8109138:	2200      	movs	r2, #0
 810913a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810913e:	68fb      	ldr	r3, [r7, #12]
 8109140:	691b      	ldr	r3, [r3, #16]
 8109142:	2b00      	cmp	r3, #0
 8109144:	d01a      	beq.n	810917c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109146:	68fb      	ldr	r3, [r7, #12]
 8109148:	681b      	ldr	r3, [r3, #0]
 810914a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810914c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810914e:	e853 3f00 	ldrex	r3, [r3]
 8109152:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8109154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810915a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 810915e:	68fb      	ldr	r3, [r7, #12]
 8109160:	681b      	ldr	r3, [r3, #0]
 8109162:	461a      	mov	r2, r3
 8109164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8109168:	65fb      	str	r3, [r7, #92]	; 0x5c
 810916a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810916c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810916e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8109170:	e841 2300 	strex	r3, r2, [r1]
 8109174:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8109176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109178:	2b00      	cmp	r3, #0
 810917a:	d1e4      	bne.n	8109146 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810917c:	68fb      	ldr	r3, [r7, #12]
 810917e:	681b      	ldr	r3, [r3, #0]
 8109180:	3308      	adds	r3, #8
 8109182:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109186:	e853 3f00 	ldrex	r3, [r3]
 810918a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810918e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8109194:	68fb      	ldr	r3, [r7, #12]
 8109196:	681b      	ldr	r3, [r3, #0]
 8109198:	3308      	adds	r3, #8
 810919a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 810919c:	64ba      	str	r2, [r7, #72]	; 0x48
 810919e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81091a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81091a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81091a4:	e841 2300 	strex	r3, r2, [r1]
 81091a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81091aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81091ac:	2b00      	cmp	r3, #0
 81091ae:	d1e5      	bne.n	810917c <UART_Start_Receive_IT+0x168>
 81091b0:	e04a      	b.n	8109248 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81091b2:	68fb      	ldr	r3, [r7, #12]
 81091b4:	689b      	ldr	r3, [r3, #8]
 81091b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81091ba:	d107      	bne.n	81091cc <UART_Start_Receive_IT+0x1b8>
 81091bc:	68fb      	ldr	r3, [r7, #12]
 81091be:	691b      	ldr	r3, [r3, #16]
 81091c0:	2b00      	cmp	r3, #0
 81091c2:	d103      	bne.n	81091cc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 81091c4:	68fb      	ldr	r3, [r7, #12]
 81091c6:	4a26      	ldr	r2, [pc, #152]	; (8109260 <UART_Start_Receive_IT+0x24c>)
 81091c8:	671a      	str	r2, [r3, #112]	; 0x70
 81091ca:	e002      	b.n	81091d2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 81091cc:	68fb      	ldr	r3, [r7, #12]
 81091ce:	4a25      	ldr	r2, [pc, #148]	; (8109264 <UART_Start_Receive_IT+0x250>)
 81091d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 81091d2:	68fb      	ldr	r3, [r7, #12]
 81091d4:	2200      	movs	r2, #0
 81091d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 81091da:	68fb      	ldr	r3, [r7, #12]
 81091dc:	691b      	ldr	r3, [r3, #16]
 81091de:	2b00      	cmp	r3, #0
 81091e0:	d019      	beq.n	8109216 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 81091e2:	68fb      	ldr	r3, [r7, #12]
 81091e4:	681b      	ldr	r3, [r3, #0]
 81091e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81091ea:	e853 3f00 	ldrex	r3, [r3]
 81091ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81091f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 81091f6:	677b      	str	r3, [r7, #116]	; 0x74
 81091f8:	68fb      	ldr	r3, [r7, #12]
 81091fa:	681b      	ldr	r3, [r3, #0]
 81091fc:	461a      	mov	r2, r3
 81091fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8109200:	637b      	str	r3, [r7, #52]	; 0x34
 8109202:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109204:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8109206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109208:	e841 2300 	strex	r3, r2, [r1]
 810920c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109210:	2b00      	cmp	r3, #0
 8109212:	d1e6      	bne.n	81091e2 <UART_Start_Receive_IT+0x1ce>
 8109214:	e018      	b.n	8109248 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8109216:	68fb      	ldr	r3, [r7, #12]
 8109218:	681b      	ldr	r3, [r3, #0]
 810921a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810921c:	697b      	ldr	r3, [r7, #20]
 810921e:	e853 3f00 	ldrex	r3, [r3]
 8109222:	613b      	str	r3, [r7, #16]
   return(result);
 8109224:	693b      	ldr	r3, [r7, #16]
 8109226:	f043 0320 	orr.w	r3, r3, #32
 810922a:	67bb      	str	r3, [r7, #120]	; 0x78
 810922c:	68fb      	ldr	r3, [r7, #12]
 810922e:	681b      	ldr	r3, [r3, #0]
 8109230:	461a      	mov	r2, r3
 8109232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8109234:	623b      	str	r3, [r7, #32]
 8109236:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109238:	69f9      	ldr	r1, [r7, #28]
 810923a:	6a3a      	ldr	r2, [r7, #32]
 810923c:	e841 2300 	strex	r3, r2, [r1]
 8109240:	61bb      	str	r3, [r7, #24]
   return(result);
 8109242:	69bb      	ldr	r3, [r7, #24]
 8109244:	2b00      	cmp	r3, #0
 8109246:	d1e6      	bne.n	8109216 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8109248:	2300      	movs	r3, #0
}
 810924a:	4618      	mov	r0, r3
 810924c:	378c      	adds	r7, #140	; 0x8c
 810924e:	46bd      	mov	sp, r7
 8109250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109254:	4770      	bx	lr
 8109256:	bf00      	nop
 8109258:	08109971 	.word	0x08109971
 810925c:	08109679 	.word	0x08109679
 8109260:	08109517 	.word	0x08109517
 8109264:	081093b7 	.word	0x081093b7

08109268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8109268:	b480      	push	{r7}
 810926a:	b095      	sub	sp, #84	; 0x54
 810926c:	af00      	add	r7, sp, #0
 810926e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	681b      	ldr	r3, [r3, #0]
 8109274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109278:	e853 3f00 	ldrex	r3, [r3]
 810927c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8109284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8109286:	687b      	ldr	r3, [r7, #4]
 8109288:	681b      	ldr	r3, [r3, #0]
 810928a:	461a      	mov	r2, r3
 810928c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810928e:	643b      	str	r3, [r7, #64]	; 0x40
 8109290:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8109294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8109296:	e841 2300 	strex	r3, r2, [r1]
 810929a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810929e:	2b00      	cmp	r3, #0
 81092a0:	d1e6      	bne.n	8109270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	681b      	ldr	r3, [r3, #0]
 81092a6:	3308      	adds	r3, #8
 81092a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81092aa:	6a3b      	ldr	r3, [r7, #32]
 81092ac:	e853 3f00 	ldrex	r3, [r3]
 81092b0:	61fb      	str	r3, [r7, #28]
   return(result);
 81092b2:	69fb      	ldr	r3, [r7, #28]
 81092b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81092b8:	f023 0301 	bic.w	r3, r3, #1
 81092bc:	64bb      	str	r3, [r7, #72]	; 0x48
 81092be:	687b      	ldr	r3, [r7, #4]
 81092c0:	681b      	ldr	r3, [r3, #0]
 81092c2:	3308      	adds	r3, #8
 81092c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81092c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 81092c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81092ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81092cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81092ce:	e841 2300 	strex	r3, r2, [r1]
 81092d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81092d6:	2b00      	cmp	r3, #0
 81092d8:	d1e3      	bne.n	81092a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81092de:	2b01      	cmp	r3, #1
 81092e0:	d118      	bne.n	8109314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	681b      	ldr	r3, [r3, #0]
 81092e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81092e8:	68fb      	ldr	r3, [r7, #12]
 81092ea:	e853 3f00 	ldrex	r3, [r3]
 81092ee:	60bb      	str	r3, [r7, #8]
   return(result);
 81092f0:	68bb      	ldr	r3, [r7, #8]
 81092f2:	f023 0310 	bic.w	r3, r3, #16
 81092f6:	647b      	str	r3, [r7, #68]	; 0x44
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	681b      	ldr	r3, [r3, #0]
 81092fc:	461a      	mov	r2, r3
 81092fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8109300:	61bb      	str	r3, [r7, #24]
 8109302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109304:	6979      	ldr	r1, [r7, #20]
 8109306:	69ba      	ldr	r2, [r7, #24]
 8109308:	e841 2300 	strex	r3, r2, [r1]
 810930c:	613b      	str	r3, [r7, #16]
   return(result);
 810930e:	693b      	ldr	r3, [r7, #16]
 8109310:	2b00      	cmp	r3, #0
 8109312:	d1e6      	bne.n	81092e2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	2220      	movs	r2, #32
 8109318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	2200      	movs	r2, #0
 8109320:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109322:	687b      	ldr	r3, [r7, #4]
 8109324:	2200      	movs	r2, #0
 8109326:	671a      	str	r2, [r3, #112]	; 0x70
}
 8109328:	bf00      	nop
 810932a:	3754      	adds	r7, #84	; 0x54
 810932c:	46bd      	mov	sp, r7
 810932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109332:	4770      	bx	lr

08109334 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8109334:	b580      	push	{r7, lr}
 8109336:	b084      	sub	sp, #16
 8109338:	af00      	add	r7, sp, #0
 810933a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810933c:	687b      	ldr	r3, [r7, #4]
 810933e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109340:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8109342:	68fb      	ldr	r3, [r7, #12]
 8109344:	2200      	movs	r2, #0
 8109346:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810934a:	68fb      	ldr	r3, [r7, #12]
 810934c:	2200      	movs	r2, #0
 810934e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8109352:	68f8      	ldr	r0, [r7, #12]
 8109354:	f7fe ff32 	bl	81081bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8109358:	bf00      	nop
 810935a:	3710      	adds	r7, #16
 810935c:	46bd      	mov	sp, r7
 810935e:	bd80      	pop	{r7, pc}

08109360 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8109360:	b580      	push	{r7, lr}
 8109362:	b088      	sub	sp, #32
 8109364:	af00      	add	r7, sp, #0
 8109366:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	681b      	ldr	r3, [r3, #0]
 810936c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810936e:	68fb      	ldr	r3, [r7, #12]
 8109370:	e853 3f00 	ldrex	r3, [r3]
 8109374:	60bb      	str	r3, [r7, #8]
   return(result);
 8109376:	68bb      	ldr	r3, [r7, #8]
 8109378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810937c:	61fb      	str	r3, [r7, #28]
 810937e:	687b      	ldr	r3, [r7, #4]
 8109380:	681b      	ldr	r3, [r3, #0]
 8109382:	461a      	mov	r2, r3
 8109384:	69fb      	ldr	r3, [r7, #28]
 8109386:	61bb      	str	r3, [r7, #24]
 8109388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810938a:	6979      	ldr	r1, [r7, #20]
 810938c:	69ba      	ldr	r2, [r7, #24]
 810938e:	e841 2300 	strex	r3, r2, [r1]
 8109392:	613b      	str	r3, [r7, #16]
   return(result);
 8109394:	693b      	ldr	r3, [r7, #16]
 8109396:	2b00      	cmp	r3, #0
 8109398:	d1e6      	bne.n	8109368 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810939a:	687b      	ldr	r3, [r7, #4]
 810939c:	2220      	movs	r2, #32
 810939e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 81093a2:	687b      	ldr	r3, [r7, #4]
 81093a4:	2200      	movs	r2, #0
 81093a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 81093a8:	6878      	ldr	r0, [r7, #4]
 81093aa:	f7fe fef3 	bl	8108194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81093ae:	bf00      	nop
 81093b0:	3720      	adds	r7, #32
 81093b2:	46bd      	mov	sp, r7
 81093b4:	bd80      	pop	{r7, pc}

081093b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 81093b6:	b580      	push	{r7, lr}
 81093b8:	b096      	sub	sp, #88	; 0x58
 81093ba:	af00      	add	r7, sp, #0
 81093bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 81093be:	687b      	ldr	r3, [r7, #4]
 81093c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81093c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81093c8:	687b      	ldr	r3, [r7, #4]
 81093ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81093ce:	2b22      	cmp	r3, #34	; 0x22
 81093d0:	f040 8095 	bne.w	81094fe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81093d4:	687b      	ldr	r3, [r7, #4]
 81093d6:	681b      	ldr	r3, [r3, #0]
 81093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81093da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81093de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 81093e2:	b2d9      	uxtb	r1, r3
 81093e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 81093e8:	b2da      	uxtb	r2, r3
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81093ee:	400a      	ands	r2, r1
 81093f0:	b2d2      	uxtb	r2, r2
 81093f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81093f8:	1c5a      	adds	r2, r3, #1
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 81093fe:	687b      	ldr	r3, [r7, #4]
 8109400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8109404:	b29b      	uxth	r3, r3
 8109406:	3b01      	subs	r3, #1
 8109408:	b29a      	uxth	r2, r3
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8109416:	b29b      	uxth	r3, r3
 8109418:	2b00      	cmp	r3, #0
 810941a:	d178      	bne.n	810950e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810941c:	687b      	ldr	r3, [r7, #4]
 810941e:	681b      	ldr	r3, [r3, #0]
 8109420:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109424:	e853 3f00 	ldrex	r3, [r3]
 8109428:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810942a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810942c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8109430:	653b      	str	r3, [r7, #80]	; 0x50
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	681b      	ldr	r3, [r3, #0]
 8109436:	461a      	mov	r2, r3
 8109438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810943a:	647b      	str	r3, [r7, #68]	; 0x44
 810943c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810943e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8109440:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109442:	e841 2300 	strex	r3, r2, [r1]
 8109446:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8109448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810944a:	2b00      	cmp	r3, #0
 810944c:	d1e6      	bne.n	810941c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810944e:	687b      	ldr	r3, [r7, #4]
 8109450:	681b      	ldr	r3, [r3, #0]
 8109452:	3308      	adds	r3, #8
 8109454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109458:	e853 3f00 	ldrex	r3, [r3]
 810945c:	623b      	str	r3, [r7, #32]
   return(result);
 810945e:	6a3b      	ldr	r3, [r7, #32]
 8109460:	f023 0301 	bic.w	r3, r3, #1
 8109464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8109466:	687b      	ldr	r3, [r7, #4]
 8109468:	681b      	ldr	r3, [r3, #0]
 810946a:	3308      	adds	r3, #8
 810946c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 810946e:	633a      	str	r2, [r7, #48]	; 0x30
 8109470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8109474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109476:	e841 2300 	strex	r3, r2, [r1]
 810947a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810947e:	2b00      	cmp	r3, #0
 8109480:	d1e5      	bne.n	810944e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8109482:	687b      	ldr	r3, [r7, #4]
 8109484:	2220      	movs	r2, #32
 8109486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810948a:	687b      	ldr	r3, [r7, #4]
 810948c:	2200      	movs	r2, #0
 810948e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109490:	687b      	ldr	r3, [r7, #4]
 8109492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109494:	2b01      	cmp	r3, #1
 8109496:	d12e      	bne.n	81094f6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109498:	687b      	ldr	r3, [r7, #4]
 810949a:	2200      	movs	r2, #0
 810949c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	681b      	ldr	r3, [r3, #0]
 81094a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81094a4:	693b      	ldr	r3, [r7, #16]
 81094a6:	e853 3f00 	ldrex	r3, [r3]
 81094aa:	60fb      	str	r3, [r7, #12]
   return(result);
 81094ac:	68fb      	ldr	r3, [r7, #12]
 81094ae:	f023 0310 	bic.w	r3, r3, #16
 81094b2:	64bb      	str	r3, [r7, #72]	; 0x48
 81094b4:	687b      	ldr	r3, [r7, #4]
 81094b6:	681b      	ldr	r3, [r3, #0]
 81094b8:	461a      	mov	r2, r3
 81094ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81094bc:	61fb      	str	r3, [r7, #28]
 81094be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81094c0:	69b9      	ldr	r1, [r7, #24]
 81094c2:	69fa      	ldr	r2, [r7, #28]
 81094c4:	e841 2300 	strex	r3, r2, [r1]
 81094c8:	617b      	str	r3, [r7, #20]
   return(result);
 81094ca:	697b      	ldr	r3, [r7, #20]
 81094cc:	2b00      	cmp	r3, #0
 81094ce:	d1e6      	bne.n	810949e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 81094d0:	687b      	ldr	r3, [r7, #4]
 81094d2:	681b      	ldr	r3, [r3, #0]
 81094d4:	69db      	ldr	r3, [r3, #28]
 81094d6:	f003 0310 	and.w	r3, r3, #16
 81094da:	2b10      	cmp	r3, #16
 81094dc:	d103      	bne.n	81094e6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	681b      	ldr	r3, [r3, #0]
 81094e2:	2210      	movs	r2, #16
 81094e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 81094e6:	687b      	ldr	r3, [r7, #4]
 81094e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 81094ec:	4619      	mov	r1, r3
 81094ee:	6878      	ldr	r0, [r7, #4]
 81094f0:	f7fe fe6e 	bl	81081d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 81094f4:	e00b      	b.n	810950e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 81094f6:	6878      	ldr	r0, [r7, #4]
 81094f8:	f7fe fe56 	bl	81081a8 <HAL_UART_RxCpltCallback>
}
 81094fc:	e007      	b.n	810950e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 81094fe:	687b      	ldr	r3, [r7, #4]
 8109500:	681b      	ldr	r3, [r3, #0]
 8109502:	699a      	ldr	r2, [r3, #24]
 8109504:	687b      	ldr	r3, [r7, #4]
 8109506:	681b      	ldr	r3, [r3, #0]
 8109508:	f042 0208 	orr.w	r2, r2, #8
 810950c:	619a      	str	r2, [r3, #24]
}
 810950e:	bf00      	nop
 8109510:	3758      	adds	r7, #88	; 0x58
 8109512:	46bd      	mov	sp, r7
 8109514:	bd80      	pop	{r7, pc}

08109516 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8109516:	b580      	push	{r7, lr}
 8109518:	b096      	sub	sp, #88	; 0x58
 810951a:	af00      	add	r7, sp, #0
 810951c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810951e:	687b      	ldr	r3, [r7, #4]
 8109520:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8109524:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810952e:	2b22      	cmp	r3, #34	; 0x22
 8109530:	f040 8095 	bne.w	810965e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8109534:	687b      	ldr	r3, [r7, #4]
 8109536:	681b      	ldr	r3, [r3, #0]
 8109538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810953a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109542:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8109544:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8109548:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 810954c:	4013      	ands	r3, r2
 810954e:	b29a      	uxth	r2, r3
 8109550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8109552:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8109554:	687b      	ldr	r3, [r7, #4]
 8109556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109558:	1c9a      	adds	r2, r3, #2
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 810955e:	687b      	ldr	r3, [r7, #4]
 8109560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8109564:	b29b      	uxth	r3, r3
 8109566:	3b01      	subs	r3, #1
 8109568:	b29a      	uxth	r2, r3
 810956a:	687b      	ldr	r3, [r7, #4]
 810956c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8109576:	b29b      	uxth	r3, r3
 8109578:	2b00      	cmp	r3, #0
 810957a:	d178      	bne.n	810966e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810957c:	687b      	ldr	r3, [r7, #4]
 810957e:	681b      	ldr	r3, [r3, #0]
 8109580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109584:	e853 3f00 	ldrex	r3, [r3]
 8109588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810958c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8109590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8109592:	687b      	ldr	r3, [r7, #4]
 8109594:	681b      	ldr	r3, [r3, #0]
 8109596:	461a      	mov	r2, r3
 8109598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810959a:	643b      	str	r3, [r7, #64]	; 0x40
 810959c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810959e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81095a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81095a2:	e841 2300 	strex	r3, r2, [r1]
 81095a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81095aa:	2b00      	cmp	r3, #0
 81095ac:	d1e6      	bne.n	810957c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	681b      	ldr	r3, [r3, #0]
 81095b2:	3308      	adds	r3, #8
 81095b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81095b6:	6a3b      	ldr	r3, [r7, #32]
 81095b8:	e853 3f00 	ldrex	r3, [r3]
 81095bc:	61fb      	str	r3, [r7, #28]
   return(result);
 81095be:	69fb      	ldr	r3, [r7, #28]
 81095c0:	f023 0301 	bic.w	r3, r3, #1
 81095c4:	64bb      	str	r3, [r7, #72]	; 0x48
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	681b      	ldr	r3, [r3, #0]
 81095ca:	3308      	adds	r3, #8
 81095cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81095ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 81095d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81095d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81095d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81095d6:	e841 2300 	strex	r3, r2, [r1]
 81095da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095de:	2b00      	cmp	r3, #0
 81095e0:	d1e5      	bne.n	81095ae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 81095e2:	687b      	ldr	r3, [r7, #4]
 81095e4:	2220      	movs	r2, #32
 81095e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 81095ea:	687b      	ldr	r3, [r7, #4]
 81095ec:	2200      	movs	r2, #0
 81095ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81095f0:	687b      	ldr	r3, [r7, #4]
 81095f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81095f4:	2b01      	cmp	r3, #1
 81095f6:	d12e      	bne.n	8109656 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81095f8:	687b      	ldr	r3, [r7, #4]
 81095fa:	2200      	movs	r2, #0
 81095fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	681b      	ldr	r3, [r3, #0]
 8109602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109604:	68fb      	ldr	r3, [r7, #12]
 8109606:	e853 3f00 	ldrex	r3, [r3]
 810960a:	60bb      	str	r3, [r7, #8]
   return(result);
 810960c:	68bb      	ldr	r3, [r7, #8]
 810960e:	f023 0310 	bic.w	r3, r3, #16
 8109612:	647b      	str	r3, [r7, #68]	; 0x44
 8109614:	687b      	ldr	r3, [r7, #4]
 8109616:	681b      	ldr	r3, [r3, #0]
 8109618:	461a      	mov	r2, r3
 810961a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810961c:	61bb      	str	r3, [r7, #24]
 810961e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109620:	6979      	ldr	r1, [r7, #20]
 8109622:	69ba      	ldr	r2, [r7, #24]
 8109624:	e841 2300 	strex	r3, r2, [r1]
 8109628:	613b      	str	r3, [r7, #16]
   return(result);
 810962a:	693b      	ldr	r3, [r7, #16]
 810962c:	2b00      	cmp	r3, #0
 810962e:	d1e6      	bne.n	81095fe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8109630:	687b      	ldr	r3, [r7, #4]
 8109632:	681b      	ldr	r3, [r3, #0]
 8109634:	69db      	ldr	r3, [r3, #28]
 8109636:	f003 0310 	and.w	r3, r3, #16
 810963a:	2b10      	cmp	r3, #16
 810963c:	d103      	bne.n	8109646 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810963e:	687b      	ldr	r3, [r7, #4]
 8109640:	681b      	ldr	r3, [r3, #0]
 8109642:	2210      	movs	r2, #16
 8109644:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8109646:	687b      	ldr	r3, [r7, #4]
 8109648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810964c:	4619      	mov	r1, r3
 810964e:	6878      	ldr	r0, [r7, #4]
 8109650:	f7fe fdbe 	bl	81081d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8109654:	e00b      	b.n	810966e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8109656:	6878      	ldr	r0, [r7, #4]
 8109658:	f7fe fda6 	bl	81081a8 <HAL_UART_RxCpltCallback>
}
 810965c:	e007      	b.n	810966e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	681b      	ldr	r3, [r3, #0]
 8109662:	699a      	ldr	r2, [r3, #24]
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	681b      	ldr	r3, [r3, #0]
 8109668:	f042 0208 	orr.w	r2, r2, #8
 810966c:	619a      	str	r2, [r3, #24]
}
 810966e:	bf00      	nop
 8109670:	3758      	adds	r7, #88	; 0x58
 8109672:	46bd      	mov	sp, r7
 8109674:	bd80      	pop	{r7, pc}
	...

08109678 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8109678:	b580      	push	{r7, lr}
 810967a:	b0a6      	sub	sp, #152	; 0x98
 810967c:	af00      	add	r7, sp, #0
 810967e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8109680:	687b      	ldr	r3, [r7, #4]
 8109682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8109686:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810968a:	687b      	ldr	r3, [r7, #4]
 810968c:	681b      	ldr	r3, [r3, #0]
 810968e:	69db      	ldr	r3, [r3, #28]
 8109690:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8109694:	687b      	ldr	r3, [r7, #4]
 8109696:	681b      	ldr	r3, [r3, #0]
 8109698:	681b      	ldr	r3, [r3, #0]
 810969a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810969e:	687b      	ldr	r3, [r7, #4]
 81096a0:	681b      	ldr	r3, [r3, #0]
 81096a2:	689b      	ldr	r3, [r3, #8]
 81096a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81096a8:	687b      	ldr	r3, [r7, #4]
 81096aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81096ae:	2b22      	cmp	r3, #34	; 0x22
 81096b0:	f040 814f 	bne.w	8109952 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 81096b4:	687b      	ldr	r3, [r7, #4]
 81096b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81096ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81096be:	e0f6      	b.n	81098ae <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81096c0:	687b      	ldr	r3, [r7, #4]
 81096c2:	681b      	ldr	r3, [r3, #0]
 81096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81096c6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81096ca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 81096ce:	b2d9      	uxtb	r1, r3
 81096d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 81096d4:	b2da      	uxtb	r2, r3
 81096d6:	687b      	ldr	r3, [r7, #4]
 81096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81096da:	400a      	ands	r2, r1
 81096dc:	b2d2      	uxtb	r2, r2
 81096de:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 81096e0:	687b      	ldr	r3, [r7, #4]
 81096e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81096e4:	1c5a      	adds	r2, r3, #1
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 81096ea:	687b      	ldr	r3, [r7, #4]
 81096ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81096f0:	b29b      	uxth	r3, r3
 81096f2:	3b01      	subs	r3, #1
 81096f4:	b29a      	uxth	r2, r3
 81096f6:	687b      	ldr	r3, [r7, #4]
 81096f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 81096fc:	687b      	ldr	r3, [r7, #4]
 81096fe:	681b      	ldr	r3, [r3, #0]
 8109700:	69db      	ldr	r3, [r3, #28]
 8109702:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8109706:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 810970a:	f003 0307 	and.w	r3, r3, #7
 810970e:	2b00      	cmp	r3, #0
 8109710:	d053      	beq.n	81097ba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8109712:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8109716:	f003 0301 	and.w	r3, r3, #1
 810971a:	2b00      	cmp	r3, #0
 810971c:	d011      	beq.n	8109742 <UART_RxISR_8BIT_FIFOEN+0xca>
 810971e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8109722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109726:	2b00      	cmp	r3, #0
 8109728:	d00b      	beq.n	8109742 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810972a:	687b      	ldr	r3, [r7, #4]
 810972c:	681b      	ldr	r3, [r3, #0]
 810972e:	2201      	movs	r2, #1
 8109730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8109732:	687b      	ldr	r3, [r7, #4]
 8109734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109738:	f043 0201 	orr.w	r2, r3, #1
 810973c:	687b      	ldr	r3, [r7, #4]
 810973e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109742:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8109746:	f003 0302 	and.w	r3, r3, #2
 810974a:	2b00      	cmp	r3, #0
 810974c:	d011      	beq.n	8109772 <UART_RxISR_8BIT_FIFOEN+0xfa>
 810974e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8109752:	f003 0301 	and.w	r3, r3, #1
 8109756:	2b00      	cmp	r3, #0
 8109758:	d00b      	beq.n	8109772 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810975a:	687b      	ldr	r3, [r7, #4]
 810975c:	681b      	ldr	r3, [r3, #0]
 810975e:	2202      	movs	r2, #2
 8109760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109762:	687b      	ldr	r3, [r7, #4]
 8109764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109768:	f043 0204 	orr.w	r2, r3, #4
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8109776:	f003 0304 	and.w	r3, r3, #4
 810977a:	2b00      	cmp	r3, #0
 810977c:	d011      	beq.n	81097a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 810977e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8109782:	f003 0301 	and.w	r3, r3, #1
 8109786:	2b00      	cmp	r3, #0
 8109788:	d00b      	beq.n	81097a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810978a:	687b      	ldr	r3, [r7, #4]
 810978c:	681b      	ldr	r3, [r3, #0]
 810978e:	2204      	movs	r2, #4
 8109790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109792:	687b      	ldr	r3, [r7, #4]
 8109794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109798:	f043 0202 	orr.w	r2, r3, #2
 810979c:	687b      	ldr	r3, [r7, #4]
 810979e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81097a2:	687b      	ldr	r3, [r7, #4]
 81097a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81097a8:	2b00      	cmp	r3, #0
 81097aa:	d006      	beq.n	81097ba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81097ac:	6878      	ldr	r0, [r7, #4]
 81097ae:	f7fe fd05 	bl	81081bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 81097b2:	687b      	ldr	r3, [r7, #4]
 81097b4:	2200      	movs	r2, #0
 81097b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 81097ba:	687b      	ldr	r3, [r7, #4]
 81097bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81097c0:	b29b      	uxth	r3, r3
 81097c2:	2b00      	cmp	r3, #0
 81097c4:	d173      	bne.n	81098ae <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81097c6:	687b      	ldr	r3, [r7, #4]
 81097c8:	681b      	ldr	r3, [r3, #0]
 81097ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81097cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81097ce:	e853 3f00 	ldrex	r3, [r3]
 81097d2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 81097d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81097d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81097da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81097de:	687b      	ldr	r3, [r7, #4]
 81097e0:	681b      	ldr	r3, [r3, #0]
 81097e2:	461a      	mov	r2, r3
 81097e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 81097e8:	66bb      	str	r3, [r7, #104]	; 0x68
 81097ea:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81097ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81097ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 81097f0:	e841 2300 	strex	r3, r2, [r1]
 81097f4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 81097f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81097f8:	2b00      	cmp	r3, #0
 81097fa:	d1e4      	bne.n	81097c6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81097fc:	687b      	ldr	r3, [r7, #4]
 81097fe:	681b      	ldr	r3, [r3, #0]
 8109800:	3308      	adds	r3, #8
 8109802:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8109806:	e853 3f00 	ldrex	r3, [r3]
 810980a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 810980c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810980e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109812:	f023 0301 	bic.w	r3, r3, #1
 8109816:	67fb      	str	r3, [r7, #124]	; 0x7c
 8109818:	687b      	ldr	r3, [r7, #4]
 810981a:	681b      	ldr	r3, [r3, #0]
 810981c:	3308      	adds	r3, #8
 810981e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8109820:	657a      	str	r2, [r7, #84]	; 0x54
 8109822:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109824:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8109826:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8109828:	e841 2300 	strex	r3, r2, [r1]
 810982c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810982e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109830:	2b00      	cmp	r3, #0
 8109832:	d1e3      	bne.n	81097fc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8109834:	687b      	ldr	r3, [r7, #4]
 8109836:	2220      	movs	r2, #32
 8109838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810983c:	687b      	ldr	r3, [r7, #4]
 810983e:	2200      	movs	r2, #0
 8109840:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109842:	687b      	ldr	r3, [r7, #4]
 8109844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109846:	2b01      	cmp	r3, #1
 8109848:	d12e      	bne.n	81098a8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	2200      	movs	r2, #0
 810984e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109850:	687b      	ldr	r3, [r7, #4]
 8109852:	681b      	ldr	r3, [r3, #0]
 8109854:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109858:	e853 3f00 	ldrex	r3, [r3]
 810985c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109860:	f023 0310 	bic.w	r3, r3, #16
 8109864:	67bb      	str	r3, [r7, #120]	; 0x78
 8109866:	687b      	ldr	r3, [r7, #4]
 8109868:	681b      	ldr	r3, [r3, #0]
 810986a:	461a      	mov	r2, r3
 810986c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810986e:	643b      	str	r3, [r7, #64]	; 0x40
 8109870:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109872:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8109874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8109876:	e841 2300 	strex	r3, r2, [r1]
 810987a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810987e:	2b00      	cmp	r3, #0
 8109880:	d1e6      	bne.n	8109850 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8109882:	687b      	ldr	r3, [r7, #4]
 8109884:	681b      	ldr	r3, [r3, #0]
 8109886:	69db      	ldr	r3, [r3, #28]
 8109888:	f003 0310 	and.w	r3, r3, #16
 810988c:	2b10      	cmp	r3, #16
 810988e:	d103      	bne.n	8109898 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8109890:	687b      	ldr	r3, [r7, #4]
 8109892:	681b      	ldr	r3, [r3, #0]
 8109894:	2210      	movs	r2, #16
 8109896:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8109898:	687b      	ldr	r3, [r7, #4]
 810989a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810989e:	4619      	mov	r1, r3
 81098a0:	6878      	ldr	r0, [r7, #4]
 81098a2:	f7fe fc95 	bl	81081d0 <HAL_UARTEx_RxEventCallback>
 81098a6:	e002      	b.n	81098ae <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 81098a8:	6878      	ldr	r0, [r7, #4]
 81098aa:	f7fe fc7d 	bl	81081a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81098ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 81098b2:	2b00      	cmp	r3, #0
 81098b4:	d006      	beq.n	81098c4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 81098b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 81098ba:	f003 0320 	and.w	r3, r3, #32
 81098be:	2b00      	cmp	r3, #0
 81098c0:	f47f aefe 	bne.w	81096c0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81098ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 81098ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 81098d2:	2b00      	cmp	r3, #0
 81098d4:	d045      	beq.n	8109962 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 81098d6:	687b      	ldr	r3, [r7, #4]
 81098d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81098dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 81098e0:	429a      	cmp	r2, r3
 81098e2:	d23e      	bcs.n	8109962 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 81098e4:	687b      	ldr	r3, [r7, #4]
 81098e6:	681b      	ldr	r3, [r3, #0]
 81098e8:	3308      	adds	r3, #8
 81098ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81098ec:	6a3b      	ldr	r3, [r7, #32]
 81098ee:	e853 3f00 	ldrex	r3, [r3]
 81098f2:	61fb      	str	r3, [r7, #28]
   return(result);
 81098f4:	69fb      	ldr	r3, [r7, #28]
 81098f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81098fa:	673b      	str	r3, [r7, #112]	; 0x70
 81098fc:	687b      	ldr	r3, [r7, #4]
 81098fe:	681b      	ldr	r3, [r3, #0]
 8109900:	3308      	adds	r3, #8
 8109902:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8109904:	62fa      	str	r2, [r7, #44]	; 0x2c
 8109906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810990a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810990c:	e841 2300 	strex	r3, r2, [r1]
 8109910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8109912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109914:	2b00      	cmp	r3, #0
 8109916:	d1e5      	bne.n	81098e4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8109918:	687b      	ldr	r3, [r7, #4]
 810991a:	4a14      	ldr	r2, [pc, #80]	; (810996c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 810991c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810991e:	687b      	ldr	r3, [r7, #4]
 8109920:	681b      	ldr	r3, [r3, #0]
 8109922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109924:	68fb      	ldr	r3, [r7, #12]
 8109926:	e853 3f00 	ldrex	r3, [r3]
 810992a:	60bb      	str	r3, [r7, #8]
   return(result);
 810992c:	68bb      	ldr	r3, [r7, #8]
 810992e:	f043 0320 	orr.w	r3, r3, #32
 8109932:	66fb      	str	r3, [r7, #108]	; 0x6c
 8109934:	687b      	ldr	r3, [r7, #4]
 8109936:	681b      	ldr	r3, [r3, #0]
 8109938:	461a      	mov	r2, r3
 810993a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810993c:	61bb      	str	r3, [r7, #24]
 810993e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109940:	6979      	ldr	r1, [r7, #20]
 8109942:	69ba      	ldr	r2, [r7, #24]
 8109944:	e841 2300 	strex	r3, r2, [r1]
 8109948:	613b      	str	r3, [r7, #16]
   return(result);
 810994a:	693b      	ldr	r3, [r7, #16]
 810994c:	2b00      	cmp	r3, #0
 810994e:	d1e6      	bne.n	810991e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8109950:	e007      	b.n	8109962 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8109952:	687b      	ldr	r3, [r7, #4]
 8109954:	681b      	ldr	r3, [r3, #0]
 8109956:	699a      	ldr	r2, [r3, #24]
 8109958:	687b      	ldr	r3, [r7, #4]
 810995a:	681b      	ldr	r3, [r3, #0]
 810995c:	f042 0208 	orr.w	r2, r2, #8
 8109960:	619a      	str	r2, [r3, #24]
}
 8109962:	bf00      	nop
 8109964:	3798      	adds	r7, #152	; 0x98
 8109966:	46bd      	mov	sp, r7
 8109968:	bd80      	pop	{r7, pc}
 810996a:	bf00      	nop
 810996c:	081093b7 	.word	0x081093b7

08109970 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8109970:	b580      	push	{r7, lr}
 8109972:	b0a8      	sub	sp, #160	; 0xa0
 8109974:	af00      	add	r7, sp, #0
 8109976:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8109978:	687b      	ldr	r3, [r7, #4]
 810997a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 810997e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8109982:	687b      	ldr	r3, [r7, #4]
 8109984:	681b      	ldr	r3, [r3, #0]
 8109986:	69db      	ldr	r3, [r3, #28]
 8109988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810998c:	687b      	ldr	r3, [r7, #4]
 810998e:	681b      	ldr	r3, [r3, #0]
 8109990:	681b      	ldr	r3, [r3, #0]
 8109992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	681b      	ldr	r3, [r3, #0]
 810999a:	689b      	ldr	r3, [r3, #8]
 810999c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81099a0:	687b      	ldr	r3, [r7, #4]
 81099a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81099a6:	2b22      	cmp	r3, #34	; 0x22
 81099a8:	f040 8153 	bne.w	8109c52 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 81099ac:	687b      	ldr	r3, [r7, #4]
 81099ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81099b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81099b6:	e0fa      	b.n	8109bae <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81099b8:	687b      	ldr	r3, [r7, #4]
 81099ba:	681b      	ldr	r3, [r3, #0]
 81099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099be:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 81099c2:	687b      	ldr	r3, [r7, #4]
 81099c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81099c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 81099ca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 81099ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 81099d2:	4013      	ands	r3, r2
 81099d4:	b29a      	uxth	r2, r3
 81099d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 81099da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 81099dc:	687b      	ldr	r3, [r7, #4]
 81099de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81099e0:	1c9a      	adds	r2, r3, #2
 81099e2:	687b      	ldr	r3, [r7, #4]
 81099e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 81099e6:	687b      	ldr	r3, [r7, #4]
 81099e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81099ec:	b29b      	uxth	r3, r3
 81099ee:	3b01      	subs	r3, #1
 81099f0:	b29a      	uxth	r2, r3
 81099f2:	687b      	ldr	r3, [r7, #4]
 81099f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 81099f8:	687b      	ldr	r3, [r7, #4]
 81099fa:	681b      	ldr	r3, [r3, #0]
 81099fc:	69db      	ldr	r3, [r3, #28]
 81099fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8109a02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8109a06:	f003 0307 	and.w	r3, r3, #7
 8109a0a:	2b00      	cmp	r3, #0
 8109a0c:	d053      	beq.n	8109ab6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8109a0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8109a12:	f003 0301 	and.w	r3, r3, #1
 8109a16:	2b00      	cmp	r3, #0
 8109a18:	d011      	beq.n	8109a3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8109a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8109a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109a22:	2b00      	cmp	r3, #0
 8109a24:	d00b      	beq.n	8109a3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8109a26:	687b      	ldr	r3, [r7, #4]
 8109a28:	681b      	ldr	r3, [r3, #0]
 8109a2a:	2201      	movs	r2, #1
 8109a2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8109a2e:	687b      	ldr	r3, [r7, #4]
 8109a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109a34:	f043 0201 	orr.w	r2, r3, #1
 8109a38:	687b      	ldr	r3, [r7, #4]
 8109a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8109a42:	f003 0302 	and.w	r3, r3, #2
 8109a46:	2b00      	cmp	r3, #0
 8109a48:	d011      	beq.n	8109a6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8109a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8109a4e:	f003 0301 	and.w	r3, r3, #1
 8109a52:	2b00      	cmp	r3, #0
 8109a54:	d00b      	beq.n	8109a6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	681b      	ldr	r3, [r3, #0]
 8109a5a:	2202      	movs	r2, #2
 8109a5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109a64:	f043 0204 	orr.w	r2, r3, #4
 8109a68:	687b      	ldr	r3, [r7, #4]
 8109a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8109a72:	f003 0304 	and.w	r3, r3, #4
 8109a76:	2b00      	cmp	r3, #0
 8109a78:	d011      	beq.n	8109a9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8109a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8109a7e:	f003 0301 	and.w	r3, r3, #1
 8109a82:	2b00      	cmp	r3, #0
 8109a84:	d00b      	beq.n	8109a9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8109a86:	687b      	ldr	r3, [r7, #4]
 8109a88:	681b      	ldr	r3, [r3, #0]
 8109a8a:	2204      	movs	r2, #4
 8109a8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109a8e:	687b      	ldr	r3, [r7, #4]
 8109a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109a94:	f043 0202 	orr.w	r2, r3, #2
 8109a98:	687b      	ldr	r3, [r7, #4]
 8109a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8109a9e:	687b      	ldr	r3, [r7, #4]
 8109aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109aa4:	2b00      	cmp	r3, #0
 8109aa6:	d006      	beq.n	8109ab6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8109aa8:	6878      	ldr	r0, [r7, #4]
 8109aaa:	f7fe fb87 	bl	81081bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109aae:	687b      	ldr	r3, [r7, #4]
 8109ab0:	2200      	movs	r2, #0
 8109ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8109ab6:	687b      	ldr	r3, [r7, #4]
 8109ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8109abc:	b29b      	uxth	r3, r3
 8109abe:	2b00      	cmp	r3, #0
 8109ac0:	d175      	bne.n	8109bae <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109ac2:	687b      	ldr	r3, [r7, #4]
 8109ac4:	681b      	ldr	r3, [r3, #0]
 8109ac6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8109aca:	e853 3f00 	ldrex	r3, [r3]
 8109ace:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8109ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8109ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	681b      	ldr	r3, [r3, #0]
 8109ade:	461a      	mov	r2, r3
 8109ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8109ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8109ae6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109ae8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8109aea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8109aec:	e841 2300 	strex	r3, r2, [r1]
 8109af0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8109af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8109af4:	2b00      	cmp	r3, #0
 8109af6:	d1e4      	bne.n	8109ac2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109af8:	687b      	ldr	r3, [r7, #4]
 8109afa:	681b      	ldr	r3, [r3, #0]
 8109afc:	3308      	adds	r3, #8
 8109afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109b02:	e853 3f00 	ldrex	r3, [r3]
 8109b06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8109b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8109b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109b0e:	f023 0301 	bic.w	r3, r3, #1
 8109b12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8109b16:	687b      	ldr	r3, [r7, #4]
 8109b18:	681b      	ldr	r3, [r3, #0]
 8109b1a:	3308      	adds	r3, #8
 8109b1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8109b20:	65ba      	str	r2, [r7, #88]	; 0x58
 8109b22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109b24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8109b26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8109b28:	e841 2300 	strex	r3, r2, [r1]
 8109b2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8109b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8109b30:	2b00      	cmp	r3, #0
 8109b32:	d1e1      	bne.n	8109af8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	2220      	movs	r2, #32
 8109b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8109b3c:	687b      	ldr	r3, [r7, #4]
 8109b3e:	2200      	movs	r2, #0
 8109b40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109b46:	2b01      	cmp	r3, #1
 8109b48:	d12e      	bne.n	8109ba8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109b4a:	687b      	ldr	r3, [r7, #4]
 8109b4c:	2200      	movs	r2, #0
 8109b4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109b50:	687b      	ldr	r3, [r7, #4]
 8109b52:	681b      	ldr	r3, [r3, #0]
 8109b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109b58:	e853 3f00 	ldrex	r3, [r3]
 8109b5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8109b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109b60:	f023 0310 	bic.w	r3, r3, #16
 8109b64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8109b66:	687b      	ldr	r3, [r7, #4]
 8109b68:	681b      	ldr	r3, [r3, #0]
 8109b6a:	461a      	mov	r2, r3
 8109b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8109b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8109b70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8109b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109b76:	e841 2300 	strex	r3, r2, [r1]
 8109b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8109b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109b7e:	2b00      	cmp	r3, #0
 8109b80:	d1e6      	bne.n	8109b50 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8109b82:	687b      	ldr	r3, [r7, #4]
 8109b84:	681b      	ldr	r3, [r3, #0]
 8109b86:	69db      	ldr	r3, [r3, #28]
 8109b88:	f003 0310 	and.w	r3, r3, #16
 8109b8c:	2b10      	cmp	r3, #16
 8109b8e:	d103      	bne.n	8109b98 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8109b90:	687b      	ldr	r3, [r7, #4]
 8109b92:	681b      	ldr	r3, [r3, #0]
 8109b94:	2210      	movs	r2, #16
 8109b96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8109b98:	687b      	ldr	r3, [r7, #4]
 8109b9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8109b9e:	4619      	mov	r1, r3
 8109ba0:	6878      	ldr	r0, [r7, #4]
 8109ba2:	f7fe fb15 	bl	81081d0 <HAL_UARTEx_RxEventCallback>
 8109ba6:	e002      	b.n	8109bae <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8109ba8:	6878      	ldr	r0, [r7, #4]
 8109baa:	f7fe fafd 	bl	81081a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8109bae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8109bb2:	2b00      	cmp	r3, #0
 8109bb4:	d006      	beq.n	8109bc4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8109bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8109bba:	f003 0320 	and.w	r3, r3, #32
 8109bbe:	2b00      	cmp	r3, #0
 8109bc0:	f47f aefa 	bne.w	81099b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8109bc4:	687b      	ldr	r3, [r7, #4]
 8109bc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8109bca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8109bce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8109bd2:	2b00      	cmp	r3, #0
 8109bd4:	d045      	beq.n	8109c62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8109bd6:	687b      	ldr	r3, [r7, #4]
 8109bd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8109bdc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8109be0:	429a      	cmp	r2, r3
 8109be2:	d23e      	bcs.n	8109c62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8109be4:	687b      	ldr	r3, [r7, #4]
 8109be6:	681b      	ldr	r3, [r3, #0]
 8109be8:	3308      	adds	r3, #8
 8109bea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109bee:	e853 3f00 	ldrex	r3, [r3]
 8109bf2:	623b      	str	r3, [r7, #32]
   return(result);
 8109bf4:	6a3b      	ldr	r3, [r7, #32]
 8109bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109bfa:	677b      	str	r3, [r7, #116]	; 0x74
 8109bfc:	687b      	ldr	r3, [r7, #4]
 8109bfe:	681b      	ldr	r3, [r3, #0]
 8109c00:	3308      	adds	r3, #8
 8109c02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8109c04:	633a      	str	r2, [r7, #48]	; 0x30
 8109c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8109c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109c0c:	e841 2300 	strex	r3, r2, [r1]
 8109c10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8109c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109c14:	2b00      	cmp	r3, #0
 8109c16:	d1e5      	bne.n	8109be4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	4a14      	ldr	r2, [pc, #80]	; (8109c6c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8109c1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	681b      	ldr	r3, [r3, #0]
 8109c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109c24:	693b      	ldr	r3, [r7, #16]
 8109c26:	e853 3f00 	ldrex	r3, [r3]
 8109c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8109c2c:	68fb      	ldr	r3, [r7, #12]
 8109c2e:	f043 0320 	orr.w	r3, r3, #32
 8109c32:	673b      	str	r3, [r7, #112]	; 0x70
 8109c34:	687b      	ldr	r3, [r7, #4]
 8109c36:	681b      	ldr	r3, [r3, #0]
 8109c38:	461a      	mov	r2, r3
 8109c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8109c3c:	61fb      	str	r3, [r7, #28]
 8109c3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109c40:	69b9      	ldr	r1, [r7, #24]
 8109c42:	69fa      	ldr	r2, [r7, #28]
 8109c44:	e841 2300 	strex	r3, r2, [r1]
 8109c48:	617b      	str	r3, [r7, #20]
   return(result);
 8109c4a:	697b      	ldr	r3, [r7, #20]
 8109c4c:	2b00      	cmp	r3, #0
 8109c4e:	d1e6      	bne.n	8109c1e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8109c50:	e007      	b.n	8109c62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8109c52:	687b      	ldr	r3, [r7, #4]
 8109c54:	681b      	ldr	r3, [r3, #0]
 8109c56:	699a      	ldr	r2, [r3, #24]
 8109c58:	687b      	ldr	r3, [r7, #4]
 8109c5a:	681b      	ldr	r3, [r3, #0]
 8109c5c:	f042 0208 	orr.w	r2, r2, #8
 8109c60:	619a      	str	r2, [r3, #24]
}
 8109c62:	bf00      	nop
 8109c64:	37a0      	adds	r7, #160	; 0xa0
 8109c66:	46bd      	mov	sp, r7
 8109c68:	bd80      	pop	{r7, pc}
 8109c6a:	bf00      	nop
 8109c6c:	08109517 	.word	0x08109517

08109c70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8109c70:	b480      	push	{r7}
 8109c72:	b083      	sub	sp, #12
 8109c74:	af00      	add	r7, sp, #0
 8109c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8109c78:	bf00      	nop
 8109c7a:	370c      	adds	r7, #12
 8109c7c:	46bd      	mov	sp, r7
 8109c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c82:	4770      	bx	lr

08109c84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8109c84:	b480      	push	{r7}
 8109c86:	b083      	sub	sp, #12
 8109c88:	af00      	add	r7, sp, #0
 8109c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8109c8c:	bf00      	nop
 8109c8e:	370c      	adds	r7, #12
 8109c90:	46bd      	mov	sp, r7
 8109c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c96:	4770      	bx	lr

08109c98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8109c98:	b480      	push	{r7}
 8109c9a:	b083      	sub	sp, #12
 8109c9c:	af00      	add	r7, sp, #0
 8109c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8109ca0:	bf00      	nop
 8109ca2:	370c      	adds	r7, #12
 8109ca4:	46bd      	mov	sp, r7
 8109ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109caa:	4770      	bx	lr

08109cac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8109cac:	b480      	push	{r7}
 8109cae:	b085      	sub	sp, #20
 8109cb0:	af00      	add	r7, sp, #0
 8109cb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109cb4:	687b      	ldr	r3, [r7, #4]
 8109cb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109cba:	2b01      	cmp	r3, #1
 8109cbc:	d101      	bne.n	8109cc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8109cbe:	2302      	movs	r3, #2
 8109cc0:	e027      	b.n	8109d12 <HAL_UARTEx_DisableFifoMode+0x66>
 8109cc2:	687b      	ldr	r3, [r7, #4]
 8109cc4:	2201      	movs	r2, #1
 8109cc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109cca:	687b      	ldr	r3, [r7, #4]
 8109ccc:	2224      	movs	r2, #36	; 0x24
 8109cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109cd2:	687b      	ldr	r3, [r7, #4]
 8109cd4:	681b      	ldr	r3, [r3, #0]
 8109cd6:	681b      	ldr	r3, [r3, #0]
 8109cd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109cda:	687b      	ldr	r3, [r7, #4]
 8109cdc:	681b      	ldr	r3, [r3, #0]
 8109cde:	681a      	ldr	r2, [r3, #0]
 8109ce0:	687b      	ldr	r3, [r7, #4]
 8109ce2:	681b      	ldr	r3, [r3, #0]
 8109ce4:	f022 0201 	bic.w	r2, r2, #1
 8109ce8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109cea:	68fb      	ldr	r3, [r7, #12]
 8109cec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8109cf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109cf2:	687b      	ldr	r3, [r7, #4]
 8109cf4:	2200      	movs	r2, #0
 8109cf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109cf8:	687b      	ldr	r3, [r7, #4]
 8109cfa:	681b      	ldr	r3, [r3, #0]
 8109cfc:	68fa      	ldr	r2, [r7, #12]
 8109cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109d00:	687b      	ldr	r3, [r7, #4]
 8109d02:	2220      	movs	r2, #32
 8109d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109d08:	687b      	ldr	r3, [r7, #4]
 8109d0a:	2200      	movs	r2, #0
 8109d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109d10:	2300      	movs	r3, #0
}
 8109d12:	4618      	mov	r0, r3
 8109d14:	3714      	adds	r7, #20
 8109d16:	46bd      	mov	sp, r7
 8109d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d1c:	4770      	bx	lr

08109d1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109d1e:	b580      	push	{r7, lr}
 8109d20:	b084      	sub	sp, #16
 8109d22:	af00      	add	r7, sp, #0
 8109d24:	6078      	str	r0, [r7, #4]
 8109d26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109d28:	687b      	ldr	r3, [r7, #4]
 8109d2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109d2e:	2b01      	cmp	r3, #1
 8109d30:	d101      	bne.n	8109d36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109d32:	2302      	movs	r3, #2
 8109d34:	e02d      	b.n	8109d92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109d36:	687b      	ldr	r3, [r7, #4]
 8109d38:	2201      	movs	r2, #1
 8109d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109d3e:	687b      	ldr	r3, [r7, #4]
 8109d40:	2224      	movs	r2, #36	; 0x24
 8109d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109d46:	687b      	ldr	r3, [r7, #4]
 8109d48:	681b      	ldr	r3, [r3, #0]
 8109d4a:	681b      	ldr	r3, [r3, #0]
 8109d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109d4e:	687b      	ldr	r3, [r7, #4]
 8109d50:	681b      	ldr	r3, [r3, #0]
 8109d52:	681a      	ldr	r2, [r3, #0]
 8109d54:	687b      	ldr	r3, [r7, #4]
 8109d56:	681b      	ldr	r3, [r3, #0]
 8109d58:	f022 0201 	bic.w	r2, r2, #1
 8109d5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109d5e:	687b      	ldr	r3, [r7, #4]
 8109d60:	681b      	ldr	r3, [r3, #0]
 8109d62:	689b      	ldr	r3, [r3, #8]
 8109d64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	681b      	ldr	r3, [r3, #0]
 8109d6c:	683a      	ldr	r2, [r7, #0]
 8109d6e:	430a      	orrs	r2, r1
 8109d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109d72:	6878      	ldr	r0, [r7, #4]
 8109d74:	f000 f850 	bl	8109e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109d78:	687b      	ldr	r3, [r7, #4]
 8109d7a:	681b      	ldr	r3, [r3, #0]
 8109d7c:	68fa      	ldr	r2, [r7, #12]
 8109d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109d80:	687b      	ldr	r3, [r7, #4]
 8109d82:	2220      	movs	r2, #32
 8109d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	2200      	movs	r2, #0
 8109d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109d90:	2300      	movs	r3, #0
}
 8109d92:	4618      	mov	r0, r3
 8109d94:	3710      	adds	r7, #16
 8109d96:	46bd      	mov	sp, r7
 8109d98:	bd80      	pop	{r7, pc}

08109d9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109d9a:	b580      	push	{r7, lr}
 8109d9c:	b084      	sub	sp, #16
 8109d9e:	af00      	add	r7, sp, #0
 8109da0:	6078      	str	r0, [r7, #4]
 8109da2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109da4:	687b      	ldr	r3, [r7, #4]
 8109da6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109daa:	2b01      	cmp	r3, #1
 8109dac:	d101      	bne.n	8109db2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109dae:	2302      	movs	r3, #2
 8109db0:	e02d      	b.n	8109e0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109db2:	687b      	ldr	r3, [r7, #4]
 8109db4:	2201      	movs	r2, #1
 8109db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109dba:	687b      	ldr	r3, [r7, #4]
 8109dbc:	2224      	movs	r2, #36	; 0x24
 8109dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109dc2:	687b      	ldr	r3, [r7, #4]
 8109dc4:	681b      	ldr	r3, [r3, #0]
 8109dc6:	681b      	ldr	r3, [r3, #0]
 8109dc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109dca:	687b      	ldr	r3, [r7, #4]
 8109dcc:	681b      	ldr	r3, [r3, #0]
 8109dce:	681a      	ldr	r2, [r3, #0]
 8109dd0:	687b      	ldr	r3, [r7, #4]
 8109dd2:	681b      	ldr	r3, [r3, #0]
 8109dd4:	f022 0201 	bic.w	r2, r2, #1
 8109dd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	681b      	ldr	r3, [r3, #0]
 8109dde:	689b      	ldr	r3, [r3, #8]
 8109de0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8109de4:	687b      	ldr	r3, [r7, #4]
 8109de6:	681b      	ldr	r3, [r3, #0]
 8109de8:	683a      	ldr	r2, [r7, #0]
 8109dea:	430a      	orrs	r2, r1
 8109dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109dee:	6878      	ldr	r0, [r7, #4]
 8109df0:	f000 f812 	bl	8109e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109df4:	687b      	ldr	r3, [r7, #4]
 8109df6:	681b      	ldr	r3, [r3, #0]
 8109df8:	68fa      	ldr	r2, [r7, #12]
 8109dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109dfc:	687b      	ldr	r3, [r7, #4]
 8109dfe:	2220      	movs	r2, #32
 8109e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109e04:	687b      	ldr	r3, [r7, #4]
 8109e06:	2200      	movs	r2, #0
 8109e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109e0c:	2300      	movs	r3, #0
}
 8109e0e:	4618      	mov	r0, r3
 8109e10:	3710      	adds	r7, #16
 8109e12:	46bd      	mov	sp, r7
 8109e14:	bd80      	pop	{r7, pc}
	...

08109e18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109e18:	b480      	push	{r7}
 8109e1a:	b085      	sub	sp, #20
 8109e1c:	af00      	add	r7, sp, #0
 8109e1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109e20:	687b      	ldr	r3, [r7, #4]
 8109e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109e24:	2b00      	cmp	r3, #0
 8109e26:	d108      	bne.n	8109e3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109e28:	687b      	ldr	r3, [r7, #4]
 8109e2a:	2201      	movs	r2, #1
 8109e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8109e30:	687b      	ldr	r3, [r7, #4]
 8109e32:	2201      	movs	r2, #1
 8109e34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109e38:	e031      	b.n	8109e9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8109e3a:	2310      	movs	r3, #16
 8109e3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109e3e:	2310      	movs	r3, #16
 8109e40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109e42:	687b      	ldr	r3, [r7, #4]
 8109e44:	681b      	ldr	r3, [r3, #0]
 8109e46:	689b      	ldr	r3, [r3, #8]
 8109e48:	0e5b      	lsrs	r3, r3, #25
 8109e4a:	b2db      	uxtb	r3, r3
 8109e4c:	f003 0307 	and.w	r3, r3, #7
 8109e50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109e52:	687b      	ldr	r3, [r7, #4]
 8109e54:	681b      	ldr	r3, [r3, #0]
 8109e56:	689b      	ldr	r3, [r3, #8]
 8109e58:	0f5b      	lsrs	r3, r3, #29
 8109e5a:	b2db      	uxtb	r3, r3
 8109e5c:	f003 0307 	and.w	r3, r3, #7
 8109e60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109e62:	7bbb      	ldrb	r3, [r7, #14]
 8109e64:	7b3a      	ldrb	r2, [r7, #12]
 8109e66:	4911      	ldr	r1, [pc, #68]	; (8109eac <UARTEx_SetNbDataToProcess+0x94>)
 8109e68:	5c8a      	ldrb	r2, [r1, r2]
 8109e6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109e6e:	7b3a      	ldrb	r2, [r7, #12]
 8109e70:	490f      	ldr	r1, [pc, #60]	; (8109eb0 <UARTEx_SetNbDataToProcess+0x98>)
 8109e72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8109e78:	b29a      	uxth	r2, r3
 8109e7a:	687b      	ldr	r3, [r7, #4]
 8109e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109e80:	7bfb      	ldrb	r3, [r7, #15]
 8109e82:	7b7a      	ldrb	r2, [r7, #13]
 8109e84:	4909      	ldr	r1, [pc, #36]	; (8109eac <UARTEx_SetNbDataToProcess+0x94>)
 8109e86:	5c8a      	ldrb	r2, [r1, r2]
 8109e88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109e8c:	7b7a      	ldrb	r2, [r7, #13]
 8109e8e:	4908      	ldr	r1, [pc, #32]	; (8109eb0 <UARTEx_SetNbDataToProcess+0x98>)
 8109e90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109e92:	fb93 f3f2 	sdiv	r3, r3, r2
 8109e96:	b29a      	uxth	r2, r3
 8109e98:	687b      	ldr	r3, [r7, #4]
 8109e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109e9e:	bf00      	nop
 8109ea0:	3714      	adds	r7, #20
 8109ea2:	46bd      	mov	sp, r7
 8109ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ea8:	4770      	bx	lr
 8109eaa:	bf00      	nop
 8109eac:	0810cfc0 	.word	0x0810cfc0
 8109eb0:	0810cfc8 	.word	0x0810cfc8

08109eb4 <__NVIC_SetPriority>:
{
 8109eb4:	b480      	push	{r7}
 8109eb6:	b083      	sub	sp, #12
 8109eb8:	af00      	add	r7, sp, #0
 8109eba:	4603      	mov	r3, r0
 8109ebc:	6039      	str	r1, [r7, #0]
 8109ebe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8109ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8109ec4:	2b00      	cmp	r3, #0
 8109ec6:	db0a      	blt.n	8109ede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8109ec8:	683b      	ldr	r3, [r7, #0]
 8109eca:	b2da      	uxtb	r2, r3
 8109ecc:	490c      	ldr	r1, [pc, #48]	; (8109f00 <__NVIC_SetPriority+0x4c>)
 8109ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8109ed2:	0112      	lsls	r2, r2, #4
 8109ed4:	b2d2      	uxtb	r2, r2
 8109ed6:	440b      	add	r3, r1
 8109ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8109edc:	e00a      	b.n	8109ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8109ede:	683b      	ldr	r3, [r7, #0]
 8109ee0:	b2da      	uxtb	r2, r3
 8109ee2:	4908      	ldr	r1, [pc, #32]	; (8109f04 <__NVIC_SetPriority+0x50>)
 8109ee4:	88fb      	ldrh	r3, [r7, #6]
 8109ee6:	f003 030f 	and.w	r3, r3, #15
 8109eea:	3b04      	subs	r3, #4
 8109eec:	0112      	lsls	r2, r2, #4
 8109eee:	b2d2      	uxtb	r2, r2
 8109ef0:	440b      	add	r3, r1
 8109ef2:	761a      	strb	r2, [r3, #24]
}
 8109ef4:	bf00      	nop
 8109ef6:	370c      	adds	r7, #12
 8109ef8:	46bd      	mov	sp, r7
 8109efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109efe:	4770      	bx	lr
 8109f00:	e000e100 	.word	0xe000e100
 8109f04:	e000ed00 	.word	0xe000ed00

08109f08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8109f08:	b580      	push	{r7, lr}
 8109f0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8109f0c:	2100      	movs	r1, #0
 8109f0e:	f06f 0004 	mvn.w	r0, #4
 8109f12:	f7ff ffcf 	bl	8109eb4 <__NVIC_SetPriority>
#endif
}
 8109f16:	bf00      	nop
 8109f18:	bd80      	pop	{r7, pc}
	...

08109f1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8109f1c:	b480      	push	{r7}
 8109f1e:	b083      	sub	sp, #12
 8109f20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8109f22:	f3ef 8305 	mrs	r3, IPSR
 8109f26:	603b      	str	r3, [r7, #0]
  return(result);
 8109f28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8109f2a:	2b00      	cmp	r3, #0
 8109f2c:	d003      	beq.n	8109f36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8109f2e:	f06f 0305 	mvn.w	r3, #5
 8109f32:	607b      	str	r3, [r7, #4]
 8109f34:	e00c      	b.n	8109f50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8109f36:	4b0a      	ldr	r3, [pc, #40]	; (8109f60 <osKernelInitialize+0x44>)
 8109f38:	681b      	ldr	r3, [r3, #0]
 8109f3a:	2b00      	cmp	r3, #0
 8109f3c:	d105      	bne.n	8109f4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8109f3e:	4b08      	ldr	r3, [pc, #32]	; (8109f60 <osKernelInitialize+0x44>)
 8109f40:	2201      	movs	r2, #1
 8109f42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8109f44:	2300      	movs	r3, #0
 8109f46:	607b      	str	r3, [r7, #4]
 8109f48:	e002      	b.n	8109f50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8109f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8109f4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8109f50:	687b      	ldr	r3, [r7, #4]
}
 8109f52:	4618      	mov	r0, r3
 8109f54:	370c      	adds	r7, #12
 8109f56:	46bd      	mov	sp, r7
 8109f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f5c:	4770      	bx	lr
 8109f5e:	bf00      	nop
 8109f60:	100000f0 	.word	0x100000f0

08109f64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8109f64:	b580      	push	{r7, lr}
 8109f66:	b082      	sub	sp, #8
 8109f68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8109f6a:	f3ef 8305 	mrs	r3, IPSR
 8109f6e:	603b      	str	r3, [r7, #0]
  return(result);
 8109f70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8109f72:	2b00      	cmp	r3, #0
 8109f74:	d003      	beq.n	8109f7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8109f76:	f06f 0305 	mvn.w	r3, #5
 8109f7a:	607b      	str	r3, [r7, #4]
 8109f7c:	e010      	b.n	8109fa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8109f7e:	4b0b      	ldr	r3, [pc, #44]	; (8109fac <osKernelStart+0x48>)
 8109f80:	681b      	ldr	r3, [r3, #0]
 8109f82:	2b01      	cmp	r3, #1
 8109f84:	d109      	bne.n	8109f9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8109f86:	f7ff ffbf 	bl	8109f08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8109f8a:	4b08      	ldr	r3, [pc, #32]	; (8109fac <osKernelStart+0x48>)
 8109f8c:	2202      	movs	r2, #2
 8109f8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8109f90:	f001 fd64 	bl	810ba5c <vTaskStartScheduler>
      stat = osOK;
 8109f94:	2300      	movs	r3, #0
 8109f96:	607b      	str	r3, [r7, #4]
 8109f98:	e002      	b.n	8109fa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8109f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8109f9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8109fa0:	687b      	ldr	r3, [r7, #4]
}
 8109fa2:	4618      	mov	r0, r3
 8109fa4:	3708      	adds	r7, #8
 8109fa6:	46bd      	mov	sp, r7
 8109fa8:	bd80      	pop	{r7, pc}
 8109faa:	bf00      	nop
 8109fac:	100000f0 	.word	0x100000f0

08109fb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8109fb0:	b580      	push	{r7, lr}
 8109fb2:	b08e      	sub	sp, #56	; 0x38
 8109fb4:	af04      	add	r7, sp, #16
 8109fb6:	60f8      	str	r0, [r7, #12]
 8109fb8:	60b9      	str	r1, [r7, #8]
 8109fba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8109fbc:	2300      	movs	r3, #0
 8109fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8109fc0:	f3ef 8305 	mrs	r3, IPSR
 8109fc4:	617b      	str	r3, [r7, #20]
  return(result);
 8109fc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8109fc8:	2b00      	cmp	r3, #0
 8109fca:	d17e      	bne.n	810a0ca <osThreadNew+0x11a>
 8109fcc:	68fb      	ldr	r3, [r7, #12]
 8109fce:	2b00      	cmp	r3, #0
 8109fd0:	d07b      	beq.n	810a0ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8109fd2:	2380      	movs	r3, #128	; 0x80
 8109fd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8109fd6:	2318      	movs	r3, #24
 8109fd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8109fda:	2300      	movs	r3, #0
 8109fdc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8109fde:	f04f 33ff 	mov.w	r3, #4294967295
 8109fe2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8109fe4:	687b      	ldr	r3, [r7, #4]
 8109fe6:	2b00      	cmp	r3, #0
 8109fe8:	d045      	beq.n	810a076 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8109fea:	687b      	ldr	r3, [r7, #4]
 8109fec:	681b      	ldr	r3, [r3, #0]
 8109fee:	2b00      	cmp	r3, #0
 8109ff0:	d002      	beq.n	8109ff8 <osThreadNew+0x48>
        name = attr->name;
 8109ff2:	687b      	ldr	r3, [r7, #4]
 8109ff4:	681b      	ldr	r3, [r3, #0]
 8109ff6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8109ff8:	687b      	ldr	r3, [r7, #4]
 8109ffa:	699b      	ldr	r3, [r3, #24]
 8109ffc:	2b00      	cmp	r3, #0
 8109ffe:	d002      	beq.n	810a006 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	699b      	ldr	r3, [r3, #24]
 810a004:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810a006:	69fb      	ldr	r3, [r7, #28]
 810a008:	2b00      	cmp	r3, #0
 810a00a:	d008      	beq.n	810a01e <osThreadNew+0x6e>
 810a00c:	69fb      	ldr	r3, [r7, #28]
 810a00e:	2b38      	cmp	r3, #56	; 0x38
 810a010:	d805      	bhi.n	810a01e <osThreadNew+0x6e>
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	685b      	ldr	r3, [r3, #4]
 810a016:	f003 0301 	and.w	r3, r3, #1
 810a01a:	2b00      	cmp	r3, #0
 810a01c:	d001      	beq.n	810a022 <osThreadNew+0x72>
        return (NULL);
 810a01e:	2300      	movs	r3, #0
 810a020:	e054      	b.n	810a0cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810a022:	687b      	ldr	r3, [r7, #4]
 810a024:	695b      	ldr	r3, [r3, #20]
 810a026:	2b00      	cmp	r3, #0
 810a028:	d003      	beq.n	810a032 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	695b      	ldr	r3, [r3, #20]
 810a02e:	089b      	lsrs	r3, r3, #2
 810a030:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810a032:	687b      	ldr	r3, [r7, #4]
 810a034:	689b      	ldr	r3, [r3, #8]
 810a036:	2b00      	cmp	r3, #0
 810a038:	d00e      	beq.n	810a058 <osThreadNew+0xa8>
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	68db      	ldr	r3, [r3, #12]
 810a03e:	2bbb      	cmp	r3, #187	; 0xbb
 810a040:	d90a      	bls.n	810a058 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810a042:	687b      	ldr	r3, [r7, #4]
 810a044:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810a046:	2b00      	cmp	r3, #0
 810a048:	d006      	beq.n	810a058 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810a04a:	687b      	ldr	r3, [r7, #4]
 810a04c:	695b      	ldr	r3, [r3, #20]
 810a04e:	2b00      	cmp	r3, #0
 810a050:	d002      	beq.n	810a058 <osThreadNew+0xa8>
        mem = 1;
 810a052:	2301      	movs	r3, #1
 810a054:	61bb      	str	r3, [r7, #24]
 810a056:	e010      	b.n	810a07a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810a058:	687b      	ldr	r3, [r7, #4]
 810a05a:	689b      	ldr	r3, [r3, #8]
 810a05c:	2b00      	cmp	r3, #0
 810a05e:	d10c      	bne.n	810a07a <osThreadNew+0xca>
 810a060:	687b      	ldr	r3, [r7, #4]
 810a062:	68db      	ldr	r3, [r3, #12]
 810a064:	2b00      	cmp	r3, #0
 810a066:	d108      	bne.n	810a07a <osThreadNew+0xca>
 810a068:	687b      	ldr	r3, [r7, #4]
 810a06a:	691b      	ldr	r3, [r3, #16]
 810a06c:	2b00      	cmp	r3, #0
 810a06e:	d104      	bne.n	810a07a <osThreadNew+0xca>
          mem = 0;
 810a070:	2300      	movs	r3, #0
 810a072:	61bb      	str	r3, [r7, #24]
 810a074:	e001      	b.n	810a07a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810a076:	2300      	movs	r3, #0
 810a078:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810a07a:	69bb      	ldr	r3, [r7, #24]
 810a07c:	2b01      	cmp	r3, #1
 810a07e:	d110      	bne.n	810a0a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810a080:	687b      	ldr	r3, [r7, #4]
 810a082:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810a084:	687a      	ldr	r2, [r7, #4]
 810a086:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810a088:	9202      	str	r2, [sp, #8]
 810a08a:	9301      	str	r3, [sp, #4]
 810a08c:	69fb      	ldr	r3, [r7, #28]
 810a08e:	9300      	str	r3, [sp, #0]
 810a090:	68bb      	ldr	r3, [r7, #8]
 810a092:	6a3a      	ldr	r2, [r7, #32]
 810a094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810a096:	68f8      	ldr	r0, [r7, #12]
 810a098:	f001 faf4 	bl	810b684 <xTaskCreateStatic>
 810a09c:	4603      	mov	r3, r0
 810a09e:	613b      	str	r3, [r7, #16]
 810a0a0:	e013      	b.n	810a0ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810a0a2:	69bb      	ldr	r3, [r7, #24]
 810a0a4:	2b00      	cmp	r3, #0
 810a0a6:	d110      	bne.n	810a0ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810a0a8:	6a3b      	ldr	r3, [r7, #32]
 810a0aa:	b29a      	uxth	r2, r3
 810a0ac:	f107 0310 	add.w	r3, r7, #16
 810a0b0:	9301      	str	r3, [sp, #4]
 810a0b2:	69fb      	ldr	r3, [r7, #28]
 810a0b4:	9300      	str	r3, [sp, #0]
 810a0b6:	68bb      	ldr	r3, [r7, #8]
 810a0b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810a0ba:	68f8      	ldr	r0, [r7, #12]
 810a0bc:	f001 fb3f 	bl	810b73e <xTaskCreate>
 810a0c0:	4603      	mov	r3, r0
 810a0c2:	2b01      	cmp	r3, #1
 810a0c4:	d001      	beq.n	810a0ca <osThreadNew+0x11a>
            hTask = NULL;
 810a0c6:	2300      	movs	r3, #0
 810a0c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810a0ca:	693b      	ldr	r3, [r7, #16]
}
 810a0cc:	4618      	mov	r0, r3
 810a0ce:	3728      	adds	r7, #40	; 0x28
 810a0d0:	46bd      	mov	sp, r7
 810a0d2:	bd80      	pop	{r7, pc}

0810a0d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810a0d4:	b580      	push	{r7, lr}
 810a0d6:	b084      	sub	sp, #16
 810a0d8:	af00      	add	r7, sp, #0
 810a0da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810a0dc:	f3ef 8305 	mrs	r3, IPSR
 810a0e0:	60bb      	str	r3, [r7, #8]
  return(result);
 810a0e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810a0e4:	2b00      	cmp	r3, #0
 810a0e6:	d003      	beq.n	810a0f0 <osDelay+0x1c>
    stat = osErrorISR;
 810a0e8:	f06f 0305 	mvn.w	r3, #5
 810a0ec:	60fb      	str	r3, [r7, #12]
 810a0ee:	e007      	b.n	810a100 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810a0f0:	2300      	movs	r3, #0
 810a0f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810a0f4:	687b      	ldr	r3, [r7, #4]
 810a0f6:	2b00      	cmp	r3, #0
 810a0f8:	d002      	beq.n	810a100 <osDelay+0x2c>
      vTaskDelay(ticks);
 810a0fa:	6878      	ldr	r0, [r7, #4]
 810a0fc:	f001 fc7a 	bl	810b9f4 <vTaskDelay>
    }
  }

  return (stat);
 810a100:	68fb      	ldr	r3, [r7, #12]
}
 810a102:	4618      	mov	r0, r3
 810a104:	3710      	adds	r7, #16
 810a106:	46bd      	mov	sp, r7
 810a108:	bd80      	pop	{r7, pc}

0810a10a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 810a10a:	b580      	push	{r7, lr}
 810a10c:	b08a      	sub	sp, #40	; 0x28
 810a10e:	af02      	add	r7, sp, #8
 810a110:	60f8      	str	r0, [r7, #12]
 810a112:	60b9      	str	r1, [r7, #8]
 810a114:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 810a116:	2300      	movs	r3, #0
 810a118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810a11a:	f3ef 8305 	mrs	r3, IPSR
 810a11e:	613b      	str	r3, [r7, #16]
  return(result);
 810a120:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 810a122:	2b00      	cmp	r3, #0
 810a124:	d15f      	bne.n	810a1e6 <osMessageQueueNew+0xdc>
 810a126:	68fb      	ldr	r3, [r7, #12]
 810a128:	2b00      	cmp	r3, #0
 810a12a:	d05c      	beq.n	810a1e6 <osMessageQueueNew+0xdc>
 810a12c:	68bb      	ldr	r3, [r7, #8]
 810a12e:	2b00      	cmp	r3, #0
 810a130:	d059      	beq.n	810a1e6 <osMessageQueueNew+0xdc>
    mem = -1;
 810a132:	f04f 33ff 	mov.w	r3, #4294967295
 810a136:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810a138:	687b      	ldr	r3, [r7, #4]
 810a13a:	2b00      	cmp	r3, #0
 810a13c:	d029      	beq.n	810a192 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810a13e:	687b      	ldr	r3, [r7, #4]
 810a140:	689b      	ldr	r3, [r3, #8]
 810a142:	2b00      	cmp	r3, #0
 810a144:	d012      	beq.n	810a16c <osMessageQueueNew+0x62>
 810a146:	687b      	ldr	r3, [r7, #4]
 810a148:	68db      	ldr	r3, [r3, #12]
 810a14a:	2b4f      	cmp	r3, #79	; 0x4f
 810a14c:	d90e      	bls.n	810a16c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810a14e:	687b      	ldr	r3, [r7, #4]
 810a150:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810a152:	2b00      	cmp	r3, #0
 810a154:	d00a      	beq.n	810a16c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810a156:	687b      	ldr	r3, [r7, #4]
 810a158:	695a      	ldr	r2, [r3, #20]
 810a15a:	68fb      	ldr	r3, [r7, #12]
 810a15c:	68b9      	ldr	r1, [r7, #8]
 810a15e:	fb01 f303 	mul.w	r3, r1, r3
 810a162:	429a      	cmp	r2, r3
 810a164:	d302      	bcc.n	810a16c <osMessageQueueNew+0x62>
        mem = 1;
 810a166:	2301      	movs	r3, #1
 810a168:	61bb      	str	r3, [r7, #24]
 810a16a:	e014      	b.n	810a196 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810a16c:	687b      	ldr	r3, [r7, #4]
 810a16e:	689b      	ldr	r3, [r3, #8]
 810a170:	2b00      	cmp	r3, #0
 810a172:	d110      	bne.n	810a196 <osMessageQueueNew+0x8c>
 810a174:	687b      	ldr	r3, [r7, #4]
 810a176:	68db      	ldr	r3, [r3, #12]
 810a178:	2b00      	cmp	r3, #0
 810a17a:	d10c      	bne.n	810a196 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810a17c:	687b      	ldr	r3, [r7, #4]
 810a17e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810a180:	2b00      	cmp	r3, #0
 810a182:	d108      	bne.n	810a196 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810a184:	687b      	ldr	r3, [r7, #4]
 810a186:	695b      	ldr	r3, [r3, #20]
 810a188:	2b00      	cmp	r3, #0
 810a18a:	d104      	bne.n	810a196 <osMessageQueueNew+0x8c>
          mem = 0;
 810a18c:	2300      	movs	r3, #0
 810a18e:	61bb      	str	r3, [r7, #24]
 810a190:	e001      	b.n	810a196 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 810a192:	2300      	movs	r3, #0
 810a194:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810a196:	69bb      	ldr	r3, [r7, #24]
 810a198:	2b01      	cmp	r3, #1
 810a19a:	d10b      	bne.n	810a1b4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 810a19c:	687b      	ldr	r3, [r7, #4]
 810a19e:	691a      	ldr	r2, [r3, #16]
 810a1a0:	687b      	ldr	r3, [r7, #4]
 810a1a2:	689b      	ldr	r3, [r3, #8]
 810a1a4:	2100      	movs	r1, #0
 810a1a6:	9100      	str	r1, [sp, #0]
 810a1a8:	68b9      	ldr	r1, [r7, #8]
 810a1aa:	68f8      	ldr	r0, [r7, #12]
 810a1ac:	f000 fdac 	bl	810ad08 <xQueueGenericCreateStatic>
 810a1b0:	61f8      	str	r0, [r7, #28]
 810a1b2:	e008      	b.n	810a1c6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 810a1b4:	69bb      	ldr	r3, [r7, #24]
 810a1b6:	2b00      	cmp	r3, #0
 810a1b8:	d105      	bne.n	810a1c6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 810a1ba:	2200      	movs	r2, #0
 810a1bc:	68b9      	ldr	r1, [r7, #8]
 810a1be:	68f8      	ldr	r0, [r7, #12]
 810a1c0:	f000 fe1a 	bl	810adf8 <xQueueGenericCreate>
 810a1c4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 810a1c6:	69fb      	ldr	r3, [r7, #28]
 810a1c8:	2b00      	cmp	r3, #0
 810a1ca:	d00c      	beq.n	810a1e6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 810a1cc:	687b      	ldr	r3, [r7, #4]
 810a1ce:	2b00      	cmp	r3, #0
 810a1d0:	d003      	beq.n	810a1da <osMessageQueueNew+0xd0>
        name = attr->name;
 810a1d2:	687b      	ldr	r3, [r7, #4]
 810a1d4:	681b      	ldr	r3, [r3, #0]
 810a1d6:	617b      	str	r3, [r7, #20]
 810a1d8:	e001      	b.n	810a1de <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 810a1da:	2300      	movs	r3, #0
 810a1dc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 810a1de:	6979      	ldr	r1, [r7, #20]
 810a1e0:	69f8      	ldr	r0, [r7, #28]
 810a1e2:	f001 f9f1 	bl	810b5c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 810a1e6:	69fb      	ldr	r3, [r7, #28]
}
 810a1e8:	4618      	mov	r0, r3
 810a1ea:	3720      	adds	r7, #32
 810a1ec:	46bd      	mov	sp, r7
 810a1ee:	bd80      	pop	{r7, pc}

0810a1f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810a1f0:	b480      	push	{r7}
 810a1f2:	b085      	sub	sp, #20
 810a1f4:	af00      	add	r7, sp, #0
 810a1f6:	60f8      	str	r0, [r7, #12]
 810a1f8:	60b9      	str	r1, [r7, #8]
 810a1fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810a1fc:	68fb      	ldr	r3, [r7, #12]
 810a1fe:	4a07      	ldr	r2, [pc, #28]	; (810a21c <vApplicationGetIdleTaskMemory+0x2c>)
 810a200:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810a202:	68bb      	ldr	r3, [r7, #8]
 810a204:	4a06      	ldr	r2, [pc, #24]	; (810a220 <vApplicationGetIdleTaskMemory+0x30>)
 810a206:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810a208:	687b      	ldr	r3, [r7, #4]
 810a20a:	2280      	movs	r2, #128	; 0x80
 810a20c:	601a      	str	r2, [r3, #0]
}
 810a20e:	bf00      	nop
 810a210:	3714      	adds	r7, #20
 810a212:	46bd      	mov	sp, r7
 810a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a218:	4770      	bx	lr
 810a21a:	bf00      	nop
 810a21c:	100000f4 	.word	0x100000f4
 810a220:	100001b0 	.word	0x100001b0

0810a224 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810a224:	b480      	push	{r7}
 810a226:	b085      	sub	sp, #20
 810a228:	af00      	add	r7, sp, #0
 810a22a:	60f8      	str	r0, [r7, #12]
 810a22c:	60b9      	str	r1, [r7, #8]
 810a22e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810a230:	68fb      	ldr	r3, [r7, #12]
 810a232:	4a07      	ldr	r2, [pc, #28]	; (810a250 <vApplicationGetTimerTaskMemory+0x2c>)
 810a234:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810a236:	68bb      	ldr	r3, [r7, #8]
 810a238:	4a06      	ldr	r2, [pc, #24]	; (810a254 <vApplicationGetTimerTaskMemory+0x30>)
 810a23a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810a23c:	687b      	ldr	r3, [r7, #4]
 810a23e:	f44f 7280 	mov.w	r2, #256	; 0x100
 810a242:	601a      	str	r2, [r3, #0]
}
 810a244:	bf00      	nop
 810a246:	3714      	adds	r7, #20
 810a248:	46bd      	mov	sp, r7
 810a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a24e:	4770      	bx	lr
 810a250:	100003b0 	.word	0x100003b0
 810a254:	1000046c 	.word	0x1000046c

0810a258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810a258:	b580      	push	{r7, lr}
 810a25a:	b08a      	sub	sp, #40	; 0x28
 810a25c:	af00      	add	r7, sp, #0
 810a25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810a260:	2300      	movs	r3, #0
 810a262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810a264:	f001 fc6a 	bl	810bb3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810a268:	4b5b      	ldr	r3, [pc, #364]	; (810a3d8 <pvPortMalloc+0x180>)
 810a26a:	681b      	ldr	r3, [r3, #0]
 810a26c:	2b00      	cmp	r3, #0
 810a26e:	d101      	bne.n	810a274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810a270:	f000 f920 	bl	810a4b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810a274:	4b59      	ldr	r3, [pc, #356]	; (810a3dc <pvPortMalloc+0x184>)
 810a276:	681a      	ldr	r2, [r3, #0]
 810a278:	687b      	ldr	r3, [r7, #4]
 810a27a:	4013      	ands	r3, r2
 810a27c:	2b00      	cmp	r3, #0
 810a27e:	f040 8093 	bne.w	810a3a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810a282:	687b      	ldr	r3, [r7, #4]
 810a284:	2b00      	cmp	r3, #0
 810a286:	d01d      	beq.n	810a2c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 810a288:	2208      	movs	r2, #8
 810a28a:	687b      	ldr	r3, [r7, #4]
 810a28c:	4413      	add	r3, r2
 810a28e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810a290:	687b      	ldr	r3, [r7, #4]
 810a292:	f003 0307 	and.w	r3, r3, #7
 810a296:	2b00      	cmp	r3, #0
 810a298:	d014      	beq.n	810a2c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810a29a:	687b      	ldr	r3, [r7, #4]
 810a29c:	f023 0307 	bic.w	r3, r3, #7
 810a2a0:	3308      	adds	r3, #8
 810a2a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810a2a4:	687b      	ldr	r3, [r7, #4]
 810a2a6:	f003 0307 	and.w	r3, r3, #7
 810a2aa:	2b00      	cmp	r3, #0
 810a2ac:	d00a      	beq.n	810a2c4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a2b2:	f383 8811 	msr	BASEPRI, r3
 810a2b6:	f3bf 8f6f 	isb	sy
 810a2ba:	f3bf 8f4f 	dsb	sy
 810a2be:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810a2c0:	bf00      	nop
 810a2c2:	e7fe      	b.n	810a2c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810a2c4:	687b      	ldr	r3, [r7, #4]
 810a2c6:	2b00      	cmp	r3, #0
 810a2c8:	d06e      	beq.n	810a3a8 <pvPortMalloc+0x150>
 810a2ca:	4b45      	ldr	r3, [pc, #276]	; (810a3e0 <pvPortMalloc+0x188>)
 810a2cc:	681b      	ldr	r3, [r3, #0]
 810a2ce:	687a      	ldr	r2, [r7, #4]
 810a2d0:	429a      	cmp	r2, r3
 810a2d2:	d869      	bhi.n	810a3a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810a2d4:	4b43      	ldr	r3, [pc, #268]	; (810a3e4 <pvPortMalloc+0x18c>)
 810a2d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810a2d8:	4b42      	ldr	r3, [pc, #264]	; (810a3e4 <pvPortMalloc+0x18c>)
 810a2da:	681b      	ldr	r3, [r3, #0]
 810a2dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810a2de:	e004      	b.n	810a2ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 810a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a2e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a2e6:	681b      	ldr	r3, [r3, #0]
 810a2e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a2ec:	685b      	ldr	r3, [r3, #4]
 810a2ee:	687a      	ldr	r2, [r7, #4]
 810a2f0:	429a      	cmp	r2, r3
 810a2f2:	d903      	bls.n	810a2fc <pvPortMalloc+0xa4>
 810a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a2f6:	681b      	ldr	r3, [r3, #0]
 810a2f8:	2b00      	cmp	r3, #0
 810a2fa:	d1f1      	bne.n	810a2e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810a2fc:	4b36      	ldr	r3, [pc, #216]	; (810a3d8 <pvPortMalloc+0x180>)
 810a2fe:	681b      	ldr	r3, [r3, #0]
 810a300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810a302:	429a      	cmp	r2, r3
 810a304:	d050      	beq.n	810a3a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810a306:	6a3b      	ldr	r3, [r7, #32]
 810a308:	681b      	ldr	r3, [r3, #0]
 810a30a:	2208      	movs	r2, #8
 810a30c:	4413      	add	r3, r2
 810a30e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a312:	681a      	ldr	r2, [r3, #0]
 810a314:	6a3b      	ldr	r3, [r7, #32]
 810a316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a31a:	685a      	ldr	r2, [r3, #4]
 810a31c:	687b      	ldr	r3, [r7, #4]
 810a31e:	1ad2      	subs	r2, r2, r3
 810a320:	2308      	movs	r3, #8
 810a322:	005b      	lsls	r3, r3, #1
 810a324:	429a      	cmp	r2, r3
 810a326:	d91f      	bls.n	810a368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810a328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810a32a:	687b      	ldr	r3, [r7, #4]
 810a32c:	4413      	add	r3, r2
 810a32e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810a330:	69bb      	ldr	r3, [r7, #24]
 810a332:	f003 0307 	and.w	r3, r3, #7
 810a336:	2b00      	cmp	r3, #0
 810a338:	d00a      	beq.n	810a350 <pvPortMalloc+0xf8>
	__asm volatile
 810a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a33e:	f383 8811 	msr	BASEPRI, r3
 810a342:	f3bf 8f6f 	isb	sy
 810a346:	f3bf 8f4f 	dsb	sy
 810a34a:	613b      	str	r3, [r7, #16]
}
 810a34c:	bf00      	nop
 810a34e:	e7fe      	b.n	810a34e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a352:	685a      	ldr	r2, [r3, #4]
 810a354:	687b      	ldr	r3, [r7, #4]
 810a356:	1ad2      	subs	r2, r2, r3
 810a358:	69bb      	ldr	r3, [r7, #24]
 810a35a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a35e:	687a      	ldr	r2, [r7, #4]
 810a360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810a362:	69b8      	ldr	r0, [r7, #24]
 810a364:	f000 f908 	bl	810a578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810a368:	4b1d      	ldr	r3, [pc, #116]	; (810a3e0 <pvPortMalloc+0x188>)
 810a36a:	681a      	ldr	r2, [r3, #0]
 810a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a36e:	685b      	ldr	r3, [r3, #4]
 810a370:	1ad3      	subs	r3, r2, r3
 810a372:	4a1b      	ldr	r2, [pc, #108]	; (810a3e0 <pvPortMalloc+0x188>)
 810a374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810a376:	4b1a      	ldr	r3, [pc, #104]	; (810a3e0 <pvPortMalloc+0x188>)
 810a378:	681a      	ldr	r2, [r3, #0]
 810a37a:	4b1b      	ldr	r3, [pc, #108]	; (810a3e8 <pvPortMalloc+0x190>)
 810a37c:	681b      	ldr	r3, [r3, #0]
 810a37e:	429a      	cmp	r2, r3
 810a380:	d203      	bcs.n	810a38a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810a382:	4b17      	ldr	r3, [pc, #92]	; (810a3e0 <pvPortMalloc+0x188>)
 810a384:	681b      	ldr	r3, [r3, #0]
 810a386:	4a18      	ldr	r2, [pc, #96]	; (810a3e8 <pvPortMalloc+0x190>)
 810a388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a38c:	685a      	ldr	r2, [r3, #4]
 810a38e:	4b13      	ldr	r3, [pc, #76]	; (810a3dc <pvPortMalloc+0x184>)
 810a390:	681b      	ldr	r3, [r3, #0]
 810a392:	431a      	orrs	r2, r3
 810a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a39a:	2200      	movs	r2, #0
 810a39c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810a39e:	4b13      	ldr	r3, [pc, #76]	; (810a3ec <pvPortMalloc+0x194>)
 810a3a0:	681b      	ldr	r3, [r3, #0]
 810a3a2:	3301      	adds	r3, #1
 810a3a4:	4a11      	ldr	r2, [pc, #68]	; (810a3ec <pvPortMalloc+0x194>)
 810a3a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810a3a8:	f001 fbd6 	bl	810bb58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810a3ac:	69fb      	ldr	r3, [r7, #28]
 810a3ae:	f003 0307 	and.w	r3, r3, #7
 810a3b2:	2b00      	cmp	r3, #0
 810a3b4:	d00a      	beq.n	810a3cc <pvPortMalloc+0x174>
	__asm volatile
 810a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a3ba:	f383 8811 	msr	BASEPRI, r3
 810a3be:	f3bf 8f6f 	isb	sy
 810a3c2:	f3bf 8f4f 	dsb	sy
 810a3c6:	60fb      	str	r3, [r7, #12]
}
 810a3c8:	bf00      	nop
 810a3ca:	e7fe      	b.n	810a3ca <pvPortMalloc+0x172>
	return pvReturn;
 810a3cc:	69fb      	ldr	r3, [r7, #28]
}
 810a3ce:	4618      	mov	r0, r3
 810a3d0:	3728      	adds	r7, #40	; 0x28
 810a3d2:	46bd      	mov	sp, r7
 810a3d4:	bd80      	pop	{r7, pc}
 810a3d6:	bf00      	nop
 810a3d8:	10004474 	.word	0x10004474
 810a3dc:	10004488 	.word	0x10004488
 810a3e0:	10004478 	.word	0x10004478
 810a3e4:	1000446c 	.word	0x1000446c
 810a3e8:	1000447c 	.word	0x1000447c
 810a3ec:	10004480 	.word	0x10004480

0810a3f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810a3f0:	b580      	push	{r7, lr}
 810a3f2:	b086      	sub	sp, #24
 810a3f4:	af00      	add	r7, sp, #0
 810a3f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810a3f8:	687b      	ldr	r3, [r7, #4]
 810a3fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810a3fc:	687b      	ldr	r3, [r7, #4]
 810a3fe:	2b00      	cmp	r3, #0
 810a400:	d04d      	beq.n	810a49e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810a402:	2308      	movs	r3, #8
 810a404:	425b      	negs	r3, r3
 810a406:	697a      	ldr	r2, [r7, #20]
 810a408:	4413      	add	r3, r2
 810a40a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810a40c:	697b      	ldr	r3, [r7, #20]
 810a40e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810a410:	693b      	ldr	r3, [r7, #16]
 810a412:	685a      	ldr	r2, [r3, #4]
 810a414:	4b24      	ldr	r3, [pc, #144]	; (810a4a8 <vPortFree+0xb8>)
 810a416:	681b      	ldr	r3, [r3, #0]
 810a418:	4013      	ands	r3, r2
 810a41a:	2b00      	cmp	r3, #0
 810a41c:	d10a      	bne.n	810a434 <vPortFree+0x44>
	__asm volatile
 810a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a422:	f383 8811 	msr	BASEPRI, r3
 810a426:	f3bf 8f6f 	isb	sy
 810a42a:	f3bf 8f4f 	dsb	sy
 810a42e:	60fb      	str	r3, [r7, #12]
}
 810a430:	bf00      	nop
 810a432:	e7fe      	b.n	810a432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810a434:	693b      	ldr	r3, [r7, #16]
 810a436:	681b      	ldr	r3, [r3, #0]
 810a438:	2b00      	cmp	r3, #0
 810a43a:	d00a      	beq.n	810a452 <vPortFree+0x62>
	__asm volatile
 810a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a440:	f383 8811 	msr	BASEPRI, r3
 810a444:	f3bf 8f6f 	isb	sy
 810a448:	f3bf 8f4f 	dsb	sy
 810a44c:	60bb      	str	r3, [r7, #8]
}
 810a44e:	bf00      	nop
 810a450:	e7fe      	b.n	810a450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810a452:	693b      	ldr	r3, [r7, #16]
 810a454:	685a      	ldr	r2, [r3, #4]
 810a456:	4b14      	ldr	r3, [pc, #80]	; (810a4a8 <vPortFree+0xb8>)
 810a458:	681b      	ldr	r3, [r3, #0]
 810a45a:	4013      	ands	r3, r2
 810a45c:	2b00      	cmp	r3, #0
 810a45e:	d01e      	beq.n	810a49e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810a460:	693b      	ldr	r3, [r7, #16]
 810a462:	681b      	ldr	r3, [r3, #0]
 810a464:	2b00      	cmp	r3, #0
 810a466:	d11a      	bne.n	810a49e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810a468:	693b      	ldr	r3, [r7, #16]
 810a46a:	685a      	ldr	r2, [r3, #4]
 810a46c:	4b0e      	ldr	r3, [pc, #56]	; (810a4a8 <vPortFree+0xb8>)
 810a46e:	681b      	ldr	r3, [r3, #0]
 810a470:	43db      	mvns	r3, r3
 810a472:	401a      	ands	r2, r3
 810a474:	693b      	ldr	r3, [r7, #16]
 810a476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810a478:	f001 fb60 	bl	810bb3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810a47c:	693b      	ldr	r3, [r7, #16]
 810a47e:	685a      	ldr	r2, [r3, #4]
 810a480:	4b0a      	ldr	r3, [pc, #40]	; (810a4ac <vPortFree+0xbc>)
 810a482:	681b      	ldr	r3, [r3, #0]
 810a484:	4413      	add	r3, r2
 810a486:	4a09      	ldr	r2, [pc, #36]	; (810a4ac <vPortFree+0xbc>)
 810a488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810a48a:	6938      	ldr	r0, [r7, #16]
 810a48c:	f000 f874 	bl	810a578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810a490:	4b07      	ldr	r3, [pc, #28]	; (810a4b0 <vPortFree+0xc0>)
 810a492:	681b      	ldr	r3, [r3, #0]
 810a494:	3301      	adds	r3, #1
 810a496:	4a06      	ldr	r2, [pc, #24]	; (810a4b0 <vPortFree+0xc0>)
 810a498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810a49a:	f001 fb5d 	bl	810bb58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810a49e:	bf00      	nop
 810a4a0:	3718      	adds	r7, #24
 810a4a2:	46bd      	mov	sp, r7
 810a4a4:	bd80      	pop	{r7, pc}
 810a4a6:	bf00      	nop
 810a4a8:	10004488 	.word	0x10004488
 810a4ac:	10004478 	.word	0x10004478
 810a4b0:	10004484 	.word	0x10004484

0810a4b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810a4b4:	b480      	push	{r7}
 810a4b6:	b085      	sub	sp, #20
 810a4b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810a4ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810a4be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810a4c0:	4b27      	ldr	r3, [pc, #156]	; (810a560 <prvHeapInit+0xac>)
 810a4c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810a4c4:	68fb      	ldr	r3, [r7, #12]
 810a4c6:	f003 0307 	and.w	r3, r3, #7
 810a4ca:	2b00      	cmp	r3, #0
 810a4cc:	d00c      	beq.n	810a4e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810a4ce:	68fb      	ldr	r3, [r7, #12]
 810a4d0:	3307      	adds	r3, #7
 810a4d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810a4d4:	68fb      	ldr	r3, [r7, #12]
 810a4d6:	f023 0307 	bic.w	r3, r3, #7
 810a4da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810a4dc:	68ba      	ldr	r2, [r7, #8]
 810a4de:	68fb      	ldr	r3, [r7, #12]
 810a4e0:	1ad3      	subs	r3, r2, r3
 810a4e2:	4a1f      	ldr	r2, [pc, #124]	; (810a560 <prvHeapInit+0xac>)
 810a4e4:	4413      	add	r3, r2
 810a4e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810a4e8:	68fb      	ldr	r3, [r7, #12]
 810a4ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810a4ec:	4a1d      	ldr	r2, [pc, #116]	; (810a564 <prvHeapInit+0xb0>)
 810a4ee:	687b      	ldr	r3, [r7, #4]
 810a4f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810a4f2:	4b1c      	ldr	r3, [pc, #112]	; (810a564 <prvHeapInit+0xb0>)
 810a4f4:	2200      	movs	r2, #0
 810a4f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810a4f8:	687b      	ldr	r3, [r7, #4]
 810a4fa:	68ba      	ldr	r2, [r7, #8]
 810a4fc:	4413      	add	r3, r2
 810a4fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810a500:	2208      	movs	r2, #8
 810a502:	68fb      	ldr	r3, [r7, #12]
 810a504:	1a9b      	subs	r3, r3, r2
 810a506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810a508:	68fb      	ldr	r3, [r7, #12]
 810a50a:	f023 0307 	bic.w	r3, r3, #7
 810a50e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810a510:	68fb      	ldr	r3, [r7, #12]
 810a512:	4a15      	ldr	r2, [pc, #84]	; (810a568 <prvHeapInit+0xb4>)
 810a514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810a516:	4b14      	ldr	r3, [pc, #80]	; (810a568 <prvHeapInit+0xb4>)
 810a518:	681b      	ldr	r3, [r3, #0]
 810a51a:	2200      	movs	r2, #0
 810a51c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810a51e:	4b12      	ldr	r3, [pc, #72]	; (810a568 <prvHeapInit+0xb4>)
 810a520:	681b      	ldr	r3, [r3, #0]
 810a522:	2200      	movs	r2, #0
 810a524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810a526:	687b      	ldr	r3, [r7, #4]
 810a528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810a52a:	683b      	ldr	r3, [r7, #0]
 810a52c:	68fa      	ldr	r2, [r7, #12]
 810a52e:	1ad2      	subs	r2, r2, r3
 810a530:	683b      	ldr	r3, [r7, #0]
 810a532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810a534:	4b0c      	ldr	r3, [pc, #48]	; (810a568 <prvHeapInit+0xb4>)
 810a536:	681a      	ldr	r2, [r3, #0]
 810a538:	683b      	ldr	r3, [r7, #0]
 810a53a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810a53c:	683b      	ldr	r3, [r7, #0]
 810a53e:	685b      	ldr	r3, [r3, #4]
 810a540:	4a0a      	ldr	r2, [pc, #40]	; (810a56c <prvHeapInit+0xb8>)
 810a542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810a544:	683b      	ldr	r3, [r7, #0]
 810a546:	685b      	ldr	r3, [r3, #4]
 810a548:	4a09      	ldr	r2, [pc, #36]	; (810a570 <prvHeapInit+0xbc>)
 810a54a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810a54c:	4b09      	ldr	r3, [pc, #36]	; (810a574 <prvHeapInit+0xc0>)
 810a54e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810a552:	601a      	str	r2, [r3, #0]
}
 810a554:	bf00      	nop
 810a556:	3714      	adds	r7, #20
 810a558:	46bd      	mov	sp, r7
 810a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a55e:	4770      	bx	lr
 810a560:	1000086c 	.word	0x1000086c
 810a564:	1000446c 	.word	0x1000446c
 810a568:	10004474 	.word	0x10004474
 810a56c:	1000447c 	.word	0x1000447c
 810a570:	10004478 	.word	0x10004478
 810a574:	10004488 	.word	0x10004488

0810a578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810a578:	b480      	push	{r7}
 810a57a:	b085      	sub	sp, #20
 810a57c:	af00      	add	r7, sp, #0
 810a57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810a580:	4b28      	ldr	r3, [pc, #160]	; (810a624 <prvInsertBlockIntoFreeList+0xac>)
 810a582:	60fb      	str	r3, [r7, #12]
 810a584:	e002      	b.n	810a58c <prvInsertBlockIntoFreeList+0x14>
 810a586:	68fb      	ldr	r3, [r7, #12]
 810a588:	681b      	ldr	r3, [r3, #0]
 810a58a:	60fb      	str	r3, [r7, #12]
 810a58c:	68fb      	ldr	r3, [r7, #12]
 810a58e:	681b      	ldr	r3, [r3, #0]
 810a590:	687a      	ldr	r2, [r7, #4]
 810a592:	429a      	cmp	r2, r3
 810a594:	d8f7      	bhi.n	810a586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810a596:	68fb      	ldr	r3, [r7, #12]
 810a598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810a59a:	68fb      	ldr	r3, [r7, #12]
 810a59c:	685b      	ldr	r3, [r3, #4]
 810a59e:	68ba      	ldr	r2, [r7, #8]
 810a5a0:	4413      	add	r3, r2
 810a5a2:	687a      	ldr	r2, [r7, #4]
 810a5a4:	429a      	cmp	r2, r3
 810a5a6:	d108      	bne.n	810a5ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810a5a8:	68fb      	ldr	r3, [r7, #12]
 810a5aa:	685a      	ldr	r2, [r3, #4]
 810a5ac:	687b      	ldr	r3, [r7, #4]
 810a5ae:	685b      	ldr	r3, [r3, #4]
 810a5b0:	441a      	add	r2, r3
 810a5b2:	68fb      	ldr	r3, [r7, #12]
 810a5b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810a5b6:	68fb      	ldr	r3, [r7, #12]
 810a5b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810a5ba:	687b      	ldr	r3, [r7, #4]
 810a5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810a5be:	687b      	ldr	r3, [r7, #4]
 810a5c0:	685b      	ldr	r3, [r3, #4]
 810a5c2:	68ba      	ldr	r2, [r7, #8]
 810a5c4:	441a      	add	r2, r3
 810a5c6:	68fb      	ldr	r3, [r7, #12]
 810a5c8:	681b      	ldr	r3, [r3, #0]
 810a5ca:	429a      	cmp	r2, r3
 810a5cc:	d118      	bne.n	810a600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810a5ce:	68fb      	ldr	r3, [r7, #12]
 810a5d0:	681a      	ldr	r2, [r3, #0]
 810a5d2:	4b15      	ldr	r3, [pc, #84]	; (810a628 <prvInsertBlockIntoFreeList+0xb0>)
 810a5d4:	681b      	ldr	r3, [r3, #0]
 810a5d6:	429a      	cmp	r2, r3
 810a5d8:	d00d      	beq.n	810a5f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810a5da:	687b      	ldr	r3, [r7, #4]
 810a5dc:	685a      	ldr	r2, [r3, #4]
 810a5de:	68fb      	ldr	r3, [r7, #12]
 810a5e0:	681b      	ldr	r3, [r3, #0]
 810a5e2:	685b      	ldr	r3, [r3, #4]
 810a5e4:	441a      	add	r2, r3
 810a5e6:	687b      	ldr	r3, [r7, #4]
 810a5e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810a5ea:	68fb      	ldr	r3, [r7, #12]
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	681a      	ldr	r2, [r3, #0]
 810a5f0:	687b      	ldr	r3, [r7, #4]
 810a5f2:	601a      	str	r2, [r3, #0]
 810a5f4:	e008      	b.n	810a608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810a5f6:	4b0c      	ldr	r3, [pc, #48]	; (810a628 <prvInsertBlockIntoFreeList+0xb0>)
 810a5f8:	681a      	ldr	r2, [r3, #0]
 810a5fa:	687b      	ldr	r3, [r7, #4]
 810a5fc:	601a      	str	r2, [r3, #0]
 810a5fe:	e003      	b.n	810a608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810a600:	68fb      	ldr	r3, [r7, #12]
 810a602:	681a      	ldr	r2, [r3, #0]
 810a604:	687b      	ldr	r3, [r7, #4]
 810a606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810a608:	68fa      	ldr	r2, [r7, #12]
 810a60a:	687b      	ldr	r3, [r7, #4]
 810a60c:	429a      	cmp	r2, r3
 810a60e:	d002      	beq.n	810a616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810a610:	68fb      	ldr	r3, [r7, #12]
 810a612:	687a      	ldr	r2, [r7, #4]
 810a614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a616:	bf00      	nop
 810a618:	3714      	adds	r7, #20
 810a61a:	46bd      	mov	sp, r7
 810a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a620:	4770      	bx	lr
 810a622:	bf00      	nop
 810a624:	1000446c 	.word	0x1000446c
 810a628:	10004474 	.word	0x10004474

0810a62c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810a62c:	b480      	push	{r7}
 810a62e:	b083      	sub	sp, #12
 810a630:	af00      	add	r7, sp, #0
 810a632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810a634:	687b      	ldr	r3, [r7, #4]
 810a636:	f103 0208 	add.w	r2, r3, #8
 810a63a:	687b      	ldr	r3, [r7, #4]
 810a63c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810a63e:	687b      	ldr	r3, [r7, #4]
 810a640:	f04f 32ff 	mov.w	r2, #4294967295
 810a644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810a646:	687b      	ldr	r3, [r7, #4]
 810a648:	f103 0208 	add.w	r2, r3, #8
 810a64c:	687b      	ldr	r3, [r7, #4]
 810a64e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810a650:	687b      	ldr	r3, [r7, #4]
 810a652:	f103 0208 	add.w	r2, r3, #8
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810a65a:	687b      	ldr	r3, [r7, #4]
 810a65c:	2200      	movs	r2, #0
 810a65e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810a660:	bf00      	nop
 810a662:	370c      	adds	r7, #12
 810a664:	46bd      	mov	sp, r7
 810a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a66a:	4770      	bx	lr

0810a66c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810a66c:	b480      	push	{r7}
 810a66e:	b083      	sub	sp, #12
 810a670:	af00      	add	r7, sp, #0
 810a672:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810a674:	687b      	ldr	r3, [r7, #4]
 810a676:	2200      	movs	r2, #0
 810a678:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810a67a:	bf00      	nop
 810a67c:	370c      	adds	r7, #12
 810a67e:	46bd      	mov	sp, r7
 810a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a684:	4770      	bx	lr

0810a686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810a686:	b480      	push	{r7}
 810a688:	b085      	sub	sp, #20
 810a68a:	af00      	add	r7, sp, #0
 810a68c:	6078      	str	r0, [r7, #4]
 810a68e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810a690:	687b      	ldr	r3, [r7, #4]
 810a692:	685b      	ldr	r3, [r3, #4]
 810a694:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810a696:	683b      	ldr	r3, [r7, #0]
 810a698:	68fa      	ldr	r2, [r7, #12]
 810a69a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810a69c:	68fb      	ldr	r3, [r7, #12]
 810a69e:	689a      	ldr	r2, [r3, #8]
 810a6a0:	683b      	ldr	r3, [r7, #0]
 810a6a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810a6a4:	68fb      	ldr	r3, [r7, #12]
 810a6a6:	689b      	ldr	r3, [r3, #8]
 810a6a8:	683a      	ldr	r2, [r7, #0]
 810a6aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810a6ac:	68fb      	ldr	r3, [r7, #12]
 810a6ae:	683a      	ldr	r2, [r7, #0]
 810a6b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810a6b2:	683b      	ldr	r3, [r7, #0]
 810a6b4:	687a      	ldr	r2, [r7, #4]
 810a6b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810a6b8:	687b      	ldr	r3, [r7, #4]
 810a6ba:	681b      	ldr	r3, [r3, #0]
 810a6bc:	1c5a      	adds	r2, r3, #1
 810a6be:	687b      	ldr	r3, [r7, #4]
 810a6c0:	601a      	str	r2, [r3, #0]
}
 810a6c2:	bf00      	nop
 810a6c4:	3714      	adds	r7, #20
 810a6c6:	46bd      	mov	sp, r7
 810a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6cc:	4770      	bx	lr

0810a6ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810a6ce:	b480      	push	{r7}
 810a6d0:	b085      	sub	sp, #20
 810a6d2:	af00      	add	r7, sp, #0
 810a6d4:	6078      	str	r0, [r7, #4]
 810a6d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810a6d8:	683b      	ldr	r3, [r7, #0]
 810a6da:	681b      	ldr	r3, [r3, #0]
 810a6dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810a6de:	68bb      	ldr	r3, [r7, #8]
 810a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a6e4:	d103      	bne.n	810a6ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810a6e6:	687b      	ldr	r3, [r7, #4]
 810a6e8:	691b      	ldr	r3, [r3, #16]
 810a6ea:	60fb      	str	r3, [r7, #12]
 810a6ec:	e00c      	b.n	810a708 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810a6ee:	687b      	ldr	r3, [r7, #4]
 810a6f0:	3308      	adds	r3, #8
 810a6f2:	60fb      	str	r3, [r7, #12]
 810a6f4:	e002      	b.n	810a6fc <vListInsert+0x2e>
 810a6f6:	68fb      	ldr	r3, [r7, #12]
 810a6f8:	685b      	ldr	r3, [r3, #4]
 810a6fa:	60fb      	str	r3, [r7, #12]
 810a6fc:	68fb      	ldr	r3, [r7, #12]
 810a6fe:	685b      	ldr	r3, [r3, #4]
 810a700:	681b      	ldr	r3, [r3, #0]
 810a702:	68ba      	ldr	r2, [r7, #8]
 810a704:	429a      	cmp	r2, r3
 810a706:	d2f6      	bcs.n	810a6f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810a708:	68fb      	ldr	r3, [r7, #12]
 810a70a:	685a      	ldr	r2, [r3, #4]
 810a70c:	683b      	ldr	r3, [r7, #0]
 810a70e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810a710:	683b      	ldr	r3, [r7, #0]
 810a712:	685b      	ldr	r3, [r3, #4]
 810a714:	683a      	ldr	r2, [r7, #0]
 810a716:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810a718:	683b      	ldr	r3, [r7, #0]
 810a71a:	68fa      	ldr	r2, [r7, #12]
 810a71c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810a71e:	68fb      	ldr	r3, [r7, #12]
 810a720:	683a      	ldr	r2, [r7, #0]
 810a722:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810a724:	683b      	ldr	r3, [r7, #0]
 810a726:	687a      	ldr	r2, [r7, #4]
 810a728:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810a72a:	687b      	ldr	r3, [r7, #4]
 810a72c:	681b      	ldr	r3, [r3, #0]
 810a72e:	1c5a      	adds	r2, r3, #1
 810a730:	687b      	ldr	r3, [r7, #4]
 810a732:	601a      	str	r2, [r3, #0]
}
 810a734:	bf00      	nop
 810a736:	3714      	adds	r7, #20
 810a738:	46bd      	mov	sp, r7
 810a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a73e:	4770      	bx	lr

0810a740 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810a740:	b480      	push	{r7}
 810a742:	b085      	sub	sp, #20
 810a744:	af00      	add	r7, sp, #0
 810a746:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810a748:	687b      	ldr	r3, [r7, #4]
 810a74a:	691b      	ldr	r3, [r3, #16]
 810a74c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810a74e:	687b      	ldr	r3, [r7, #4]
 810a750:	685b      	ldr	r3, [r3, #4]
 810a752:	687a      	ldr	r2, [r7, #4]
 810a754:	6892      	ldr	r2, [r2, #8]
 810a756:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810a758:	687b      	ldr	r3, [r7, #4]
 810a75a:	689b      	ldr	r3, [r3, #8]
 810a75c:	687a      	ldr	r2, [r7, #4]
 810a75e:	6852      	ldr	r2, [r2, #4]
 810a760:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810a762:	68fb      	ldr	r3, [r7, #12]
 810a764:	685b      	ldr	r3, [r3, #4]
 810a766:	687a      	ldr	r2, [r7, #4]
 810a768:	429a      	cmp	r2, r3
 810a76a:	d103      	bne.n	810a774 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810a76c:	687b      	ldr	r3, [r7, #4]
 810a76e:	689a      	ldr	r2, [r3, #8]
 810a770:	68fb      	ldr	r3, [r7, #12]
 810a772:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810a774:	687b      	ldr	r3, [r7, #4]
 810a776:	2200      	movs	r2, #0
 810a778:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810a77a:	68fb      	ldr	r3, [r7, #12]
 810a77c:	681b      	ldr	r3, [r3, #0]
 810a77e:	1e5a      	subs	r2, r3, #1
 810a780:	68fb      	ldr	r3, [r7, #12]
 810a782:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810a784:	68fb      	ldr	r3, [r7, #12]
 810a786:	681b      	ldr	r3, [r3, #0]
}
 810a788:	4618      	mov	r0, r3
 810a78a:	3714      	adds	r7, #20
 810a78c:	46bd      	mov	sp, r7
 810a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a792:	4770      	bx	lr

0810a794 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810a794:	b480      	push	{r7}
 810a796:	b085      	sub	sp, #20
 810a798:	af00      	add	r7, sp, #0
 810a79a:	60f8      	str	r0, [r7, #12]
 810a79c:	60b9      	str	r1, [r7, #8]
 810a79e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810a7a0:	68fb      	ldr	r3, [r7, #12]
 810a7a2:	3b04      	subs	r3, #4
 810a7a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810a7a6:	68fb      	ldr	r3, [r7, #12]
 810a7a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810a7ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810a7ae:	68fb      	ldr	r3, [r7, #12]
 810a7b0:	3b04      	subs	r3, #4
 810a7b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810a7b4:	68bb      	ldr	r3, [r7, #8]
 810a7b6:	f023 0201 	bic.w	r2, r3, #1
 810a7ba:	68fb      	ldr	r3, [r7, #12]
 810a7bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810a7be:	68fb      	ldr	r3, [r7, #12]
 810a7c0:	3b04      	subs	r3, #4
 810a7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810a7c4:	4a0c      	ldr	r2, [pc, #48]	; (810a7f8 <pxPortInitialiseStack+0x64>)
 810a7c6:	68fb      	ldr	r3, [r7, #12]
 810a7c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810a7ca:	68fb      	ldr	r3, [r7, #12]
 810a7cc:	3b14      	subs	r3, #20
 810a7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810a7d0:	687a      	ldr	r2, [r7, #4]
 810a7d2:	68fb      	ldr	r3, [r7, #12]
 810a7d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810a7d6:	68fb      	ldr	r3, [r7, #12]
 810a7d8:	3b04      	subs	r3, #4
 810a7da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810a7dc:	68fb      	ldr	r3, [r7, #12]
 810a7de:	f06f 0202 	mvn.w	r2, #2
 810a7e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810a7e4:	68fb      	ldr	r3, [r7, #12]
 810a7e6:	3b20      	subs	r3, #32
 810a7e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810a7ea:	68fb      	ldr	r3, [r7, #12]
}
 810a7ec:	4618      	mov	r0, r3
 810a7ee:	3714      	adds	r7, #20
 810a7f0:	46bd      	mov	sp, r7
 810a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7f6:	4770      	bx	lr
 810a7f8:	0810a7fd 	.word	0x0810a7fd

0810a7fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810a7fc:	b480      	push	{r7}
 810a7fe:	b085      	sub	sp, #20
 810a800:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810a802:	2300      	movs	r3, #0
 810a804:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810a806:	4b12      	ldr	r3, [pc, #72]	; (810a850 <prvTaskExitError+0x54>)
 810a808:	681b      	ldr	r3, [r3, #0]
 810a80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a80e:	d00a      	beq.n	810a826 <prvTaskExitError+0x2a>
	__asm volatile
 810a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a814:	f383 8811 	msr	BASEPRI, r3
 810a818:	f3bf 8f6f 	isb	sy
 810a81c:	f3bf 8f4f 	dsb	sy
 810a820:	60fb      	str	r3, [r7, #12]
}
 810a822:	bf00      	nop
 810a824:	e7fe      	b.n	810a824 <prvTaskExitError+0x28>
	__asm volatile
 810a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a82a:	f383 8811 	msr	BASEPRI, r3
 810a82e:	f3bf 8f6f 	isb	sy
 810a832:	f3bf 8f4f 	dsb	sy
 810a836:	60bb      	str	r3, [r7, #8]
}
 810a838:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810a83a:	bf00      	nop
 810a83c:	687b      	ldr	r3, [r7, #4]
 810a83e:	2b00      	cmp	r3, #0
 810a840:	d0fc      	beq.n	810a83c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810a842:	bf00      	nop
 810a844:	bf00      	nop
 810a846:	3714      	adds	r7, #20
 810a848:	46bd      	mov	sp, r7
 810a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a84e:	4770      	bx	lr
 810a850:	10000058 	.word	0x10000058
	...

0810a860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810a860:	4b07      	ldr	r3, [pc, #28]	; (810a880 <pxCurrentTCBConst2>)
 810a862:	6819      	ldr	r1, [r3, #0]
 810a864:	6808      	ldr	r0, [r1, #0]
 810a866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a86a:	f380 8809 	msr	PSP, r0
 810a86e:	f3bf 8f6f 	isb	sy
 810a872:	f04f 0000 	mov.w	r0, #0
 810a876:	f380 8811 	msr	BASEPRI, r0
 810a87a:	4770      	bx	lr
 810a87c:	f3af 8000 	nop.w

0810a880 <pxCurrentTCBConst2>:
 810a880:	10004494 	.word	0x10004494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810a884:	bf00      	nop
 810a886:	bf00      	nop

0810a888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810a888:	4808      	ldr	r0, [pc, #32]	; (810a8ac <prvPortStartFirstTask+0x24>)
 810a88a:	6800      	ldr	r0, [r0, #0]
 810a88c:	6800      	ldr	r0, [r0, #0]
 810a88e:	f380 8808 	msr	MSP, r0
 810a892:	f04f 0000 	mov.w	r0, #0
 810a896:	f380 8814 	msr	CONTROL, r0
 810a89a:	b662      	cpsie	i
 810a89c:	b661      	cpsie	f
 810a89e:	f3bf 8f4f 	dsb	sy
 810a8a2:	f3bf 8f6f 	isb	sy
 810a8a6:	df00      	svc	0
 810a8a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810a8aa:	bf00      	nop
 810a8ac:	e000ed08 	.word	0xe000ed08

0810a8b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810a8b0:	b580      	push	{r7, lr}
 810a8b2:	b086      	sub	sp, #24
 810a8b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810a8b6:	4b46      	ldr	r3, [pc, #280]	; (810a9d0 <xPortStartScheduler+0x120>)
 810a8b8:	681b      	ldr	r3, [r3, #0]
 810a8ba:	4a46      	ldr	r2, [pc, #280]	; (810a9d4 <xPortStartScheduler+0x124>)
 810a8bc:	4293      	cmp	r3, r2
 810a8be:	d10a      	bne.n	810a8d6 <xPortStartScheduler+0x26>
	__asm volatile
 810a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a8c4:	f383 8811 	msr	BASEPRI, r3
 810a8c8:	f3bf 8f6f 	isb	sy
 810a8cc:	f3bf 8f4f 	dsb	sy
 810a8d0:	613b      	str	r3, [r7, #16]
}
 810a8d2:	bf00      	nop
 810a8d4:	e7fe      	b.n	810a8d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810a8d6:	4b3e      	ldr	r3, [pc, #248]	; (810a9d0 <xPortStartScheduler+0x120>)
 810a8d8:	681b      	ldr	r3, [r3, #0]
 810a8da:	4a3f      	ldr	r2, [pc, #252]	; (810a9d8 <xPortStartScheduler+0x128>)
 810a8dc:	4293      	cmp	r3, r2
 810a8de:	d10a      	bne.n	810a8f6 <xPortStartScheduler+0x46>
	__asm volatile
 810a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a8e4:	f383 8811 	msr	BASEPRI, r3
 810a8e8:	f3bf 8f6f 	isb	sy
 810a8ec:	f3bf 8f4f 	dsb	sy
 810a8f0:	60fb      	str	r3, [r7, #12]
}
 810a8f2:	bf00      	nop
 810a8f4:	e7fe      	b.n	810a8f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810a8f6:	4b39      	ldr	r3, [pc, #228]	; (810a9dc <xPortStartScheduler+0x12c>)
 810a8f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810a8fa:	697b      	ldr	r3, [r7, #20]
 810a8fc:	781b      	ldrb	r3, [r3, #0]
 810a8fe:	b2db      	uxtb	r3, r3
 810a900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810a902:	697b      	ldr	r3, [r7, #20]
 810a904:	22ff      	movs	r2, #255	; 0xff
 810a906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810a908:	697b      	ldr	r3, [r7, #20]
 810a90a:	781b      	ldrb	r3, [r3, #0]
 810a90c:	b2db      	uxtb	r3, r3
 810a90e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810a910:	78fb      	ldrb	r3, [r7, #3]
 810a912:	b2db      	uxtb	r3, r3
 810a914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 810a918:	b2da      	uxtb	r2, r3
 810a91a:	4b31      	ldr	r3, [pc, #196]	; (810a9e0 <xPortStartScheduler+0x130>)
 810a91c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810a91e:	4b31      	ldr	r3, [pc, #196]	; (810a9e4 <xPortStartScheduler+0x134>)
 810a920:	2207      	movs	r2, #7
 810a922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810a924:	e009      	b.n	810a93a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 810a926:	4b2f      	ldr	r3, [pc, #188]	; (810a9e4 <xPortStartScheduler+0x134>)
 810a928:	681b      	ldr	r3, [r3, #0]
 810a92a:	3b01      	subs	r3, #1
 810a92c:	4a2d      	ldr	r2, [pc, #180]	; (810a9e4 <xPortStartScheduler+0x134>)
 810a92e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810a930:	78fb      	ldrb	r3, [r7, #3]
 810a932:	b2db      	uxtb	r3, r3
 810a934:	005b      	lsls	r3, r3, #1
 810a936:	b2db      	uxtb	r3, r3
 810a938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810a93a:	78fb      	ldrb	r3, [r7, #3]
 810a93c:	b2db      	uxtb	r3, r3
 810a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a942:	2b80      	cmp	r3, #128	; 0x80
 810a944:	d0ef      	beq.n	810a926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810a946:	4b27      	ldr	r3, [pc, #156]	; (810a9e4 <xPortStartScheduler+0x134>)
 810a948:	681b      	ldr	r3, [r3, #0]
 810a94a:	f1c3 0307 	rsb	r3, r3, #7
 810a94e:	2b04      	cmp	r3, #4
 810a950:	d00a      	beq.n	810a968 <xPortStartScheduler+0xb8>
	__asm volatile
 810a952:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a956:	f383 8811 	msr	BASEPRI, r3
 810a95a:	f3bf 8f6f 	isb	sy
 810a95e:	f3bf 8f4f 	dsb	sy
 810a962:	60bb      	str	r3, [r7, #8]
}
 810a964:	bf00      	nop
 810a966:	e7fe      	b.n	810a966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810a968:	4b1e      	ldr	r3, [pc, #120]	; (810a9e4 <xPortStartScheduler+0x134>)
 810a96a:	681b      	ldr	r3, [r3, #0]
 810a96c:	021b      	lsls	r3, r3, #8
 810a96e:	4a1d      	ldr	r2, [pc, #116]	; (810a9e4 <xPortStartScheduler+0x134>)
 810a970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810a972:	4b1c      	ldr	r3, [pc, #112]	; (810a9e4 <xPortStartScheduler+0x134>)
 810a974:	681b      	ldr	r3, [r3, #0]
 810a976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810a97a:	4a1a      	ldr	r2, [pc, #104]	; (810a9e4 <xPortStartScheduler+0x134>)
 810a97c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810a97e:	687b      	ldr	r3, [r7, #4]
 810a980:	b2da      	uxtb	r2, r3
 810a982:	697b      	ldr	r3, [r7, #20]
 810a984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810a986:	4b18      	ldr	r3, [pc, #96]	; (810a9e8 <xPortStartScheduler+0x138>)
 810a988:	681b      	ldr	r3, [r3, #0]
 810a98a:	4a17      	ldr	r2, [pc, #92]	; (810a9e8 <xPortStartScheduler+0x138>)
 810a98c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810a990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810a992:	4b15      	ldr	r3, [pc, #84]	; (810a9e8 <xPortStartScheduler+0x138>)
 810a994:	681b      	ldr	r3, [r3, #0]
 810a996:	4a14      	ldr	r2, [pc, #80]	; (810a9e8 <xPortStartScheduler+0x138>)
 810a998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810a99c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810a99e:	f000 f8dd 	bl	810ab5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810a9a2:	4b12      	ldr	r3, [pc, #72]	; (810a9ec <xPortStartScheduler+0x13c>)
 810a9a4:	2200      	movs	r2, #0
 810a9a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810a9a8:	f000 f8fc 	bl	810aba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810a9ac:	4b10      	ldr	r3, [pc, #64]	; (810a9f0 <xPortStartScheduler+0x140>)
 810a9ae:	681b      	ldr	r3, [r3, #0]
 810a9b0:	4a0f      	ldr	r2, [pc, #60]	; (810a9f0 <xPortStartScheduler+0x140>)
 810a9b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 810a9b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810a9b8:	f7ff ff66 	bl	810a888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810a9bc:	f001 fa34 	bl	810be28 <vTaskSwitchContext>
	prvTaskExitError();
 810a9c0:	f7ff ff1c 	bl	810a7fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810a9c4:	2300      	movs	r3, #0
}
 810a9c6:	4618      	mov	r0, r3
 810a9c8:	3718      	adds	r7, #24
 810a9ca:	46bd      	mov	sp, r7
 810a9cc:	bd80      	pop	{r7, pc}
 810a9ce:	bf00      	nop
 810a9d0:	e000ed00 	.word	0xe000ed00
 810a9d4:	410fc271 	.word	0x410fc271
 810a9d8:	410fc270 	.word	0x410fc270
 810a9dc:	e000e400 	.word	0xe000e400
 810a9e0:	1000448c 	.word	0x1000448c
 810a9e4:	10004490 	.word	0x10004490
 810a9e8:	e000ed20 	.word	0xe000ed20
 810a9ec:	10000058 	.word	0x10000058
 810a9f0:	e000ef34 	.word	0xe000ef34

0810a9f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810a9f4:	b480      	push	{r7}
 810a9f6:	b083      	sub	sp, #12
 810a9f8:	af00      	add	r7, sp, #0
	__asm volatile
 810a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a9fe:	f383 8811 	msr	BASEPRI, r3
 810aa02:	f3bf 8f6f 	isb	sy
 810aa06:	f3bf 8f4f 	dsb	sy
 810aa0a:	607b      	str	r3, [r7, #4]
}
 810aa0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810aa0e:	4b0f      	ldr	r3, [pc, #60]	; (810aa4c <vPortEnterCritical+0x58>)
 810aa10:	681b      	ldr	r3, [r3, #0]
 810aa12:	3301      	adds	r3, #1
 810aa14:	4a0d      	ldr	r2, [pc, #52]	; (810aa4c <vPortEnterCritical+0x58>)
 810aa16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810aa18:	4b0c      	ldr	r3, [pc, #48]	; (810aa4c <vPortEnterCritical+0x58>)
 810aa1a:	681b      	ldr	r3, [r3, #0]
 810aa1c:	2b01      	cmp	r3, #1
 810aa1e:	d10f      	bne.n	810aa40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810aa20:	4b0b      	ldr	r3, [pc, #44]	; (810aa50 <vPortEnterCritical+0x5c>)
 810aa22:	681b      	ldr	r3, [r3, #0]
 810aa24:	b2db      	uxtb	r3, r3
 810aa26:	2b00      	cmp	r3, #0
 810aa28:	d00a      	beq.n	810aa40 <vPortEnterCritical+0x4c>
	__asm volatile
 810aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa2e:	f383 8811 	msr	BASEPRI, r3
 810aa32:	f3bf 8f6f 	isb	sy
 810aa36:	f3bf 8f4f 	dsb	sy
 810aa3a:	603b      	str	r3, [r7, #0]
}
 810aa3c:	bf00      	nop
 810aa3e:	e7fe      	b.n	810aa3e <vPortEnterCritical+0x4a>
	}
}
 810aa40:	bf00      	nop
 810aa42:	370c      	adds	r7, #12
 810aa44:	46bd      	mov	sp, r7
 810aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa4a:	4770      	bx	lr
 810aa4c:	10000058 	.word	0x10000058
 810aa50:	e000ed04 	.word	0xe000ed04

0810aa54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810aa54:	b480      	push	{r7}
 810aa56:	b083      	sub	sp, #12
 810aa58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810aa5a:	4b12      	ldr	r3, [pc, #72]	; (810aaa4 <vPortExitCritical+0x50>)
 810aa5c:	681b      	ldr	r3, [r3, #0]
 810aa5e:	2b00      	cmp	r3, #0
 810aa60:	d10a      	bne.n	810aa78 <vPortExitCritical+0x24>
	__asm volatile
 810aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa66:	f383 8811 	msr	BASEPRI, r3
 810aa6a:	f3bf 8f6f 	isb	sy
 810aa6e:	f3bf 8f4f 	dsb	sy
 810aa72:	607b      	str	r3, [r7, #4]
}
 810aa74:	bf00      	nop
 810aa76:	e7fe      	b.n	810aa76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810aa78:	4b0a      	ldr	r3, [pc, #40]	; (810aaa4 <vPortExitCritical+0x50>)
 810aa7a:	681b      	ldr	r3, [r3, #0]
 810aa7c:	3b01      	subs	r3, #1
 810aa7e:	4a09      	ldr	r2, [pc, #36]	; (810aaa4 <vPortExitCritical+0x50>)
 810aa80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810aa82:	4b08      	ldr	r3, [pc, #32]	; (810aaa4 <vPortExitCritical+0x50>)
 810aa84:	681b      	ldr	r3, [r3, #0]
 810aa86:	2b00      	cmp	r3, #0
 810aa88:	d105      	bne.n	810aa96 <vPortExitCritical+0x42>
 810aa8a:	2300      	movs	r3, #0
 810aa8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810aa8e:	683b      	ldr	r3, [r7, #0]
 810aa90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810aa94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810aa96:	bf00      	nop
 810aa98:	370c      	adds	r7, #12
 810aa9a:	46bd      	mov	sp, r7
 810aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aaa0:	4770      	bx	lr
 810aaa2:	bf00      	nop
 810aaa4:	10000058 	.word	0x10000058
	...

0810aab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810aab0:	f3ef 8009 	mrs	r0, PSP
 810aab4:	f3bf 8f6f 	isb	sy
 810aab8:	4b15      	ldr	r3, [pc, #84]	; (810ab10 <pxCurrentTCBConst>)
 810aaba:	681a      	ldr	r2, [r3, #0]
 810aabc:	f01e 0f10 	tst.w	lr, #16
 810aac0:	bf08      	it	eq
 810aac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810aac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aaca:	6010      	str	r0, [r2, #0]
 810aacc:	e92d 0009 	stmdb	sp!, {r0, r3}
 810aad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 810aad4:	f380 8811 	msr	BASEPRI, r0
 810aad8:	f3bf 8f4f 	dsb	sy
 810aadc:	f3bf 8f6f 	isb	sy
 810aae0:	f001 f9a2 	bl	810be28 <vTaskSwitchContext>
 810aae4:	f04f 0000 	mov.w	r0, #0
 810aae8:	f380 8811 	msr	BASEPRI, r0
 810aaec:	bc09      	pop	{r0, r3}
 810aaee:	6819      	ldr	r1, [r3, #0]
 810aaf0:	6808      	ldr	r0, [r1, #0]
 810aaf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aaf6:	f01e 0f10 	tst.w	lr, #16
 810aafa:	bf08      	it	eq
 810aafc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810ab00:	f380 8809 	msr	PSP, r0
 810ab04:	f3bf 8f6f 	isb	sy
 810ab08:	4770      	bx	lr
 810ab0a:	bf00      	nop
 810ab0c:	f3af 8000 	nop.w

0810ab10 <pxCurrentTCBConst>:
 810ab10:	10004494 	.word	0x10004494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810ab14:	bf00      	nop
 810ab16:	bf00      	nop

0810ab18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810ab18:	b580      	push	{r7, lr}
 810ab1a:	b082      	sub	sp, #8
 810ab1c:	af00      	add	r7, sp, #0
	__asm volatile
 810ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ab22:	f383 8811 	msr	BASEPRI, r3
 810ab26:	f3bf 8f6f 	isb	sy
 810ab2a:	f3bf 8f4f 	dsb	sy
 810ab2e:	607b      	str	r3, [r7, #4]
}
 810ab30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810ab32:	f001 f8bf 	bl	810bcb4 <xTaskIncrementTick>
 810ab36:	4603      	mov	r3, r0
 810ab38:	2b00      	cmp	r3, #0
 810ab3a:	d003      	beq.n	810ab44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810ab3c:	4b06      	ldr	r3, [pc, #24]	; (810ab58 <xPortSysTickHandler+0x40>)
 810ab3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ab42:	601a      	str	r2, [r3, #0]
 810ab44:	2300      	movs	r3, #0
 810ab46:	603b      	str	r3, [r7, #0]
	__asm volatile
 810ab48:	683b      	ldr	r3, [r7, #0]
 810ab4a:	f383 8811 	msr	BASEPRI, r3
}
 810ab4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810ab50:	bf00      	nop
 810ab52:	3708      	adds	r7, #8
 810ab54:	46bd      	mov	sp, r7
 810ab56:	bd80      	pop	{r7, pc}
 810ab58:	e000ed04 	.word	0xe000ed04

0810ab5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810ab5c:	b480      	push	{r7}
 810ab5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810ab60:	4b0b      	ldr	r3, [pc, #44]	; (810ab90 <vPortSetupTimerInterrupt+0x34>)
 810ab62:	2200      	movs	r2, #0
 810ab64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810ab66:	4b0b      	ldr	r3, [pc, #44]	; (810ab94 <vPortSetupTimerInterrupt+0x38>)
 810ab68:	2200      	movs	r2, #0
 810ab6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810ab6c:	4b0a      	ldr	r3, [pc, #40]	; (810ab98 <vPortSetupTimerInterrupt+0x3c>)
 810ab6e:	681b      	ldr	r3, [r3, #0]
 810ab70:	4a0a      	ldr	r2, [pc, #40]	; (810ab9c <vPortSetupTimerInterrupt+0x40>)
 810ab72:	fba2 2303 	umull	r2, r3, r2, r3
 810ab76:	099b      	lsrs	r3, r3, #6
 810ab78:	4a09      	ldr	r2, [pc, #36]	; (810aba0 <vPortSetupTimerInterrupt+0x44>)
 810ab7a:	3b01      	subs	r3, #1
 810ab7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810ab7e:	4b04      	ldr	r3, [pc, #16]	; (810ab90 <vPortSetupTimerInterrupt+0x34>)
 810ab80:	2207      	movs	r2, #7
 810ab82:	601a      	str	r2, [r3, #0]
}
 810ab84:	bf00      	nop
 810ab86:	46bd      	mov	sp, r7
 810ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab8c:	4770      	bx	lr
 810ab8e:	bf00      	nop
 810ab90:	e000e010 	.word	0xe000e010
 810ab94:	e000e018 	.word	0xe000e018
 810ab98:	10000040 	.word	0x10000040
 810ab9c:	10624dd3 	.word	0x10624dd3
 810aba0:	e000e014 	.word	0xe000e014

0810aba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810aba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 810abb4 <vPortEnableVFP+0x10>
 810aba8:	6801      	ldr	r1, [r0, #0]
 810abaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810abae:	6001      	str	r1, [r0, #0]
 810abb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810abb2:	bf00      	nop
 810abb4:	e000ed88 	.word	0xe000ed88

0810abb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810abb8:	b480      	push	{r7}
 810abba:	b085      	sub	sp, #20
 810abbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810abbe:	f3ef 8305 	mrs	r3, IPSR
 810abc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810abc4:	68fb      	ldr	r3, [r7, #12]
 810abc6:	2b0f      	cmp	r3, #15
 810abc8:	d914      	bls.n	810abf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810abca:	4a17      	ldr	r2, [pc, #92]	; (810ac28 <vPortValidateInterruptPriority+0x70>)
 810abcc:	68fb      	ldr	r3, [r7, #12]
 810abce:	4413      	add	r3, r2
 810abd0:	781b      	ldrb	r3, [r3, #0]
 810abd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810abd4:	4b15      	ldr	r3, [pc, #84]	; (810ac2c <vPortValidateInterruptPriority+0x74>)
 810abd6:	781b      	ldrb	r3, [r3, #0]
 810abd8:	7afa      	ldrb	r2, [r7, #11]
 810abda:	429a      	cmp	r2, r3
 810abdc:	d20a      	bcs.n	810abf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 810abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 810abe2:	f383 8811 	msr	BASEPRI, r3
 810abe6:	f3bf 8f6f 	isb	sy
 810abea:	f3bf 8f4f 	dsb	sy
 810abee:	607b      	str	r3, [r7, #4]
}
 810abf0:	bf00      	nop
 810abf2:	e7fe      	b.n	810abf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810abf4:	4b0e      	ldr	r3, [pc, #56]	; (810ac30 <vPortValidateInterruptPriority+0x78>)
 810abf6:	681b      	ldr	r3, [r3, #0]
 810abf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810abfc:	4b0d      	ldr	r3, [pc, #52]	; (810ac34 <vPortValidateInterruptPriority+0x7c>)
 810abfe:	681b      	ldr	r3, [r3, #0]
 810ac00:	429a      	cmp	r2, r3
 810ac02:	d90a      	bls.n	810ac1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 810ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac08:	f383 8811 	msr	BASEPRI, r3
 810ac0c:	f3bf 8f6f 	isb	sy
 810ac10:	f3bf 8f4f 	dsb	sy
 810ac14:	603b      	str	r3, [r7, #0]
}
 810ac16:	bf00      	nop
 810ac18:	e7fe      	b.n	810ac18 <vPortValidateInterruptPriority+0x60>
	}
 810ac1a:	bf00      	nop
 810ac1c:	3714      	adds	r7, #20
 810ac1e:	46bd      	mov	sp, r7
 810ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac24:	4770      	bx	lr
 810ac26:	bf00      	nop
 810ac28:	e000e3f0 	.word	0xe000e3f0
 810ac2c:	1000448c 	.word	0x1000448c
 810ac30:	e000ed0c 	.word	0xe000ed0c
 810ac34:	10004490 	.word	0x10004490

0810ac38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810ac38:	b580      	push	{r7, lr}
 810ac3a:	b084      	sub	sp, #16
 810ac3c:	af00      	add	r7, sp, #0
 810ac3e:	6078      	str	r0, [r7, #4]
 810ac40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810ac42:	687b      	ldr	r3, [r7, #4]
 810ac44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810ac46:	68fb      	ldr	r3, [r7, #12]
 810ac48:	2b00      	cmp	r3, #0
 810ac4a:	d10a      	bne.n	810ac62 <xQueueGenericReset+0x2a>
	__asm volatile
 810ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac50:	f383 8811 	msr	BASEPRI, r3
 810ac54:	f3bf 8f6f 	isb	sy
 810ac58:	f3bf 8f4f 	dsb	sy
 810ac5c:	60bb      	str	r3, [r7, #8]
}
 810ac5e:	bf00      	nop
 810ac60:	e7fe      	b.n	810ac60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810ac62:	f7ff fec7 	bl	810a9f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ac66:	68fb      	ldr	r3, [r7, #12]
 810ac68:	681a      	ldr	r2, [r3, #0]
 810ac6a:	68fb      	ldr	r3, [r7, #12]
 810ac6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ac6e:	68f9      	ldr	r1, [r7, #12]
 810ac70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810ac72:	fb01 f303 	mul.w	r3, r1, r3
 810ac76:	441a      	add	r2, r3
 810ac78:	68fb      	ldr	r3, [r7, #12]
 810ac7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810ac7c:	68fb      	ldr	r3, [r7, #12]
 810ac7e:	2200      	movs	r2, #0
 810ac80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810ac82:	68fb      	ldr	r3, [r7, #12]
 810ac84:	681a      	ldr	r2, [r3, #0]
 810ac86:	68fb      	ldr	r3, [r7, #12]
 810ac88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ac8a:	68fb      	ldr	r3, [r7, #12]
 810ac8c:	681a      	ldr	r2, [r3, #0]
 810ac8e:	68fb      	ldr	r3, [r7, #12]
 810ac90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ac92:	3b01      	subs	r3, #1
 810ac94:	68f9      	ldr	r1, [r7, #12]
 810ac96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810ac98:	fb01 f303 	mul.w	r3, r1, r3
 810ac9c:	441a      	add	r2, r3
 810ac9e:	68fb      	ldr	r3, [r7, #12]
 810aca0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810aca2:	68fb      	ldr	r3, [r7, #12]
 810aca4:	22ff      	movs	r2, #255	; 0xff
 810aca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810acaa:	68fb      	ldr	r3, [r7, #12]
 810acac:	22ff      	movs	r2, #255	; 0xff
 810acae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 810acb2:	683b      	ldr	r3, [r7, #0]
 810acb4:	2b00      	cmp	r3, #0
 810acb6:	d114      	bne.n	810ace2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810acb8:	68fb      	ldr	r3, [r7, #12]
 810acba:	691b      	ldr	r3, [r3, #16]
 810acbc:	2b00      	cmp	r3, #0
 810acbe:	d01a      	beq.n	810acf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810acc0:	68fb      	ldr	r3, [r7, #12]
 810acc2:	3310      	adds	r3, #16
 810acc4:	4618      	mov	r0, r3
 810acc6:	f001 f963 	bl	810bf90 <xTaskRemoveFromEventList>
 810acca:	4603      	mov	r3, r0
 810accc:	2b00      	cmp	r3, #0
 810acce:	d012      	beq.n	810acf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810acd0:	4b0c      	ldr	r3, [pc, #48]	; (810ad04 <xQueueGenericReset+0xcc>)
 810acd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810acd6:	601a      	str	r2, [r3, #0]
 810acd8:	f3bf 8f4f 	dsb	sy
 810acdc:	f3bf 8f6f 	isb	sy
 810ace0:	e009      	b.n	810acf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810ace2:	68fb      	ldr	r3, [r7, #12]
 810ace4:	3310      	adds	r3, #16
 810ace6:	4618      	mov	r0, r3
 810ace8:	f7ff fca0 	bl	810a62c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810acec:	68fb      	ldr	r3, [r7, #12]
 810acee:	3324      	adds	r3, #36	; 0x24
 810acf0:	4618      	mov	r0, r3
 810acf2:	f7ff fc9b 	bl	810a62c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810acf6:	f7ff fead 	bl	810aa54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810acfa:	2301      	movs	r3, #1
}
 810acfc:	4618      	mov	r0, r3
 810acfe:	3710      	adds	r7, #16
 810ad00:	46bd      	mov	sp, r7
 810ad02:	bd80      	pop	{r7, pc}
 810ad04:	e000ed04 	.word	0xe000ed04

0810ad08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810ad08:	b580      	push	{r7, lr}
 810ad0a:	b08e      	sub	sp, #56	; 0x38
 810ad0c:	af02      	add	r7, sp, #8
 810ad0e:	60f8      	str	r0, [r7, #12]
 810ad10:	60b9      	str	r1, [r7, #8]
 810ad12:	607a      	str	r2, [r7, #4]
 810ad14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810ad16:	68fb      	ldr	r3, [r7, #12]
 810ad18:	2b00      	cmp	r3, #0
 810ad1a:	d10a      	bne.n	810ad32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad20:	f383 8811 	msr	BASEPRI, r3
 810ad24:	f3bf 8f6f 	isb	sy
 810ad28:	f3bf 8f4f 	dsb	sy
 810ad2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810ad2e:	bf00      	nop
 810ad30:	e7fe      	b.n	810ad30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810ad32:	683b      	ldr	r3, [r7, #0]
 810ad34:	2b00      	cmp	r3, #0
 810ad36:	d10a      	bne.n	810ad4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 810ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad3c:	f383 8811 	msr	BASEPRI, r3
 810ad40:	f3bf 8f6f 	isb	sy
 810ad44:	f3bf 8f4f 	dsb	sy
 810ad48:	627b      	str	r3, [r7, #36]	; 0x24
}
 810ad4a:	bf00      	nop
 810ad4c:	e7fe      	b.n	810ad4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810ad4e:	687b      	ldr	r3, [r7, #4]
 810ad50:	2b00      	cmp	r3, #0
 810ad52:	d002      	beq.n	810ad5a <xQueueGenericCreateStatic+0x52>
 810ad54:	68bb      	ldr	r3, [r7, #8]
 810ad56:	2b00      	cmp	r3, #0
 810ad58:	d001      	beq.n	810ad5e <xQueueGenericCreateStatic+0x56>
 810ad5a:	2301      	movs	r3, #1
 810ad5c:	e000      	b.n	810ad60 <xQueueGenericCreateStatic+0x58>
 810ad5e:	2300      	movs	r3, #0
 810ad60:	2b00      	cmp	r3, #0
 810ad62:	d10a      	bne.n	810ad7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 810ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad68:	f383 8811 	msr	BASEPRI, r3
 810ad6c:	f3bf 8f6f 	isb	sy
 810ad70:	f3bf 8f4f 	dsb	sy
 810ad74:	623b      	str	r3, [r7, #32]
}
 810ad76:	bf00      	nop
 810ad78:	e7fe      	b.n	810ad78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810ad7a:	687b      	ldr	r3, [r7, #4]
 810ad7c:	2b00      	cmp	r3, #0
 810ad7e:	d102      	bne.n	810ad86 <xQueueGenericCreateStatic+0x7e>
 810ad80:	68bb      	ldr	r3, [r7, #8]
 810ad82:	2b00      	cmp	r3, #0
 810ad84:	d101      	bne.n	810ad8a <xQueueGenericCreateStatic+0x82>
 810ad86:	2301      	movs	r3, #1
 810ad88:	e000      	b.n	810ad8c <xQueueGenericCreateStatic+0x84>
 810ad8a:	2300      	movs	r3, #0
 810ad8c:	2b00      	cmp	r3, #0
 810ad8e:	d10a      	bne.n	810ada6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 810ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad94:	f383 8811 	msr	BASEPRI, r3
 810ad98:	f3bf 8f6f 	isb	sy
 810ad9c:	f3bf 8f4f 	dsb	sy
 810ada0:	61fb      	str	r3, [r7, #28]
}
 810ada2:	bf00      	nop
 810ada4:	e7fe      	b.n	810ada4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810ada6:	2350      	movs	r3, #80	; 0x50
 810ada8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810adaa:	697b      	ldr	r3, [r7, #20]
 810adac:	2b50      	cmp	r3, #80	; 0x50
 810adae:	d00a      	beq.n	810adc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 810adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810adb4:	f383 8811 	msr	BASEPRI, r3
 810adb8:	f3bf 8f6f 	isb	sy
 810adbc:	f3bf 8f4f 	dsb	sy
 810adc0:	61bb      	str	r3, [r7, #24]
}
 810adc2:	bf00      	nop
 810adc4:	e7fe      	b.n	810adc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810adc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810adc8:	683b      	ldr	r3, [r7, #0]
 810adca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810adce:	2b00      	cmp	r3, #0
 810add0:	d00d      	beq.n	810adee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810add4:	2201      	movs	r2, #1
 810add6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810adda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ade0:	9300      	str	r3, [sp, #0]
 810ade2:	4613      	mov	r3, r2
 810ade4:	687a      	ldr	r2, [r7, #4]
 810ade6:	68b9      	ldr	r1, [r7, #8]
 810ade8:	68f8      	ldr	r0, [r7, #12]
 810adea:	f000 f83f 	bl	810ae6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810adf0:	4618      	mov	r0, r3
 810adf2:	3730      	adds	r7, #48	; 0x30
 810adf4:	46bd      	mov	sp, r7
 810adf6:	bd80      	pop	{r7, pc}

0810adf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810adf8:	b580      	push	{r7, lr}
 810adfa:	b08a      	sub	sp, #40	; 0x28
 810adfc:	af02      	add	r7, sp, #8
 810adfe:	60f8      	str	r0, [r7, #12]
 810ae00:	60b9      	str	r1, [r7, #8]
 810ae02:	4613      	mov	r3, r2
 810ae04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810ae06:	68fb      	ldr	r3, [r7, #12]
 810ae08:	2b00      	cmp	r3, #0
 810ae0a:	d10a      	bne.n	810ae22 <xQueueGenericCreate+0x2a>
	__asm volatile
 810ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ae10:	f383 8811 	msr	BASEPRI, r3
 810ae14:	f3bf 8f6f 	isb	sy
 810ae18:	f3bf 8f4f 	dsb	sy
 810ae1c:	613b      	str	r3, [r7, #16]
}
 810ae1e:	bf00      	nop
 810ae20:	e7fe      	b.n	810ae20 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ae22:	68fb      	ldr	r3, [r7, #12]
 810ae24:	68ba      	ldr	r2, [r7, #8]
 810ae26:	fb02 f303 	mul.w	r3, r2, r3
 810ae2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810ae2c:	69fb      	ldr	r3, [r7, #28]
 810ae2e:	3350      	adds	r3, #80	; 0x50
 810ae30:	4618      	mov	r0, r3
 810ae32:	f7ff fa11 	bl	810a258 <pvPortMalloc>
 810ae36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810ae38:	69bb      	ldr	r3, [r7, #24]
 810ae3a:	2b00      	cmp	r3, #0
 810ae3c:	d011      	beq.n	810ae62 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810ae3e:	69bb      	ldr	r3, [r7, #24]
 810ae40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ae42:	697b      	ldr	r3, [r7, #20]
 810ae44:	3350      	adds	r3, #80	; 0x50
 810ae46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810ae48:	69bb      	ldr	r3, [r7, #24]
 810ae4a:	2200      	movs	r2, #0
 810ae4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810ae50:	79fa      	ldrb	r2, [r7, #7]
 810ae52:	69bb      	ldr	r3, [r7, #24]
 810ae54:	9300      	str	r3, [sp, #0]
 810ae56:	4613      	mov	r3, r2
 810ae58:	697a      	ldr	r2, [r7, #20]
 810ae5a:	68b9      	ldr	r1, [r7, #8]
 810ae5c:	68f8      	ldr	r0, [r7, #12]
 810ae5e:	f000 f805 	bl	810ae6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810ae62:	69bb      	ldr	r3, [r7, #24]
	}
 810ae64:	4618      	mov	r0, r3
 810ae66:	3720      	adds	r7, #32
 810ae68:	46bd      	mov	sp, r7
 810ae6a:	bd80      	pop	{r7, pc}

0810ae6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810ae6c:	b580      	push	{r7, lr}
 810ae6e:	b084      	sub	sp, #16
 810ae70:	af00      	add	r7, sp, #0
 810ae72:	60f8      	str	r0, [r7, #12]
 810ae74:	60b9      	str	r1, [r7, #8]
 810ae76:	607a      	str	r2, [r7, #4]
 810ae78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810ae7a:	68bb      	ldr	r3, [r7, #8]
 810ae7c:	2b00      	cmp	r3, #0
 810ae7e:	d103      	bne.n	810ae88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810ae80:	69bb      	ldr	r3, [r7, #24]
 810ae82:	69ba      	ldr	r2, [r7, #24]
 810ae84:	601a      	str	r2, [r3, #0]
 810ae86:	e002      	b.n	810ae8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810ae88:	69bb      	ldr	r3, [r7, #24]
 810ae8a:	687a      	ldr	r2, [r7, #4]
 810ae8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810ae8e:	69bb      	ldr	r3, [r7, #24]
 810ae90:	68fa      	ldr	r2, [r7, #12]
 810ae92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810ae94:	69bb      	ldr	r3, [r7, #24]
 810ae96:	68ba      	ldr	r2, [r7, #8]
 810ae98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810ae9a:	2101      	movs	r1, #1
 810ae9c:	69b8      	ldr	r0, [r7, #24]
 810ae9e:	f7ff fecb 	bl	810ac38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810aea2:	69bb      	ldr	r3, [r7, #24]
 810aea4:	78fa      	ldrb	r2, [r7, #3]
 810aea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810aeaa:	bf00      	nop
 810aeac:	3710      	adds	r7, #16
 810aeae:	46bd      	mov	sp, r7
 810aeb0:	bd80      	pop	{r7, pc}
	...

0810aeb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810aeb4:	b580      	push	{r7, lr}
 810aeb6:	b08e      	sub	sp, #56	; 0x38
 810aeb8:	af00      	add	r7, sp, #0
 810aeba:	60f8      	str	r0, [r7, #12]
 810aebc:	60b9      	str	r1, [r7, #8]
 810aebe:	607a      	str	r2, [r7, #4]
 810aec0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810aec2:	2300      	movs	r3, #0
 810aec4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810aec6:	68fb      	ldr	r3, [r7, #12]
 810aec8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aecc:	2b00      	cmp	r3, #0
 810aece:	d10a      	bne.n	810aee6 <xQueueGenericSend+0x32>
	__asm volatile
 810aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aed4:	f383 8811 	msr	BASEPRI, r3
 810aed8:	f3bf 8f6f 	isb	sy
 810aedc:	f3bf 8f4f 	dsb	sy
 810aee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810aee2:	bf00      	nop
 810aee4:	e7fe      	b.n	810aee4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810aee6:	68bb      	ldr	r3, [r7, #8]
 810aee8:	2b00      	cmp	r3, #0
 810aeea:	d103      	bne.n	810aef4 <xQueueGenericSend+0x40>
 810aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810aef0:	2b00      	cmp	r3, #0
 810aef2:	d101      	bne.n	810aef8 <xQueueGenericSend+0x44>
 810aef4:	2301      	movs	r3, #1
 810aef6:	e000      	b.n	810aefa <xQueueGenericSend+0x46>
 810aef8:	2300      	movs	r3, #0
 810aefa:	2b00      	cmp	r3, #0
 810aefc:	d10a      	bne.n	810af14 <xQueueGenericSend+0x60>
	__asm volatile
 810aefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af02:	f383 8811 	msr	BASEPRI, r3
 810af06:	f3bf 8f6f 	isb	sy
 810af0a:	f3bf 8f4f 	dsb	sy
 810af0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 810af10:	bf00      	nop
 810af12:	e7fe      	b.n	810af12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810af14:	683b      	ldr	r3, [r7, #0]
 810af16:	2b02      	cmp	r3, #2
 810af18:	d103      	bne.n	810af22 <xQueueGenericSend+0x6e>
 810af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810af1e:	2b01      	cmp	r3, #1
 810af20:	d101      	bne.n	810af26 <xQueueGenericSend+0x72>
 810af22:	2301      	movs	r3, #1
 810af24:	e000      	b.n	810af28 <xQueueGenericSend+0x74>
 810af26:	2300      	movs	r3, #0
 810af28:	2b00      	cmp	r3, #0
 810af2a:	d10a      	bne.n	810af42 <xQueueGenericSend+0x8e>
	__asm volatile
 810af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af30:	f383 8811 	msr	BASEPRI, r3
 810af34:	f3bf 8f6f 	isb	sy
 810af38:	f3bf 8f4f 	dsb	sy
 810af3c:	623b      	str	r3, [r7, #32]
}
 810af3e:	bf00      	nop
 810af40:	e7fe      	b.n	810af40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810af42:	f001 f9e7 	bl	810c314 <xTaskGetSchedulerState>
 810af46:	4603      	mov	r3, r0
 810af48:	2b00      	cmp	r3, #0
 810af4a:	d102      	bne.n	810af52 <xQueueGenericSend+0x9e>
 810af4c:	687b      	ldr	r3, [r7, #4]
 810af4e:	2b00      	cmp	r3, #0
 810af50:	d101      	bne.n	810af56 <xQueueGenericSend+0xa2>
 810af52:	2301      	movs	r3, #1
 810af54:	e000      	b.n	810af58 <xQueueGenericSend+0xa4>
 810af56:	2300      	movs	r3, #0
 810af58:	2b00      	cmp	r3, #0
 810af5a:	d10a      	bne.n	810af72 <xQueueGenericSend+0xbe>
	__asm volatile
 810af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af60:	f383 8811 	msr	BASEPRI, r3
 810af64:	f3bf 8f6f 	isb	sy
 810af68:	f3bf 8f4f 	dsb	sy
 810af6c:	61fb      	str	r3, [r7, #28]
}
 810af6e:	bf00      	nop
 810af70:	e7fe      	b.n	810af70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810af72:	f7ff fd3f 	bl	810a9f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810af7e:	429a      	cmp	r2, r3
 810af80:	d302      	bcc.n	810af88 <xQueueGenericSend+0xd4>
 810af82:	683b      	ldr	r3, [r7, #0]
 810af84:	2b02      	cmp	r3, #2
 810af86:	d129      	bne.n	810afdc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810af88:	683a      	ldr	r2, [r7, #0]
 810af8a:	68b9      	ldr	r1, [r7, #8]
 810af8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810af8e:	f000 fa0b 	bl	810b3a8 <prvCopyDataToQueue>
 810af92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810af98:	2b00      	cmp	r3, #0
 810af9a:	d010      	beq.n	810afbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810af9e:	3324      	adds	r3, #36	; 0x24
 810afa0:	4618      	mov	r0, r3
 810afa2:	f000 fff5 	bl	810bf90 <xTaskRemoveFromEventList>
 810afa6:	4603      	mov	r3, r0
 810afa8:	2b00      	cmp	r3, #0
 810afaa:	d013      	beq.n	810afd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810afac:	4b3f      	ldr	r3, [pc, #252]	; (810b0ac <xQueueGenericSend+0x1f8>)
 810afae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810afb2:	601a      	str	r2, [r3, #0]
 810afb4:	f3bf 8f4f 	dsb	sy
 810afb8:	f3bf 8f6f 	isb	sy
 810afbc:	e00a      	b.n	810afd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810afbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810afc0:	2b00      	cmp	r3, #0
 810afc2:	d007      	beq.n	810afd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810afc4:	4b39      	ldr	r3, [pc, #228]	; (810b0ac <xQueueGenericSend+0x1f8>)
 810afc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810afca:	601a      	str	r2, [r3, #0]
 810afcc:	f3bf 8f4f 	dsb	sy
 810afd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810afd4:	f7ff fd3e 	bl	810aa54 <vPortExitCritical>
				return pdPASS;
 810afd8:	2301      	movs	r3, #1
 810afda:	e063      	b.n	810b0a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810afdc:	687b      	ldr	r3, [r7, #4]
 810afde:	2b00      	cmp	r3, #0
 810afe0:	d103      	bne.n	810afea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810afe2:	f7ff fd37 	bl	810aa54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810afe6:	2300      	movs	r3, #0
 810afe8:	e05c      	b.n	810b0a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 810afea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810afec:	2b00      	cmp	r3, #0
 810afee:	d106      	bne.n	810affe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810aff0:	f107 0314 	add.w	r3, r7, #20
 810aff4:	4618      	mov	r0, r3
 810aff6:	f001 f82f 	bl	810c058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810affa:	2301      	movs	r3, #1
 810affc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810affe:	f7ff fd29 	bl	810aa54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810b002:	f000 fd9b 	bl	810bb3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810b006:	f7ff fcf5 	bl	810a9f4 <vPortEnterCritical>
 810b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b00c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810b010:	b25b      	sxtb	r3, r3
 810b012:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b016:	d103      	bne.n	810b020 <xQueueGenericSend+0x16c>
 810b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b01a:	2200      	movs	r2, #0
 810b01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810b026:	b25b      	sxtb	r3, r3
 810b028:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b02c:	d103      	bne.n	810b036 <xQueueGenericSend+0x182>
 810b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b030:	2200      	movs	r2, #0
 810b032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810b036:	f7ff fd0d 	bl	810aa54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810b03a:	1d3a      	adds	r2, r7, #4
 810b03c:	f107 0314 	add.w	r3, r7, #20
 810b040:	4611      	mov	r1, r2
 810b042:	4618      	mov	r0, r3
 810b044:	f001 f81e 	bl	810c084 <xTaskCheckForTimeOut>
 810b048:	4603      	mov	r3, r0
 810b04a:	2b00      	cmp	r3, #0
 810b04c:	d124      	bne.n	810b098 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810b04e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810b050:	f000 faa2 	bl	810b598 <prvIsQueueFull>
 810b054:	4603      	mov	r3, r0
 810b056:	2b00      	cmp	r3, #0
 810b058:	d018      	beq.n	810b08c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b05c:	3310      	adds	r3, #16
 810b05e:	687a      	ldr	r2, [r7, #4]
 810b060:	4611      	mov	r1, r2
 810b062:	4618      	mov	r0, r3
 810b064:	f000 ff44 	bl	810bef0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810b068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810b06a:	f000 fa2d 	bl	810b4c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810b06e:	f000 fd73 	bl	810bb58 <xTaskResumeAll>
 810b072:	4603      	mov	r3, r0
 810b074:	2b00      	cmp	r3, #0
 810b076:	f47f af7c 	bne.w	810af72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 810b07a:	4b0c      	ldr	r3, [pc, #48]	; (810b0ac <xQueueGenericSend+0x1f8>)
 810b07c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b080:	601a      	str	r2, [r3, #0]
 810b082:	f3bf 8f4f 	dsb	sy
 810b086:	f3bf 8f6f 	isb	sy
 810b08a:	e772      	b.n	810af72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810b08c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810b08e:	f000 fa1b 	bl	810b4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810b092:	f000 fd61 	bl	810bb58 <xTaskResumeAll>
 810b096:	e76c      	b.n	810af72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810b098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810b09a:	f000 fa15 	bl	810b4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810b09e:	f000 fd5b 	bl	810bb58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810b0a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810b0a4:	4618      	mov	r0, r3
 810b0a6:	3738      	adds	r7, #56	; 0x38
 810b0a8:	46bd      	mov	sp, r7
 810b0aa:	bd80      	pop	{r7, pc}
 810b0ac:	e000ed04 	.word	0xe000ed04

0810b0b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810b0b0:	b580      	push	{r7, lr}
 810b0b2:	b090      	sub	sp, #64	; 0x40
 810b0b4:	af00      	add	r7, sp, #0
 810b0b6:	60f8      	str	r0, [r7, #12]
 810b0b8:	60b9      	str	r1, [r7, #8]
 810b0ba:	607a      	str	r2, [r7, #4]
 810b0bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810b0be:	68fb      	ldr	r3, [r7, #12]
 810b0c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 810b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0c4:	2b00      	cmp	r3, #0
 810b0c6:	d10a      	bne.n	810b0de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 810b0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b0cc:	f383 8811 	msr	BASEPRI, r3
 810b0d0:	f3bf 8f6f 	isb	sy
 810b0d4:	f3bf 8f4f 	dsb	sy
 810b0d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810b0da:	bf00      	nop
 810b0dc:	e7fe      	b.n	810b0dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810b0de:	68bb      	ldr	r3, [r7, #8]
 810b0e0:	2b00      	cmp	r3, #0
 810b0e2:	d103      	bne.n	810b0ec <xQueueGenericSendFromISR+0x3c>
 810b0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b0e8:	2b00      	cmp	r3, #0
 810b0ea:	d101      	bne.n	810b0f0 <xQueueGenericSendFromISR+0x40>
 810b0ec:	2301      	movs	r3, #1
 810b0ee:	e000      	b.n	810b0f2 <xQueueGenericSendFromISR+0x42>
 810b0f0:	2300      	movs	r3, #0
 810b0f2:	2b00      	cmp	r3, #0
 810b0f4:	d10a      	bne.n	810b10c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 810b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b0fa:	f383 8811 	msr	BASEPRI, r3
 810b0fe:	f3bf 8f6f 	isb	sy
 810b102:	f3bf 8f4f 	dsb	sy
 810b106:	627b      	str	r3, [r7, #36]	; 0x24
}
 810b108:	bf00      	nop
 810b10a:	e7fe      	b.n	810b10a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810b10c:	683b      	ldr	r3, [r7, #0]
 810b10e:	2b02      	cmp	r3, #2
 810b110:	d103      	bne.n	810b11a <xQueueGenericSendFromISR+0x6a>
 810b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b116:	2b01      	cmp	r3, #1
 810b118:	d101      	bne.n	810b11e <xQueueGenericSendFromISR+0x6e>
 810b11a:	2301      	movs	r3, #1
 810b11c:	e000      	b.n	810b120 <xQueueGenericSendFromISR+0x70>
 810b11e:	2300      	movs	r3, #0
 810b120:	2b00      	cmp	r3, #0
 810b122:	d10a      	bne.n	810b13a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 810b124:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b128:	f383 8811 	msr	BASEPRI, r3
 810b12c:	f3bf 8f6f 	isb	sy
 810b130:	f3bf 8f4f 	dsb	sy
 810b134:	623b      	str	r3, [r7, #32]
}
 810b136:	bf00      	nop
 810b138:	e7fe      	b.n	810b138 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810b13a:	f7ff fd3d 	bl	810abb8 <vPortValidateInterruptPriority>
	__asm volatile
 810b13e:	f3ef 8211 	mrs	r2, BASEPRI
 810b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b146:	f383 8811 	msr	BASEPRI, r3
 810b14a:	f3bf 8f6f 	isb	sy
 810b14e:	f3bf 8f4f 	dsb	sy
 810b152:	61fa      	str	r2, [r7, #28]
 810b154:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810b156:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810b158:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810b15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b15c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810b15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b162:	429a      	cmp	r2, r3
 810b164:	d302      	bcc.n	810b16c <xQueueGenericSendFromISR+0xbc>
 810b166:	683b      	ldr	r3, [r7, #0]
 810b168:	2b02      	cmp	r3, #2
 810b16a:	d12f      	bne.n	810b1cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b16e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810b172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b17a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810b17c:	683a      	ldr	r2, [r7, #0]
 810b17e:	68b9      	ldr	r1, [r7, #8]
 810b180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810b182:	f000 f911 	bl	810b3a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810b186:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 810b18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b18e:	d112      	bne.n	810b1b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b194:	2b00      	cmp	r3, #0
 810b196:	d016      	beq.n	810b1c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b19a:	3324      	adds	r3, #36	; 0x24
 810b19c:	4618      	mov	r0, r3
 810b19e:	f000 fef7 	bl	810bf90 <xTaskRemoveFromEventList>
 810b1a2:	4603      	mov	r3, r0
 810b1a4:	2b00      	cmp	r3, #0
 810b1a6:	d00e      	beq.n	810b1c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810b1a8:	687b      	ldr	r3, [r7, #4]
 810b1aa:	2b00      	cmp	r3, #0
 810b1ac:	d00b      	beq.n	810b1c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810b1ae:	687b      	ldr	r3, [r7, #4]
 810b1b0:	2201      	movs	r2, #1
 810b1b2:	601a      	str	r2, [r3, #0]
 810b1b4:	e007      	b.n	810b1c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810b1b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b1ba:	3301      	adds	r3, #1
 810b1bc:	b2db      	uxtb	r3, r3
 810b1be:	b25a      	sxtb	r2, r3
 810b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b1c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810b1c6:	2301      	movs	r3, #1
 810b1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 810b1ca:	e001      	b.n	810b1d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810b1cc:	2300      	movs	r3, #0
 810b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b1d2:	617b      	str	r3, [r7, #20]
	__asm volatile
 810b1d4:	697b      	ldr	r3, [r7, #20]
 810b1d6:	f383 8811 	msr	BASEPRI, r3
}
 810b1da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810b1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810b1de:	4618      	mov	r0, r3
 810b1e0:	3740      	adds	r7, #64	; 0x40
 810b1e2:	46bd      	mov	sp, r7
 810b1e4:	bd80      	pop	{r7, pc}
	...

0810b1e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810b1e8:	b580      	push	{r7, lr}
 810b1ea:	b08c      	sub	sp, #48	; 0x30
 810b1ec:	af00      	add	r7, sp, #0
 810b1ee:	60f8      	str	r0, [r7, #12]
 810b1f0:	60b9      	str	r1, [r7, #8]
 810b1f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810b1f4:	2300      	movs	r3, #0
 810b1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810b1f8:	68fb      	ldr	r3, [r7, #12]
 810b1fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b1fe:	2b00      	cmp	r3, #0
 810b200:	d10a      	bne.n	810b218 <xQueueReceive+0x30>
	__asm volatile
 810b202:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b206:	f383 8811 	msr	BASEPRI, r3
 810b20a:	f3bf 8f6f 	isb	sy
 810b20e:	f3bf 8f4f 	dsb	sy
 810b212:	623b      	str	r3, [r7, #32]
}
 810b214:	bf00      	nop
 810b216:	e7fe      	b.n	810b216 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810b218:	68bb      	ldr	r3, [r7, #8]
 810b21a:	2b00      	cmp	r3, #0
 810b21c:	d103      	bne.n	810b226 <xQueueReceive+0x3e>
 810b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b222:	2b00      	cmp	r3, #0
 810b224:	d101      	bne.n	810b22a <xQueueReceive+0x42>
 810b226:	2301      	movs	r3, #1
 810b228:	e000      	b.n	810b22c <xQueueReceive+0x44>
 810b22a:	2300      	movs	r3, #0
 810b22c:	2b00      	cmp	r3, #0
 810b22e:	d10a      	bne.n	810b246 <xQueueReceive+0x5e>
	__asm volatile
 810b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b234:	f383 8811 	msr	BASEPRI, r3
 810b238:	f3bf 8f6f 	isb	sy
 810b23c:	f3bf 8f4f 	dsb	sy
 810b240:	61fb      	str	r3, [r7, #28]
}
 810b242:	bf00      	nop
 810b244:	e7fe      	b.n	810b244 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810b246:	f001 f865 	bl	810c314 <xTaskGetSchedulerState>
 810b24a:	4603      	mov	r3, r0
 810b24c:	2b00      	cmp	r3, #0
 810b24e:	d102      	bne.n	810b256 <xQueueReceive+0x6e>
 810b250:	687b      	ldr	r3, [r7, #4]
 810b252:	2b00      	cmp	r3, #0
 810b254:	d101      	bne.n	810b25a <xQueueReceive+0x72>
 810b256:	2301      	movs	r3, #1
 810b258:	e000      	b.n	810b25c <xQueueReceive+0x74>
 810b25a:	2300      	movs	r3, #0
 810b25c:	2b00      	cmp	r3, #0
 810b25e:	d10a      	bne.n	810b276 <xQueueReceive+0x8e>
	__asm volatile
 810b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b264:	f383 8811 	msr	BASEPRI, r3
 810b268:	f3bf 8f6f 	isb	sy
 810b26c:	f3bf 8f4f 	dsb	sy
 810b270:	61bb      	str	r3, [r7, #24]
}
 810b272:	bf00      	nop
 810b274:	e7fe      	b.n	810b274 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810b276:	f7ff fbbd 	bl	810a9f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b27e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b282:	2b00      	cmp	r3, #0
 810b284:	d01f      	beq.n	810b2c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810b286:	68b9      	ldr	r1, [r7, #8]
 810b288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810b28a:	f000 f8f7 	bl	810b47c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b290:	1e5a      	subs	r2, r3, #1
 810b292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b294:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810b296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b298:	691b      	ldr	r3, [r3, #16]
 810b29a:	2b00      	cmp	r3, #0
 810b29c:	d00f      	beq.n	810b2be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b2a0:	3310      	adds	r3, #16
 810b2a2:	4618      	mov	r0, r3
 810b2a4:	f000 fe74 	bl	810bf90 <xTaskRemoveFromEventList>
 810b2a8:	4603      	mov	r3, r0
 810b2aa:	2b00      	cmp	r3, #0
 810b2ac:	d007      	beq.n	810b2be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810b2ae:	4b3d      	ldr	r3, [pc, #244]	; (810b3a4 <xQueueReceive+0x1bc>)
 810b2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b2b4:	601a      	str	r2, [r3, #0]
 810b2b6:	f3bf 8f4f 	dsb	sy
 810b2ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810b2be:	f7ff fbc9 	bl	810aa54 <vPortExitCritical>
				return pdPASS;
 810b2c2:	2301      	movs	r3, #1
 810b2c4:	e069      	b.n	810b39a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810b2c6:	687b      	ldr	r3, [r7, #4]
 810b2c8:	2b00      	cmp	r3, #0
 810b2ca:	d103      	bne.n	810b2d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810b2cc:	f7ff fbc2 	bl	810aa54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810b2d0:	2300      	movs	r3, #0
 810b2d2:	e062      	b.n	810b39a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 810b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b2d6:	2b00      	cmp	r3, #0
 810b2d8:	d106      	bne.n	810b2e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810b2da:	f107 0310 	add.w	r3, r7, #16
 810b2de:	4618      	mov	r0, r3
 810b2e0:	f000 feba 	bl	810c058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810b2e4:	2301      	movs	r3, #1
 810b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810b2e8:	f7ff fbb4 	bl	810aa54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810b2ec:	f000 fc26 	bl	810bb3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810b2f0:	f7ff fb80 	bl	810a9f4 <vPortEnterCritical>
 810b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b2f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810b2fa:	b25b      	sxtb	r3, r3
 810b2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b300:	d103      	bne.n	810b30a <xQueueReceive+0x122>
 810b302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b304:	2200      	movs	r2, #0
 810b306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810b30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b30c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810b310:	b25b      	sxtb	r3, r3
 810b312:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b316:	d103      	bne.n	810b320 <xQueueReceive+0x138>
 810b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b31a:	2200      	movs	r2, #0
 810b31c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810b320:	f7ff fb98 	bl	810aa54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810b324:	1d3a      	adds	r2, r7, #4
 810b326:	f107 0310 	add.w	r3, r7, #16
 810b32a:	4611      	mov	r1, r2
 810b32c:	4618      	mov	r0, r3
 810b32e:	f000 fea9 	bl	810c084 <xTaskCheckForTimeOut>
 810b332:	4603      	mov	r3, r0
 810b334:	2b00      	cmp	r3, #0
 810b336:	d123      	bne.n	810b380 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810b338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810b33a:	f000 f917 	bl	810b56c <prvIsQueueEmpty>
 810b33e:	4603      	mov	r3, r0
 810b340:	2b00      	cmp	r3, #0
 810b342:	d017      	beq.n	810b374 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b346:	3324      	adds	r3, #36	; 0x24
 810b348:	687a      	ldr	r2, [r7, #4]
 810b34a:	4611      	mov	r1, r2
 810b34c:	4618      	mov	r0, r3
 810b34e:	f000 fdcf 	bl	810bef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810b352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810b354:	f000 f8b8 	bl	810b4c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810b358:	f000 fbfe 	bl	810bb58 <xTaskResumeAll>
 810b35c:	4603      	mov	r3, r0
 810b35e:	2b00      	cmp	r3, #0
 810b360:	d189      	bne.n	810b276 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 810b362:	4b10      	ldr	r3, [pc, #64]	; (810b3a4 <xQueueReceive+0x1bc>)
 810b364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b368:	601a      	str	r2, [r3, #0]
 810b36a:	f3bf 8f4f 	dsb	sy
 810b36e:	f3bf 8f6f 	isb	sy
 810b372:	e780      	b.n	810b276 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810b374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810b376:	f000 f8a7 	bl	810b4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810b37a:	f000 fbed 	bl	810bb58 <xTaskResumeAll>
 810b37e:	e77a      	b.n	810b276 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810b380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810b382:	f000 f8a1 	bl	810b4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810b386:	f000 fbe7 	bl	810bb58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810b38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810b38c:	f000 f8ee 	bl	810b56c <prvIsQueueEmpty>
 810b390:	4603      	mov	r3, r0
 810b392:	2b00      	cmp	r3, #0
 810b394:	f43f af6f 	beq.w	810b276 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810b398:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810b39a:	4618      	mov	r0, r3
 810b39c:	3730      	adds	r7, #48	; 0x30
 810b39e:	46bd      	mov	sp, r7
 810b3a0:	bd80      	pop	{r7, pc}
 810b3a2:	bf00      	nop
 810b3a4:	e000ed04 	.word	0xe000ed04

0810b3a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810b3a8:	b580      	push	{r7, lr}
 810b3aa:	b086      	sub	sp, #24
 810b3ac:	af00      	add	r7, sp, #0
 810b3ae:	60f8      	str	r0, [r7, #12]
 810b3b0:	60b9      	str	r1, [r7, #8]
 810b3b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810b3b4:	2300      	movs	r3, #0
 810b3b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810b3b8:	68fb      	ldr	r3, [r7, #12]
 810b3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b3bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810b3be:	68fb      	ldr	r3, [r7, #12]
 810b3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b3c2:	2b00      	cmp	r3, #0
 810b3c4:	d10d      	bne.n	810b3e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810b3c6:	68fb      	ldr	r3, [r7, #12]
 810b3c8:	681b      	ldr	r3, [r3, #0]
 810b3ca:	2b00      	cmp	r3, #0
 810b3cc:	d14d      	bne.n	810b46a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810b3ce:	68fb      	ldr	r3, [r7, #12]
 810b3d0:	689b      	ldr	r3, [r3, #8]
 810b3d2:	4618      	mov	r0, r3
 810b3d4:	f000 ffbc 	bl	810c350 <xTaskPriorityDisinherit>
 810b3d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810b3da:	68fb      	ldr	r3, [r7, #12]
 810b3dc:	2200      	movs	r2, #0
 810b3de:	609a      	str	r2, [r3, #8]
 810b3e0:	e043      	b.n	810b46a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810b3e2:	687b      	ldr	r3, [r7, #4]
 810b3e4:	2b00      	cmp	r3, #0
 810b3e6:	d119      	bne.n	810b41c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810b3e8:	68fb      	ldr	r3, [r7, #12]
 810b3ea:	6858      	ldr	r0, [r3, #4]
 810b3ec:	68fb      	ldr	r3, [r7, #12]
 810b3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b3f0:	461a      	mov	r2, r3
 810b3f2:	68b9      	ldr	r1, [r7, #8]
 810b3f4:	f001 fbe2 	bl	810cbbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810b3f8:	68fb      	ldr	r3, [r7, #12]
 810b3fa:	685a      	ldr	r2, [r3, #4]
 810b3fc:	68fb      	ldr	r3, [r7, #12]
 810b3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b400:	441a      	add	r2, r3
 810b402:	68fb      	ldr	r3, [r7, #12]
 810b404:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810b406:	68fb      	ldr	r3, [r7, #12]
 810b408:	685a      	ldr	r2, [r3, #4]
 810b40a:	68fb      	ldr	r3, [r7, #12]
 810b40c:	689b      	ldr	r3, [r3, #8]
 810b40e:	429a      	cmp	r2, r3
 810b410:	d32b      	bcc.n	810b46a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810b412:	68fb      	ldr	r3, [r7, #12]
 810b414:	681a      	ldr	r2, [r3, #0]
 810b416:	68fb      	ldr	r3, [r7, #12]
 810b418:	605a      	str	r2, [r3, #4]
 810b41a:	e026      	b.n	810b46a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810b41c:	68fb      	ldr	r3, [r7, #12]
 810b41e:	68d8      	ldr	r0, [r3, #12]
 810b420:	68fb      	ldr	r3, [r7, #12]
 810b422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b424:	461a      	mov	r2, r3
 810b426:	68b9      	ldr	r1, [r7, #8]
 810b428:	f001 fbc8 	bl	810cbbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810b42c:	68fb      	ldr	r3, [r7, #12]
 810b42e:	68da      	ldr	r2, [r3, #12]
 810b430:	68fb      	ldr	r3, [r7, #12]
 810b432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b434:	425b      	negs	r3, r3
 810b436:	441a      	add	r2, r3
 810b438:	68fb      	ldr	r3, [r7, #12]
 810b43a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810b43c:	68fb      	ldr	r3, [r7, #12]
 810b43e:	68da      	ldr	r2, [r3, #12]
 810b440:	68fb      	ldr	r3, [r7, #12]
 810b442:	681b      	ldr	r3, [r3, #0]
 810b444:	429a      	cmp	r2, r3
 810b446:	d207      	bcs.n	810b458 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810b448:	68fb      	ldr	r3, [r7, #12]
 810b44a:	689a      	ldr	r2, [r3, #8]
 810b44c:	68fb      	ldr	r3, [r7, #12]
 810b44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b450:	425b      	negs	r3, r3
 810b452:	441a      	add	r2, r3
 810b454:	68fb      	ldr	r3, [r7, #12]
 810b456:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810b458:	687b      	ldr	r3, [r7, #4]
 810b45a:	2b02      	cmp	r3, #2
 810b45c:	d105      	bne.n	810b46a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810b45e:	693b      	ldr	r3, [r7, #16]
 810b460:	2b00      	cmp	r3, #0
 810b462:	d002      	beq.n	810b46a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810b464:	693b      	ldr	r3, [r7, #16]
 810b466:	3b01      	subs	r3, #1
 810b468:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810b46a:	693b      	ldr	r3, [r7, #16]
 810b46c:	1c5a      	adds	r2, r3, #1
 810b46e:	68fb      	ldr	r3, [r7, #12]
 810b470:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810b472:	697b      	ldr	r3, [r7, #20]
}
 810b474:	4618      	mov	r0, r3
 810b476:	3718      	adds	r7, #24
 810b478:	46bd      	mov	sp, r7
 810b47a:	bd80      	pop	{r7, pc}

0810b47c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810b47c:	b580      	push	{r7, lr}
 810b47e:	b082      	sub	sp, #8
 810b480:	af00      	add	r7, sp, #0
 810b482:	6078      	str	r0, [r7, #4]
 810b484:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810b486:	687b      	ldr	r3, [r7, #4]
 810b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b48a:	2b00      	cmp	r3, #0
 810b48c:	d018      	beq.n	810b4c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810b48e:	687b      	ldr	r3, [r7, #4]
 810b490:	68da      	ldr	r2, [r3, #12]
 810b492:	687b      	ldr	r3, [r7, #4]
 810b494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b496:	441a      	add	r2, r3
 810b498:	687b      	ldr	r3, [r7, #4]
 810b49a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810b49c:	687b      	ldr	r3, [r7, #4]
 810b49e:	68da      	ldr	r2, [r3, #12]
 810b4a0:	687b      	ldr	r3, [r7, #4]
 810b4a2:	689b      	ldr	r3, [r3, #8]
 810b4a4:	429a      	cmp	r2, r3
 810b4a6:	d303      	bcc.n	810b4b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810b4a8:	687b      	ldr	r3, [r7, #4]
 810b4aa:	681a      	ldr	r2, [r3, #0]
 810b4ac:	687b      	ldr	r3, [r7, #4]
 810b4ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810b4b0:	687b      	ldr	r3, [r7, #4]
 810b4b2:	68d9      	ldr	r1, [r3, #12]
 810b4b4:	687b      	ldr	r3, [r7, #4]
 810b4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810b4b8:	461a      	mov	r2, r3
 810b4ba:	6838      	ldr	r0, [r7, #0]
 810b4bc:	f001 fb7e 	bl	810cbbc <memcpy>
	}
}
 810b4c0:	bf00      	nop
 810b4c2:	3708      	adds	r7, #8
 810b4c4:	46bd      	mov	sp, r7
 810b4c6:	bd80      	pop	{r7, pc}

0810b4c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810b4c8:	b580      	push	{r7, lr}
 810b4ca:	b084      	sub	sp, #16
 810b4cc:	af00      	add	r7, sp, #0
 810b4ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810b4d0:	f7ff fa90 	bl	810a9f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810b4d4:	687b      	ldr	r3, [r7, #4]
 810b4d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810b4da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810b4dc:	e011      	b.n	810b502 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810b4de:	687b      	ldr	r3, [r7, #4]
 810b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b4e2:	2b00      	cmp	r3, #0
 810b4e4:	d012      	beq.n	810b50c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810b4e6:	687b      	ldr	r3, [r7, #4]
 810b4e8:	3324      	adds	r3, #36	; 0x24
 810b4ea:	4618      	mov	r0, r3
 810b4ec:	f000 fd50 	bl	810bf90 <xTaskRemoveFromEventList>
 810b4f0:	4603      	mov	r3, r0
 810b4f2:	2b00      	cmp	r3, #0
 810b4f4:	d001      	beq.n	810b4fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810b4f6:	f000 fe27 	bl	810c148 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810b4fa:	7bfb      	ldrb	r3, [r7, #15]
 810b4fc:	3b01      	subs	r3, #1
 810b4fe:	b2db      	uxtb	r3, r3
 810b500:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810b502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810b506:	2b00      	cmp	r3, #0
 810b508:	dce9      	bgt.n	810b4de <prvUnlockQueue+0x16>
 810b50a:	e000      	b.n	810b50e <prvUnlockQueue+0x46>
					break;
 810b50c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810b50e:	687b      	ldr	r3, [r7, #4]
 810b510:	22ff      	movs	r2, #255	; 0xff
 810b512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810b516:	f7ff fa9d 	bl	810aa54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810b51a:	f7ff fa6b 	bl	810a9f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810b51e:	687b      	ldr	r3, [r7, #4]
 810b520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810b524:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810b526:	e011      	b.n	810b54c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810b528:	687b      	ldr	r3, [r7, #4]
 810b52a:	691b      	ldr	r3, [r3, #16]
 810b52c:	2b00      	cmp	r3, #0
 810b52e:	d012      	beq.n	810b556 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810b530:	687b      	ldr	r3, [r7, #4]
 810b532:	3310      	adds	r3, #16
 810b534:	4618      	mov	r0, r3
 810b536:	f000 fd2b 	bl	810bf90 <xTaskRemoveFromEventList>
 810b53a:	4603      	mov	r3, r0
 810b53c:	2b00      	cmp	r3, #0
 810b53e:	d001      	beq.n	810b544 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810b540:	f000 fe02 	bl	810c148 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810b544:	7bbb      	ldrb	r3, [r7, #14]
 810b546:	3b01      	subs	r3, #1
 810b548:	b2db      	uxtb	r3, r3
 810b54a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810b54c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810b550:	2b00      	cmp	r3, #0
 810b552:	dce9      	bgt.n	810b528 <prvUnlockQueue+0x60>
 810b554:	e000      	b.n	810b558 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810b556:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810b558:	687b      	ldr	r3, [r7, #4]
 810b55a:	22ff      	movs	r2, #255	; 0xff
 810b55c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810b560:	f7ff fa78 	bl	810aa54 <vPortExitCritical>
}
 810b564:	bf00      	nop
 810b566:	3710      	adds	r7, #16
 810b568:	46bd      	mov	sp, r7
 810b56a:	bd80      	pop	{r7, pc}

0810b56c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810b56c:	b580      	push	{r7, lr}
 810b56e:	b084      	sub	sp, #16
 810b570:	af00      	add	r7, sp, #0
 810b572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810b574:	f7ff fa3e 	bl	810a9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810b578:	687b      	ldr	r3, [r7, #4]
 810b57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b57c:	2b00      	cmp	r3, #0
 810b57e:	d102      	bne.n	810b586 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810b580:	2301      	movs	r3, #1
 810b582:	60fb      	str	r3, [r7, #12]
 810b584:	e001      	b.n	810b58a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810b586:	2300      	movs	r3, #0
 810b588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810b58a:	f7ff fa63 	bl	810aa54 <vPortExitCritical>

	return xReturn;
 810b58e:	68fb      	ldr	r3, [r7, #12]
}
 810b590:	4618      	mov	r0, r3
 810b592:	3710      	adds	r7, #16
 810b594:	46bd      	mov	sp, r7
 810b596:	bd80      	pop	{r7, pc}

0810b598 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810b598:	b580      	push	{r7, lr}
 810b59a:	b084      	sub	sp, #16
 810b59c:	af00      	add	r7, sp, #0
 810b59e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810b5a0:	f7ff fa28 	bl	810a9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810b5a4:	687b      	ldr	r3, [r7, #4]
 810b5a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810b5a8:	687b      	ldr	r3, [r7, #4]
 810b5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b5ac:	429a      	cmp	r2, r3
 810b5ae:	d102      	bne.n	810b5b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810b5b0:	2301      	movs	r3, #1
 810b5b2:	60fb      	str	r3, [r7, #12]
 810b5b4:	e001      	b.n	810b5ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810b5b6:	2300      	movs	r3, #0
 810b5b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810b5ba:	f7ff fa4b 	bl	810aa54 <vPortExitCritical>

	return xReturn;
 810b5be:	68fb      	ldr	r3, [r7, #12]
}
 810b5c0:	4618      	mov	r0, r3
 810b5c2:	3710      	adds	r7, #16
 810b5c4:	46bd      	mov	sp, r7
 810b5c6:	bd80      	pop	{r7, pc}

0810b5c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810b5c8:	b480      	push	{r7}
 810b5ca:	b085      	sub	sp, #20
 810b5cc:	af00      	add	r7, sp, #0
 810b5ce:	6078      	str	r0, [r7, #4]
 810b5d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810b5d2:	2300      	movs	r3, #0
 810b5d4:	60fb      	str	r3, [r7, #12]
 810b5d6:	e014      	b.n	810b602 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810b5d8:	4a0f      	ldr	r2, [pc, #60]	; (810b618 <vQueueAddToRegistry+0x50>)
 810b5da:	68fb      	ldr	r3, [r7, #12]
 810b5dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810b5e0:	2b00      	cmp	r3, #0
 810b5e2:	d10b      	bne.n	810b5fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810b5e4:	490c      	ldr	r1, [pc, #48]	; (810b618 <vQueueAddToRegistry+0x50>)
 810b5e6:	68fb      	ldr	r3, [r7, #12]
 810b5e8:	683a      	ldr	r2, [r7, #0]
 810b5ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810b5ee:	4a0a      	ldr	r2, [pc, #40]	; (810b618 <vQueueAddToRegistry+0x50>)
 810b5f0:	68fb      	ldr	r3, [r7, #12]
 810b5f2:	00db      	lsls	r3, r3, #3
 810b5f4:	4413      	add	r3, r2
 810b5f6:	687a      	ldr	r2, [r7, #4]
 810b5f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810b5fa:	e006      	b.n	810b60a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810b5fc:	68fb      	ldr	r3, [r7, #12]
 810b5fe:	3301      	adds	r3, #1
 810b600:	60fb      	str	r3, [r7, #12]
 810b602:	68fb      	ldr	r3, [r7, #12]
 810b604:	2b07      	cmp	r3, #7
 810b606:	d9e7      	bls.n	810b5d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810b608:	bf00      	nop
 810b60a:	bf00      	nop
 810b60c:	3714      	adds	r7, #20
 810b60e:	46bd      	mov	sp, r7
 810b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b614:	4770      	bx	lr
 810b616:	bf00      	nop
 810b618:	10004de0 	.word	0x10004de0

0810b61c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810b61c:	b580      	push	{r7, lr}
 810b61e:	b086      	sub	sp, #24
 810b620:	af00      	add	r7, sp, #0
 810b622:	60f8      	str	r0, [r7, #12]
 810b624:	60b9      	str	r1, [r7, #8]
 810b626:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810b628:	68fb      	ldr	r3, [r7, #12]
 810b62a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810b62c:	f7ff f9e2 	bl	810a9f4 <vPortEnterCritical>
 810b630:	697b      	ldr	r3, [r7, #20]
 810b632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810b636:	b25b      	sxtb	r3, r3
 810b638:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b63c:	d103      	bne.n	810b646 <vQueueWaitForMessageRestricted+0x2a>
 810b63e:	697b      	ldr	r3, [r7, #20]
 810b640:	2200      	movs	r2, #0
 810b642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810b646:	697b      	ldr	r3, [r7, #20]
 810b648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810b64c:	b25b      	sxtb	r3, r3
 810b64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b652:	d103      	bne.n	810b65c <vQueueWaitForMessageRestricted+0x40>
 810b654:	697b      	ldr	r3, [r7, #20]
 810b656:	2200      	movs	r2, #0
 810b658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810b65c:	f7ff f9fa 	bl	810aa54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810b660:	697b      	ldr	r3, [r7, #20]
 810b662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b664:	2b00      	cmp	r3, #0
 810b666:	d106      	bne.n	810b676 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810b668:	697b      	ldr	r3, [r7, #20]
 810b66a:	3324      	adds	r3, #36	; 0x24
 810b66c:	687a      	ldr	r2, [r7, #4]
 810b66e:	68b9      	ldr	r1, [r7, #8]
 810b670:	4618      	mov	r0, r3
 810b672:	f000 fc61 	bl	810bf38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810b676:	6978      	ldr	r0, [r7, #20]
 810b678:	f7ff ff26 	bl	810b4c8 <prvUnlockQueue>
	}
 810b67c:	bf00      	nop
 810b67e:	3718      	adds	r7, #24
 810b680:	46bd      	mov	sp, r7
 810b682:	bd80      	pop	{r7, pc}

0810b684 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810b684:	b580      	push	{r7, lr}
 810b686:	b08e      	sub	sp, #56	; 0x38
 810b688:	af04      	add	r7, sp, #16
 810b68a:	60f8      	str	r0, [r7, #12]
 810b68c:	60b9      	str	r1, [r7, #8]
 810b68e:	607a      	str	r2, [r7, #4]
 810b690:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810b692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b694:	2b00      	cmp	r3, #0
 810b696:	d10a      	bne.n	810b6ae <xTaskCreateStatic+0x2a>
	__asm volatile
 810b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b69c:	f383 8811 	msr	BASEPRI, r3
 810b6a0:	f3bf 8f6f 	isb	sy
 810b6a4:	f3bf 8f4f 	dsb	sy
 810b6a8:	623b      	str	r3, [r7, #32]
}
 810b6aa:	bf00      	nop
 810b6ac:	e7fe      	b.n	810b6ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b6b0:	2b00      	cmp	r3, #0
 810b6b2:	d10a      	bne.n	810b6ca <xTaskCreateStatic+0x46>
	__asm volatile
 810b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b6b8:	f383 8811 	msr	BASEPRI, r3
 810b6bc:	f3bf 8f6f 	isb	sy
 810b6c0:	f3bf 8f4f 	dsb	sy
 810b6c4:	61fb      	str	r3, [r7, #28]
}
 810b6c6:	bf00      	nop
 810b6c8:	e7fe      	b.n	810b6c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810b6ca:	23bc      	movs	r3, #188	; 0xbc
 810b6cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810b6ce:	693b      	ldr	r3, [r7, #16]
 810b6d0:	2bbc      	cmp	r3, #188	; 0xbc
 810b6d2:	d00a      	beq.n	810b6ea <xTaskCreateStatic+0x66>
	__asm volatile
 810b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b6d8:	f383 8811 	msr	BASEPRI, r3
 810b6dc:	f3bf 8f6f 	isb	sy
 810b6e0:	f3bf 8f4f 	dsb	sy
 810b6e4:	61bb      	str	r3, [r7, #24]
}
 810b6e6:	bf00      	nop
 810b6e8:	e7fe      	b.n	810b6e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810b6ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810b6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b6ee:	2b00      	cmp	r3, #0
 810b6f0:	d01e      	beq.n	810b730 <xTaskCreateStatic+0xac>
 810b6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b6f4:	2b00      	cmp	r3, #0
 810b6f6:	d01b      	beq.n	810b730 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810b6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b6fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b6fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810b700:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b704:	2202      	movs	r2, #2
 810b706:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810b70a:	2300      	movs	r3, #0
 810b70c:	9303      	str	r3, [sp, #12]
 810b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b710:	9302      	str	r3, [sp, #8]
 810b712:	f107 0314 	add.w	r3, r7, #20
 810b716:	9301      	str	r3, [sp, #4]
 810b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b71a:	9300      	str	r3, [sp, #0]
 810b71c:	683b      	ldr	r3, [r7, #0]
 810b71e:	687a      	ldr	r2, [r7, #4]
 810b720:	68b9      	ldr	r1, [r7, #8]
 810b722:	68f8      	ldr	r0, [r7, #12]
 810b724:	f000 f850 	bl	810b7c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810b728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810b72a:	f000 f8f3 	bl	810b914 <prvAddNewTaskToReadyList>
 810b72e:	e001      	b.n	810b734 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810b730:	2300      	movs	r3, #0
 810b732:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810b734:	697b      	ldr	r3, [r7, #20]
	}
 810b736:	4618      	mov	r0, r3
 810b738:	3728      	adds	r7, #40	; 0x28
 810b73a:	46bd      	mov	sp, r7
 810b73c:	bd80      	pop	{r7, pc}

0810b73e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810b73e:	b580      	push	{r7, lr}
 810b740:	b08c      	sub	sp, #48	; 0x30
 810b742:	af04      	add	r7, sp, #16
 810b744:	60f8      	str	r0, [r7, #12]
 810b746:	60b9      	str	r1, [r7, #8]
 810b748:	603b      	str	r3, [r7, #0]
 810b74a:	4613      	mov	r3, r2
 810b74c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810b74e:	88fb      	ldrh	r3, [r7, #6]
 810b750:	009b      	lsls	r3, r3, #2
 810b752:	4618      	mov	r0, r3
 810b754:	f7fe fd80 	bl	810a258 <pvPortMalloc>
 810b758:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810b75a:	697b      	ldr	r3, [r7, #20]
 810b75c:	2b00      	cmp	r3, #0
 810b75e:	d00e      	beq.n	810b77e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810b760:	20bc      	movs	r0, #188	; 0xbc
 810b762:	f7fe fd79 	bl	810a258 <pvPortMalloc>
 810b766:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810b768:	69fb      	ldr	r3, [r7, #28]
 810b76a:	2b00      	cmp	r3, #0
 810b76c:	d003      	beq.n	810b776 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810b76e:	69fb      	ldr	r3, [r7, #28]
 810b770:	697a      	ldr	r2, [r7, #20]
 810b772:	631a      	str	r2, [r3, #48]	; 0x30
 810b774:	e005      	b.n	810b782 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810b776:	6978      	ldr	r0, [r7, #20]
 810b778:	f7fe fe3a 	bl	810a3f0 <vPortFree>
 810b77c:	e001      	b.n	810b782 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810b77e:	2300      	movs	r3, #0
 810b780:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810b782:	69fb      	ldr	r3, [r7, #28]
 810b784:	2b00      	cmp	r3, #0
 810b786:	d017      	beq.n	810b7b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810b788:	69fb      	ldr	r3, [r7, #28]
 810b78a:	2200      	movs	r2, #0
 810b78c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810b790:	88fa      	ldrh	r2, [r7, #6]
 810b792:	2300      	movs	r3, #0
 810b794:	9303      	str	r3, [sp, #12]
 810b796:	69fb      	ldr	r3, [r7, #28]
 810b798:	9302      	str	r3, [sp, #8]
 810b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b79c:	9301      	str	r3, [sp, #4]
 810b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b7a0:	9300      	str	r3, [sp, #0]
 810b7a2:	683b      	ldr	r3, [r7, #0]
 810b7a4:	68b9      	ldr	r1, [r7, #8]
 810b7a6:	68f8      	ldr	r0, [r7, #12]
 810b7a8:	f000 f80e 	bl	810b7c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810b7ac:	69f8      	ldr	r0, [r7, #28]
 810b7ae:	f000 f8b1 	bl	810b914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810b7b2:	2301      	movs	r3, #1
 810b7b4:	61bb      	str	r3, [r7, #24]
 810b7b6:	e002      	b.n	810b7be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810b7b8:	f04f 33ff 	mov.w	r3, #4294967295
 810b7bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810b7be:	69bb      	ldr	r3, [r7, #24]
	}
 810b7c0:	4618      	mov	r0, r3
 810b7c2:	3720      	adds	r7, #32
 810b7c4:	46bd      	mov	sp, r7
 810b7c6:	bd80      	pop	{r7, pc}

0810b7c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810b7c8:	b580      	push	{r7, lr}
 810b7ca:	b088      	sub	sp, #32
 810b7cc:	af00      	add	r7, sp, #0
 810b7ce:	60f8      	str	r0, [r7, #12]
 810b7d0:	60b9      	str	r1, [r7, #8]
 810b7d2:	607a      	str	r2, [r7, #4]
 810b7d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 810b7da:	687b      	ldr	r3, [r7, #4]
 810b7dc:	009b      	lsls	r3, r3, #2
 810b7de:	461a      	mov	r2, r3
 810b7e0:	21a5      	movs	r1, #165	; 0xa5
 810b7e2:	f001 fa13 	bl	810cc0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810b7ea:	687b      	ldr	r3, [r7, #4]
 810b7ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810b7f0:	3b01      	subs	r3, #1
 810b7f2:	009b      	lsls	r3, r3, #2
 810b7f4:	4413      	add	r3, r2
 810b7f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810b7f8:	69bb      	ldr	r3, [r7, #24]
 810b7fa:	f023 0307 	bic.w	r3, r3, #7
 810b7fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810b800:	69bb      	ldr	r3, [r7, #24]
 810b802:	f003 0307 	and.w	r3, r3, #7
 810b806:	2b00      	cmp	r3, #0
 810b808:	d00a      	beq.n	810b820 <prvInitialiseNewTask+0x58>
	__asm volatile
 810b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b80e:	f383 8811 	msr	BASEPRI, r3
 810b812:	f3bf 8f6f 	isb	sy
 810b816:	f3bf 8f4f 	dsb	sy
 810b81a:	617b      	str	r3, [r7, #20]
}
 810b81c:	bf00      	nop
 810b81e:	e7fe      	b.n	810b81e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810b820:	68bb      	ldr	r3, [r7, #8]
 810b822:	2b00      	cmp	r3, #0
 810b824:	d01f      	beq.n	810b866 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810b826:	2300      	movs	r3, #0
 810b828:	61fb      	str	r3, [r7, #28]
 810b82a:	e012      	b.n	810b852 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810b82c:	68ba      	ldr	r2, [r7, #8]
 810b82e:	69fb      	ldr	r3, [r7, #28]
 810b830:	4413      	add	r3, r2
 810b832:	7819      	ldrb	r1, [r3, #0]
 810b834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810b836:	69fb      	ldr	r3, [r7, #28]
 810b838:	4413      	add	r3, r2
 810b83a:	3334      	adds	r3, #52	; 0x34
 810b83c:	460a      	mov	r2, r1
 810b83e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810b840:	68ba      	ldr	r2, [r7, #8]
 810b842:	69fb      	ldr	r3, [r7, #28]
 810b844:	4413      	add	r3, r2
 810b846:	781b      	ldrb	r3, [r3, #0]
 810b848:	2b00      	cmp	r3, #0
 810b84a:	d006      	beq.n	810b85a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810b84c:	69fb      	ldr	r3, [r7, #28]
 810b84e:	3301      	adds	r3, #1
 810b850:	61fb      	str	r3, [r7, #28]
 810b852:	69fb      	ldr	r3, [r7, #28]
 810b854:	2b0f      	cmp	r3, #15
 810b856:	d9e9      	bls.n	810b82c <prvInitialiseNewTask+0x64>
 810b858:	e000      	b.n	810b85c <prvInitialiseNewTask+0x94>
			{
				break;
 810b85a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810b85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b85e:	2200      	movs	r2, #0
 810b860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810b864:	e003      	b.n	810b86e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b868:	2200      	movs	r2, #0
 810b86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b870:	2b37      	cmp	r3, #55	; 0x37
 810b872:	d901      	bls.n	810b878 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810b874:	2337      	movs	r3, #55	; 0x37
 810b876:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b87a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810b87c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810b882:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b886:	2200      	movs	r2, #0
 810b888:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b88c:	3304      	adds	r3, #4
 810b88e:	4618      	mov	r0, r3
 810b890:	f7fe feec 	bl	810a66c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b896:	3318      	adds	r3, #24
 810b898:	4618      	mov	r0, r3
 810b89a:	f7fe fee7 	bl	810a66c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810b8a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b8a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810b8b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8b6:	2200      	movs	r2, #0
 810b8b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8be:	2200      	movs	r2, #0
 810b8c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8c6:	3354      	adds	r3, #84	; 0x54
 810b8c8:	2260      	movs	r2, #96	; 0x60
 810b8ca:	2100      	movs	r1, #0
 810b8cc:	4618      	mov	r0, r3
 810b8ce:	f001 f99d 	bl	810cc0c <memset>
 810b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8d4:	4a0c      	ldr	r2, [pc, #48]	; (810b908 <prvInitialiseNewTask+0x140>)
 810b8d6:	659a      	str	r2, [r3, #88]	; 0x58
 810b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8da:	4a0c      	ldr	r2, [pc, #48]	; (810b90c <prvInitialiseNewTask+0x144>)
 810b8dc:	65da      	str	r2, [r3, #92]	; 0x5c
 810b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8e0:	4a0b      	ldr	r2, [pc, #44]	; (810b910 <prvInitialiseNewTask+0x148>)
 810b8e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810b8e4:	683a      	ldr	r2, [r7, #0]
 810b8e6:	68f9      	ldr	r1, [r7, #12]
 810b8e8:	69b8      	ldr	r0, [r7, #24]
 810b8ea:	f7fe ff53 	bl	810a794 <pxPortInitialiseStack>
 810b8ee:	4602      	mov	r2, r0
 810b8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b8f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b8f6:	2b00      	cmp	r3, #0
 810b8f8:	d002      	beq.n	810b900 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810b8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810b8fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810b900:	bf00      	nop
 810b902:	3720      	adds	r7, #32
 810b904:	46bd      	mov	sp, r7
 810b906:	bd80      	pop	{r7, pc}
 810b908:	0810cff0 	.word	0x0810cff0
 810b90c:	0810d010 	.word	0x0810d010
 810b910:	0810cfd0 	.word	0x0810cfd0

0810b914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810b914:	b580      	push	{r7, lr}
 810b916:	b082      	sub	sp, #8
 810b918:	af00      	add	r7, sp, #0
 810b91a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810b91c:	f7ff f86a 	bl	810a9f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810b920:	4b2d      	ldr	r3, [pc, #180]	; (810b9d8 <prvAddNewTaskToReadyList+0xc4>)
 810b922:	681b      	ldr	r3, [r3, #0]
 810b924:	3301      	adds	r3, #1
 810b926:	4a2c      	ldr	r2, [pc, #176]	; (810b9d8 <prvAddNewTaskToReadyList+0xc4>)
 810b928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810b92a:	4b2c      	ldr	r3, [pc, #176]	; (810b9dc <prvAddNewTaskToReadyList+0xc8>)
 810b92c:	681b      	ldr	r3, [r3, #0]
 810b92e:	2b00      	cmp	r3, #0
 810b930:	d109      	bne.n	810b946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810b932:	4a2a      	ldr	r2, [pc, #168]	; (810b9dc <prvAddNewTaskToReadyList+0xc8>)
 810b934:	687b      	ldr	r3, [r7, #4]
 810b936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810b938:	4b27      	ldr	r3, [pc, #156]	; (810b9d8 <prvAddNewTaskToReadyList+0xc4>)
 810b93a:	681b      	ldr	r3, [r3, #0]
 810b93c:	2b01      	cmp	r3, #1
 810b93e:	d110      	bne.n	810b962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810b940:	f000 fc26 	bl	810c190 <prvInitialiseTaskLists>
 810b944:	e00d      	b.n	810b962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810b946:	4b26      	ldr	r3, [pc, #152]	; (810b9e0 <prvAddNewTaskToReadyList+0xcc>)
 810b948:	681b      	ldr	r3, [r3, #0]
 810b94a:	2b00      	cmp	r3, #0
 810b94c:	d109      	bne.n	810b962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810b94e:	4b23      	ldr	r3, [pc, #140]	; (810b9dc <prvAddNewTaskToReadyList+0xc8>)
 810b950:	681b      	ldr	r3, [r3, #0]
 810b952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b954:	687b      	ldr	r3, [r7, #4]
 810b956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b958:	429a      	cmp	r2, r3
 810b95a:	d802      	bhi.n	810b962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810b95c:	4a1f      	ldr	r2, [pc, #124]	; (810b9dc <prvAddNewTaskToReadyList+0xc8>)
 810b95e:	687b      	ldr	r3, [r7, #4]
 810b960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810b962:	4b20      	ldr	r3, [pc, #128]	; (810b9e4 <prvAddNewTaskToReadyList+0xd0>)
 810b964:	681b      	ldr	r3, [r3, #0]
 810b966:	3301      	adds	r3, #1
 810b968:	4a1e      	ldr	r2, [pc, #120]	; (810b9e4 <prvAddNewTaskToReadyList+0xd0>)
 810b96a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810b96c:	4b1d      	ldr	r3, [pc, #116]	; (810b9e4 <prvAddNewTaskToReadyList+0xd0>)
 810b96e:	681a      	ldr	r2, [r3, #0]
 810b970:	687b      	ldr	r3, [r7, #4]
 810b972:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810b974:	687b      	ldr	r3, [r7, #4]
 810b976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b978:	4b1b      	ldr	r3, [pc, #108]	; (810b9e8 <prvAddNewTaskToReadyList+0xd4>)
 810b97a:	681b      	ldr	r3, [r3, #0]
 810b97c:	429a      	cmp	r2, r3
 810b97e:	d903      	bls.n	810b988 <prvAddNewTaskToReadyList+0x74>
 810b980:	687b      	ldr	r3, [r7, #4]
 810b982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b984:	4a18      	ldr	r2, [pc, #96]	; (810b9e8 <prvAddNewTaskToReadyList+0xd4>)
 810b986:	6013      	str	r3, [r2, #0]
 810b988:	687b      	ldr	r3, [r7, #4]
 810b98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b98c:	4613      	mov	r3, r2
 810b98e:	009b      	lsls	r3, r3, #2
 810b990:	4413      	add	r3, r2
 810b992:	009b      	lsls	r3, r3, #2
 810b994:	4a15      	ldr	r2, [pc, #84]	; (810b9ec <prvAddNewTaskToReadyList+0xd8>)
 810b996:	441a      	add	r2, r3
 810b998:	687b      	ldr	r3, [r7, #4]
 810b99a:	3304      	adds	r3, #4
 810b99c:	4619      	mov	r1, r3
 810b99e:	4610      	mov	r0, r2
 810b9a0:	f7fe fe71 	bl	810a686 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810b9a4:	f7ff f856 	bl	810aa54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810b9a8:	4b0d      	ldr	r3, [pc, #52]	; (810b9e0 <prvAddNewTaskToReadyList+0xcc>)
 810b9aa:	681b      	ldr	r3, [r3, #0]
 810b9ac:	2b00      	cmp	r3, #0
 810b9ae:	d00e      	beq.n	810b9ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810b9b0:	4b0a      	ldr	r3, [pc, #40]	; (810b9dc <prvAddNewTaskToReadyList+0xc8>)
 810b9b2:	681b      	ldr	r3, [r3, #0]
 810b9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b9b6:	687b      	ldr	r3, [r7, #4]
 810b9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b9ba:	429a      	cmp	r2, r3
 810b9bc:	d207      	bcs.n	810b9ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810b9be:	4b0c      	ldr	r3, [pc, #48]	; (810b9f0 <prvAddNewTaskToReadyList+0xdc>)
 810b9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b9c4:	601a      	str	r2, [r3, #0]
 810b9c6:	f3bf 8f4f 	dsb	sy
 810b9ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810b9ce:	bf00      	nop
 810b9d0:	3708      	adds	r7, #8
 810b9d2:	46bd      	mov	sp, r7
 810b9d4:	bd80      	pop	{r7, pc}
 810b9d6:	bf00      	nop
 810b9d8:	10004968 	.word	0x10004968
 810b9dc:	10004494 	.word	0x10004494
 810b9e0:	10004974 	.word	0x10004974
 810b9e4:	10004984 	.word	0x10004984
 810b9e8:	10004970 	.word	0x10004970
 810b9ec:	10004498 	.word	0x10004498
 810b9f0:	e000ed04 	.word	0xe000ed04

0810b9f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810b9f4:	b580      	push	{r7, lr}
 810b9f6:	b084      	sub	sp, #16
 810b9f8:	af00      	add	r7, sp, #0
 810b9fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810b9fc:	2300      	movs	r3, #0
 810b9fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810ba00:	687b      	ldr	r3, [r7, #4]
 810ba02:	2b00      	cmp	r3, #0
 810ba04:	d017      	beq.n	810ba36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810ba06:	4b13      	ldr	r3, [pc, #76]	; (810ba54 <vTaskDelay+0x60>)
 810ba08:	681b      	ldr	r3, [r3, #0]
 810ba0a:	2b00      	cmp	r3, #0
 810ba0c:	d00a      	beq.n	810ba24 <vTaskDelay+0x30>
	__asm volatile
 810ba0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ba12:	f383 8811 	msr	BASEPRI, r3
 810ba16:	f3bf 8f6f 	isb	sy
 810ba1a:	f3bf 8f4f 	dsb	sy
 810ba1e:	60bb      	str	r3, [r7, #8]
}
 810ba20:	bf00      	nop
 810ba22:	e7fe      	b.n	810ba22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810ba24:	f000 f88a 	bl	810bb3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810ba28:	2100      	movs	r1, #0
 810ba2a:	6878      	ldr	r0, [r7, #4]
 810ba2c:	f000 fcfe 	bl	810c42c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810ba30:	f000 f892 	bl	810bb58 <xTaskResumeAll>
 810ba34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810ba36:	68fb      	ldr	r3, [r7, #12]
 810ba38:	2b00      	cmp	r3, #0
 810ba3a:	d107      	bne.n	810ba4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 810ba3c:	4b06      	ldr	r3, [pc, #24]	; (810ba58 <vTaskDelay+0x64>)
 810ba3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ba42:	601a      	str	r2, [r3, #0]
 810ba44:	f3bf 8f4f 	dsb	sy
 810ba48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810ba4c:	bf00      	nop
 810ba4e:	3710      	adds	r7, #16
 810ba50:	46bd      	mov	sp, r7
 810ba52:	bd80      	pop	{r7, pc}
 810ba54:	10004990 	.word	0x10004990
 810ba58:	e000ed04 	.word	0xe000ed04

0810ba5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810ba5c:	b580      	push	{r7, lr}
 810ba5e:	b08a      	sub	sp, #40	; 0x28
 810ba60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810ba62:	2300      	movs	r3, #0
 810ba64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810ba66:	2300      	movs	r3, #0
 810ba68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810ba6a:	463a      	mov	r2, r7
 810ba6c:	1d39      	adds	r1, r7, #4
 810ba6e:	f107 0308 	add.w	r3, r7, #8
 810ba72:	4618      	mov	r0, r3
 810ba74:	f7fe fbbc 	bl	810a1f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810ba78:	6839      	ldr	r1, [r7, #0]
 810ba7a:	687b      	ldr	r3, [r7, #4]
 810ba7c:	68ba      	ldr	r2, [r7, #8]
 810ba7e:	9202      	str	r2, [sp, #8]
 810ba80:	9301      	str	r3, [sp, #4]
 810ba82:	2300      	movs	r3, #0
 810ba84:	9300      	str	r3, [sp, #0]
 810ba86:	2300      	movs	r3, #0
 810ba88:	460a      	mov	r2, r1
 810ba8a:	4924      	ldr	r1, [pc, #144]	; (810bb1c <vTaskStartScheduler+0xc0>)
 810ba8c:	4824      	ldr	r0, [pc, #144]	; (810bb20 <vTaskStartScheduler+0xc4>)
 810ba8e:	f7ff fdf9 	bl	810b684 <xTaskCreateStatic>
 810ba92:	4603      	mov	r3, r0
 810ba94:	4a23      	ldr	r2, [pc, #140]	; (810bb24 <vTaskStartScheduler+0xc8>)
 810ba96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810ba98:	4b22      	ldr	r3, [pc, #136]	; (810bb24 <vTaskStartScheduler+0xc8>)
 810ba9a:	681b      	ldr	r3, [r3, #0]
 810ba9c:	2b00      	cmp	r3, #0
 810ba9e:	d002      	beq.n	810baa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810baa0:	2301      	movs	r3, #1
 810baa2:	617b      	str	r3, [r7, #20]
 810baa4:	e001      	b.n	810baaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810baa6:	2300      	movs	r3, #0
 810baa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810baaa:	697b      	ldr	r3, [r7, #20]
 810baac:	2b01      	cmp	r3, #1
 810baae:	d102      	bne.n	810bab6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810bab0:	f000 fd10 	bl	810c4d4 <xTimerCreateTimerTask>
 810bab4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810bab6:	697b      	ldr	r3, [r7, #20]
 810bab8:	2b01      	cmp	r3, #1
 810baba:	d11b      	bne.n	810baf4 <vTaskStartScheduler+0x98>
	__asm volatile
 810babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bac0:	f383 8811 	msr	BASEPRI, r3
 810bac4:	f3bf 8f6f 	isb	sy
 810bac8:	f3bf 8f4f 	dsb	sy
 810bacc:	613b      	str	r3, [r7, #16]
}
 810bace:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810bad0:	4b15      	ldr	r3, [pc, #84]	; (810bb28 <vTaskStartScheduler+0xcc>)
 810bad2:	681b      	ldr	r3, [r3, #0]
 810bad4:	3354      	adds	r3, #84	; 0x54
 810bad6:	4a15      	ldr	r2, [pc, #84]	; (810bb2c <vTaskStartScheduler+0xd0>)
 810bad8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810bada:	4b15      	ldr	r3, [pc, #84]	; (810bb30 <vTaskStartScheduler+0xd4>)
 810badc:	f04f 32ff 	mov.w	r2, #4294967295
 810bae0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810bae2:	4b14      	ldr	r3, [pc, #80]	; (810bb34 <vTaskStartScheduler+0xd8>)
 810bae4:	2201      	movs	r2, #1
 810bae6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810bae8:	4b13      	ldr	r3, [pc, #76]	; (810bb38 <vTaskStartScheduler+0xdc>)
 810baea:	2200      	movs	r2, #0
 810baec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810baee:	f7fe fedf 	bl	810a8b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810baf2:	e00e      	b.n	810bb12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810baf4:	697b      	ldr	r3, [r7, #20]
 810baf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bafa:	d10a      	bne.n	810bb12 <vTaskStartScheduler+0xb6>
	__asm volatile
 810bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bb00:	f383 8811 	msr	BASEPRI, r3
 810bb04:	f3bf 8f6f 	isb	sy
 810bb08:	f3bf 8f4f 	dsb	sy
 810bb0c:	60fb      	str	r3, [r7, #12]
}
 810bb0e:	bf00      	nop
 810bb10:	e7fe      	b.n	810bb10 <vTaskStartScheduler+0xb4>
}
 810bb12:	bf00      	nop
 810bb14:	3718      	adds	r7, #24
 810bb16:	46bd      	mov	sp, r7
 810bb18:	bd80      	pop	{r7, pc}
 810bb1a:	bf00      	nop
 810bb1c:	0810cf20 	.word	0x0810cf20
 810bb20:	0810c161 	.word	0x0810c161
 810bb24:	1000498c 	.word	0x1000498c
 810bb28:	10004494 	.word	0x10004494
 810bb2c:	1000005c 	.word	0x1000005c
 810bb30:	10004988 	.word	0x10004988
 810bb34:	10004974 	.word	0x10004974
 810bb38:	1000496c 	.word	0x1000496c

0810bb3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810bb3c:	b480      	push	{r7}
 810bb3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810bb40:	4b04      	ldr	r3, [pc, #16]	; (810bb54 <vTaskSuspendAll+0x18>)
 810bb42:	681b      	ldr	r3, [r3, #0]
 810bb44:	3301      	adds	r3, #1
 810bb46:	4a03      	ldr	r2, [pc, #12]	; (810bb54 <vTaskSuspendAll+0x18>)
 810bb48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810bb4a:	bf00      	nop
 810bb4c:	46bd      	mov	sp, r7
 810bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb52:	4770      	bx	lr
 810bb54:	10004990 	.word	0x10004990

0810bb58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810bb58:	b580      	push	{r7, lr}
 810bb5a:	b084      	sub	sp, #16
 810bb5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810bb5e:	2300      	movs	r3, #0
 810bb60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810bb62:	2300      	movs	r3, #0
 810bb64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810bb66:	4b42      	ldr	r3, [pc, #264]	; (810bc70 <xTaskResumeAll+0x118>)
 810bb68:	681b      	ldr	r3, [r3, #0]
 810bb6a:	2b00      	cmp	r3, #0
 810bb6c:	d10a      	bne.n	810bb84 <xTaskResumeAll+0x2c>
	__asm volatile
 810bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bb72:	f383 8811 	msr	BASEPRI, r3
 810bb76:	f3bf 8f6f 	isb	sy
 810bb7a:	f3bf 8f4f 	dsb	sy
 810bb7e:	603b      	str	r3, [r7, #0]
}
 810bb80:	bf00      	nop
 810bb82:	e7fe      	b.n	810bb82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810bb84:	f7fe ff36 	bl	810a9f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810bb88:	4b39      	ldr	r3, [pc, #228]	; (810bc70 <xTaskResumeAll+0x118>)
 810bb8a:	681b      	ldr	r3, [r3, #0]
 810bb8c:	3b01      	subs	r3, #1
 810bb8e:	4a38      	ldr	r2, [pc, #224]	; (810bc70 <xTaskResumeAll+0x118>)
 810bb90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810bb92:	4b37      	ldr	r3, [pc, #220]	; (810bc70 <xTaskResumeAll+0x118>)
 810bb94:	681b      	ldr	r3, [r3, #0]
 810bb96:	2b00      	cmp	r3, #0
 810bb98:	d162      	bne.n	810bc60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810bb9a:	4b36      	ldr	r3, [pc, #216]	; (810bc74 <xTaskResumeAll+0x11c>)
 810bb9c:	681b      	ldr	r3, [r3, #0]
 810bb9e:	2b00      	cmp	r3, #0
 810bba0:	d05e      	beq.n	810bc60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810bba2:	e02f      	b.n	810bc04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810bba4:	4b34      	ldr	r3, [pc, #208]	; (810bc78 <xTaskResumeAll+0x120>)
 810bba6:	68db      	ldr	r3, [r3, #12]
 810bba8:	68db      	ldr	r3, [r3, #12]
 810bbaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810bbac:	68fb      	ldr	r3, [r7, #12]
 810bbae:	3318      	adds	r3, #24
 810bbb0:	4618      	mov	r0, r3
 810bbb2:	f7fe fdc5 	bl	810a740 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810bbb6:	68fb      	ldr	r3, [r7, #12]
 810bbb8:	3304      	adds	r3, #4
 810bbba:	4618      	mov	r0, r3
 810bbbc:	f7fe fdc0 	bl	810a740 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810bbc0:	68fb      	ldr	r3, [r7, #12]
 810bbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bbc4:	4b2d      	ldr	r3, [pc, #180]	; (810bc7c <xTaskResumeAll+0x124>)
 810bbc6:	681b      	ldr	r3, [r3, #0]
 810bbc8:	429a      	cmp	r2, r3
 810bbca:	d903      	bls.n	810bbd4 <xTaskResumeAll+0x7c>
 810bbcc:	68fb      	ldr	r3, [r7, #12]
 810bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bbd0:	4a2a      	ldr	r2, [pc, #168]	; (810bc7c <xTaskResumeAll+0x124>)
 810bbd2:	6013      	str	r3, [r2, #0]
 810bbd4:	68fb      	ldr	r3, [r7, #12]
 810bbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bbd8:	4613      	mov	r3, r2
 810bbda:	009b      	lsls	r3, r3, #2
 810bbdc:	4413      	add	r3, r2
 810bbde:	009b      	lsls	r3, r3, #2
 810bbe0:	4a27      	ldr	r2, [pc, #156]	; (810bc80 <xTaskResumeAll+0x128>)
 810bbe2:	441a      	add	r2, r3
 810bbe4:	68fb      	ldr	r3, [r7, #12]
 810bbe6:	3304      	adds	r3, #4
 810bbe8:	4619      	mov	r1, r3
 810bbea:	4610      	mov	r0, r2
 810bbec:	f7fe fd4b 	bl	810a686 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810bbf0:	68fb      	ldr	r3, [r7, #12]
 810bbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bbf4:	4b23      	ldr	r3, [pc, #140]	; (810bc84 <xTaskResumeAll+0x12c>)
 810bbf6:	681b      	ldr	r3, [r3, #0]
 810bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bbfa:	429a      	cmp	r2, r3
 810bbfc:	d302      	bcc.n	810bc04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 810bbfe:	4b22      	ldr	r3, [pc, #136]	; (810bc88 <xTaskResumeAll+0x130>)
 810bc00:	2201      	movs	r2, #1
 810bc02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810bc04:	4b1c      	ldr	r3, [pc, #112]	; (810bc78 <xTaskResumeAll+0x120>)
 810bc06:	681b      	ldr	r3, [r3, #0]
 810bc08:	2b00      	cmp	r3, #0
 810bc0a:	d1cb      	bne.n	810bba4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810bc0c:	68fb      	ldr	r3, [r7, #12]
 810bc0e:	2b00      	cmp	r3, #0
 810bc10:	d001      	beq.n	810bc16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810bc12:	f000 fb5f 	bl	810c2d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810bc16:	4b1d      	ldr	r3, [pc, #116]	; (810bc8c <xTaskResumeAll+0x134>)
 810bc18:	681b      	ldr	r3, [r3, #0]
 810bc1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810bc1c:	687b      	ldr	r3, [r7, #4]
 810bc1e:	2b00      	cmp	r3, #0
 810bc20:	d010      	beq.n	810bc44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810bc22:	f000 f847 	bl	810bcb4 <xTaskIncrementTick>
 810bc26:	4603      	mov	r3, r0
 810bc28:	2b00      	cmp	r3, #0
 810bc2a:	d002      	beq.n	810bc32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 810bc2c:	4b16      	ldr	r3, [pc, #88]	; (810bc88 <xTaskResumeAll+0x130>)
 810bc2e:	2201      	movs	r2, #1
 810bc30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810bc32:	687b      	ldr	r3, [r7, #4]
 810bc34:	3b01      	subs	r3, #1
 810bc36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810bc38:	687b      	ldr	r3, [r7, #4]
 810bc3a:	2b00      	cmp	r3, #0
 810bc3c:	d1f1      	bne.n	810bc22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 810bc3e:	4b13      	ldr	r3, [pc, #76]	; (810bc8c <xTaskResumeAll+0x134>)
 810bc40:	2200      	movs	r2, #0
 810bc42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810bc44:	4b10      	ldr	r3, [pc, #64]	; (810bc88 <xTaskResumeAll+0x130>)
 810bc46:	681b      	ldr	r3, [r3, #0]
 810bc48:	2b00      	cmp	r3, #0
 810bc4a:	d009      	beq.n	810bc60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810bc4c:	2301      	movs	r3, #1
 810bc4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810bc50:	4b0f      	ldr	r3, [pc, #60]	; (810bc90 <xTaskResumeAll+0x138>)
 810bc52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810bc56:	601a      	str	r2, [r3, #0]
 810bc58:	f3bf 8f4f 	dsb	sy
 810bc5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810bc60:	f7fe fef8 	bl	810aa54 <vPortExitCritical>

	return xAlreadyYielded;
 810bc64:	68bb      	ldr	r3, [r7, #8]
}
 810bc66:	4618      	mov	r0, r3
 810bc68:	3710      	adds	r7, #16
 810bc6a:	46bd      	mov	sp, r7
 810bc6c:	bd80      	pop	{r7, pc}
 810bc6e:	bf00      	nop
 810bc70:	10004990 	.word	0x10004990
 810bc74:	10004968 	.word	0x10004968
 810bc78:	10004928 	.word	0x10004928
 810bc7c:	10004970 	.word	0x10004970
 810bc80:	10004498 	.word	0x10004498
 810bc84:	10004494 	.word	0x10004494
 810bc88:	1000497c 	.word	0x1000497c
 810bc8c:	10004978 	.word	0x10004978
 810bc90:	e000ed04 	.word	0xe000ed04

0810bc94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810bc94:	b480      	push	{r7}
 810bc96:	b083      	sub	sp, #12
 810bc98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810bc9a:	4b05      	ldr	r3, [pc, #20]	; (810bcb0 <xTaskGetTickCount+0x1c>)
 810bc9c:	681b      	ldr	r3, [r3, #0]
 810bc9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810bca0:	687b      	ldr	r3, [r7, #4]
}
 810bca2:	4618      	mov	r0, r3
 810bca4:	370c      	adds	r7, #12
 810bca6:	46bd      	mov	sp, r7
 810bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcac:	4770      	bx	lr
 810bcae:	bf00      	nop
 810bcb0:	1000496c 	.word	0x1000496c

0810bcb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810bcb4:	b580      	push	{r7, lr}
 810bcb6:	b086      	sub	sp, #24
 810bcb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810bcba:	2300      	movs	r3, #0
 810bcbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810bcbe:	4b4f      	ldr	r3, [pc, #316]	; (810bdfc <xTaskIncrementTick+0x148>)
 810bcc0:	681b      	ldr	r3, [r3, #0]
 810bcc2:	2b00      	cmp	r3, #0
 810bcc4:	f040 808f 	bne.w	810bde6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810bcc8:	4b4d      	ldr	r3, [pc, #308]	; (810be00 <xTaskIncrementTick+0x14c>)
 810bcca:	681b      	ldr	r3, [r3, #0]
 810bccc:	3301      	adds	r3, #1
 810bcce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810bcd0:	4a4b      	ldr	r2, [pc, #300]	; (810be00 <xTaskIncrementTick+0x14c>)
 810bcd2:	693b      	ldr	r3, [r7, #16]
 810bcd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810bcd6:	693b      	ldr	r3, [r7, #16]
 810bcd8:	2b00      	cmp	r3, #0
 810bcda:	d120      	bne.n	810bd1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 810bcdc:	4b49      	ldr	r3, [pc, #292]	; (810be04 <xTaskIncrementTick+0x150>)
 810bcde:	681b      	ldr	r3, [r3, #0]
 810bce0:	681b      	ldr	r3, [r3, #0]
 810bce2:	2b00      	cmp	r3, #0
 810bce4:	d00a      	beq.n	810bcfc <xTaskIncrementTick+0x48>
	__asm volatile
 810bce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bcea:	f383 8811 	msr	BASEPRI, r3
 810bcee:	f3bf 8f6f 	isb	sy
 810bcf2:	f3bf 8f4f 	dsb	sy
 810bcf6:	603b      	str	r3, [r7, #0]
}
 810bcf8:	bf00      	nop
 810bcfa:	e7fe      	b.n	810bcfa <xTaskIncrementTick+0x46>
 810bcfc:	4b41      	ldr	r3, [pc, #260]	; (810be04 <xTaskIncrementTick+0x150>)
 810bcfe:	681b      	ldr	r3, [r3, #0]
 810bd00:	60fb      	str	r3, [r7, #12]
 810bd02:	4b41      	ldr	r3, [pc, #260]	; (810be08 <xTaskIncrementTick+0x154>)
 810bd04:	681b      	ldr	r3, [r3, #0]
 810bd06:	4a3f      	ldr	r2, [pc, #252]	; (810be04 <xTaskIncrementTick+0x150>)
 810bd08:	6013      	str	r3, [r2, #0]
 810bd0a:	4a3f      	ldr	r2, [pc, #252]	; (810be08 <xTaskIncrementTick+0x154>)
 810bd0c:	68fb      	ldr	r3, [r7, #12]
 810bd0e:	6013      	str	r3, [r2, #0]
 810bd10:	4b3e      	ldr	r3, [pc, #248]	; (810be0c <xTaskIncrementTick+0x158>)
 810bd12:	681b      	ldr	r3, [r3, #0]
 810bd14:	3301      	adds	r3, #1
 810bd16:	4a3d      	ldr	r2, [pc, #244]	; (810be0c <xTaskIncrementTick+0x158>)
 810bd18:	6013      	str	r3, [r2, #0]
 810bd1a:	f000 fadb 	bl	810c2d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810bd1e:	4b3c      	ldr	r3, [pc, #240]	; (810be10 <xTaskIncrementTick+0x15c>)
 810bd20:	681b      	ldr	r3, [r3, #0]
 810bd22:	693a      	ldr	r2, [r7, #16]
 810bd24:	429a      	cmp	r2, r3
 810bd26:	d349      	bcc.n	810bdbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810bd28:	4b36      	ldr	r3, [pc, #216]	; (810be04 <xTaskIncrementTick+0x150>)
 810bd2a:	681b      	ldr	r3, [r3, #0]
 810bd2c:	681b      	ldr	r3, [r3, #0]
 810bd2e:	2b00      	cmp	r3, #0
 810bd30:	d104      	bne.n	810bd3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810bd32:	4b37      	ldr	r3, [pc, #220]	; (810be10 <xTaskIncrementTick+0x15c>)
 810bd34:	f04f 32ff 	mov.w	r2, #4294967295
 810bd38:	601a      	str	r2, [r3, #0]
					break;
 810bd3a:	e03f      	b.n	810bdbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810bd3c:	4b31      	ldr	r3, [pc, #196]	; (810be04 <xTaskIncrementTick+0x150>)
 810bd3e:	681b      	ldr	r3, [r3, #0]
 810bd40:	68db      	ldr	r3, [r3, #12]
 810bd42:	68db      	ldr	r3, [r3, #12]
 810bd44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810bd46:	68bb      	ldr	r3, [r7, #8]
 810bd48:	685b      	ldr	r3, [r3, #4]
 810bd4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810bd4c:	693a      	ldr	r2, [r7, #16]
 810bd4e:	687b      	ldr	r3, [r7, #4]
 810bd50:	429a      	cmp	r2, r3
 810bd52:	d203      	bcs.n	810bd5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810bd54:	4a2e      	ldr	r2, [pc, #184]	; (810be10 <xTaskIncrementTick+0x15c>)
 810bd56:	687b      	ldr	r3, [r7, #4]
 810bd58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810bd5a:	e02f      	b.n	810bdbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810bd5c:	68bb      	ldr	r3, [r7, #8]
 810bd5e:	3304      	adds	r3, #4
 810bd60:	4618      	mov	r0, r3
 810bd62:	f7fe fced 	bl	810a740 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810bd66:	68bb      	ldr	r3, [r7, #8]
 810bd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bd6a:	2b00      	cmp	r3, #0
 810bd6c:	d004      	beq.n	810bd78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810bd6e:	68bb      	ldr	r3, [r7, #8]
 810bd70:	3318      	adds	r3, #24
 810bd72:	4618      	mov	r0, r3
 810bd74:	f7fe fce4 	bl	810a740 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810bd78:	68bb      	ldr	r3, [r7, #8]
 810bd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bd7c:	4b25      	ldr	r3, [pc, #148]	; (810be14 <xTaskIncrementTick+0x160>)
 810bd7e:	681b      	ldr	r3, [r3, #0]
 810bd80:	429a      	cmp	r2, r3
 810bd82:	d903      	bls.n	810bd8c <xTaskIncrementTick+0xd8>
 810bd84:	68bb      	ldr	r3, [r7, #8]
 810bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bd88:	4a22      	ldr	r2, [pc, #136]	; (810be14 <xTaskIncrementTick+0x160>)
 810bd8a:	6013      	str	r3, [r2, #0]
 810bd8c:	68bb      	ldr	r3, [r7, #8]
 810bd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bd90:	4613      	mov	r3, r2
 810bd92:	009b      	lsls	r3, r3, #2
 810bd94:	4413      	add	r3, r2
 810bd96:	009b      	lsls	r3, r3, #2
 810bd98:	4a1f      	ldr	r2, [pc, #124]	; (810be18 <xTaskIncrementTick+0x164>)
 810bd9a:	441a      	add	r2, r3
 810bd9c:	68bb      	ldr	r3, [r7, #8]
 810bd9e:	3304      	adds	r3, #4
 810bda0:	4619      	mov	r1, r3
 810bda2:	4610      	mov	r0, r2
 810bda4:	f7fe fc6f 	bl	810a686 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810bda8:	68bb      	ldr	r3, [r7, #8]
 810bdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bdac:	4b1b      	ldr	r3, [pc, #108]	; (810be1c <xTaskIncrementTick+0x168>)
 810bdae:	681b      	ldr	r3, [r3, #0]
 810bdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bdb2:	429a      	cmp	r2, r3
 810bdb4:	d3b8      	bcc.n	810bd28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 810bdb6:	2301      	movs	r3, #1
 810bdb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810bdba:	e7b5      	b.n	810bd28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810bdbc:	4b17      	ldr	r3, [pc, #92]	; (810be1c <xTaskIncrementTick+0x168>)
 810bdbe:	681b      	ldr	r3, [r3, #0]
 810bdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bdc2:	4915      	ldr	r1, [pc, #84]	; (810be18 <xTaskIncrementTick+0x164>)
 810bdc4:	4613      	mov	r3, r2
 810bdc6:	009b      	lsls	r3, r3, #2
 810bdc8:	4413      	add	r3, r2
 810bdca:	009b      	lsls	r3, r3, #2
 810bdcc:	440b      	add	r3, r1
 810bdce:	681b      	ldr	r3, [r3, #0]
 810bdd0:	2b01      	cmp	r3, #1
 810bdd2:	d901      	bls.n	810bdd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 810bdd4:	2301      	movs	r3, #1
 810bdd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810bdd8:	4b11      	ldr	r3, [pc, #68]	; (810be20 <xTaskIncrementTick+0x16c>)
 810bdda:	681b      	ldr	r3, [r3, #0]
 810bddc:	2b00      	cmp	r3, #0
 810bdde:	d007      	beq.n	810bdf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 810bde0:	2301      	movs	r3, #1
 810bde2:	617b      	str	r3, [r7, #20]
 810bde4:	e004      	b.n	810bdf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810bde6:	4b0f      	ldr	r3, [pc, #60]	; (810be24 <xTaskIncrementTick+0x170>)
 810bde8:	681b      	ldr	r3, [r3, #0]
 810bdea:	3301      	adds	r3, #1
 810bdec:	4a0d      	ldr	r2, [pc, #52]	; (810be24 <xTaskIncrementTick+0x170>)
 810bdee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810bdf0:	697b      	ldr	r3, [r7, #20]
}
 810bdf2:	4618      	mov	r0, r3
 810bdf4:	3718      	adds	r7, #24
 810bdf6:	46bd      	mov	sp, r7
 810bdf8:	bd80      	pop	{r7, pc}
 810bdfa:	bf00      	nop
 810bdfc:	10004990 	.word	0x10004990
 810be00:	1000496c 	.word	0x1000496c
 810be04:	10004920 	.word	0x10004920
 810be08:	10004924 	.word	0x10004924
 810be0c:	10004980 	.word	0x10004980
 810be10:	10004988 	.word	0x10004988
 810be14:	10004970 	.word	0x10004970
 810be18:	10004498 	.word	0x10004498
 810be1c:	10004494 	.word	0x10004494
 810be20:	1000497c 	.word	0x1000497c
 810be24:	10004978 	.word	0x10004978

0810be28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810be28:	b480      	push	{r7}
 810be2a:	b085      	sub	sp, #20
 810be2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810be2e:	4b2a      	ldr	r3, [pc, #168]	; (810bed8 <vTaskSwitchContext+0xb0>)
 810be30:	681b      	ldr	r3, [r3, #0]
 810be32:	2b00      	cmp	r3, #0
 810be34:	d003      	beq.n	810be3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810be36:	4b29      	ldr	r3, [pc, #164]	; (810bedc <vTaskSwitchContext+0xb4>)
 810be38:	2201      	movs	r2, #1
 810be3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810be3c:	e046      	b.n	810becc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 810be3e:	4b27      	ldr	r3, [pc, #156]	; (810bedc <vTaskSwitchContext+0xb4>)
 810be40:	2200      	movs	r2, #0
 810be42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810be44:	4b26      	ldr	r3, [pc, #152]	; (810bee0 <vTaskSwitchContext+0xb8>)
 810be46:	681b      	ldr	r3, [r3, #0]
 810be48:	60fb      	str	r3, [r7, #12]
 810be4a:	e010      	b.n	810be6e <vTaskSwitchContext+0x46>
 810be4c:	68fb      	ldr	r3, [r7, #12]
 810be4e:	2b00      	cmp	r3, #0
 810be50:	d10a      	bne.n	810be68 <vTaskSwitchContext+0x40>
	__asm volatile
 810be52:	f04f 0350 	mov.w	r3, #80	; 0x50
 810be56:	f383 8811 	msr	BASEPRI, r3
 810be5a:	f3bf 8f6f 	isb	sy
 810be5e:	f3bf 8f4f 	dsb	sy
 810be62:	607b      	str	r3, [r7, #4]
}
 810be64:	bf00      	nop
 810be66:	e7fe      	b.n	810be66 <vTaskSwitchContext+0x3e>
 810be68:	68fb      	ldr	r3, [r7, #12]
 810be6a:	3b01      	subs	r3, #1
 810be6c:	60fb      	str	r3, [r7, #12]
 810be6e:	491d      	ldr	r1, [pc, #116]	; (810bee4 <vTaskSwitchContext+0xbc>)
 810be70:	68fa      	ldr	r2, [r7, #12]
 810be72:	4613      	mov	r3, r2
 810be74:	009b      	lsls	r3, r3, #2
 810be76:	4413      	add	r3, r2
 810be78:	009b      	lsls	r3, r3, #2
 810be7a:	440b      	add	r3, r1
 810be7c:	681b      	ldr	r3, [r3, #0]
 810be7e:	2b00      	cmp	r3, #0
 810be80:	d0e4      	beq.n	810be4c <vTaskSwitchContext+0x24>
 810be82:	68fa      	ldr	r2, [r7, #12]
 810be84:	4613      	mov	r3, r2
 810be86:	009b      	lsls	r3, r3, #2
 810be88:	4413      	add	r3, r2
 810be8a:	009b      	lsls	r3, r3, #2
 810be8c:	4a15      	ldr	r2, [pc, #84]	; (810bee4 <vTaskSwitchContext+0xbc>)
 810be8e:	4413      	add	r3, r2
 810be90:	60bb      	str	r3, [r7, #8]
 810be92:	68bb      	ldr	r3, [r7, #8]
 810be94:	685b      	ldr	r3, [r3, #4]
 810be96:	685a      	ldr	r2, [r3, #4]
 810be98:	68bb      	ldr	r3, [r7, #8]
 810be9a:	605a      	str	r2, [r3, #4]
 810be9c:	68bb      	ldr	r3, [r7, #8]
 810be9e:	685a      	ldr	r2, [r3, #4]
 810bea0:	68bb      	ldr	r3, [r7, #8]
 810bea2:	3308      	adds	r3, #8
 810bea4:	429a      	cmp	r2, r3
 810bea6:	d104      	bne.n	810beb2 <vTaskSwitchContext+0x8a>
 810bea8:	68bb      	ldr	r3, [r7, #8]
 810beaa:	685b      	ldr	r3, [r3, #4]
 810beac:	685a      	ldr	r2, [r3, #4]
 810beae:	68bb      	ldr	r3, [r7, #8]
 810beb0:	605a      	str	r2, [r3, #4]
 810beb2:	68bb      	ldr	r3, [r7, #8]
 810beb4:	685b      	ldr	r3, [r3, #4]
 810beb6:	68db      	ldr	r3, [r3, #12]
 810beb8:	4a0b      	ldr	r2, [pc, #44]	; (810bee8 <vTaskSwitchContext+0xc0>)
 810beba:	6013      	str	r3, [r2, #0]
 810bebc:	4a08      	ldr	r2, [pc, #32]	; (810bee0 <vTaskSwitchContext+0xb8>)
 810bebe:	68fb      	ldr	r3, [r7, #12]
 810bec0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810bec2:	4b09      	ldr	r3, [pc, #36]	; (810bee8 <vTaskSwitchContext+0xc0>)
 810bec4:	681b      	ldr	r3, [r3, #0]
 810bec6:	3354      	adds	r3, #84	; 0x54
 810bec8:	4a08      	ldr	r2, [pc, #32]	; (810beec <vTaskSwitchContext+0xc4>)
 810beca:	6013      	str	r3, [r2, #0]
}
 810becc:	bf00      	nop
 810bece:	3714      	adds	r7, #20
 810bed0:	46bd      	mov	sp, r7
 810bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bed6:	4770      	bx	lr
 810bed8:	10004990 	.word	0x10004990
 810bedc:	1000497c 	.word	0x1000497c
 810bee0:	10004970 	.word	0x10004970
 810bee4:	10004498 	.word	0x10004498
 810bee8:	10004494 	.word	0x10004494
 810beec:	1000005c 	.word	0x1000005c

0810bef0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810bef0:	b580      	push	{r7, lr}
 810bef2:	b084      	sub	sp, #16
 810bef4:	af00      	add	r7, sp, #0
 810bef6:	6078      	str	r0, [r7, #4]
 810bef8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810befa:	687b      	ldr	r3, [r7, #4]
 810befc:	2b00      	cmp	r3, #0
 810befe:	d10a      	bne.n	810bf16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 810bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bf04:	f383 8811 	msr	BASEPRI, r3
 810bf08:	f3bf 8f6f 	isb	sy
 810bf0c:	f3bf 8f4f 	dsb	sy
 810bf10:	60fb      	str	r3, [r7, #12]
}
 810bf12:	bf00      	nop
 810bf14:	e7fe      	b.n	810bf14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810bf16:	4b07      	ldr	r3, [pc, #28]	; (810bf34 <vTaskPlaceOnEventList+0x44>)
 810bf18:	681b      	ldr	r3, [r3, #0]
 810bf1a:	3318      	adds	r3, #24
 810bf1c:	4619      	mov	r1, r3
 810bf1e:	6878      	ldr	r0, [r7, #4]
 810bf20:	f7fe fbd5 	bl	810a6ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810bf24:	2101      	movs	r1, #1
 810bf26:	6838      	ldr	r0, [r7, #0]
 810bf28:	f000 fa80 	bl	810c42c <prvAddCurrentTaskToDelayedList>
}
 810bf2c:	bf00      	nop
 810bf2e:	3710      	adds	r7, #16
 810bf30:	46bd      	mov	sp, r7
 810bf32:	bd80      	pop	{r7, pc}
 810bf34:	10004494 	.word	0x10004494

0810bf38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810bf38:	b580      	push	{r7, lr}
 810bf3a:	b086      	sub	sp, #24
 810bf3c:	af00      	add	r7, sp, #0
 810bf3e:	60f8      	str	r0, [r7, #12]
 810bf40:	60b9      	str	r1, [r7, #8]
 810bf42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810bf44:	68fb      	ldr	r3, [r7, #12]
 810bf46:	2b00      	cmp	r3, #0
 810bf48:	d10a      	bne.n	810bf60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 810bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bf4e:	f383 8811 	msr	BASEPRI, r3
 810bf52:	f3bf 8f6f 	isb	sy
 810bf56:	f3bf 8f4f 	dsb	sy
 810bf5a:	617b      	str	r3, [r7, #20]
}
 810bf5c:	bf00      	nop
 810bf5e:	e7fe      	b.n	810bf5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810bf60:	4b0a      	ldr	r3, [pc, #40]	; (810bf8c <vTaskPlaceOnEventListRestricted+0x54>)
 810bf62:	681b      	ldr	r3, [r3, #0]
 810bf64:	3318      	adds	r3, #24
 810bf66:	4619      	mov	r1, r3
 810bf68:	68f8      	ldr	r0, [r7, #12]
 810bf6a:	f7fe fb8c 	bl	810a686 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810bf6e:	687b      	ldr	r3, [r7, #4]
 810bf70:	2b00      	cmp	r3, #0
 810bf72:	d002      	beq.n	810bf7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 810bf74:	f04f 33ff 	mov.w	r3, #4294967295
 810bf78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810bf7a:	6879      	ldr	r1, [r7, #4]
 810bf7c:	68b8      	ldr	r0, [r7, #8]
 810bf7e:	f000 fa55 	bl	810c42c <prvAddCurrentTaskToDelayedList>
	}
 810bf82:	bf00      	nop
 810bf84:	3718      	adds	r7, #24
 810bf86:	46bd      	mov	sp, r7
 810bf88:	bd80      	pop	{r7, pc}
 810bf8a:	bf00      	nop
 810bf8c:	10004494 	.word	0x10004494

0810bf90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810bf90:	b580      	push	{r7, lr}
 810bf92:	b086      	sub	sp, #24
 810bf94:	af00      	add	r7, sp, #0
 810bf96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810bf98:	687b      	ldr	r3, [r7, #4]
 810bf9a:	68db      	ldr	r3, [r3, #12]
 810bf9c:	68db      	ldr	r3, [r3, #12]
 810bf9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810bfa0:	693b      	ldr	r3, [r7, #16]
 810bfa2:	2b00      	cmp	r3, #0
 810bfa4:	d10a      	bne.n	810bfbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 810bfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bfaa:	f383 8811 	msr	BASEPRI, r3
 810bfae:	f3bf 8f6f 	isb	sy
 810bfb2:	f3bf 8f4f 	dsb	sy
 810bfb6:	60fb      	str	r3, [r7, #12]
}
 810bfb8:	bf00      	nop
 810bfba:	e7fe      	b.n	810bfba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810bfbc:	693b      	ldr	r3, [r7, #16]
 810bfbe:	3318      	adds	r3, #24
 810bfc0:	4618      	mov	r0, r3
 810bfc2:	f7fe fbbd 	bl	810a740 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810bfc6:	4b1e      	ldr	r3, [pc, #120]	; (810c040 <xTaskRemoveFromEventList+0xb0>)
 810bfc8:	681b      	ldr	r3, [r3, #0]
 810bfca:	2b00      	cmp	r3, #0
 810bfcc:	d11d      	bne.n	810c00a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810bfce:	693b      	ldr	r3, [r7, #16]
 810bfd0:	3304      	adds	r3, #4
 810bfd2:	4618      	mov	r0, r3
 810bfd4:	f7fe fbb4 	bl	810a740 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810bfd8:	693b      	ldr	r3, [r7, #16]
 810bfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bfdc:	4b19      	ldr	r3, [pc, #100]	; (810c044 <xTaskRemoveFromEventList+0xb4>)
 810bfde:	681b      	ldr	r3, [r3, #0]
 810bfe0:	429a      	cmp	r2, r3
 810bfe2:	d903      	bls.n	810bfec <xTaskRemoveFromEventList+0x5c>
 810bfe4:	693b      	ldr	r3, [r7, #16]
 810bfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bfe8:	4a16      	ldr	r2, [pc, #88]	; (810c044 <xTaskRemoveFromEventList+0xb4>)
 810bfea:	6013      	str	r3, [r2, #0]
 810bfec:	693b      	ldr	r3, [r7, #16]
 810bfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bff0:	4613      	mov	r3, r2
 810bff2:	009b      	lsls	r3, r3, #2
 810bff4:	4413      	add	r3, r2
 810bff6:	009b      	lsls	r3, r3, #2
 810bff8:	4a13      	ldr	r2, [pc, #76]	; (810c048 <xTaskRemoveFromEventList+0xb8>)
 810bffa:	441a      	add	r2, r3
 810bffc:	693b      	ldr	r3, [r7, #16]
 810bffe:	3304      	adds	r3, #4
 810c000:	4619      	mov	r1, r3
 810c002:	4610      	mov	r0, r2
 810c004:	f7fe fb3f 	bl	810a686 <vListInsertEnd>
 810c008:	e005      	b.n	810c016 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810c00a:	693b      	ldr	r3, [r7, #16]
 810c00c:	3318      	adds	r3, #24
 810c00e:	4619      	mov	r1, r3
 810c010:	480e      	ldr	r0, [pc, #56]	; (810c04c <xTaskRemoveFromEventList+0xbc>)
 810c012:	f7fe fb38 	bl	810a686 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810c016:	693b      	ldr	r3, [r7, #16]
 810c018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c01a:	4b0d      	ldr	r3, [pc, #52]	; (810c050 <xTaskRemoveFromEventList+0xc0>)
 810c01c:	681b      	ldr	r3, [r3, #0]
 810c01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c020:	429a      	cmp	r2, r3
 810c022:	d905      	bls.n	810c030 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810c024:	2301      	movs	r3, #1
 810c026:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810c028:	4b0a      	ldr	r3, [pc, #40]	; (810c054 <xTaskRemoveFromEventList+0xc4>)
 810c02a:	2201      	movs	r2, #1
 810c02c:	601a      	str	r2, [r3, #0]
 810c02e:	e001      	b.n	810c034 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 810c030:	2300      	movs	r3, #0
 810c032:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810c034:	697b      	ldr	r3, [r7, #20]
}
 810c036:	4618      	mov	r0, r3
 810c038:	3718      	adds	r7, #24
 810c03a:	46bd      	mov	sp, r7
 810c03c:	bd80      	pop	{r7, pc}
 810c03e:	bf00      	nop
 810c040:	10004990 	.word	0x10004990
 810c044:	10004970 	.word	0x10004970
 810c048:	10004498 	.word	0x10004498
 810c04c:	10004928 	.word	0x10004928
 810c050:	10004494 	.word	0x10004494
 810c054:	1000497c 	.word	0x1000497c

0810c058 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810c058:	b480      	push	{r7}
 810c05a:	b083      	sub	sp, #12
 810c05c:	af00      	add	r7, sp, #0
 810c05e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810c060:	4b06      	ldr	r3, [pc, #24]	; (810c07c <vTaskInternalSetTimeOutState+0x24>)
 810c062:	681a      	ldr	r2, [r3, #0]
 810c064:	687b      	ldr	r3, [r7, #4]
 810c066:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810c068:	4b05      	ldr	r3, [pc, #20]	; (810c080 <vTaskInternalSetTimeOutState+0x28>)
 810c06a:	681a      	ldr	r2, [r3, #0]
 810c06c:	687b      	ldr	r3, [r7, #4]
 810c06e:	605a      	str	r2, [r3, #4]
}
 810c070:	bf00      	nop
 810c072:	370c      	adds	r7, #12
 810c074:	46bd      	mov	sp, r7
 810c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c07a:	4770      	bx	lr
 810c07c:	10004980 	.word	0x10004980
 810c080:	1000496c 	.word	0x1000496c

0810c084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810c084:	b580      	push	{r7, lr}
 810c086:	b088      	sub	sp, #32
 810c088:	af00      	add	r7, sp, #0
 810c08a:	6078      	str	r0, [r7, #4]
 810c08c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810c08e:	687b      	ldr	r3, [r7, #4]
 810c090:	2b00      	cmp	r3, #0
 810c092:	d10a      	bne.n	810c0aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 810c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c098:	f383 8811 	msr	BASEPRI, r3
 810c09c:	f3bf 8f6f 	isb	sy
 810c0a0:	f3bf 8f4f 	dsb	sy
 810c0a4:	613b      	str	r3, [r7, #16]
}
 810c0a6:	bf00      	nop
 810c0a8:	e7fe      	b.n	810c0a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810c0aa:	683b      	ldr	r3, [r7, #0]
 810c0ac:	2b00      	cmp	r3, #0
 810c0ae:	d10a      	bne.n	810c0c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c0b4:	f383 8811 	msr	BASEPRI, r3
 810c0b8:	f3bf 8f6f 	isb	sy
 810c0bc:	f3bf 8f4f 	dsb	sy
 810c0c0:	60fb      	str	r3, [r7, #12]
}
 810c0c2:	bf00      	nop
 810c0c4:	e7fe      	b.n	810c0c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 810c0c6:	f7fe fc95 	bl	810a9f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810c0ca:	4b1d      	ldr	r3, [pc, #116]	; (810c140 <xTaskCheckForTimeOut+0xbc>)
 810c0cc:	681b      	ldr	r3, [r3, #0]
 810c0ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810c0d0:	687b      	ldr	r3, [r7, #4]
 810c0d2:	685b      	ldr	r3, [r3, #4]
 810c0d4:	69ba      	ldr	r2, [r7, #24]
 810c0d6:	1ad3      	subs	r3, r2, r3
 810c0d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810c0da:	683b      	ldr	r3, [r7, #0]
 810c0dc:	681b      	ldr	r3, [r3, #0]
 810c0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c0e2:	d102      	bne.n	810c0ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810c0e4:	2300      	movs	r3, #0
 810c0e6:	61fb      	str	r3, [r7, #28]
 810c0e8:	e023      	b.n	810c132 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810c0ea:	687b      	ldr	r3, [r7, #4]
 810c0ec:	681a      	ldr	r2, [r3, #0]
 810c0ee:	4b15      	ldr	r3, [pc, #84]	; (810c144 <xTaskCheckForTimeOut+0xc0>)
 810c0f0:	681b      	ldr	r3, [r3, #0]
 810c0f2:	429a      	cmp	r2, r3
 810c0f4:	d007      	beq.n	810c106 <xTaskCheckForTimeOut+0x82>
 810c0f6:	687b      	ldr	r3, [r7, #4]
 810c0f8:	685b      	ldr	r3, [r3, #4]
 810c0fa:	69ba      	ldr	r2, [r7, #24]
 810c0fc:	429a      	cmp	r2, r3
 810c0fe:	d302      	bcc.n	810c106 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810c100:	2301      	movs	r3, #1
 810c102:	61fb      	str	r3, [r7, #28]
 810c104:	e015      	b.n	810c132 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810c106:	683b      	ldr	r3, [r7, #0]
 810c108:	681b      	ldr	r3, [r3, #0]
 810c10a:	697a      	ldr	r2, [r7, #20]
 810c10c:	429a      	cmp	r2, r3
 810c10e:	d20b      	bcs.n	810c128 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810c110:	683b      	ldr	r3, [r7, #0]
 810c112:	681a      	ldr	r2, [r3, #0]
 810c114:	697b      	ldr	r3, [r7, #20]
 810c116:	1ad2      	subs	r2, r2, r3
 810c118:	683b      	ldr	r3, [r7, #0]
 810c11a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810c11c:	6878      	ldr	r0, [r7, #4]
 810c11e:	f7ff ff9b 	bl	810c058 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810c122:	2300      	movs	r3, #0
 810c124:	61fb      	str	r3, [r7, #28]
 810c126:	e004      	b.n	810c132 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 810c128:	683b      	ldr	r3, [r7, #0]
 810c12a:	2200      	movs	r2, #0
 810c12c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810c12e:	2301      	movs	r3, #1
 810c130:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810c132:	f7fe fc8f 	bl	810aa54 <vPortExitCritical>

	return xReturn;
 810c136:	69fb      	ldr	r3, [r7, #28]
}
 810c138:	4618      	mov	r0, r3
 810c13a:	3720      	adds	r7, #32
 810c13c:	46bd      	mov	sp, r7
 810c13e:	bd80      	pop	{r7, pc}
 810c140:	1000496c 	.word	0x1000496c
 810c144:	10004980 	.word	0x10004980

0810c148 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810c148:	b480      	push	{r7}
 810c14a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810c14c:	4b03      	ldr	r3, [pc, #12]	; (810c15c <vTaskMissedYield+0x14>)
 810c14e:	2201      	movs	r2, #1
 810c150:	601a      	str	r2, [r3, #0]
}
 810c152:	bf00      	nop
 810c154:	46bd      	mov	sp, r7
 810c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c15a:	4770      	bx	lr
 810c15c:	1000497c 	.word	0x1000497c

0810c160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810c160:	b580      	push	{r7, lr}
 810c162:	b082      	sub	sp, #8
 810c164:	af00      	add	r7, sp, #0
 810c166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810c168:	f000 f852 	bl	810c210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810c16c:	4b06      	ldr	r3, [pc, #24]	; (810c188 <prvIdleTask+0x28>)
 810c16e:	681b      	ldr	r3, [r3, #0]
 810c170:	2b01      	cmp	r3, #1
 810c172:	d9f9      	bls.n	810c168 <prvIdleTask+0x8>
			{
				taskYIELD();
 810c174:	4b05      	ldr	r3, [pc, #20]	; (810c18c <prvIdleTask+0x2c>)
 810c176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c17a:	601a      	str	r2, [r3, #0]
 810c17c:	f3bf 8f4f 	dsb	sy
 810c180:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810c184:	e7f0      	b.n	810c168 <prvIdleTask+0x8>
 810c186:	bf00      	nop
 810c188:	10004498 	.word	0x10004498
 810c18c:	e000ed04 	.word	0xe000ed04

0810c190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810c190:	b580      	push	{r7, lr}
 810c192:	b082      	sub	sp, #8
 810c194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810c196:	2300      	movs	r3, #0
 810c198:	607b      	str	r3, [r7, #4]
 810c19a:	e00c      	b.n	810c1b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810c19c:	687a      	ldr	r2, [r7, #4]
 810c19e:	4613      	mov	r3, r2
 810c1a0:	009b      	lsls	r3, r3, #2
 810c1a2:	4413      	add	r3, r2
 810c1a4:	009b      	lsls	r3, r3, #2
 810c1a6:	4a12      	ldr	r2, [pc, #72]	; (810c1f0 <prvInitialiseTaskLists+0x60>)
 810c1a8:	4413      	add	r3, r2
 810c1aa:	4618      	mov	r0, r3
 810c1ac:	f7fe fa3e 	bl	810a62c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810c1b0:	687b      	ldr	r3, [r7, #4]
 810c1b2:	3301      	adds	r3, #1
 810c1b4:	607b      	str	r3, [r7, #4]
 810c1b6:	687b      	ldr	r3, [r7, #4]
 810c1b8:	2b37      	cmp	r3, #55	; 0x37
 810c1ba:	d9ef      	bls.n	810c19c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810c1bc:	480d      	ldr	r0, [pc, #52]	; (810c1f4 <prvInitialiseTaskLists+0x64>)
 810c1be:	f7fe fa35 	bl	810a62c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810c1c2:	480d      	ldr	r0, [pc, #52]	; (810c1f8 <prvInitialiseTaskLists+0x68>)
 810c1c4:	f7fe fa32 	bl	810a62c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810c1c8:	480c      	ldr	r0, [pc, #48]	; (810c1fc <prvInitialiseTaskLists+0x6c>)
 810c1ca:	f7fe fa2f 	bl	810a62c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810c1ce:	480c      	ldr	r0, [pc, #48]	; (810c200 <prvInitialiseTaskLists+0x70>)
 810c1d0:	f7fe fa2c 	bl	810a62c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810c1d4:	480b      	ldr	r0, [pc, #44]	; (810c204 <prvInitialiseTaskLists+0x74>)
 810c1d6:	f7fe fa29 	bl	810a62c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810c1da:	4b0b      	ldr	r3, [pc, #44]	; (810c208 <prvInitialiseTaskLists+0x78>)
 810c1dc:	4a05      	ldr	r2, [pc, #20]	; (810c1f4 <prvInitialiseTaskLists+0x64>)
 810c1de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810c1e0:	4b0a      	ldr	r3, [pc, #40]	; (810c20c <prvInitialiseTaskLists+0x7c>)
 810c1e2:	4a05      	ldr	r2, [pc, #20]	; (810c1f8 <prvInitialiseTaskLists+0x68>)
 810c1e4:	601a      	str	r2, [r3, #0]
}
 810c1e6:	bf00      	nop
 810c1e8:	3708      	adds	r7, #8
 810c1ea:	46bd      	mov	sp, r7
 810c1ec:	bd80      	pop	{r7, pc}
 810c1ee:	bf00      	nop
 810c1f0:	10004498 	.word	0x10004498
 810c1f4:	100048f8 	.word	0x100048f8
 810c1f8:	1000490c 	.word	0x1000490c
 810c1fc:	10004928 	.word	0x10004928
 810c200:	1000493c 	.word	0x1000493c
 810c204:	10004954 	.word	0x10004954
 810c208:	10004920 	.word	0x10004920
 810c20c:	10004924 	.word	0x10004924

0810c210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810c210:	b580      	push	{r7, lr}
 810c212:	b082      	sub	sp, #8
 810c214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810c216:	e019      	b.n	810c24c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810c218:	f7fe fbec 	bl	810a9f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810c21c:	4b10      	ldr	r3, [pc, #64]	; (810c260 <prvCheckTasksWaitingTermination+0x50>)
 810c21e:	68db      	ldr	r3, [r3, #12]
 810c220:	68db      	ldr	r3, [r3, #12]
 810c222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810c224:	687b      	ldr	r3, [r7, #4]
 810c226:	3304      	adds	r3, #4
 810c228:	4618      	mov	r0, r3
 810c22a:	f7fe fa89 	bl	810a740 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810c22e:	4b0d      	ldr	r3, [pc, #52]	; (810c264 <prvCheckTasksWaitingTermination+0x54>)
 810c230:	681b      	ldr	r3, [r3, #0]
 810c232:	3b01      	subs	r3, #1
 810c234:	4a0b      	ldr	r2, [pc, #44]	; (810c264 <prvCheckTasksWaitingTermination+0x54>)
 810c236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810c238:	4b0b      	ldr	r3, [pc, #44]	; (810c268 <prvCheckTasksWaitingTermination+0x58>)
 810c23a:	681b      	ldr	r3, [r3, #0]
 810c23c:	3b01      	subs	r3, #1
 810c23e:	4a0a      	ldr	r2, [pc, #40]	; (810c268 <prvCheckTasksWaitingTermination+0x58>)
 810c240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810c242:	f7fe fc07 	bl	810aa54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810c246:	6878      	ldr	r0, [r7, #4]
 810c248:	f000 f810 	bl	810c26c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810c24c:	4b06      	ldr	r3, [pc, #24]	; (810c268 <prvCheckTasksWaitingTermination+0x58>)
 810c24e:	681b      	ldr	r3, [r3, #0]
 810c250:	2b00      	cmp	r3, #0
 810c252:	d1e1      	bne.n	810c218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810c254:	bf00      	nop
 810c256:	bf00      	nop
 810c258:	3708      	adds	r7, #8
 810c25a:	46bd      	mov	sp, r7
 810c25c:	bd80      	pop	{r7, pc}
 810c25e:	bf00      	nop
 810c260:	1000493c 	.word	0x1000493c
 810c264:	10004968 	.word	0x10004968
 810c268:	10004950 	.word	0x10004950

0810c26c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810c26c:	b580      	push	{r7, lr}
 810c26e:	b084      	sub	sp, #16
 810c270:	af00      	add	r7, sp, #0
 810c272:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810c274:	687b      	ldr	r3, [r7, #4]
 810c276:	3354      	adds	r3, #84	; 0x54
 810c278:	4618      	mov	r0, r3
 810c27a:	f000 fd2d 	bl	810ccd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810c27e:	687b      	ldr	r3, [r7, #4]
 810c280:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810c284:	2b00      	cmp	r3, #0
 810c286:	d108      	bne.n	810c29a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810c288:	687b      	ldr	r3, [r7, #4]
 810c28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c28c:	4618      	mov	r0, r3
 810c28e:	f7fe f8af 	bl	810a3f0 <vPortFree>
				vPortFree( pxTCB );
 810c292:	6878      	ldr	r0, [r7, #4]
 810c294:	f7fe f8ac 	bl	810a3f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810c298:	e018      	b.n	810c2cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810c29a:	687b      	ldr	r3, [r7, #4]
 810c29c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810c2a0:	2b01      	cmp	r3, #1
 810c2a2:	d103      	bne.n	810c2ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810c2a4:	6878      	ldr	r0, [r7, #4]
 810c2a6:	f7fe f8a3 	bl	810a3f0 <vPortFree>
	}
 810c2aa:	e00f      	b.n	810c2cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810c2ac:	687b      	ldr	r3, [r7, #4]
 810c2ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810c2b2:	2b02      	cmp	r3, #2
 810c2b4:	d00a      	beq.n	810c2cc <prvDeleteTCB+0x60>
	__asm volatile
 810c2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c2ba:	f383 8811 	msr	BASEPRI, r3
 810c2be:	f3bf 8f6f 	isb	sy
 810c2c2:	f3bf 8f4f 	dsb	sy
 810c2c6:	60fb      	str	r3, [r7, #12]
}
 810c2c8:	bf00      	nop
 810c2ca:	e7fe      	b.n	810c2ca <prvDeleteTCB+0x5e>
	}
 810c2cc:	bf00      	nop
 810c2ce:	3710      	adds	r7, #16
 810c2d0:	46bd      	mov	sp, r7
 810c2d2:	bd80      	pop	{r7, pc}

0810c2d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810c2d4:	b480      	push	{r7}
 810c2d6:	b083      	sub	sp, #12
 810c2d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810c2da:	4b0c      	ldr	r3, [pc, #48]	; (810c30c <prvResetNextTaskUnblockTime+0x38>)
 810c2dc:	681b      	ldr	r3, [r3, #0]
 810c2de:	681b      	ldr	r3, [r3, #0]
 810c2e0:	2b00      	cmp	r3, #0
 810c2e2:	d104      	bne.n	810c2ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810c2e4:	4b0a      	ldr	r3, [pc, #40]	; (810c310 <prvResetNextTaskUnblockTime+0x3c>)
 810c2e6:	f04f 32ff 	mov.w	r2, #4294967295
 810c2ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810c2ec:	e008      	b.n	810c300 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810c2ee:	4b07      	ldr	r3, [pc, #28]	; (810c30c <prvResetNextTaskUnblockTime+0x38>)
 810c2f0:	681b      	ldr	r3, [r3, #0]
 810c2f2:	68db      	ldr	r3, [r3, #12]
 810c2f4:	68db      	ldr	r3, [r3, #12]
 810c2f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810c2f8:	687b      	ldr	r3, [r7, #4]
 810c2fa:	685b      	ldr	r3, [r3, #4]
 810c2fc:	4a04      	ldr	r2, [pc, #16]	; (810c310 <prvResetNextTaskUnblockTime+0x3c>)
 810c2fe:	6013      	str	r3, [r2, #0]
}
 810c300:	bf00      	nop
 810c302:	370c      	adds	r7, #12
 810c304:	46bd      	mov	sp, r7
 810c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c30a:	4770      	bx	lr
 810c30c:	10004920 	.word	0x10004920
 810c310:	10004988 	.word	0x10004988

0810c314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810c314:	b480      	push	{r7}
 810c316:	b083      	sub	sp, #12
 810c318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810c31a:	4b0b      	ldr	r3, [pc, #44]	; (810c348 <xTaskGetSchedulerState+0x34>)
 810c31c:	681b      	ldr	r3, [r3, #0]
 810c31e:	2b00      	cmp	r3, #0
 810c320:	d102      	bne.n	810c328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810c322:	2301      	movs	r3, #1
 810c324:	607b      	str	r3, [r7, #4]
 810c326:	e008      	b.n	810c33a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810c328:	4b08      	ldr	r3, [pc, #32]	; (810c34c <xTaskGetSchedulerState+0x38>)
 810c32a:	681b      	ldr	r3, [r3, #0]
 810c32c:	2b00      	cmp	r3, #0
 810c32e:	d102      	bne.n	810c336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810c330:	2302      	movs	r3, #2
 810c332:	607b      	str	r3, [r7, #4]
 810c334:	e001      	b.n	810c33a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810c336:	2300      	movs	r3, #0
 810c338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810c33a:	687b      	ldr	r3, [r7, #4]
	}
 810c33c:	4618      	mov	r0, r3
 810c33e:	370c      	adds	r7, #12
 810c340:	46bd      	mov	sp, r7
 810c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c346:	4770      	bx	lr
 810c348:	10004974 	.word	0x10004974
 810c34c:	10004990 	.word	0x10004990

0810c350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810c350:	b580      	push	{r7, lr}
 810c352:	b086      	sub	sp, #24
 810c354:	af00      	add	r7, sp, #0
 810c356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810c358:	687b      	ldr	r3, [r7, #4]
 810c35a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810c35c:	2300      	movs	r3, #0
 810c35e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810c360:	687b      	ldr	r3, [r7, #4]
 810c362:	2b00      	cmp	r3, #0
 810c364:	d056      	beq.n	810c414 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810c366:	4b2e      	ldr	r3, [pc, #184]	; (810c420 <xTaskPriorityDisinherit+0xd0>)
 810c368:	681b      	ldr	r3, [r3, #0]
 810c36a:	693a      	ldr	r2, [r7, #16]
 810c36c:	429a      	cmp	r2, r3
 810c36e:	d00a      	beq.n	810c386 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 810c370:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c374:	f383 8811 	msr	BASEPRI, r3
 810c378:	f3bf 8f6f 	isb	sy
 810c37c:	f3bf 8f4f 	dsb	sy
 810c380:	60fb      	str	r3, [r7, #12]
}
 810c382:	bf00      	nop
 810c384:	e7fe      	b.n	810c384 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810c386:	693b      	ldr	r3, [r7, #16]
 810c388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c38a:	2b00      	cmp	r3, #0
 810c38c:	d10a      	bne.n	810c3a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 810c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c392:	f383 8811 	msr	BASEPRI, r3
 810c396:	f3bf 8f6f 	isb	sy
 810c39a:	f3bf 8f4f 	dsb	sy
 810c39e:	60bb      	str	r3, [r7, #8]
}
 810c3a0:	bf00      	nop
 810c3a2:	e7fe      	b.n	810c3a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 810c3a4:	693b      	ldr	r3, [r7, #16]
 810c3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c3a8:	1e5a      	subs	r2, r3, #1
 810c3aa:	693b      	ldr	r3, [r7, #16]
 810c3ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810c3ae:	693b      	ldr	r3, [r7, #16]
 810c3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c3b2:	693b      	ldr	r3, [r7, #16]
 810c3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810c3b6:	429a      	cmp	r2, r3
 810c3b8:	d02c      	beq.n	810c414 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810c3ba:	693b      	ldr	r3, [r7, #16]
 810c3bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c3be:	2b00      	cmp	r3, #0
 810c3c0:	d128      	bne.n	810c414 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810c3c2:	693b      	ldr	r3, [r7, #16]
 810c3c4:	3304      	adds	r3, #4
 810c3c6:	4618      	mov	r0, r3
 810c3c8:	f7fe f9ba 	bl	810a740 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810c3cc:	693b      	ldr	r3, [r7, #16]
 810c3ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810c3d0:	693b      	ldr	r3, [r7, #16]
 810c3d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810c3d4:	693b      	ldr	r3, [r7, #16]
 810c3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c3d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810c3dc:	693b      	ldr	r3, [r7, #16]
 810c3de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810c3e0:	693b      	ldr	r3, [r7, #16]
 810c3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c3e4:	4b0f      	ldr	r3, [pc, #60]	; (810c424 <xTaskPriorityDisinherit+0xd4>)
 810c3e6:	681b      	ldr	r3, [r3, #0]
 810c3e8:	429a      	cmp	r2, r3
 810c3ea:	d903      	bls.n	810c3f4 <xTaskPriorityDisinherit+0xa4>
 810c3ec:	693b      	ldr	r3, [r7, #16]
 810c3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c3f0:	4a0c      	ldr	r2, [pc, #48]	; (810c424 <xTaskPriorityDisinherit+0xd4>)
 810c3f2:	6013      	str	r3, [r2, #0]
 810c3f4:	693b      	ldr	r3, [r7, #16]
 810c3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c3f8:	4613      	mov	r3, r2
 810c3fa:	009b      	lsls	r3, r3, #2
 810c3fc:	4413      	add	r3, r2
 810c3fe:	009b      	lsls	r3, r3, #2
 810c400:	4a09      	ldr	r2, [pc, #36]	; (810c428 <xTaskPriorityDisinherit+0xd8>)
 810c402:	441a      	add	r2, r3
 810c404:	693b      	ldr	r3, [r7, #16]
 810c406:	3304      	adds	r3, #4
 810c408:	4619      	mov	r1, r3
 810c40a:	4610      	mov	r0, r2
 810c40c:	f7fe f93b 	bl	810a686 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810c410:	2301      	movs	r3, #1
 810c412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810c414:	697b      	ldr	r3, [r7, #20]
	}
 810c416:	4618      	mov	r0, r3
 810c418:	3718      	adds	r7, #24
 810c41a:	46bd      	mov	sp, r7
 810c41c:	bd80      	pop	{r7, pc}
 810c41e:	bf00      	nop
 810c420:	10004494 	.word	0x10004494
 810c424:	10004970 	.word	0x10004970
 810c428:	10004498 	.word	0x10004498

0810c42c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810c42c:	b580      	push	{r7, lr}
 810c42e:	b084      	sub	sp, #16
 810c430:	af00      	add	r7, sp, #0
 810c432:	6078      	str	r0, [r7, #4]
 810c434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810c436:	4b21      	ldr	r3, [pc, #132]	; (810c4bc <prvAddCurrentTaskToDelayedList+0x90>)
 810c438:	681b      	ldr	r3, [r3, #0]
 810c43a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810c43c:	4b20      	ldr	r3, [pc, #128]	; (810c4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810c43e:	681b      	ldr	r3, [r3, #0]
 810c440:	3304      	adds	r3, #4
 810c442:	4618      	mov	r0, r3
 810c444:	f7fe f97c 	bl	810a740 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810c448:	687b      	ldr	r3, [r7, #4]
 810c44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c44e:	d10a      	bne.n	810c466 <prvAddCurrentTaskToDelayedList+0x3a>
 810c450:	683b      	ldr	r3, [r7, #0]
 810c452:	2b00      	cmp	r3, #0
 810c454:	d007      	beq.n	810c466 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810c456:	4b1a      	ldr	r3, [pc, #104]	; (810c4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810c458:	681b      	ldr	r3, [r3, #0]
 810c45a:	3304      	adds	r3, #4
 810c45c:	4619      	mov	r1, r3
 810c45e:	4819      	ldr	r0, [pc, #100]	; (810c4c4 <prvAddCurrentTaskToDelayedList+0x98>)
 810c460:	f7fe f911 	bl	810a686 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810c464:	e026      	b.n	810c4b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810c466:	68fa      	ldr	r2, [r7, #12]
 810c468:	687b      	ldr	r3, [r7, #4]
 810c46a:	4413      	add	r3, r2
 810c46c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810c46e:	4b14      	ldr	r3, [pc, #80]	; (810c4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810c470:	681b      	ldr	r3, [r3, #0]
 810c472:	68ba      	ldr	r2, [r7, #8]
 810c474:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810c476:	68ba      	ldr	r2, [r7, #8]
 810c478:	68fb      	ldr	r3, [r7, #12]
 810c47a:	429a      	cmp	r2, r3
 810c47c:	d209      	bcs.n	810c492 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810c47e:	4b12      	ldr	r3, [pc, #72]	; (810c4c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 810c480:	681a      	ldr	r2, [r3, #0]
 810c482:	4b0f      	ldr	r3, [pc, #60]	; (810c4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810c484:	681b      	ldr	r3, [r3, #0]
 810c486:	3304      	adds	r3, #4
 810c488:	4619      	mov	r1, r3
 810c48a:	4610      	mov	r0, r2
 810c48c:	f7fe f91f 	bl	810a6ce <vListInsert>
}
 810c490:	e010      	b.n	810c4b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810c492:	4b0e      	ldr	r3, [pc, #56]	; (810c4cc <prvAddCurrentTaskToDelayedList+0xa0>)
 810c494:	681a      	ldr	r2, [r3, #0]
 810c496:	4b0a      	ldr	r3, [pc, #40]	; (810c4c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810c498:	681b      	ldr	r3, [r3, #0]
 810c49a:	3304      	adds	r3, #4
 810c49c:	4619      	mov	r1, r3
 810c49e:	4610      	mov	r0, r2
 810c4a0:	f7fe f915 	bl	810a6ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810c4a4:	4b0a      	ldr	r3, [pc, #40]	; (810c4d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 810c4a6:	681b      	ldr	r3, [r3, #0]
 810c4a8:	68ba      	ldr	r2, [r7, #8]
 810c4aa:	429a      	cmp	r2, r3
 810c4ac:	d202      	bcs.n	810c4b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810c4ae:	4a08      	ldr	r2, [pc, #32]	; (810c4d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 810c4b0:	68bb      	ldr	r3, [r7, #8]
 810c4b2:	6013      	str	r3, [r2, #0]
}
 810c4b4:	bf00      	nop
 810c4b6:	3710      	adds	r7, #16
 810c4b8:	46bd      	mov	sp, r7
 810c4ba:	bd80      	pop	{r7, pc}
 810c4bc:	1000496c 	.word	0x1000496c
 810c4c0:	10004494 	.word	0x10004494
 810c4c4:	10004954 	.word	0x10004954
 810c4c8:	10004924 	.word	0x10004924
 810c4cc:	10004920 	.word	0x10004920
 810c4d0:	10004988 	.word	0x10004988

0810c4d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810c4d4:	b580      	push	{r7, lr}
 810c4d6:	b08a      	sub	sp, #40	; 0x28
 810c4d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810c4da:	2300      	movs	r3, #0
 810c4dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810c4de:	f000 fb07 	bl	810caf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810c4e2:	4b1c      	ldr	r3, [pc, #112]	; (810c554 <xTimerCreateTimerTask+0x80>)
 810c4e4:	681b      	ldr	r3, [r3, #0]
 810c4e6:	2b00      	cmp	r3, #0
 810c4e8:	d021      	beq.n	810c52e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810c4ea:	2300      	movs	r3, #0
 810c4ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810c4ee:	2300      	movs	r3, #0
 810c4f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810c4f2:	1d3a      	adds	r2, r7, #4
 810c4f4:	f107 0108 	add.w	r1, r7, #8
 810c4f8:	f107 030c 	add.w	r3, r7, #12
 810c4fc:	4618      	mov	r0, r3
 810c4fe:	f7fd fe91 	bl	810a224 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810c502:	6879      	ldr	r1, [r7, #4]
 810c504:	68bb      	ldr	r3, [r7, #8]
 810c506:	68fa      	ldr	r2, [r7, #12]
 810c508:	9202      	str	r2, [sp, #8]
 810c50a:	9301      	str	r3, [sp, #4]
 810c50c:	2302      	movs	r3, #2
 810c50e:	9300      	str	r3, [sp, #0]
 810c510:	2300      	movs	r3, #0
 810c512:	460a      	mov	r2, r1
 810c514:	4910      	ldr	r1, [pc, #64]	; (810c558 <xTimerCreateTimerTask+0x84>)
 810c516:	4811      	ldr	r0, [pc, #68]	; (810c55c <xTimerCreateTimerTask+0x88>)
 810c518:	f7ff f8b4 	bl	810b684 <xTaskCreateStatic>
 810c51c:	4603      	mov	r3, r0
 810c51e:	4a10      	ldr	r2, [pc, #64]	; (810c560 <xTimerCreateTimerTask+0x8c>)
 810c520:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810c522:	4b0f      	ldr	r3, [pc, #60]	; (810c560 <xTimerCreateTimerTask+0x8c>)
 810c524:	681b      	ldr	r3, [r3, #0]
 810c526:	2b00      	cmp	r3, #0
 810c528:	d001      	beq.n	810c52e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810c52a:	2301      	movs	r3, #1
 810c52c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810c52e:	697b      	ldr	r3, [r7, #20]
 810c530:	2b00      	cmp	r3, #0
 810c532:	d10a      	bne.n	810c54a <xTimerCreateTimerTask+0x76>
	__asm volatile
 810c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c538:	f383 8811 	msr	BASEPRI, r3
 810c53c:	f3bf 8f6f 	isb	sy
 810c540:	f3bf 8f4f 	dsb	sy
 810c544:	613b      	str	r3, [r7, #16]
}
 810c546:	bf00      	nop
 810c548:	e7fe      	b.n	810c548 <xTimerCreateTimerTask+0x74>
	return xReturn;
 810c54a:	697b      	ldr	r3, [r7, #20]
}
 810c54c:	4618      	mov	r0, r3
 810c54e:	3718      	adds	r7, #24
 810c550:	46bd      	mov	sp, r7
 810c552:	bd80      	pop	{r7, pc}
 810c554:	100049c4 	.word	0x100049c4
 810c558:	0810cf28 	.word	0x0810cf28
 810c55c:	0810c699 	.word	0x0810c699
 810c560:	100049c8 	.word	0x100049c8

0810c564 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810c564:	b580      	push	{r7, lr}
 810c566:	b08a      	sub	sp, #40	; 0x28
 810c568:	af00      	add	r7, sp, #0
 810c56a:	60f8      	str	r0, [r7, #12]
 810c56c:	60b9      	str	r1, [r7, #8]
 810c56e:	607a      	str	r2, [r7, #4]
 810c570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810c572:	2300      	movs	r3, #0
 810c574:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810c576:	68fb      	ldr	r3, [r7, #12]
 810c578:	2b00      	cmp	r3, #0
 810c57a:	d10a      	bne.n	810c592 <xTimerGenericCommand+0x2e>
	__asm volatile
 810c57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c580:	f383 8811 	msr	BASEPRI, r3
 810c584:	f3bf 8f6f 	isb	sy
 810c588:	f3bf 8f4f 	dsb	sy
 810c58c:	623b      	str	r3, [r7, #32]
}
 810c58e:	bf00      	nop
 810c590:	e7fe      	b.n	810c590 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810c592:	4b1a      	ldr	r3, [pc, #104]	; (810c5fc <xTimerGenericCommand+0x98>)
 810c594:	681b      	ldr	r3, [r3, #0]
 810c596:	2b00      	cmp	r3, #0
 810c598:	d02a      	beq.n	810c5f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810c59a:	68bb      	ldr	r3, [r7, #8]
 810c59c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810c59e:	687b      	ldr	r3, [r7, #4]
 810c5a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810c5a2:	68fb      	ldr	r3, [r7, #12]
 810c5a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810c5a6:	68bb      	ldr	r3, [r7, #8]
 810c5a8:	2b05      	cmp	r3, #5
 810c5aa:	dc18      	bgt.n	810c5de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810c5ac:	f7ff feb2 	bl	810c314 <xTaskGetSchedulerState>
 810c5b0:	4603      	mov	r3, r0
 810c5b2:	2b02      	cmp	r3, #2
 810c5b4:	d109      	bne.n	810c5ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810c5b6:	4b11      	ldr	r3, [pc, #68]	; (810c5fc <xTimerGenericCommand+0x98>)
 810c5b8:	6818      	ldr	r0, [r3, #0]
 810c5ba:	f107 0110 	add.w	r1, r7, #16
 810c5be:	2300      	movs	r3, #0
 810c5c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810c5c2:	f7fe fc77 	bl	810aeb4 <xQueueGenericSend>
 810c5c6:	6278      	str	r0, [r7, #36]	; 0x24
 810c5c8:	e012      	b.n	810c5f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810c5ca:	4b0c      	ldr	r3, [pc, #48]	; (810c5fc <xTimerGenericCommand+0x98>)
 810c5cc:	6818      	ldr	r0, [r3, #0]
 810c5ce:	f107 0110 	add.w	r1, r7, #16
 810c5d2:	2300      	movs	r3, #0
 810c5d4:	2200      	movs	r2, #0
 810c5d6:	f7fe fc6d 	bl	810aeb4 <xQueueGenericSend>
 810c5da:	6278      	str	r0, [r7, #36]	; 0x24
 810c5dc:	e008      	b.n	810c5f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810c5de:	4b07      	ldr	r3, [pc, #28]	; (810c5fc <xTimerGenericCommand+0x98>)
 810c5e0:	6818      	ldr	r0, [r3, #0]
 810c5e2:	f107 0110 	add.w	r1, r7, #16
 810c5e6:	2300      	movs	r3, #0
 810c5e8:	683a      	ldr	r2, [r7, #0]
 810c5ea:	f7fe fd61 	bl	810b0b0 <xQueueGenericSendFromISR>
 810c5ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810c5f2:	4618      	mov	r0, r3
 810c5f4:	3728      	adds	r7, #40	; 0x28
 810c5f6:	46bd      	mov	sp, r7
 810c5f8:	bd80      	pop	{r7, pc}
 810c5fa:	bf00      	nop
 810c5fc:	100049c4 	.word	0x100049c4

0810c600 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810c600:	b580      	push	{r7, lr}
 810c602:	b088      	sub	sp, #32
 810c604:	af02      	add	r7, sp, #8
 810c606:	6078      	str	r0, [r7, #4]
 810c608:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810c60a:	4b22      	ldr	r3, [pc, #136]	; (810c694 <prvProcessExpiredTimer+0x94>)
 810c60c:	681b      	ldr	r3, [r3, #0]
 810c60e:	68db      	ldr	r3, [r3, #12]
 810c610:	68db      	ldr	r3, [r3, #12]
 810c612:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810c614:	697b      	ldr	r3, [r7, #20]
 810c616:	3304      	adds	r3, #4
 810c618:	4618      	mov	r0, r3
 810c61a:	f7fe f891 	bl	810a740 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810c61e:	697b      	ldr	r3, [r7, #20]
 810c620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810c624:	f003 0304 	and.w	r3, r3, #4
 810c628:	2b00      	cmp	r3, #0
 810c62a:	d022      	beq.n	810c672 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810c62c:	697b      	ldr	r3, [r7, #20]
 810c62e:	699a      	ldr	r2, [r3, #24]
 810c630:	687b      	ldr	r3, [r7, #4]
 810c632:	18d1      	adds	r1, r2, r3
 810c634:	687b      	ldr	r3, [r7, #4]
 810c636:	683a      	ldr	r2, [r7, #0]
 810c638:	6978      	ldr	r0, [r7, #20]
 810c63a:	f000 f8d1 	bl	810c7e0 <prvInsertTimerInActiveList>
 810c63e:	4603      	mov	r3, r0
 810c640:	2b00      	cmp	r3, #0
 810c642:	d01f      	beq.n	810c684 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810c644:	2300      	movs	r3, #0
 810c646:	9300      	str	r3, [sp, #0]
 810c648:	2300      	movs	r3, #0
 810c64a:	687a      	ldr	r2, [r7, #4]
 810c64c:	2100      	movs	r1, #0
 810c64e:	6978      	ldr	r0, [r7, #20]
 810c650:	f7ff ff88 	bl	810c564 <xTimerGenericCommand>
 810c654:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810c656:	693b      	ldr	r3, [r7, #16]
 810c658:	2b00      	cmp	r3, #0
 810c65a:	d113      	bne.n	810c684 <prvProcessExpiredTimer+0x84>
	__asm volatile
 810c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c660:	f383 8811 	msr	BASEPRI, r3
 810c664:	f3bf 8f6f 	isb	sy
 810c668:	f3bf 8f4f 	dsb	sy
 810c66c:	60fb      	str	r3, [r7, #12]
}
 810c66e:	bf00      	nop
 810c670:	e7fe      	b.n	810c670 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810c672:	697b      	ldr	r3, [r7, #20]
 810c674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810c678:	f023 0301 	bic.w	r3, r3, #1
 810c67c:	b2da      	uxtb	r2, r3
 810c67e:	697b      	ldr	r3, [r7, #20]
 810c680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810c684:	697b      	ldr	r3, [r7, #20]
 810c686:	6a1b      	ldr	r3, [r3, #32]
 810c688:	6978      	ldr	r0, [r7, #20]
 810c68a:	4798      	blx	r3
}
 810c68c:	bf00      	nop
 810c68e:	3718      	adds	r7, #24
 810c690:	46bd      	mov	sp, r7
 810c692:	bd80      	pop	{r7, pc}
 810c694:	100049bc 	.word	0x100049bc

0810c698 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810c698:	b580      	push	{r7, lr}
 810c69a:	b084      	sub	sp, #16
 810c69c:	af00      	add	r7, sp, #0
 810c69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810c6a0:	f107 0308 	add.w	r3, r7, #8
 810c6a4:	4618      	mov	r0, r3
 810c6a6:	f000 f857 	bl	810c758 <prvGetNextExpireTime>
 810c6aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810c6ac:	68bb      	ldr	r3, [r7, #8]
 810c6ae:	4619      	mov	r1, r3
 810c6b0:	68f8      	ldr	r0, [r7, #12]
 810c6b2:	f000 f803 	bl	810c6bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810c6b6:	f000 f8d5 	bl	810c864 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810c6ba:	e7f1      	b.n	810c6a0 <prvTimerTask+0x8>

0810c6bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810c6bc:	b580      	push	{r7, lr}
 810c6be:	b084      	sub	sp, #16
 810c6c0:	af00      	add	r7, sp, #0
 810c6c2:	6078      	str	r0, [r7, #4]
 810c6c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810c6c6:	f7ff fa39 	bl	810bb3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810c6ca:	f107 0308 	add.w	r3, r7, #8
 810c6ce:	4618      	mov	r0, r3
 810c6d0:	f000 f866 	bl	810c7a0 <prvSampleTimeNow>
 810c6d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810c6d6:	68bb      	ldr	r3, [r7, #8]
 810c6d8:	2b00      	cmp	r3, #0
 810c6da:	d130      	bne.n	810c73e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810c6dc:	683b      	ldr	r3, [r7, #0]
 810c6de:	2b00      	cmp	r3, #0
 810c6e0:	d10a      	bne.n	810c6f8 <prvProcessTimerOrBlockTask+0x3c>
 810c6e2:	687a      	ldr	r2, [r7, #4]
 810c6e4:	68fb      	ldr	r3, [r7, #12]
 810c6e6:	429a      	cmp	r2, r3
 810c6e8:	d806      	bhi.n	810c6f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810c6ea:	f7ff fa35 	bl	810bb58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810c6ee:	68f9      	ldr	r1, [r7, #12]
 810c6f0:	6878      	ldr	r0, [r7, #4]
 810c6f2:	f7ff ff85 	bl	810c600 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810c6f6:	e024      	b.n	810c742 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810c6f8:	683b      	ldr	r3, [r7, #0]
 810c6fa:	2b00      	cmp	r3, #0
 810c6fc:	d008      	beq.n	810c710 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810c6fe:	4b13      	ldr	r3, [pc, #76]	; (810c74c <prvProcessTimerOrBlockTask+0x90>)
 810c700:	681b      	ldr	r3, [r3, #0]
 810c702:	681b      	ldr	r3, [r3, #0]
 810c704:	2b00      	cmp	r3, #0
 810c706:	d101      	bne.n	810c70c <prvProcessTimerOrBlockTask+0x50>
 810c708:	2301      	movs	r3, #1
 810c70a:	e000      	b.n	810c70e <prvProcessTimerOrBlockTask+0x52>
 810c70c:	2300      	movs	r3, #0
 810c70e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810c710:	4b0f      	ldr	r3, [pc, #60]	; (810c750 <prvProcessTimerOrBlockTask+0x94>)
 810c712:	6818      	ldr	r0, [r3, #0]
 810c714:	687a      	ldr	r2, [r7, #4]
 810c716:	68fb      	ldr	r3, [r7, #12]
 810c718:	1ad3      	subs	r3, r2, r3
 810c71a:	683a      	ldr	r2, [r7, #0]
 810c71c:	4619      	mov	r1, r3
 810c71e:	f7fe ff7d 	bl	810b61c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810c722:	f7ff fa19 	bl	810bb58 <xTaskResumeAll>
 810c726:	4603      	mov	r3, r0
 810c728:	2b00      	cmp	r3, #0
 810c72a:	d10a      	bne.n	810c742 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810c72c:	4b09      	ldr	r3, [pc, #36]	; (810c754 <prvProcessTimerOrBlockTask+0x98>)
 810c72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810c732:	601a      	str	r2, [r3, #0]
 810c734:	f3bf 8f4f 	dsb	sy
 810c738:	f3bf 8f6f 	isb	sy
}
 810c73c:	e001      	b.n	810c742 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810c73e:	f7ff fa0b 	bl	810bb58 <xTaskResumeAll>
}
 810c742:	bf00      	nop
 810c744:	3710      	adds	r7, #16
 810c746:	46bd      	mov	sp, r7
 810c748:	bd80      	pop	{r7, pc}
 810c74a:	bf00      	nop
 810c74c:	100049c0 	.word	0x100049c0
 810c750:	100049c4 	.word	0x100049c4
 810c754:	e000ed04 	.word	0xe000ed04

0810c758 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810c758:	b480      	push	{r7}
 810c75a:	b085      	sub	sp, #20
 810c75c:	af00      	add	r7, sp, #0
 810c75e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810c760:	4b0e      	ldr	r3, [pc, #56]	; (810c79c <prvGetNextExpireTime+0x44>)
 810c762:	681b      	ldr	r3, [r3, #0]
 810c764:	681b      	ldr	r3, [r3, #0]
 810c766:	2b00      	cmp	r3, #0
 810c768:	d101      	bne.n	810c76e <prvGetNextExpireTime+0x16>
 810c76a:	2201      	movs	r2, #1
 810c76c:	e000      	b.n	810c770 <prvGetNextExpireTime+0x18>
 810c76e:	2200      	movs	r2, #0
 810c770:	687b      	ldr	r3, [r7, #4]
 810c772:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810c774:	687b      	ldr	r3, [r7, #4]
 810c776:	681b      	ldr	r3, [r3, #0]
 810c778:	2b00      	cmp	r3, #0
 810c77a:	d105      	bne.n	810c788 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810c77c:	4b07      	ldr	r3, [pc, #28]	; (810c79c <prvGetNextExpireTime+0x44>)
 810c77e:	681b      	ldr	r3, [r3, #0]
 810c780:	68db      	ldr	r3, [r3, #12]
 810c782:	681b      	ldr	r3, [r3, #0]
 810c784:	60fb      	str	r3, [r7, #12]
 810c786:	e001      	b.n	810c78c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810c788:	2300      	movs	r3, #0
 810c78a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810c78c:	68fb      	ldr	r3, [r7, #12]
}
 810c78e:	4618      	mov	r0, r3
 810c790:	3714      	adds	r7, #20
 810c792:	46bd      	mov	sp, r7
 810c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c798:	4770      	bx	lr
 810c79a:	bf00      	nop
 810c79c:	100049bc 	.word	0x100049bc

0810c7a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810c7a0:	b580      	push	{r7, lr}
 810c7a2:	b084      	sub	sp, #16
 810c7a4:	af00      	add	r7, sp, #0
 810c7a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810c7a8:	f7ff fa74 	bl	810bc94 <xTaskGetTickCount>
 810c7ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810c7ae:	4b0b      	ldr	r3, [pc, #44]	; (810c7dc <prvSampleTimeNow+0x3c>)
 810c7b0:	681b      	ldr	r3, [r3, #0]
 810c7b2:	68fa      	ldr	r2, [r7, #12]
 810c7b4:	429a      	cmp	r2, r3
 810c7b6:	d205      	bcs.n	810c7c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810c7b8:	f000 f936 	bl	810ca28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810c7bc:	687b      	ldr	r3, [r7, #4]
 810c7be:	2201      	movs	r2, #1
 810c7c0:	601a      	str	r2, [r3, #0]
 810c7c2:	e002      	b.n	810c7ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810c7c4:	687b      	ldr	r3, [r7, #4]
 810c7c6:	2200      	movs	r2, #0
 810c7c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810c7ca:	4a04      	ldr	r2, [pc, #16]	; (810c7dc <prvSampleTimeNow+0x3c>)
 810c7cc:	68fb      	ldr	r3, [r7, #12]
 810c7ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810c7d0:	68fb      	ldr	r3, [r7, #12]
}
 810c7d2:	4618      	mov	r0, r3
 810c7d4:	3710      	adds	r7, #16
 810c7d6:	46bd      	mov	sp, r7
 810c7d8:	bd80      	pop	{r7, pc}
 810c7da:	bf00      	nop
 810c7dc:	100049cc 	.word	0x100049cc

0810c7e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810c7e0:	b580      	push	{r7, lr}
 810c7e2:	b086      	sub	sp, #24
 810c7e4:	af00      	add	r7, sp, #0
 810c7e6:	60f8      	str	r0, [r7, #12]
 810c7e8:	60b9      	str	r1, [r7, #8]
 810c7ea:	607a      	str	r2, [r7, #4]
 810c7ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810c7ee:	2300      	movs	r3, #0
 810c7f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810c7f2:	68fb      	ldr	r3, [r7, #12]
 810c7f4:	68ba      	ldr	r2, [r7, #8]
 810c7f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810c7f8:	68fb      	ldr	r3, [r7, #12]
 810c7fa:	68fa      	ldr	r2, [r7, #12]
 810c7fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810c7fe:	68ba      	ldr	r2, [r7, #8]
 810c800:	687b      	ldr	r3, [r7, #4]
 810c802:	429a      	cmp	r2, r3
 810c804:	d812      	bhi.n	810c82c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810c806:	687a      	ldr	r2, [r7, #4]
 810c808:	683b      	ldr	r3, [r7, #0]
 810c80a:	1ad2      	subs	r2, r2, r3
 810c80c:	68fb      	ldr	r3, [r7, #12]
 810c80e:	699b      	ldr	r3, [r3, #24]
 810c810:	429a      	cmp	r2, r3
 810c812:	d302      	bcc.n	810c81a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810c814:	2301      	movs	r3, #1
 810c816:	617b      	str	r3, [r7, #20]
 810c818:	e01b      	b.n	810c852 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810c81a:	4b10      	ldr	r3, [pc, #64]	; (810c85c <prvInsertTimerInActiveList+0x7c>)
 810c81c:	681a      	ldr	r2, [r3, #0]
 810c81e:	68fb      	ldr	r3, [r7, #12]
 810c820:	3304      	adds	r3, #4
 810c822:	4619      	mov	r1, r3
 810c824:	4610      	mov	r0, r2
 810c826:	f7fd ff52 	bl	810a6ce <vListInsert>
 810c82a:	e012      	b.n	810c852 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810c82c:	687a      	ldr	r2, [r7, #4]
 810c82e:	683b      	ldr	r3, [r7, #0]
 810c830:	429a      	cmp	r2, r3
 810c832:	d206      	bcs.n	810c842 <prvInsertTimerInActiveList+0x62>
 810c834:	68ba      	ldr	r2, [r7, #8]
 810c836:	683b      	ldr	r3, [r7, #0]
 810c838:	429a      	cmp	r2, r3
 810c83a:	d302      	bcc.n	810c842 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810c83c:	2301      	movs	r3, #1
 810c83e:	617b      	str	r3, [r7, #20]
 810c840:	e007      	b.n	810c852 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810c842:	4b07      	ldr	r3, [pc, #28]	; (810c860 <prvInsertTimerInActiveList+0x80>)
 810c844:	681a      	ldr	r2, [r3, #0]
 810c846:	68fb      	ldr	r3, [r7, #12]
 810c848:	3304      	adds	r3, #4
 810c84a:	4619      	mov	r1, r3
 810c84c:	4610      	mov	r0, r2
 810c84e:	f7fd ff3e 	bl	810a6ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 810c852:	697b      	ldr	r3, [r7, #20]
}
 810c854:	4618      	mov	r0, r3
 810c856:	3718      	adds	r7, #24
 810c858:	46bd      	mov	sp, r7
 810c85a:	bd80      	pop	{r7, pc}
 810c85c:	100049c0 	.word	0x100049c0
 810c860:	100049bc 	.word	0x100049bc

0810c864 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810c864:	b580      	push	{r7, lr}
 810c866:	b08e      	sub	sp, #56	; 0x38
 810c868:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810c86a:	e0ca      	b.n	810ca02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810c86c:	687b      	ldr	r3, [r7, #4]
 810c86e:	2b00      	cmp	r3, #0
 810c870:	da18      	bge.n	810c8a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810c872:	1d3b      	adds	r3, r7, #4
 810c874:	3304      	adds	r3, #4
 810c876:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810c878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c87a:	2b00      	cmp	r3, #0
 810c87c:	d10a      	bne.n	810c894 <prvProcessReceivedCommands+0x30>
	__asm volatile
 810c87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c882:	f383 8811 	msr	BASEPRI, r3
 810c886:	f3bf 8f6f 	isb	sy
 810c88a:	f3bf 8f4f 	dsb	sy
 810c88e:	61fb      	str	r3, [r7, #28]
}
 810c890:	bf00      	nop
 810c892:	e7fe      	b.n	810c892 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c896:	681b      	ldr	r3, [r3, #0]
 810c898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810c89a:	6850      	ldr	r0, [r2, #4]
 810c89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810c89e:	6892      	ldr	r2, [r2, #8]
 810c8a0:	4611      	mov	r1, r2
 810c8a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810c8a4:	687b      	ldr	r3, [r7, #4]
 810c8a6:	2b00      	cmp	r3, #0
 810c8a8:	f2c0 80aa 	blt.w	810ca00 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810c8ac:	68fb      	ldr	r3, [r7, #12]
 810c8ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c8b2:	695b      	ldr	r3, [r3, #20]
 810c8b4:	2b00      	cmp	r3, #0
 810c8b6:	d004      	beq.n	810c8c2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c8ba:	3304      	adds	r3, #4
 810c8bc:	4618      	mov	r0, r3
 810c8be:	f7fd ff3f 	bl	810a740 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810c8c2:	463b      	mov	r3, r7
 810c8c4:	4618      	mov	r0, r3
 810c8c6:	f7ff ff6b 	bl	810c7a0 <prvSampleTimeNow>
 810c8ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810c8cc:	687b      	ldr	r3, [r7, #4]
 810c8ce:	2b09      	cmp	r3, #9
 810c8d0:	f200 8097 	bhi.w	810ca02 <prvProcessReceivedCommands+0x19e>
 810c8d4:	a201      	add	r2, pc, #4	; (adr r2, 810c8dc <prvProcessReceivedCommands+0x78>)
 810c8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c8da:	bf00      	nop
 810c8dc:	0810c905 	.word	0x0810c905
 810c8e0:	0810c905 	.word	0x0810c905
 810c8e4:	0810c905 	.word	0x0810c905
 810c8e8:	0810c979 	.word	0x0810c979
 810c8ec:	0810c98d 	.word	0x0810c98d
 810c8f0:	0810c9d7 	.word	0x0810c9d7
 810c8f4:	0810c905 	.word	0x0810c905
 810c8f8:	0810c905 	.word	0x0810c905
 810c8fc:	0810c979 	.word	0x0810c979
 810c900:	0810c98d 	.word	0x0810c98d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810c90a:	f043 0301 	orr.w	r3, r3, #1
 810c90e:	b2da      	uxtb	r2, r3
 810c910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810c916:	68ba      	ldr	r2, [r7, #8]
 810c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c91a:	699b      	ldr	r3, [r3, #24]
 810c91c:	18d1      	adds	r1, r2, r3
 810c91e:	68bb      	ldr	r3, [r7, #8]
 810c920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810c924:	f7ff ff5c 	bl	810c7e0 <prvInsertTimerInActiveList>
 810c928:	4603      	mov	r3, r0
 810c92a:	2b00      	cmp	r3, #0
 810c92c:	d069      	beq.n	810ca02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c930:	6a1b      	ldr	r3, [r3, #32]
 810c932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810c934:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810c93c:	f003 0304 	and.w	r3, r3, #4
 810c940:	2b00      	cmp	r3, #0
 810c942:	d05e      	beq.n	810ca02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810c944:	68ba      	ldr	r2, [r7, #8]
 810c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c948:	699b      	ldr	r3, [r3, #24]
 810c94a:	441a      	add	r2, r3
 810c94c:	2300      	movs	r3, #0
 810c94e:	9300      	str	r3, [sp, #0]
 810c950:	2300      	movs	r3, #0
 810c952:	2100      	movs	r1, #0
 810c954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810c956:	f7ff fe05 	bl	810c564 <xTimerGenericCommand>
 810c95a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810c95c:	6a3b      	ldr	r3, [r7, #32]
 810c95e:	2b00      	cmp	r3, #0
 810c960:	d14f      	bne.n	810ca02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 810c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c966:	f383 8811 	msr	BASEPRI, r3
 810c96a:	f3bf 8f6f 	isb	sy
 810c96e:	f3bf 8f4f 	dsb	sy
 810c972:	61bb      	str	r3, [r7, #24]
}
 810c974:	bf00      	nop
 810c976:	e7fe      	b.n	810c976 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c97a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810c97e:	f023 0301 	bic.w	r3, r3, #1
 810c982:	b2da      	uxtb	r2, r3
 810c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810c98a:	e03a      	b.n	810ca02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c98e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810c992:	f043 0301 	orr.w	r3, r3, #1
 810c996:	b2da      	uxtb	r2, r3
 810c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c99a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810c99e:	68ba      	ldr	r2, [r7, #8]
 810c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9a2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9a6:	699b      	ldr	r3, [r3, #24]
 810c9a8:	2b00      	cmp	r3, #0
 810c9aa:	d10a      	bne.n	810c9c2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 810c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 810c9b0:	f383 8811 	msr	BASEPRI, r3
 810c9b4:	f3bf 8f6f 	isb	sy
 810c9b8:	f3bf 8f4f 	dsb	sy
 810c9bc:	617b      	str	r3, [r7, #20]
}
 810c9be:	bf00      	nop
 810c9c0:	e7fe      	b.n	810c9c0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810c9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9c4:	699a      	ldr	r2, [r3, #24]
 810c9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9c8:	18d1      	adds	r1, r2, r3
 810c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810c9ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810c9d0:	f7ff ff06 	bl	810c7e0 <prvInsertTimerInActiveList>
					break;
 810c9d4:	e015      	b.n	810ca02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810c9dc:	f003 0302 	and.w	r3, r3, #2
 810c9e0:	2b00      	cmp	r3, #0
 810c9e2:	d103      	bne.n	810c9ec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 810c9e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810c9e6:	f7fd fd03 	bl	810a3f0 <vPortFree>
 810c9ea:	e00a      	b.n	810ca02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810c9f2:	f023 0301 	bic.w	r3, r3, #1
 810c9f6:	b2da      	uxtb	r2, r3
 810c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810c9fe:	e000      	b.n	810ca02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 810ca00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810ca02:	4b08      	ldr	r3, [pc, #32]	; (810ca24 <prvProcessReceivedCommands+0x1c0>)
 810ca04:	681b      	ldr	r3, [r3, #0]
 810ca06:	1d39      	adds	r1, r7, #4
 810ca08:	2200      	movs	r2, #0
 810ca0a:	4618      	mov	r0, r3
 810ca0c:	f7fe fbec 	bl	810b1e8 <xQueueReceive>
 810ca10:	4603      	mov	r3, r0
 810ca12:	2b00      	cmp	r3, #0
 810ca14:	f47f af2a 	bne.w	810c86c <prvProcessReceivedCommands+0x8>
	}
}
 810ca18:	bf00      	nop
 810ca1a:	bf00      	nop
 810ca1c:	3730      	adds	r7, #48	; 0x30
 810ca1e:	46bd      	mov	sp, r7
 810ca20:	bd80      	pop	{r7, pc}
 810ca22:	bf00      	nop
 810ca24:	100049c4 	.word	0x100049c4

0810ca28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810ca28:	b580      	push	{r7, lr}
 810ca2a:	b088      	sub	sp, #32
 810ca2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810ca2e:	e048      	b.n	810cac2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810ca30:	4b2d      	ldr	r3, [pc, #180]	; (810cae8 <prvSwitchTimerLists+0xc0>)
 810ca32:	681b      	ldr	r3, [r3, #0]
 810ca34:	68db      	ldr	r3, [r3, #12]
 810ca36:	681b      	ldr	r3, [r3, #0]
 810ca38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ca3a:	4b2b      	ldr	r3, [pc, #172]	; (810cae8 <prvSwitchTimerLists+0xc0>)
 810ca3c:	681b      	ldr	r3, [r3, #0]
 810ca3e:	68db      	ldr	r3, [r3, #12]
 810ca40:	68db      	ldr	r3, [r3, #12]
 810ca42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810ca44:	68fb      	ldr	r3, [r7, #12]
 810ca46:	3304      	adds	r3, #4
 810ca48:	4618      	mov	r0, r3
 810ca4a:	f7fd fe79 	bl	810a740 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810ca4e:	68fb      	ldr	r3, [r7, #12]
 810ca50:	6a1b      	ldr	r3, [r3, #32]
 810ca52:	68f8      	ldr	r0, [r7, #12]
 810ca54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810ca56:	68fb      	ldr	r3, [r7, #12]
 810ca58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810ca5c:	f003 0304 	and.w	r3, r3, #4
 810ca60:	2b00      	cmp	r3, #0
 810ca62:	d02e      	beq.n	810cac2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810ca64:	68fb      	ldr	r3, [r7, #12]
 810ca66:	699b      	ldr	r3, [r3, #24]
 810ca68:	693a      	ldr	r2, [r7, #16]
 810ca6a:	4413      	add	r3, r2
 810ca6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810ca6e:	68ba      	ldr	r2, [r7, #8]
 810ca70:	693b      	ldr	r3, [r7, #16]
 810ca72:	429a      	cmp	r2, r3
 810ca74:	d90e      	bls.n	810ca94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810ca76:	68fb      	ldr	r3, [r7, #12]
 810ca78:	68ba      	ldr	r2, [r7, #8]
 810ca7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810ca7c:	68fb      	ldr	r3, [r7, #12]
 810ca7e:	68fa      	ldr	r2, [r7, #12]
 810ca80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810ca82:	4b19      	ldr	r3, [pc, #100]	; (810cae8 <prvSwitchTimerLists+0xc0>)
 810ca84:	681a      	ldr	r2, [r3, #0]
 810ca86:	68fb      	ldr	r3, [r7, #12]
 810ca88:	3304      	adds	r3, #4
 810ca8a:	4619      	mov	r1, r3
 810ca8c:	4610      	mov	r0, r2
 810ca8e:	f7fd fe1e 	bl	810a6ce <vListInsert>
 810ca92:	e016      	b.n	810cac2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810ca94:	2300      	movs	r3, #0
 810ca96:	9300      	str	r3, [sp, #0]
 810ca98:	2300      	movs	r3, #0
 810ca9a:	693a      	ldr	r2, [r7, #16]
 810ca9c:	2100      	movs	r1, #0
 810ca9e:	68f8      	ldr	r0, [r7, #12]
 810caa0:	f7ff fd60 	bl	810c564 <xTimerGenericCommand>
 810caa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810caa6:	687b      	ldr	r3, [r7, #4]
 810caa8:	2b00      	cmp	r3, #0
 810caaa:	d10a      	bne.n	810cac2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 810caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 810cab0:	f383 8811 	msr	BASEPRI, r3
 810cab4:	f3bf 8f6f 	isb	sy
 810cab8:	f3bf 8f4f 	dsb	sy
 810cabc:	603b      	str	r3, [r7, #0]
}
 810cabe:	bf00      	nop
 810cac0:	e7fe      	b.n	810cac0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810cac2:	4b09      	ldr	r3, [pc, #36]	; (810cae8 <prvSwitchTimerLists+0xc0>)
 810cac4:	681b      	ldr	r3, [r3, #0]
 810cac6:	681b      	ldr	r3, [r3, #0]
 810cac8:	2b00      	cmp	r3, #0
 810caca:	d1b1      	bne.n	810ca30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810cacc:	4b06      	ldr	r3, [pc, #24]	; (810cae8 <prvSwitchTimerLists+0xc0>)
 810cace:	681b      	ldr	r3, [r3, #0]
 810cad0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810cad2:	4b06      	ldr	r3, [pc, #24]	; (810caec <prvSwitchTimerLists+0xc4>)
 810cad4:	681b      	ldr	r3, [r3, #0]
 810cad6:	4a04      	ldr	r2, [pc, #16]	; (810cae8 <prvSwitchTimerLists+0xc0>)
 810cad8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810cada:	4a04      	ldr	r2, [pc, #16]	; (810caec <prvSwitchTimerLists+0xc4>)
 810cadc:	697b      	ldr	r3, [r7, #20]
 810cade:	6013      	str	r3, [r2, #0]
}
 810cae0:	bf00      	nop
 810cae2:	3718      	adds	r7, #24
 810cae4:	46bd      	mov	sp, r7
 810cae6:	bd80      	pop	{r7, pc}
 810cae8:	100049bc 	.word	0x100049bc
 810caec:	100049c0 	.word	0x100049c0

0810caf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810caf0:	b580      	push	{r7, lr}
 810caf2:	b082      	sub	sp, #8
 810caf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810caf6:	f7fd ff7d 	bl	810a9f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810cafa:	4b15      	ldr	r3, [pc, #84]	; (810cb50 <prvCheckForValidListAndQueue+0x60>)
 810cafc:	681b      	ldr	r3, [r3, #0]
 810cafe:	2b00      	cmp	r3, #0
 810cb00:	d120      	bne.n	810cb44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810cb02:	4814      	ldr	r0, [pc, #80]	; (810cb54 <prvCheckForValidListAndQueue+0x64>)
 810cb04:	f7fd fd92 	bl	810a62c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810cb08:	4813      	ldr	r0, [pc, #76]	; (810cb58 <prvCheckForValidListAndQueue+0x68>)
 810cb0a:	f7fd fd8f 	bl	810a62c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810cb0e:	4b13      	ldr	r3, [pc, #76]	; (810cb5c <prvCheckForValidListAndQueue+0x6c>)
 810cb10:	4a10      	ldr	r2, [pc, #64]	; (810cb54 <prvCheckForValidListAndQueue+0x64>)
 810cb12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810cb14:	4b12      	ldr	r3, [pc, #72]	; (810cb60 <prvCheckForValidListAndQueue+0x70>)
 810cb16:	4a10      	ldr	r2, [pc, #64]	; (810cb58 <prvCheckForValidListAndQueue+0x68>)
 810cb18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810cb1a:	2300      	movs	r3, #0
 810cb1c:	9300      	str	r3, [sp, #0]
 810cb1e:	4b11      	ldr	r3, [pc, #68]	; (810cb64 <prvCheckForValidListAndQueue+0x74>)
 810cb20:	4a11      	ldr	r2, [pc, #68]	; (810cb68 <prvCheckForValidListAndQueue+0x78>)
 810cb22:	2110      	movs	r1, #16
 810cb24:	200a      	movs	r0, #10
 810cb26:	f7fe f8ef 	bl	810ad08 <xQueueGenericCreateStatic>
 810cb2a:	4603      	mov	r3, r0
 810cb2c:	4a08      	ldr	r2, [pc, #32]	; (810cb50 <prvCheckForValidListAndQueue+0x60>)
 810cb2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810cb30:	4b07      	ldr	r3, [pc, #28]	; (810cb50 <prvCheckForValidListAndQueue+0x60>)
 810cb32:	681b      	ldr	r3, [r3, #0]
 810cb34:	2b00      	cmp	r3, #0
 810cb36:	d005      	beq.n	810cb44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810cb38:	4b05      	ldr	r3, [pc, #20]	; (810cb50 <prvCheckForValidListAndQueue+0x60>)
 810cb3a:	681b      	ldr	r3, [r3, #0]
 810cb3c:	490b      	ldr	r1, [pc, #44]	; (810cb6c <prvCheckForValidListAndQueue+0x7c>)
 810cb3e:	4618      	mov	r0, r3
 810cb40:	f7fe fd42 	bl	810b5c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810cb44:	f7fd ff86 	bl	810aa54 <vPortExitCritical>
}
 810cb48:	bf00      	nop
 810cb4a:	46bd      	mov	sp, r7
 810cb4c:	bd80      	pop	{r7, pc}
 810cb4e:	bf00      	nop
 810cb50:	100049c4 	.word	0x100049c4
 810cb54:	10004994 	.word	0x10004994
 810cb58:	100049a8 	.word	0x100049a8
 810cb5c:	100049bc 	.word	0x100049bc
 810cb60:	100049c0 	.word	0x100049c0
 810cb64:	10004a70 	.word	0x10004a70
 810cb68:	100049d0 	.word	0x100049d0
 810cb6c:	0810cf30 	.word	0x0810cf30

0810cb70 <__libc_init_array>:
 810cb70:	b570      	push	{r4, r5, r6, lr}
 810cb72:	4d0d      	ldr	r5, [pc, #52]	; (810cba8 <__libc_init_array+0x38>)
 810cb74:	4c0d      	ldr	r4, [pc, #52]	; (810cbac <__libc_init_array+0x3c>)
 810cb76:	1b64      	subs	r4, r4, r5
 810cb78:	10a4      	asrs	r4, r4, #2
 810cb7a:	2600      	movs	r6, #0
 810cb7c:	42a6      	cmp	r6, r4
 810cb7e:	d109      	bne.n	810cb94 <__libc_init_array+0x24>
 810cb80:	4d0b      	ldr	r5, [pc, #44]	; (810cbb0 <__libc_init_array+0x40>)
 810cb82:	4c0c      	ldr	r4, [pc, #48]	; (810cbb4 <__libc_init_array+0x44>)
 810cb84:	f000 f910 	bl	810cda8 <_init>
 810cb88:	1b64      	subs	r4, r4, r5
 810cb8a:	10a4      	asrs	r4, r4, #2
 810cb8c:	2600      	movs	r6, #0
 810cb8e:	42a6      	cmp	r6, r4
 810cb90:	d105      	bne.n	810cb9e <__libc_init_array+0x2e>
 810cb92:	bd70      	pop	{r4, r5, r6, pc}
 810cb94:	f855 3b04 	ldr.w	r3, [r5], #4
 810cb98:	4798      	blx	r3
 810cb9a:	3601      	adds	r6, #1
 810cb9c:	e7ee      	b.n	810cb7c <__libc_init_array+0xc>
 810cb9e:	f855 3b04 	ldr.w	r3, [r5], #4
 810cba2:	4798      	blx	r3
 810cba4:	3601      	adds	r6, #1
 810cba6:	e7f2      	b.n	810cb8e <__libc_init_array+0x1e>
 810cba8:	0810d038 	.word	0x0810d038
 810cbac:	0810d038 	.word	0x0810d038
 810cbb0:	0810d038 	.word	0x0810d038
 810cbb4:	0810d03c 	.word	0x0810d03c

0810cbb8 <__retarget_lock_acquire_recursive>:
 810cbb8:	4770      	bx	lr

0810cbba <__retarget_lock_release_recursive>:
 810cbba:	4770      	bx	lr

0810cbbc <memcpy>:
 810cbbc:	440a      	add	r2, r1
 810cbbe:	4291      	cmp	r1, r2
 810cbc0:	f100 33ff 	add.w	r3, r0, #4294967295
 810cbc4:	d100      	bne.n	810cbc8 <memcpy+0xc>
 810cbc6:	4770      	bx	lr
 810cbc8:	b510      	push	{r4, lr}
 810cbca:	f811 4b01 	ldrb.w	r4, [r1], #1
 810cbce:	f803 4f01 	strb.w	r4, [r3, #1]!
 810cbd2:	4291      	cmp	r1, r2
 810cbd4:	d1f9      	bne.n	810cbca <memcpy+0xe>
 810cbd6:	bd10      	pop	{r4, pc}

0810cbd8 <memmove>:
 810cbd8:	4288      	cmp	r0, r1
 810cbda:	b510      	push	{r4, lr}
 810cbdc:	eb01 0402 	add.w	r4, r1, r2
 810cbe0:	d902      	bls.n	810cbe8 <memmove+0x10>
 810cbe2:	4284      	cmp	r4, r0
 810cbe4:	4623      	mov	r3, r4
 810cbe6:	d807      	bhi.n	810cbf8 <memmove+0x20>
 810cbe8:	1e43      	subs	r3, r0, #1
 810cbea:	42a1      	cmp	r1, r4
 810cbec:	d008      	beq.n	810cc00 <memmove+0x28>
 810cbee:	f811 2b01 	ldrb.w	r2, [r1], #1
 810cbf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 810cbf6:	e7f8      	b.n	810cbea <memmove+0x12>
 810cbf8:	4402      	add	r2, r0
 810cbfa:	4601      	mov	r1, r0
 810cbfc:	428a      	cmp	r2, r1
 810cbfe:	d100      	bne.n	810cc02 <memmove+0x2a>
 810cc00:	bd10      	pop	{r4, pc}
 810cc02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810cc06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810cc0a:	e7f7      	b.n	810cbfc <memmove+0x24>

0810cc0c <memset>:
 810cc0c:	4402      	add	r2, r0
 810cc0e:	4603      	mov	r3, r0
 810cc10:	4293      	cmp	r3, r2
 810cc12:	d100      	bne.n	810cc16 <memset+0xa>
 810cc14:	4770      	bx	lr
 810cc16:	f803 1b01 	strb.w	r1, [r3], #1
 810cc1a:	e7f9      	b.n	810cc10 <memset+0x4>

0810cc1c <_free_r>:
 810cc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810cc1e:	2900      	cmp	r1, #0
 810cc20:	d048      	beq.n	810ccb4 <_free_r+0x98>
 810cc22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810cc26:	9001      	str	r0, [sp, #4]
 810cc28:	2b00      	cmp	r3, #0
 810cc2a:	f1a1 0404 	sub.w	r4, r1, #4
 810cc2e:	bfb8      	it	lt
 810cc30:	18e4      	addlt	r4, r4, r3
 810cc32:	f000 f8ad 	bl	810cd90 <__malloc_lock>
 810cc36:	4a20      	ldr	r2, [pc, #128]	; (810ccb8 <_free_r+0x9c>)
 810cc38:	9801      	ldr	r0, [sp, #4]
 810cc3a:	6813      	ldr	r3, [r2, #0]
 810cc3c:	4615      	mov	r5, r2
 810cc3e:	b933      	cbnz	r3, 810cc4e <_free_r+0x32>
 810cc40:	6063      	str	r3, [r4, #4]
 810cc42:	6014      	str	r4, [r2, #0]
 810cc44:	b003      	add	sp, #12
 810cc46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810cc4a:	f000 b8a7 	b.w	810cd9c <__malloc_unlock>
 810cc4e:	42a3      	cmp	r3, r4
 810cc50:	d90b      	bls.n	810cc6a <_free_r+0x4e>
 810cc52:	6821      	ldr	r1, [r4, #0]
 810cc54:	1862      	adds	r2, r4, r1
 810cc56:	4293      	cmp	r3, r2
 810cc58:	bf04      	itt	eq
 810cc5a:	681a      	ldreq	r2, [r3, #0]
 810cc5c:	685b      	ldreq	r3, [r3, #4]
 810cc5e:	6063      	str	r3, [r4, #4]
 810cc60:	bf04      	itt	eq
 810cc62:	1852      	addeq	r2, r2, r1
 810cc64:	6022      	streq	r2, [r4, #0]
 810cc66:	602c      	str	r4, [r5, #0]
 810cc68:	e7ec      	b.n	810cc44 <_free_r+0x28>
 810cc6a:	461a      	mov	r2, r3
 810cc6c:	685b      	ldr	r3, [r3, #4]
 810cc6e:	b10b      	cbz	r3, 810cc74 <_free_r+0x58>
 810cc70:	42a3      	cmp	r3, r4
 810cc72:	d9fa      	bls.n	810cc6a <_free_r+0x4e>
 810cc74:	6811      	ldr	r1, [r2, #0]
 810cc76:	1855      	adds	r5, r2, r1
 810cc78:	42a5      	cmp	r5, r4
 810cc7a:	d10b      	bne.n	810cc94 <_free_r+0x78>
 810cc7c:	6824      	ldr	r4, [r4, #0]
 810cc7e:	4421      	add	r1, r4
 810cc80:	1854      	adds	r4, r2, r1
 810cc82:	42a3      	cmp	r3, r4
 810cc84:	6011      	str	r1, [r2, #0]
 810cc86:	d1dd      	bne.n	810cc44 <_free_r+0x28>
 810cc88:	681c      	ldr	r4, [r3, #0]
 810cc8a:	685b      	ldr	r3, [r3, #4]
 810cc8c:	6053      	str	r3, [r2, #4]
 810cc8e:	4421      	add	r1, r4
 810cc90:	6011      	str	r1, [r2, #0]
 810cc92:	e7d7      	b.n	810cc44 <_free_r+0x28>
 810cc94:	d902      	bls.n	810cc9c <_free_r+0x80>
 810cc96:	230c      	movs	r3, #12
 810cc98:	6003      	str	r3, [r0, #0]
 810cc9a:	e7d3      	b.n	810cc44 <_free_r+0x28>
 810cc9c:	6825      	ldr	r5, [r4, #0]
 810cc9e:	1961      	adds	r1, r4, r5
 810cca0:	428b      	cmp	r3, r1
 810cca2:	bf04      	itt	eq
 810cca4:	6819      	ldreq	r1, [r3, #0]
 810cca6:	685b      	ldreq	r3, [r3, #4]
 810cca8:	6063      	str	r3, [r4, #4]
 810ccaa:	bf04      	itt	eq
 810ccac:	1949      	addeq	r1, r1, r5
 810ccae:	6021      	streq	r1, [r4, #0]
 810ccb0:	6054      	str	r4, [r2, #4]
 810ccb2:	e7c7      	b.n	810cc44 <_free_r+0x28>
 810ccb4:	b003      	add	sp, #12
 810ccb6:	bd30      	pop	{r4, r5, pc}
 810ccb8:	10004ac0 	.word	0x10004ac0

0810ccbc <cleanup_glue>:
 810ccbc:	b538      	push	{r3, r4, r5, lr}
 810ccbe:	460c      	mov	r4, r1
 810ccc0:	6809      	ldr	r1, [r1, #0]
 810ccc2:	4605      	mov	r5, r0
 810ccc4:	b109      	cbz	r1, 810ccca <cleanup_glue+0xe>
 810ccc6:	f7ff fff9 	bl	810ccbc <cleanup_glue>
 810ccca:	4621      	mov	r1, r4
 810cccc:	4628      	mov	r0, r5
 810ccce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ccd2:	f7ff bfa3 	b.w	810cc1c <_free_r>
	...

0810ccd8 <_reclaim_reent>:
 810ccd8:	4b2c      	ldr	r3, [pc, #176]	; (810cd8c <_reclaim_reent+0xb4>)
 810ccda:	681b      	ldr	r3, [r3, #0]
 810ccdc:	4283      	cmp	r3, r0
 810ccde:	b570      	push	{r4, r5, r6, lr}
 810cce0:	4604      	mov	r4, r0
 810cce2:	d051      	beq.n	810cd88 <_reclaim_reent+0xb0>
 810cce4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 810cce6:	b143      	cbz	r3, 810ccfa <_reclaim_reent+0x22>
 810cce8:	68db      	ldr	r3, [r3, #12]
 810ccea:	2b00      	cmp	r3, #0
 810ccec:	d14a      	bne.n	810cd84 <_reclaim_reent+0xac>
 810ccee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ccf0:	6819      	ldr	r1, [r3, #0]
 810ccf2:	b111      	cbz	r1, 810ccfa <_reclaim_reent+0x22>
 810ccf4:	4620      	mov	r0, r4
 810ccf6:	f7ff ff91 	bl	810cc1c <_free_r>
 810ccfa:	6961      	ldr	r1, [r4, #20]
 810ccfc:	b111      	cbz	r1, 810cd04 <_reclaim_reent+0x2c>
 810ccfe:	4620      	mov	r0, r4
 810cd00:	f7ff ff8c 	bl	810cc1c <_free_r>
 810cd04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 810cd06:	b111      	cbz	r1, 810cd0e <_reclaim_reent+0x36>
 810cd08:	4620      	mov	r0, r4
 810cd0a:	f7ff ff87 	bl	810cc1c <_free_r>
 810cd0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 810cd10:	b111      	cbz	r1, 810cd18 <_reclaim_reent+0x40>
 810cd12:	4620      	mov	r0, r4
 810cd14:	f7ff ff82 	bl	810cc1c <_free_r>
 810cd18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 810cd1a:	b111      	cbz	r1, 810cd22 <_reclaim_reent+0x4a>
 810cd1c:	4620      	mov	r0, r4
 810cd1e:	f7ff ff7d 	bl	810cc1c <_free_r>
 810cd22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 810cd24:	b111      	cbz	r1, 810cd2c <_reclaim_reent+0x54>
 810cd26:	4620      	mov	r0, r4
 810cd28:	f7ff ff78 	bl	810cc1c <_free_r>
 810cd2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 810cd2e:	b111      	cbz	r1, 810cd36 <_reclaim_reent+0x5e>
 810cd30:	4620      	mov	r0, r4
 810cd32:	f7ff ff73 	bl	810cc1c <_free_r>
 810cd36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 810cd38:	b111      	cbz	r1, 810cd40 <_reclaim_reent+0x68>
 810cd3a:	4620      	mov	r0, r4
 810cd3c:	f7ff ff6e 	bl	810cc1c <_free_r>
 810cd40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810cd42:	b111      	cbz	r1, 810cd4a <_reclaim_reent+0x72>
 810cd44:	4620      	mov	r0, r4
 810cd46:	f7ff ff69 	bl	810cc1c <_free_r>
 810cd4a:	69a3      	ldr	r3, [r4, #24]
 810cd4c:	b1e3      	cbz	r3, 810cd88 <_reclaim_reent+0xb0>
 810cd4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810cd50:	4620      	mov	r0, r4
 810cd52:	4798      	blx	r3
 810cd54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 810cd56:	b1b9      	cbz	r1, 810cd88 <_reclaim_reent+0xb0>
 810cd58:	4620      	mov	r0, r4
 810cd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810cd5e:	f7ff bfad 	b.w	810ccbc <cleanup_glue>
 810cd62:	5949      	ldr	r1, [r1, r5]
 810cd64:	b941      	cbnz	r1, 810cd78 <_reclaim_reent+0xa0>
 810cd66:	3504      	adds	r5, #4
 810cd68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cd6a:	2d80      	cmp	r5, #128	; 0x80
 810cd6c:	68d9      	ldr	r1, [r3, #12]
 810cd6e:	d1f8      	bne.n	810cd62 <_reclaim_reent+0x8a>
 810cd70:	4620      	mov	r0, r4
 810cd72:	f7ff ff53 	bl	810cc1c <_free_r>
 810cd76:	e7ba      	b.n	810ccee <_reclaim_reent+0x16>
 810cd78:	680e      	ldr	r6, [r1, #0]
 810cd7a:	4620      	mov	r0, r4
 810cd7c:	f7ff ff4e 	bl	810cc1c <_free_r>
 810cd80:	4631      	mov	r1, r6
 810cd82:	e7ef      	b.n	810cd64 <_reclaim_reent+0x8c>
 810cd84:	2500      	movs	r5, #0
 810cd86:	e7ef      	b.n	810cd68 <_reclaim_reent+0x90>
 810cd88:	bd70      	pop	{r4, r5, r6, pc}
 810cd8a:	bf00      	nop
 810cd8c:	1000005c 	.word	0x1000005c

0810cd90 <__malloc_lock>:
 810cd90:	4801      	ldr	r0, [pc, #4]	; (810cd98 <__malloc_lock+0x8>)
 810cd92:	f7ff bf11 	b.w	810cbb8 <__retarget_lock_acquire_recursive>
 810cd96:	bf00      	nop
 810cd98:	10004e24 	.word	0x10004e24

0810cd9c <__malloc_unlock>:
 810cd9c:	4801      	ldr	r0, [pc, #4]	; (810cda4 <__malloc_unlock+0x8>)
 810cd9e:	f7ff bf0c 	b.w	810cbba <__retarget_lock_release_recursive>
 810cda2:	bf00      	nop
 810cda4:	10004e24 	.word	0x10004e24

0810cda8 <_init>:
 810cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cdaa:	bf00      	nop
 810cdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cdae:	bc08      	pop	{r3}
 810cdb0:	469e      	mov	lr, r3
 810cdb2:	4770      	bx	lr

0810cdb4 <_fini>:
 810cdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cdb6:	bf00      	nop
 810cdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cdba:	bc08      	pop	{r3}
 810cdbc:	469e      	mov	lr, r3
 810cdbe:	4770      	bx	lr
