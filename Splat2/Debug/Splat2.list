
Splat2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd04  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800bf04  0800bf04  0001bf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a8  0800c0a8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0a8  0800c0a8  0001c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0b0  0800c0b0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0b0  0800c0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006488  200001f8  0800c2b0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006680  0800c2b0  00026680  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e84f  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005770  00000000  00000000  0004ea75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000541e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  00055ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000082ff  00000000  00000000  000579d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002371e  00000000  00000000  0005fccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001141cd  00000000  00000000  000833ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001975ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080a8  00000000  00000000  00197610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800beec 	.word	0x0800beec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800beec 	.word	0x0800beec

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fca5 	bl	8000f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f838 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f960 	bl	80008a8 <MX_GPIO_Init>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 80005e8:	f000 f8fe 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f8cc 	bl	8000788 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005f0:	f000 f92a 	bl	8000848 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f4:	f007 f9b4 	bl	8007960 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <main+0x58>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <main+0x5c>)
 80005fe:	f007 fa19 	bl	8007a34 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <main+0x60>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayControllerTask, NULL, &displayTask_attributes);
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <main+0x64>)
 800060a:	2100      	movs	r1, #0
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <main+0x68>)
 800060e:	f007 fa11 	bl	8007a34 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <main+0x6c>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of programmerTask */
  programmerTaskHandle = osThreadNew(StartProgrammerTask, NULL, &programmerTask_attributes);
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <main+0x70>)
 800061a:	2100      	movs	r1, #0
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <main+0x74>)
 800061e:	f007 fa09 	bl	8007a34 <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <main+0x78>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000628:	f007 f9ce 	bl	80079c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x54>
 800062e:	bf00      	nop
 8000630:	0800bf8c 	.word	0x0800bf8c
 8000634:	080009ed 	.word	0x080009ed
 8000638:	20004b2c 	.word	0x20004b2c
 800063c:	0800bfb0 	.word	0x0800bfb0
 8000640:	08000a01 	.word	0x08000a01
 8000644:	20004bb4 	.word	0x20004bb4
 8000648:	0800bfd4 	.word	0x0800bfd4
 800064c:	08000a21 	.word	0x08000a21
 8000650:	20004d08 	.word	0x20004d08

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b0b8      	sub	sp, #224	; 0xe0
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800065e:	2234      	movs	r2, #52	; 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00a fce4 	bl	800b030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2290      	movs	r2, #144	; 0x90
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f00a fcd5 	bl	800b030 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000686:	f002 f911 	bl	80028ac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <SystemClock_Config+0x128>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a3b      	ldr	r2, [pc, #236]	; (800077c <SystemClock_Config+0x128>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b39      	ldr	r3, [pc, #228]	; (800077c <SystemClock_Config+0x128>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <SystemClock_Config+0x12c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006aa:	4a35      	ldr	r2, [pc, #212]	; (8000780 <SystemClock_Config+0x12c>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	4b33      	ldr	r3, [pc, #204]	; (8000780 <SystemClock_Config+0x12c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006be:	2301      	movs	r3, #1
 80006c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006e0:	2360      	movs	r3, #96	; 0x60
 80006e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f938 	bl	800296c <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000702:	f000 f9bf 	bl	8000a84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000706:	f002 f8e1 	bl	80028cc <HAL_PWREx_EnableOverDrive>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000710:	f000 f9b8 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000734:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000738:	2103      	movs	r1, #3
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fbc4 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000746:	f000 f99d 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <SystemClock_Config+0x130>)
 800074c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074e:	2300      	movs	r3, #0
 8000750:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000752:	2300      	movs	r3, #0
 8000754:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000756:	2300      	movs	r3, #0
 8000758:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fde3 	bl	8003330 <HAL_RCCEx_PeriphCLKConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000770:	f000 f988 	bl	8000a84 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	37e0      	adds	r7, #224	; 0xe0
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000
 8000784:	00200980 	.word	0x00200980

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART2_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x58>)
 80007cc:	f003 fcb8 	bl	8004140 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f955 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20004c3c 	.word	0x20004c3c
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800082c:	f003 fc88 	bl	8004140 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f925 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20004b30 	.word	0x20004b30
 8000844:	40004800 	.word	0x40004800

08000848 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_USART6_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART6_UART_Init+0x58>)
 800088c:	f003 fc58 	bl	8004140 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f8f5 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20004bb8 	.word	0x20004bb8
 80008a4:	40011400 	.word	0x40011400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b47      	ldr	r3, [pc, #284]	; (80009dc <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a46      	ldr	r2, [pc, #280]	; (80009dc <MX_GPIO_Init+0x134>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b44      	ldr	r3, [pc, #272]	; (80009dc <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	4b41      	ldr	r3, [pc, #260]	; (80009dc <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a40      	ldr	r2, [pc, #256]	; (80009dc <MX_GPIO_Init+0x134>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3e      	ldr	r3, [pc, #248]	; (80009dc <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b3b      	ldr	r3, [pc, #236]	; (80009dc <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a3a      	ldr	r2, [pc, #232]	; (80009dc <MX_GPIO_Init+0x134>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b38      	ldr	r3, [pc, #224]	; (80009dc <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <MX_GPIO_Init+0x134>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a34      	ldr	r2, [pc, #208]	; (80009dc <MX_GPIO_Init+0x134>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <MX_GPIO_Init+0x134>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <MX_GPIO_Init+0x134>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a28      	ldr	r2, [pc, #160]	; (80009dc <MX_GPIO_Init+0x134>)
 800093c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_GPIO_Init+0x134>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f244 0181 	movw	r1, #16513	; 0x4081
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_GPIO_Init+0x138>)
 8000956:	f000 fdc7 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4821      	ldr	r0, [pc, #132]	; (80009e4 <MX_GPIO_Init+0x13c>)
 8000960:	f000 fdc2 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	481b      	ldr	r0, [pc, #108]	; (80009e8 <MX_GPIO_Init+0x140>)
 800097c:	f000 fc08 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000980:	f244 0381 	movw	r3, #16513	; 0x4081
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_GPIO_Init+0x138>)
 800099a:	f000 fbf9 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099e:	2340      	movs	r3, #64	; 0x40
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80009b6:	f000 fbeb 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_GPIO_Init+0x13c>)
 80009ce:	f000 fbdf 	bl	8001190 <HAL_GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	; 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400
 80009e4:	40021800 	.word	0x40021800
 80009e8:	40020800 	.word	0x40020800

080009ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009f4:	f009 fd82 	bl	800a4fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f007 f8c1 	bl	8007b80 <osDelay>
 80009fe:	e7fb      	b.n	80009f8 <StartDefaultTask+0xc>

08000a00 <StartDisplayControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayControllerTask */
void StartDisplayControllerTask(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayControllerTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	4804      	ldr	r0, [pc, #16]	; (8000a1c <StartDisplayControllerTask+0x1c>)
 8000a0c:	f000 fd85 	bl	800151a <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a14:	f007 f8b4 	bl	8007b80 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a18:	e7f6      	b.n	8000a08 <StartDisplayControllerTask+0x8>
 8000a1a:	bf00      	nop
 8000a1c:	40020400 	.word	0x40020400

08000a20 <StartProgrammerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProgrammerTask */
void StartProgrammerTask(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
  for(;;)
  {

   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <StartProgrammerTask+0x38>)
 8000a2e:	f000 fd74 	bl	800151a <HAL_GPIO_TogglePin>

    for(int i=0;i<1000000; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e006      	b.n	8000a46 <StartProgrammerTask+0x26>
    {
    	printf(i);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00a fbaa 	bl	800b194 <iprintf>
    for(int i=0;i<1000000; i++)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <StartProgrammerTask+0x3c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	ddf4      	ble.n	8000a38 <StartProgrammerTask+0x18>
    }
osDelay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a52:	f007 f895 	bl	8007b80 <osDelay>
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a56:	e7e7      	b.n	8000a28 <StartProgrammerTask+0x8>
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	000f423f 	.word	0x000f423f

08000a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a72:	f000 fa67 	bl	8000f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40001000 	.word	0x40001000

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f000 fb35 	bl	800113c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a53      	ldr	r2, [pc, #332]	; (8000c4c <HAL_UART_MspInit+0x16c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d144      	bne.n	8000b8c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a52      	ldr	r2, [pc, #328]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	623b      	str	r3, [r7, #32]
 8000b18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a4c      	ldr	r2, [pc, #304]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a46      	ldr	r2, [pc, #280]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	483b      	ldr	r0, [pc, #236]	; (8000c54 <HAL_UART_MspInit+0x174>)
 8000b66:	f000 fb13 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4834      	ldr	r0, [pc, #208]	; (8000c58 <HAL_UART_MspInit+0x178>)
 8000b86:	f000 fb03 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000b8a:	e05b      	b.n	8000c44 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART3)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a32      	ldr	r2, [pc, #200]	; (8000c5c <HAL_UART_MspInit+0x17c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d129      	bne.n	8000bea <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	481d      	ldr	r0, [pc, #116]	; (8000c58 <HAL_UART_MspInit+0x178>)
 8000be4:	f000 fad4 	bl	8001190 <HAL_GPIO_Init>
}
 8000be8:	e02c      	b.n	8000c44 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_UART_MspInit+0x180>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d127      	bne.n	8000c44 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000bfa:	f043 0320 	orr.w	r3, r3, #32
 8000bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c04:	f003 0320 	and.w	r3, r3, #32
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_UART_MspInit+0x170>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c24:	23c0      	movs	r3, #192	; 0xc0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c34:	2308      	movs	r3, #8
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4809      	ldr	r0, [pc, #36]	; (8000c64 <HAL_UART_MspInit+0x184>)
 8000c40:	f000 faa6 	bl	8001190 <HAL_GPIO_Init>
}
 8000c44:	bf00      	nop
 8000c46:	3738      	adds	r7, #56	; 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40004800 	.word	0x40004800
 8000c60:	40011400 	.word	0x40011400
 8000c64:	40020800 	.word	0x40020800

08000c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	2036      	movs	r0, #54	; 0x36
 8000c7e:	f000 fa5d 	bl	800113c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c82:	2036      	movs	r0, #54	; 0x36
 8000c84:	f000 fa76 	bl	8001174 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_InitTick+0xa0>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_InitTick+0xa0>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_InitTick+0xa0>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca0:	f107 0210 	add.w	r2, r7, #16
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fb0e 	bl	80032cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cb0:	f002 fae4 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_InitTick+0xa4>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9b      	lsrs	r3, r3, #18
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_InitTick+0xa8>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_InitTick+0xac>)
 8000ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_InitTick+0xa8>)
 8000cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_InitTick+0xa8>)
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_InitTick+0xa8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_InitTick+0xa8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_InitTick+0xa8>)
 8000cea:	f002 ff49 	bl	8003b80 <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <HAL_InitTick+0xa8>)
 8000cf6:	f002 ffa5 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	20004d0c 	.word	0x20004d0c
 8000d14:	40001000 	.word	0x40001000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <TIM6_DAC_IRQHandler+0x10>)
 8000d4a:	f002 fff3 	bl	8003d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20004d0c 	.word	0x20004d0c

08000d58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <OTG_FS_IRQHandler+0x10>)
 8000d5e:	f000 fd3c 	bl	80017da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000626c 	.word	0x2000626c

08000d6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e00a      	b.n	8000d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d7e:	f3af 8000 	nop.w
 8000d82:	4601      	mov	r1, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	b2ca      	uxtb	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf0      	blt.n	8000d7e <_read+0x12>
	}

return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e009      	b.n	8000dcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	60ba      	str	r2, [r7, #8]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf1      	blt.n	8000db8 <_write+0x12>
	}
	return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_close>:

int _close(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e06:	605a      	str	r2, [r3, #4]
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_isatty>:

int _isatty(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
	return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f00a f892 	bl	800afa0 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20080000 	.word	0x20080000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	20000214 	.word	0x20000214
 8000eb0:	20006680 	.word	0x20006680

08000eb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef4:	4c0b      	ldr	r4, [pc, #44]	; (8000f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f02:	f7ff ffd7 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f00a f851 	bl	800afac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fb65 	bl	80005d8 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8000f1c:	0800c0b8 	.word	0x0800c0b8
  ldr r2, =_sbss
 8000f20:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8000f24:	20006680 	.word	0x20006680

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>

08000f2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f8f9 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fe97 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fda9 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20004d58 	.word	0x20004d58

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20004d58 	.word	0x20004d58

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <__NVIC_SetPriorityGrouping+0x40>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x40>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	05fa0000 	.word	0x05fa0000

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e175      	b.n	800149c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8164 	bne.w	8001496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x56>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80be 	beq.w	8001496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001332:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d037      	beq.n	80013ce <HAL_GPIO_Init+0x23e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d031      	beq.n	80013ca <HAL_GPIO_Init+0x23a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d02b      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_GPIO_Init+0x338>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d025      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_GPIO_Init+0x33c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_GPIO_Init+0x340>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x22a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x344>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x348>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_GPIO_Init+0x34c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x350>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x21a>
 80013a6:	2309      	movs	r3, #9
 80013a8:	e012      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013aa:	230a      	movs	r3, #10
 80013ac:	e010      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ae:	2308      	movs	r3, #8
 80013b0:	e00e      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x328>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x354>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae86 	bls.w	80011b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40022400 	.word	0x40022400
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	041a      	lsls	r2, r3, #16
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43d9      	mvns	r1, r3
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	400b      	ands	r3, r1
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800154e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001550:	b08f      	sub	sp, #60	; 0x3c
 8001552:	af0a      	add	r7, sp, #40	; 0x28
 8001554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e116      	b.n	800178e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f009 f9b0 	bl	800a8e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2203      	movs	r2, #3
 8001584:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fb39 	bl	8004c16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	687e      	ldr	r6, [r7, #4]
 80015ac:	466d      	mov	r5, sp
 80015ae:	f106 0410 	add.w	r4, r6, #16
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015be:	e885 0003 	stmia.w	r5, {r0, r1}
 80015c2:	1d33      	adds	r3, r6, #4
 80015c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f003 fa1a 	bl	8004a00 <USB_CoreInit>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2202      	movs	r2, #2
 80015d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0d7      	b.n	800178e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fb27 	bl	8004c38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	e04a      	b.n	8001686 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	333d      	adds	r3, #61	; 0x3d
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	333c      	adds	r3, #60	; 0x3c
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	b298      	uxth	r0, r3
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3342      	adds	r3, #66	; 0x42
 800162c:	4602      	mov	r2, r0
 800162e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	333f      	adds	r3, #63	; 0x3f
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	3344      	adds	r3, #68	; 0x44
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3348      	adds	r3, #72	; 0x48
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3350      	adds	r3, #80	; 0x50
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	3301      	adds	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d3af      	bcc.n	80015f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e044      	b.n	8001720 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	3301      	adds	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	d3b5      	bcc.n	8001696 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	687e      	ldr	r6, [r7, #4]
 8001732:	466d      	mov	r5, sp
 8001734:	f106 0410 	add.w	r4, r6, #16
 8001738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001740:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001744:	e885 0003 	stmia.w	r5, {r0, r1}
 8001748:	1d33      	adds	r3, r6, #4
 800174a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174c:	6838      	ldr	r0, [r7, #0]
 800174e:	f003 fabf 	bl	8004cd0 <USB_DevInit>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e014      	b.n	800178e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	2b01      	cmp	r3, #1
 800177a:	d102      	bne.n	8001782 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f001 f871 	bl	8002864 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f004 fb57 	bl	8005e3a <USB_DevDisconnect>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001796 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_PCD_Start+0x16>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e012      	b.n	80017d2 <HAL_PCD_Start+0x3c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 fa1b 	bl	8004bf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 fb18 	bl	8005df8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017da:	b590      	push	{r4, r7, lr}
 80017dc:	b08d      	sub	sp, #52	; 0x34
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fbd6 	bl	8005fa2 <USB_GetMode>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f040 83ba 	bne.w	8001f72 <HAL_PCD_IRQHandler+0x798>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fb3a 	bl	8005e7c <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 83b0 	beq.w	8001f70 <HAL_PCD_IRQHandler+0x796>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fb31 	bl	8005e7c <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b02      	cmp	r3, #2
 8001822:	d107      	bne.n	8001834 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f002 0202 	and.w	r2, r2, #2
 8001832:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fb1f 	bl	8005e7c <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b10      	cmp	r3, #16
 8001846:	d161      	bne.n	800190c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0210 	bic.w	r2, r2, #16
 8001856:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f003 020f 	and.w	r2, r3, #15
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	3304      	adds	r3, #4
 8001876:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	0c5b      	lsrs	r3, r3, #17
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	2b02      	cmp	r3, #2
 8001882:	d124      	bne.n	80018ce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d035      	beq.n	80018fc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800189a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800189e:	b29b      	uxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	6a38      	ldr	r0, [r7, #32]
 80018a4:	f004 f956 	bl	8005b54 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018b4:	441a      	add	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c6:	441a      	add	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	619a      	str	r2, [r3, #24]
 80018cc:	e016      	b.n	80018fc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	0c5b      	lsrs	r3, r3, #17
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d110      	bne.n	80018fc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018e0:	2208      	movs	r2, #8
 80018e2:	4619      	mov	r1, r3
 80018e4:	6a38      	ldr	r0, [r7, #32]
 80018e6:	f004 f935 	bl	8005b54 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018f6:	441a      	add	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0210 	orr.w	r2, r2, #16
 800190a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fab3 	bl	8005e7c <USB_ReadInterrupts>
 8001916:	4603      	mov	r3, r0
 8001918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001920:	d16e      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f004 fab9 	bl	8005ea2 <USB_ReadDevAllOutEpInterrupt>
 8001930:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001932:	e062      	b.n	80019fa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d057      	beq.n	80019ee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f004 fade 	bl	8005f0a <USB_ReadDevOutEPInterrupt>
 800194e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00c      	beq.n	8001974 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001966:	461a      	mov	r2, r3
 8001968:	2301      	movs	r3, #1
 800196a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800196c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fdce 	bl	8002510 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00c      	beq.n	8001998 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4413      	add	r3, r2
 8001986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800198a:	461a      	mov	r2, r3
 800198c:	2308      	movs	r3, #8
 800198e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fec8 	bl	8002728 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ae:	461a      	mov	r2, r3
 80019b0:	2310      	movs	r3, #16
 80019b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ca:	461a      	mov	r2, r3
 80019cc:	2320      	movs	r3, #32
 80019ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	015a      	lsls	r2, r3, #5
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019e6:	461a      	mov	r2, r3
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3301      	adds	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f6:	085b      	lsrs	r3, r3, #1
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d199      	bne.n	8001934 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 fa39 	bl	8005e7c <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a14:	f040 80c0 	bne.w	8001b98 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 fa5a 	bl	8005ed6 <USB_ReadDevAllInEpInterrupt>
 8001a22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a28:	e0b2      	b.n	8001b90 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a7 	beq.w	8001b84 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 fa80 	bl	8005f46 <USB_ReadDevInEPInterrupt>
 8001a46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d057      	beq.n	8001b02 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	2201      	movs	r2, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69f9      	ldr	r1, [r7, #28]
 8001a6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a72:	4013      	ands	r3, r2
 8001a74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a82:	461a      	mov	r2, r3
 8001a84:	2301      	movs	r3, #1
 8001a86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d132      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3348      	adds	r3, #72	; 0x48
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4403      	add	r3, r0
 8001ab0:	3344      	adds	r3, #68	; 0x44
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4419      	add	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4403      	add	r3, r0
 8001ac4:	3348      	adds	r3, #72	; 0x48
 8001ac6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d113      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x31c>
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	3350      	adds	r3, #80	; 0x50
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d108      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001aee:	461a      	mov	r2, r3
 8001af0:	2101      	movs	r1, #1
 8001af2:	f004 fa89 	bl	8006008 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f008 ff80 	bl	800aa02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b34:	461a      	mov	r2, r3
 8001b36:	2310      	movs	r3, #16
 8001b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b50:	461a      	mov	r2, r3
 8001b52:	2340      	movs	r3, #64	; 0x40
 8001b54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2302      	movs	r3, #2
 8001b70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fc38 	bl	80023f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	3301      	adds	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f47f af49 	bne.w	8001a2a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f004 f96d 	bl	8005e7c <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bac:	d122      	bne.n	8001bf4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f009 f962 	bl	800aea0 <HAL_PCDEx_LPM_Callback>
 8001bdc:	e002      	b.n	8001be4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f008 ff86 	bl	800aaf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 f93f 	bl	8005e7c <USB_ReadInterrupts>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c08:	d112      	bne.n	8001c30 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d102      	bne.n	8001c20 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f008 ff42 	bl	800aaa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 f921 	bl	8005e7c <USB_ReadInterrupts>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c44:	d121      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001c54:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d111      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	f003 020f 	and.w	r2, r3, #15
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f009 f90f 	bl	800aea0 <HAL_PCDEx_LPM_Callback>
 8001c82:	e002      	b.n	8001c8a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f008 ff0d 	bl	800aaa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 f8f4 	bl	8005e7c <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9e:	f040 80b7 	bne.w	8001e10 <HAL_PCD_IRQHandler+0x636>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2110      	movs	r1, #16
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 f965 	bl	8004f8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc6:	e046      	b.n	8001d56 <HAL_PCD_IRQHandler+0x57c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cda:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cec:	0151      	lsls	r1, r2, #5
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	440a      	add	r2, r1
 8001cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cfa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d20:	0151      	lsls	r1, r2, #5
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	440a      	add	r2, r1
 8001d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d40:	0151      	lsls	r1, r2, #5
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	440a      	add	r2, r1
 8001d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	3301      	adds	r3, #1
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3b3      	bcc.n	8001cc8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d6e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d72:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d016      	beq.n	8001daa <HAL_PCD_IRQHandler+0x5d0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d8c:	f043 030b 	orr.w	r3, r3, #11
 8001d90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001da2:	f043 030b 	orr.w	r3, r3, #11
 8001da6:	6453      	str	r3, [r2, #68]	; 0x44
 8001da8:	e015      	b.n	8001dd6 <HAL_PCD_IRQHandler+0x5fc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db8:	4619      	mov	r1, r3
 8001dba:	f242 032b 	movw	r3, #8235	; 0x202b
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd0:	f043 030b 	orr.w	r3, r3, #11
 8001dd4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001de4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001de8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f004 f904 	bl	8006008 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 f831 	bl	8005e7c <USB_ReadInterrupts>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e24:	d124      	bne.n	8001e70 <HAL_PCD_IRQHandler+0x696>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 f8c8 	bl	8005fc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 f922 	bl	800507e <USB_GetDevSpeed>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681c      	ldr	r4, [r3, #0]
 8001e46:	f001 fa0d 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8001e4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	4620      	mov	r0, r4
 8001e56:	f002 fe2b 	bl	8004ab0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f008 fdf9 	bl	800aa52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 f801 	bl	8005e7c <USB_ReadInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d10a      	bne.n	8001e9a <HAL_PCD_IRQHandler+0x6c0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f008 fdd6 	bl	800aa36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f002 0208 	and.w	r2, r2, #8
 8001e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 ffec 	bl	8005e7c <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eae:	d10f      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x6f6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f008 fe38 	bl	800ab30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 ffd1 	bl	8005e7c <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ee4:	d10f      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x72c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f008 fe0b 	bl	800ab0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 ffb6 	bl	8005e7c <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d10a      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x758>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f008 fe19 	bl	800ab54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 ffa0 	bl	8005e7c <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d115      	bne.n	8001f72 <HAL_PCD_IRQHandler+0x798>
    {
      temp = hpcd->Instance->GOTGINT;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_PCD_IRQHandler+0x784>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f008 fe09 	bl	800ab70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	e000      	b.n	8001f72 <HAL_PCD_IRQHandler+0x798>
      return;
 8001f70:	bf00      	nop
    }
  }
}
 8001f72:	3734      	adds	r7, #52	; 0x34
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}

08001f78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_PCD_SetAddress+0x1a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e013      	b.n	8001fba <HAL_PCD_SetAddress+0x42>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 fefe 	bl	8005dac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	4608      	mov	r0, r1
 8001fcc:	4611      	mov	r1, r2
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	70fb      	strb	r3, [r7, #3]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	803b      	strh	r3, [r7, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	da0f      	bge.n	8002008 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	3338      	adds	r3, #56	; 0x38
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	705a      	strb	r2, [r3, #1]
 8002006:	e00f      	b.n	8002028 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	b2da      	uxtb	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002034:	883a      	ldrh	r2, [r7, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	78ba      	ldrb	r2, [r7, #2]
 800203e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	785b      	ldrb	r3, [r3, #1]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002052:	78bb      	ldrb	r3, [r7, #2]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d102      	bne.n	800205e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_PCD_EP_Open+0xaa>
 8002068:	2302      	movs	r3, #2
 800206a:	e00e      	b.n	800208a <HAL_PCD_EP_Open+0xc8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	4618      	mov	r0, r3
 800207c:	f003 f824 	bl	80050c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002088:	7afb      	ldrb	r3, [r7, #11]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800209e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da0f      	bge.n	80020c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	3338      	adds	r3, #56	; 0x38
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	705a      	strb	r2, [r3, #1]
 80020c4:	e00f      	b.n	80020e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 020f 	and.w	r2, r3, #15
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_PCD_EP_Close+0x6e>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e00e      	b.n	800211e <HAL_PCD_EP_Close+0x8c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68f9      	ldr	r1, [r7, #12]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 f862 	bl	80051d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	460b      	mov	r3, r1
 8002134:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	f003 020f 	and.w	r2, r3, #15
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	b2da      	uxtb	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d102      	bne.n	8002182 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	f003 fb45 	bl	8005828 <USB_EP0StartXfer>
 800219e:	e008      	b.n	80021b2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	f003 f8ef 	bl	8005390 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	460b      	mov	r3, r1
 80021fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021fc:	7afb      	ldrb	r3, [r7, #11]
 80021fe:	f003 020f 	and.w	r2, r3, #15
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3338      	adds	r3, #56	; 0x38
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2201      	movs	r2, #1
 800222a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800222c:	7afb      	ldrb	r3, [r7, #11]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002246:	7afb      	ldrb	r3, [r7, #11]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	f003 fae3 	bl	8005828 <USB_EP0StartXfer>
 8002262:	e008      	b.n	8002276 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	6979      	ldr	r1, [r7, #20]
 8002272:	f003 f88d 	bl	8005390 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d901      	bls.n	800229e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e050      	b.n	8002340 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800229e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da0f      	bge.n	80022c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	f003 020f 	and.w	r2, r3, #15
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	3338      	adds	r3, #56	; 0x38
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	705a      	strb	r2, [r3, #1]
 80022c4:	e00d      	b.n	80022e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	3304      	adds	r3, #4
 80022da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_PCD_EP_SetStall+0x82>
 80022fe:	2302      	movs	r3, #2
 8002300:	e01e      	b.n	8002340 <HAL_PCD_EP_SetStall+0xc0>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68f9      	ldr	r1, [r7, #12]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fc77 	bl	8005c04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	b2d9      	uxtb	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002330:	461a      	mov	r2, r3
 8002332:	f003 fe69 	bl	8006008 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	f003 020f 	and.w	r2, r3, #15
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d901      	bls.n	8002366 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e042      	b.n	80023ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	da0f      	bge.n	800238e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	f003 020f 	and.w	r2, r3, #15
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	3338      	adds	r3, #56	; 0x38
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	3304      	adds	r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	705a      	strb	r2, [r3, #1]
 800238c:	e00f      	b.n	80023ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 020f 	and.w	r2, r3, #15
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	3304      	adds	r3, #4
 80023a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_PCD_EP_ClrStall+0x86>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e00e      	b.n	80023ec <HAL_PCD_EP_ClrStall+0xa4>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fc7f 	bl	8005ce0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3338      	adds	r3, #56	; 0x38
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	3304      	adds	r3, #4
 800241a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	429a      	cmp	r2, r3
 8002426:	d901      	bls.n	800242c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e06c      	b.n	8002506 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	429a      	cmp	r2, r3
 8002440:	d902      	bls.n	8002448 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	3303      	adds	r3, #3
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002450:	e02b      	b.n	80024aa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	429a      	cmp	r2, r3
 8002466:	d902      	bls.n	800246e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3303      	adds	r3, #3
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002486:	b2db      	uxtb	r3, r3
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4603      	mov	r3, r0
 800248c:	6978      	ldr	r0, [r7, #20]
 800248e:	f003 fb23 	bl	8005ad8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	441a      	add	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	441a      	add	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d809      	bhi.n	80024d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d203      	bcs.n	80024d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1be      	bne.n	8002452 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d811      	bhi.n	8002504 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	2201      	movs	r2, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	6939      	ldr	r1, [r7, #16]
 80024fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002500:	4013      	ands	r3, r2
 8002502:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	333c      	adds	r3, #60	; 0x3c
 8002528:	3304      	adds	r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	f040 80a0 	bne.w	8002688 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d015      	beq.n	800257e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a72      	ldr	r2, [pc, #456]	; (8002720 <PCD_EP_OutXfrComplete_int+0x210>)
 8002556:	4293      	cmp	r3, r2
 8002558:	f240 80dd 	bls.w	8002716 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80d7 	beq.w	8002716 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002574:	461a      	mov	r2, r3
 8002576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800257a:	6093      	str	r3, [r2, #8]
 800257c:	e0cb      	b.n	8002716 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	2320      	movs	r3, #32
 8002598:	6093      	str	r3, [r2, #8]
 800259a:	e0bc      	b.n	8002716 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 80b7 	bne.w	8002716 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4a5d      	ldr	r2, [pc, #372]	; (8002720 <PCD_EP_OutXfrComplete_int+0x210>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d90f      	bls.n	80025d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c6:	461a      	mov	r2, r3
 80025c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025cc:	6093      	str	r3, [r2, #8]
 80025ce:	e0a2      	b.n	8002716 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	0159      	lsls	r1, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	440b      	add	r3, r1
 80025ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80025f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4403      	add	r3, r0
 8002606:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800260a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4403      	add	r3, r0
 800262e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4419      	add	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4403      	add	r3, r0
 8002644:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002648:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d114      	bne.n	800267a <PCD_EP_OutXfrComplete_int+0x16a>
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d108      	bne.n	800267a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002672:	461a      	mov	r2, r3
 8002674:	2101      	movs	r1, #1
 8002676:	f003 fcc7 	bl	8006008 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f008 f9a3 	bl	800a9cc <HAL_PCD_DataOutStageCallback>
 8002686:	e046      	b.n	8002716 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a26      	ldr	r2, [pc, #152]	; (8002724 <PCD_EP_OutXfrComplete_int+0x214>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d124      	bne.n	80026da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a6:	461a      	mov	r2, r3
 80026a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ac:	6093      	str	r3, [r2, #8]
 80026ae:	e032      	b.n	8002716 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c6:	461a      	mov	r2, r3
 80026c8:	2320      	movs	r3, #32
 80026ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f008 f97a 	bl	800a9cc <HAL_PCD_DataOutStageCallback>
 80026d8:	e01d      	b.n	8002716 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d114      	bne.n	800270a <PCD_EP_OutXfrComplete_int+0x1fa>
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d108      	bne.n	800270a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002702:	461a      	mov	r2, r3
 8002704:	2100      	movs	r1, #0
 8002706:	f003 fc7f 	bl	8006008 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f008 f95b 	bl	800a9cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	4f54300a 	.word	0x4f54300a
 8002724:	4f54310a 	.word	0x4f54310a

08002728 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	333c      	adds	r3, #60	; 0x3c
 8002740:	3304      	adds	r3, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d90e      	bls.n	800277c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002774:	461a      	mov	r2, r3
 8002776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f008 f913 	bl	800a9a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d90c      	bls.n	80027a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800279c:	461a      	mov	r2, r3
 800279e:	2101      	movs	r1, #1
 80027a0:	f003 fc32 	bl	8006008 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	4f54300a 	.word	0x4f54300a

080027b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	70fb      	strb	r3, [r7, #3]
 80027c0:	4613      	mov	r3, r2
 80027c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027d2:	883b      	ldrh	r3, [r7, #0]
 80027d4:	0419      	lsls	r1, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	430a      	orrs	r2, r1
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
 80027e0:	e028      	b.n	8002834 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	4413      	add	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	e00d      	b.n	8002812 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	3340      	adds	r3, #64	; 0x40
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	3301      	adds	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	3b01      	subs	r3, #1
 8002818:	429a      	cmp	r2, r3
 800281a:	d3ec      	bcc.n	80027f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800281c:	883b      	ldrh	r3, [r7, #0]
 800281e:	0418      	lsls	r0, r3, #16
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	3b01      	subs	r3, #1
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	4302      	orrs	r2, r0
 800282c:	3340      	adds	r3, #64	; 0x40
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002894:	4313      	orrs	r3, r2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	10000003 	.word	0x10000003

080028ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40007000 	.word	0x40007000

080028cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_PWREx_EnableOverDrive+0x98>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a22      	ldr	r2, [pc, #136]	; (8002964 <HAL_PWREx_EnableOverDrive+0x98>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_PWREx_EnableOverDrive+0x98>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028fa:	f7fe fb37 	bl	8000f6c <HAL_GetTick>
 80028fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002900:	e009      	b.n	8002916 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002902:	f7fe fb33 	bl	8000f6c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002910:	d901      	bls.n	8002916 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e022      	b.n	800295c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002922:	d1ee      	bne.n	8002902 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_PWREx_EnableOverDrive+0x9c>)
 800292a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002930:	f7fe fb1c 	bl	8000f6c <HAL_GetTick>
 8002934:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002936:	e009      	b.n	800294c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002938:	f7fe fb18 	bl	8000f6c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002946:	d901      	bls.n	800294c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e007      	b.n	800295c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_PWREx_EnableOverDrive+0x9c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002958:	d1ee      	bne.n	8002938 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	40007000 	.word	0x40007000

0800296c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002974:	2300      	movs	r3, #0
 8002976:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e29b      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8087 	beq.w	8002a9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002990:	4b96      	ldr	r3, [pc, #600]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b04      	cmp	r3, #4
 800299a:	d00c      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299c:	4b93      	ldr	r3, [pc, #588]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d112      	bne.n	80029ce <HAL_RCC_OscConfig+0x62>
 80029a8:	4b90      	ldr	r3, [pc, #576]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b4:	d10b      	bne.n	80029ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b6:	4b8d      	ldr	r3, [pc, #564]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d06c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x130>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d168      	bne.n	8002a9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e275      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x7a>
 80029d8:	4b84      	ldr	r3, [pc, #528]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a83      	ldr	r2, [pc, #524]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e02e      	b.n	8002a44 <HAL_RCC_OscConfig+0xd8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x9c>
 80029ee:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7e      	ldr	r2, [pc, #504]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 80029f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b7c      	ldr	r3, [pc, #496]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7b      	ldr	r2, [pc, #492]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e01d      	b.n	8002a44 <HAL_RCC_OscConfig+0xd8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0xc0>
 8002a12:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a75      	ldr	r2, [pc, #468]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b73      	ldr	r3, [pc, #460]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a72      	ldr	r2, [pc, #456]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0xd8>
 8002a2c:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6e      	ldr	r2, [pc, #440]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b6c      	ldr	r3, [pc, #432]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a6b      	ldr	r2, [pc, #428]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fa8e 	bl	8000f6c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fa8a 	bl	8000f6c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e229      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0xe8>
 8002a72:	e014      	b.n	8002a9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fa7a 	bl	8000f6c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fa76 	bl	8000f6c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e215      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x110>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d069      	beq.n	8002b7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aaa:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d11c      	bne.n	8002afc <HAL_RCC_OscConfig+0x190>
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x17a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1e9      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	493d      	ldr	r1, [pc, #244]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	e040      	b.n	8002b7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d023      	beq.n	8002b4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b04:	4b39      	ldr	r3, [pc, #228]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a38      	ldr	r2, [pc, #224]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fa2c 	bl	8000f6c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fa28 	bl	8000f6c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1c7      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b30      	ldr	r3, [pc, #192]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4929      	ldr	r1, [pc, #164]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
 8002b4a:	e018      	b.n	8002b7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a26      	ldr	r2, [pc, #152]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fa08 	bl	8000f6c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe fa04 	bl	8000f6c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e1a3      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d038      	beq.n	8002bfc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d019      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	4a15      	ldr	r2, [pc, #84]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe f9e5 	bl	8000f6c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe f9e1 	bl	8000f6c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e180      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x23a>
 8002bc4:	e01a      	b.n	8002bfc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bca:	4a08      	ldr	r2, [pc, #32]	; (8002bec <HAL_RCC_OscConfig+0x280>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f9cb 	bl	8000f6c <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bda:	f7fe f9c7 	bl	8000f6c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d903      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e166      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
 8002bec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	4b92      	ldr	r3, [pc, #584]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ee      	bne.n	8002bda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a4 	beq.w	8002d52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0a:	4b8c      	ldr	r3, [pc, #560]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b89      	ldr	r3, [pc, #548]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a88      	ldr	r2, [pc, #544]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b86      	ldr	r3, [pc, #536]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c32:	4b83      	ldr	r3, [pc, #524]	; (8002e40 <HAL_RCC_OscConfig+0x4d4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d118      	bne.n	8002c70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c3e:	4b80      	ldr	r3, [pc, #512]	; (8002e40 <HAL_RCC_OscConfig+0x4d4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7f      	ldr	r2, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x4d4>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe f98f 	bl	8000f6c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fe f98b 	bl	8000f6c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e12a      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c64:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x4d4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x31a>
 8002c78:	4b70      	ldr	r3, [pc, #448]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a6f      	ldr	r2, [pc, #444]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	e02d      	b.n	8002ce2 <HAL_RCC_OscConfig+0x376>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x33c>
 8002c8e:	4b6b      	ldr	r3, [pc, #428]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a6a      	ldr	r2, [pc, #424]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	e01c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x376>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x35e>
 8002cb0:	4b62      	ldr	r3, [pc, #392]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	4a61      	ldr	r2, [pc, #388]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbc:	4b5f      	ldr	r3, [pc, #380]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a5e      	ldr	r2, [pc, #376]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x376>
 8002cca:	4b5c      	ldr	r3, [pc, #368]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a5b      	ldr	r2, [pc, #364]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd6:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a58      	ldr	r2, [pc, #352]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe f93f 	bl	8000f6c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe f93b 	bl	8000f6c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0d8      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ee      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x386>
 8002d14:	e014      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fe f929 	bl	8000f6c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe f925 	bl	8000f6c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e0c2      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ee      	bne.n	8002d1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d105      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80ae 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d5c:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d06d      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d14b      	bne.n	8002e08 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a31      	ldr	r2, [pc, #196]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f8f6 	bl	8000f6c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe f8f2 	bl	8000f6c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e091      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	041b      	lsls	r3, r3, #16
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	071b      	lsls	r3, r3, #28
 8002dce:	491b      	ldr	r1, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe f8c4 	bl	8000f6c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe f8c0 	bl	8000f6c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e05f      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x47c>
 8002e06:	e057      	b.n	8002eb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f8aa 	bl	8000f6c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f8a6 	bl	8000f6c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e045      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4b0>
 8002e3a:	e03d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x54c>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e44:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <HAL_RCC_OscConfig+0x558>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d030      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d129      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d122      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d119      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10f      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800

08002ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0d0      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 020f 	bic.w	r2, r3, #15
 8002ef6:	4965      	ldr	r1, [pc, #404]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d040      	beq.n	8002fec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d115      	bne.n	8002faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e073      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4936      	ldr	r1, [pc, #216]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fd ffd6 	bl	8000f6c <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fd ffd2 	bl	8000f6c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e053      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d210      	bcs.n	800301c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 020f 	bic.w	r2, r3, #15
 8003002:	4922      	ldr	r1, [pc, #136]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f821 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x1cc>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1d0>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1d4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fdf4 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00
 8003090:	40023800 	.word	0x40023800
 8003094:	0800bff8 	.word	0x0800bff8
 8003098:	20000000 	.word	0x20000000
 800309c:	20000004 	.word	0x20000004

080030a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	2300      	movs	r3, #0
 80030b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b8:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d00d      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x40>
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	f200 80bd 	bhi.w	8003244 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d003      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x3a>
 80030d2:	e0b7      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030d6:	60bb      	str	r3, [r7, #8]
      break;
 80030d8:	e0b7      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030da:	4b61      	ldr	r3, [pc, #388]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030dc:	60bb      	str	r3, [r7, #8]
      break;
 80030de:	e0b4      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e0:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d04d      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	461a      	mov	r2, r3
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	ea02 0800 	and.w	r8, r2, r0
 800310e:	ea03 0901 	and.w	r9, r3, r1
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	014b      	lsls	r3, r1, #5
 8003120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003124:	0142      	lsls	r2, r0, #5
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	ebb0 0008 	subs.w	r0, r0, r8
 800312e:	eb61 0109 	sbc.w	r1, r1, r9
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	018b      	lsls	r3, r1, #6
 800313c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003140:	0182      	lsls	r2, r0, #6
 8003142:	1a12      	subs	r2, r2, r0
 8003144:	eb63 0301 	sbc.w	r3, r3, r1
 8003148:	f04f 0000 	mov.w	r0, #0
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	00d9      	lsls	r1, r3, #3
 8003152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003156:	00d0      	lsls	r0, r2, #3
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	eb12 0208 	adds.w	r2, r2, r8
 8003160:	eb43 0309 	adc.w	r3, r3, r9
 8003164:	f04f 0000 	mov.w	r0, #0
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	0259      	lsls	r1, r3, #9
 800316e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003172:	0250      	lsls	r0, r2, #9
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f7fd f8ac 	bl	80002e0 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e04a      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	461a      	mov	r2, r3
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	ea02 0400 	and.w	r4, r2, r0
 80031aa:	ea03 0501 	and.w	r5, r3, r1
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	014b      	lsls	r3, r1, #5
 80031bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031c0:	0142      	lsls	r2, r0, #5
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	1b00      	subs	r0, r0, r4
 80031c8:	eb61 0105 	sbc.w	r1, r1, r5
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	018b      	lsls	r3, r1, #6
 80031d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031da:	0182      	lsls	r2, r0, #6
 80031dc:	1a12      	subs	r2, r2, r0
 80031de:	eb63 0301 	sbc.w	r3, r3, r1
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	00d9      	lsls	r1, r3, #3
 80031ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031f0:	00d0      	lsls	r0, r2, #3
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	1912      	adds	r2, r2, r4
 80031f8:	eb45 0303 	adc.w	r3, r5, r3
 80031fc:	f04f 0000 	mov.w	r0, #0
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	0299      	lsls	r1, r3, #10
 8003206:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800320a:	0290      	lsls	r0, r2, #10
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	f7fd f860 	bl	80002e0 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	60bb      	str	r3, [r7, #8]
      break;
 8003242:	e002      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003246:	60bb      	str	r3, [r7, #8]
      break;
 8003248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324a:	68bb      	ldr	r3, [r7, #8]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200

08003264 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_RCC_GetHCLKFreq+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff0 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0a9b      	lsrs	r3, r3, #10
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	0800c008 	.word	0x0800c008

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a8:	f7ff ffdc 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0b5b      	lsrs	r3, r3, #13
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	0800c008 	.word	0x0800c008

080032cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	220f      	movs	r2, #15
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_RCC_GetClockConfig+0x5c>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <HAL_RCC_GetClockConfig+0x5c>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_RCC_GetClockConfig+0x5c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_GetClockConfig+0x5c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	08db      	lsrs	r3, r3, #3
 8003306:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <HAL_RCC_GetClockConfig+0x60>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40023c00 	.word	0x40023c00

08003330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d012      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a68      	ldr	r2, [pc, #416]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003362:	6093      	str	r3, [r2, #8]
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	4964      	ldr	r1, [pc, #400]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800337a:	2301      	movs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d017      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	4959      	ldr	r1, [pc, #356]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a8:	d101      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d017      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033c6:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	494a      	ldr	r1, [pc, #296]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003402:	2301      	movs	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 808b 	beq.w	800352a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	4a39      	ldr	r2, [pc, #228]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	6413      	str	r3, [r2, #64]	; 0x40
 8003420:	4b37      	ldr	r3, [pc, #220]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800342c:	4b35      	ldr	r3, [pc, #212]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a34      	ldr	r2, [pc, #208]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003438:	f7fd fd98 	bl	8000f6c <HAL_GetTick>
 800343c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003440:	f7fd fd94 	bl	8000f6c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e38f      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003466:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d035      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	429a      	cmp	r2, r3
 800347a:	d02e      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003484:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034a4:	4b16      	ldr	r3, [pc, #88]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d114      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fd fd5c 	bl	8000f6c <HAL_GetTick>
 80034b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	e00a      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fd fd58 	bl	8000f6c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e351      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ee      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e6:	d111      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034f6:	400b      	ands	r3, r1
 80034f8:	4901      	ldr	r1, [pc, #4]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
 80034fe:	e00b      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003500:	40023800 	.word	0x40023800
 8003504:	40007000 	.word	0x40007000
 8003508:	0ffffcff 	.word	0x0ffffcff
 800350c:	4bb3      	ldr	r3, [pc, #716]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4ab2      	ldr	r2, [pc, #712]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003512:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003516:	6093      	str	r3, [r2, #8]
 8003518:	4bb0      	ldr	r3, [pc, #704]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003524:	49ad      	ldr	r1, [pc, #692]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003526:	4313      	orrs	r3, r2
 8003528:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003536:	4ba9      	ldr	r3, [pc, #676]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800353c:	4aa7      	ldr	r2, [pc, #668]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800353e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003542:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003546:	4ba5      	ldr	r3, [pc, #660]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003548:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	49a2      	ldr	r1, [pc, #648]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003564:	4b9d      	ldr	r3, [pc, #628]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003572:	499a      	ldr	r1, [pc, #616]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003586:	4b95      	ldr	r3, [pc, #596]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003594:	4991      	ldr	r1, [pc, #580]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a8:	4b8c      	ldr	r3, [pc, #560]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b6:	4989      	ldr	r1, [pc, #548]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035ca:	4b84      	ldr	r3, [pc, #528]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4980      	ldr	r1, [pc, #512]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ec:	4b7b      	ldr	r3, [pc, #492]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	4978      	ldr	r1, [pc, #480]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800360e:	4b73      	ldr	r3, [pc, #460]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f023 020c 	bic.w	r2, r3, #12
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	496f      	ldr	r1, [pc, #444]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003630:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	4967      	ldr	r1, [pc, #412]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003652:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	495e      	ldr	r1, [pc, #376]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003674:	4b59      	ldr	r3, [pc, #356]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	4956      	ldr	r1, [pc, #344]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003696:	4b51      	ldr	r3, [pc, #324]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	494d      	ldr	r1, [pc, #308]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036b8:	4b48      	ldr	r3, [pc, #288]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	4945      	ldr	r1, [pc, #276]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036da:	4b40      	ldr	r3, [pc, #256]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	493c      	ldr	r1, [pc, #240]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	4934      	ldr	r1, [pc, #208]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d011      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800371e:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372c:	492b      	ldr	r1, [pc, #172]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800373c:	d101      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800375e:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	491b      	ldr	r1, [pc, #108]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003780:	4b16      	ldr	r3, [pc, #88]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003790:	4912      	ldr	r1, [pc, #72]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b4:	4909      	ldr	r1, [pc, #36]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00f      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	4986      	ldr	r1, [pc, #536]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037f4:	4b81      	ldr	r3, [pc, #516]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003804:	497d      	ldr	r1, [pc, #500]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d006      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80d6 	beq.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003820:	4b76      	ldr	r3, [pc, #472]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a75      	ldr	r2, [pc, #468]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800382a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382c:	f7fd fb9e 	bl	8000f6c <HAL_GetTick>
 8003830:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003834:	f7fd fb9a 	bl	8000f6c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e195      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003846:	4b6d      	ldr	r3, [pc, #436]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d021      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11d      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003866:	4b65      	ldr	r3, [pc, #404]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003874:	4b61      	ldr	r3, [pc, #388]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387a:	0e1b      	lsrs	r3, r3, #24
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	019a      	lsls	r2, r3, #6
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	431a      	orrs	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	4958      	ldr	r1, [pc, #352]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02e      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038cc:	d129      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038ce:	4b4b      	ldr	r3, [pc, #300]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038dc:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e2:	0f1b      	lsrs	r3, r3, #28
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	019a      	lsls	r2, r3, #6
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	061b      	lsls	r3, r3, #24
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	071b      	lsls	r3, r3, #28
 8003902:	493e      	ldr	r1, [pc, #248]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800390a:	4b3c      	ldr	r3, [pc, #240]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	f023 021f 	bic.w	r2, r3, #31
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	3b01      	subs	r3, #1
 800391a:	4938      	ldr	r1, [pc, #224]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01d      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800392e:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003934:	0e1b      	lsrs	r3, r3, #24
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003942:	0f1b      	lsrs	r3, r3, #28
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	019a      	lsls	r2, r3, #6
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	431a      	orrs	r2, r3
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	061b      	lsls	r3, r3, #24
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	4926      	ldr	r1, [pc, #152]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	019a      	lsls	r2, r3, #6
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	071b      	lsls	r3, r3, #28
 8003992:	491a      	ldr	r1, [pc, #104]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a6:	f7fd fae1 	bl	8000f6c <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ae:	f7fd fadd 	bl	8000f6c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b64      	cmp	r3, #100	; 0x64
 80039ba:	d901      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e0d8      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	f040 80ce 	bne.w	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e0:	f7fd fac4 	bl	8000f6c <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039e6:	e00b      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039e8:	f7fd fac0 	bl	8000f6c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d904      	bls.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e0bb      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a00:	4b5e      	ldr	r3, [pc, #376]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a0c:	d0ec      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d02e      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d12a      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a36:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a44:	4b4d      	ldr	r3, [pc, #308]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	0f1b      	lsrs	r3, r3, #28
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	019a      	lsls	r2, r3, #6
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	061b      	lsls	r3, r3, #24
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	4944      	ldr	r1, [pc, #272]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a72:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	493d      	ldr	r1, [pc, #244]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d022      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa0:	d11d      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	0e1b      	lsrs	r3, r3, #24
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ab0:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	0f1b      	lsrs	r3, r3, #28
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	019a      	lsls	r2, r3, #6
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	431a      	orrs	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	4929      	ldr	r1, [pc, #164]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d028      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	0e1b      	lsrs	r3, r3, #24
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003af8:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	019a      	lsls	r2, r3, #6
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	431a      	orrs	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	071b      	lsls	r3, r3, #28
 8003b1e:	4917      	ldr	r1, [pc, #92]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	4911      	ldr	r1, [pc, #68]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b48:	f7fd fa10 	bl	8000f6c <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b50:	f7fd fa0c 	bl	8000f6c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e007      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6e:	d1ef      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800

08003b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e049      	b.n	8003c26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f841 	bl	8003c2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 fa00 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d001      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e054      	b.n	8003d06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d022      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x80>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d01d      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x80>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a22      	ldr	r2, [pc, #136]	; (8003d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x80>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x80>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x80>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <HAL_TIM_Base_Start_IT+0xe0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x80>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x80>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <HAL_TIM_Base_Start_IT+0xe8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d115      	bne.n	8003cf0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_TIM_Base_Start_IT+0xec>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d015      	beq.n	8003d02 <HAL_TIM_Base_Start_IT+0xbe>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cdc:	d011      	beq.n	8003d02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cee:	e008      	b.n	8003d02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e000      	b.n	8003d04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40010400 	.word	0x40010400
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40001800 	.word	0x40001800
 8003d30:	00010007 	.word	0x00010007

08003d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0202 	mvn.w	r2, #2
 8003d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f905 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8f7 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f908 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d122      	bne.n	8003de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d11b      	bne.n	8003de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0204 	mvn.w	r2, #4
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8db 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f8cd 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f8de 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0208 	mvn.w	r2, #8
 8003e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8b1 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8a3 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8b4 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d122      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d11b      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0210 	mvn.w	r2, #16
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2208      	movs	r2, #8
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f887 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f879 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f88a 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0201 	mvn.w	r2, #1
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fc fdd4 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f91a 	bl	8004118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b80      	cmp	r3, #128	; 0x80
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f90d 	bl	800412c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d10e      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f838 	bl	8003fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d10e      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0220 	mvn.w	r2, #32
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8cd 	bl	8004104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d00f      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3d      	ldr	r2, [pc, #244]	; (80040dc <TIM_Base_SetConfig+0x118>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00b      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3c      	ldr	r2, [pc, #240]	; (80040e0 <TIM_Base_SetConfig+0x11c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d007      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <TIM_Base_SetConfig+0x120>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3a      	ldr	r2, [pc, #232]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d108      	bne.n	8004016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d02b      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d027      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <TIM_Base_SetConfig+0x118>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d023      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <TIM_Base_SetConfig+0x11c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01f      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <TIM_Base_SetConfig+0x120>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01b      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d017      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <TIM_Base_SetConfig+0x128>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <TIM_Base_SetConfig+0x12c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <TIM_Base_SetConfig+0x130>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <TIM_Base_SetConfig+0x134>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a24      	ldr	r2, [pc, #144]	; (80040fc <TIM_Base_SetConfig+0x138>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a23      	ldr	r2, [pc, #140]	; (8004100 <TIM_Base_SetConfig+0x13c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0xf8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	615a      	str	r2, [r3, #20]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40010400 	.word	0x40010400
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800
 80040f8:	40001800 	.word	0x40001800
 80040fc:	40001c00 	.word	0x40001c00
 8004100:	40002000 	.word	0x40002000

08004104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e040      	b.n	80041d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fc fcbc 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f82c 	bl	80041dc <UART_SetConfig>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e022      	b.n	80041d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa82 	bl	80046a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb09 	bl	80047e4 <UART_CheckIdleState>
 80041d2:	4603      	mov	r3, r0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4ba7      	ldr	r3, [pc, #668]	; (80044a4 <UART_SetConfig+0x2c8>)
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	6979      	ldr	r1, [r7, #20]
 8004210:	430b      	orrs	r3, r1
 8004212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a95      	ldr	r2, [pc, #596]	; (80044a8 <UART_SetConfig+0x2cc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d120      	bne.n	800429a <UART_SetConfig+0xbe>
 8004258:	4b94      	ldr	r3, [pc, #592]	; (80044ac <UART_SetConfig+0x2d0>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b03      	cmp	r3, #3
 8004264:	d816      	bhi.n	8004294 <UART_SetConfig+0xb8>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x90>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	0800427d 	.word	0x0800427d
 8004270:	08004289 	.word	0x08004289
 8004274:	08004283 	.word	0x08004283
 8004278:	0800428f 	.word	0x0800428f
 800427c:	2301      	movs	r3, #1
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e14f      	b.n	8004522 <UART_SetConfig+0x346>
 8004282:	2302      	movs	r3, #2
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e14c      	b.n	8004522 <UART_SetConfig+0x346>
 8004288:	2304      	movs	r3, #4
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e149      	b.n	8004522 <UART_SetConfig+0x346>
 800428e:	2308      	movs	r3, #8
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e146      	b.n	8004522 <UART_SetConfig+0x346>
 8004294:	2310      	movs	r3, #16
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e143      	b.n	8004522 <UART_SetConfig+0x346>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a84      	ldr	r2, [pc, #528]	; (80044b0 <UART_SetConfig+0x2d4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d132      	bne.n	800430a <UART_SetConfig+0x12e>
 80042a4:	4b81      	ldr	r3, [pc, #516]	; (80044ac <UART_SetConfig+0x2d0>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d828      	bhi.n	8004304 <UART_SetConfig+0x128>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <UART_SetConfig+0xdc>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042ed 	.word	0x080042ed
 80042bc:	08004305 	.word	0x08004305
 80042c0:	08004305 	.word	0x08004305
 80042c4:	08004305 	.word	0x08004305
 80042c8:	080042f9 	.word	0x080042f9
 80042cc:	08004305 	.word	0x08004305
 80042d0:	08004305 	.word	0x08004305
 80042d4:	08004305 	.word	0x08004305
 80042d8:	080042f3 	.word	0x080042f3
 80042dc:	08004305 	.word	0x08004305
 80042e0:	08004305 	.word	0x08004305
 80042e4:	08004305 	.word	0x08004305
 80042e8:	080042ff 	.word	0x080042ff
 80042ec:	2300      	movs	r3, #0
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e117      	b.n	8004522 <UART_SetConfig+0x346>
 80042f2:	2302      	movs	r3, #2
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e114      	b.n	8004522 <UART_SetConfig+0x346>
 80042f8:	2304      	movs	r3, #4
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e111      	b.n	8004522 <UART_SetConfig+0x346>
 80042fe:	2308      	movs	r3, #8
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e10e      	b.n	8004522 <UART_SetConfig+0x346>
 8004304:	2310      	movs	r3, #16
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e10b      	b.n	8004522 <UART_SetConfig+0x346>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a69      	ldr	r2, [pc, #420]	; (80044b4 <UART_SetConfig+0x2d8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d120      	bne.n	8004356 <UART_SetConfig+0x17a>
 8004314:	4b65      	ldr	r3, [pc, #404]	; (80044ac <UART_SetConfig+0x2d0>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800431e:	2b30      	cmp	r3, #48	; 0x30
 8004320:	d013      	beq.n	800434a <UART_SetConfig+0x16e>
 8004322:	2b30      	cmp	r3, #48	; 0x30
 8004324:	d814      	bhi.n	8004350 <UART_SetConfig+0x174>
 8004326:	2b20      	cmp	r3, #32
 8004328:	d009      	beq.n	800433e <UART_SetConfig+0x162>
 800432a:	2b20      	cmp	r3, #32
 800432c:	d810      	bhi.n	8004350 <UART_SetConfig+0x174>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <UART_SetConfig+0x15c>
 8004332:	2b10      	cmp	r3, #16
 8004334:	d006      	beq.n	8004344 <UART_SetConfig+0x168>
 8004336:	e00b      	b.n	8004350 <UART_SetConfig+0x174>
 8004338:	2300      	movs	r3, #0
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e0f1      	b.n	8004522 <UART_SetConfig+0x346>
 800433e:	2302      	movs	r3, #2
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e0ee      	b.n	8004522 <UART_SetConfig+0x346>
 8004344:	2304      	movs	r3, #4
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e0eb      	b.n	8004522 <UART_SetConfig+0x346>
 800434a:	2308      	movs	r3, #8
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e0e8      	b.n	8004522 <UART_SetConfig+0x346>
 8004350:	2310      	movs	r3, #16
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e0e5      	b.n	8004522 <UART_SetConfig+0x346>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a57      	ldr	r2, [pc, #348]	; (80044b8 <UART_SetConfig+0x2dc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d120      	bne.n	80043a2 <UART_SetConfig+0x1c6>
 8004360:	4b52      	ldr	r3, [pc, #328]	; (80044ac <UART_SetConfig+0x2d0>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800436a:	2bc0      	cmp	r3, #192	; 0xc0
 800436c:	d013      	beq.n	8004396 <UART_SetConfig+0x1ba>
 800436e:	2bc0      	cmp	r3, #192	; 0xc0
 8004370:	d814      	bhi.n	800439c <UART_SetConfig+0x1c0>
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d009      	beq.n	800438a <UART_SetConfig+0x1ae>
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d810      	bhi.n	800439c <UART_SetConfig+0x1c0>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <UART_SetConfig+0x1a8>
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d006      	beq.n	8004390 <UART_SetConfig+0x1b4>
 8004382:	e00b      	b.n	800439c <UART_SetConfig+0x1c0>
 8004384:	2300      	movs	r3, #0
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e0cb      	b.n	8004522 <UART_SetConfig+0x346>
 800438a:	2302      	movs	r3, #2
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e0c8      	b.n	8004522 <UART_SetConfig+0x346>
 8004390:	2304      	movs	r3, #4
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e0c5      	b.n	8004522 <UART_SetConfig+0x346>
 8004396:	2308      	movs	r3, #8
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e0c2      	b.n	8004522 <UART_SetConfig+0x346>
 800439c:	2310      	movs	r3, #16
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e0bf      	b.n	8004522 <UART_SetConfig+0x346>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a45      	ldr	r2, [pc, #276]	; (80044bc <UART_SetConfig+0x2e0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d125      	bne.n	80043f8 <UART_SetConfig+0x21c>
 80043ac:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <UART_SetConfig+0x2d0>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ba:	d017      	beq.n	80043ec <UART_SetConfig+0x210>
 80043bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c0:	d817      	bhi.n	80043f2 <UART_SetConfig+0x216>
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c6:	d00b      	beq.n	80043e0 <UART_SetConfig+0x204>
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043cc:	d811      	bhi.n	80043f2 <UART_SetConfig+0x216>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <UART_SetConfig+0x1fe>
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d006      	beq.n	80043e6 <UART_SetConfig+0x20a>
 80043d8:	e00b      	b.n	80043f2 <UART_SetConfig+0x216>
 80043da:	2300      	movs	r3, #0
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e0a0      	b.n	8004522 <UART_SetConfig+0x346>
 80043e0:	2302      	movs	r3, #2
 80043e2:	77fb      	strb	r3, [r7, #31]
 80043e4:	e09d      	b.n	8004522 <UART_SetConfig+0x346>
 80043e6:	2304      	movs	r3, #4
 80043e8:	77fb      	strb	r3, [r7, #31]
 80043ea:	e09a      	b.n	8004522 <UART_SetConfig+0x346>
 80043ec:	2308      	movs	r3, #8
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e097      	b.n	8004522 <UART_SetConfig+0x346>
 80043f2:	2310      	movs	r3, #16
 80043f4:	77fb      	strb	r3, [r7, #31]
 80043f6:	e094      	b.n	8004522 <UART_SetConfig+0x346>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <UART_SetConfig+0x2e4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d125      	bne.n	800444e <UART_SetConfig+0x272>
 8004402:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <UART_SetConfig+0x2d0>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800440c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004410:	d017      	beq.n	8004442 <UART_SetConfig+0x266>
 8004412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004416:	d817      	bhi.n	8004448 <UART_SetConfig+0x26c>
 8004418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441c:	d00b      	beq.n	8004436 <UART_SetConfig+0x25a>
 800441e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004422:	d811      	bhi.n	8004448 <UART_SetConfig+0x26c>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <UART_SetConfig+0x254>
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d006      	beq.n	800443c <UART_SetConfig+0x260>
 800442e:	e00b      	b.n	8004448 <UART_SetConfig+0x26c>
 8004430:	2301      	movs	r3, #1
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e075      	b.n	8004522 <UART_SetConfig+0x346>
 8004436:	2302      	movs	r3, #2
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e072      	b.n	8004522 <UART_SetConfig+0x346>
 800443c:	2304      	movs	r3, #4
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e06f      	b.n	8004522 <UART_SetConfig+0x346>
 8004442:	2308      	movs	r3, #8
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e06c      	b.n	8004522 <UART_SetConfig+0x346>
 8004448:	2310      	movs	r3, #16
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e069      	b.n	8004522 <UART_SetConfig+0x346>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <UART_SetConfig+0x2e8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d137      	bne.n	80044c8 <UART_SetConfig+0x2ec>
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <UART_SetConfig+0x2d0>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004462:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004466:	d017      	beq.n	8004498 <UART_SetConfig+0x2bc>
 8004468:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800446c:	d817      	bhi.n	800449e <UART_SetConfig+0x2c2>
 800446e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004472:	d00b      	beq.n	800448c <UART_SetConfig+0x2b0>
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d811      	bhi.n	800449e <UART_SetConfig+0x2c2>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <UART_SetConfig+0x2aa>
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d006      	beq.n	8004492 <UART_SetConfig+0x2b6>
 8004484:	e00b      	b.n	800449e <UART_SetConfig+0x2c2>
 8004486:	2300      	movs	r3, #0
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e04a      	b.n	8004522 <UART_SetConfig+0x346>
 800448c:	2302      	movs	r3, #2
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e047      	b.n	8004522 <UART_SetConfig+0x346>
 8004492:	2304      	movs	r3, #4
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e044      	b.n	8004522 <UART_SetConfig+0x346>
 8004498:	2308      	movs	r3, #8
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e041      	b.n	8004522 <UART_SetConfig+0x346>
 800449e:	2310      	movs	r3, #16
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e03e      	b.n	8004522 <UART_SetConfig+0x346>
 80044a4:	efff69f3 	.word	0xefff69f3
 80044a8:	40011000 	.word	0x40011000
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40004400 	.word	0x40004400
 80044b4:	40004800 	.word	0x40004800
 80044b8:	40004c00 	.word	0x40004c00
 80044bc:	40005000 	.word	0x40005000
 80044c0:	40011400 	.word	0x40011400
 80044c4:	40007800 	.word	0x40007800
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a71      	ldr	r2, [pc, #452]	; (8004694 <UART_SetConfig+0x4b8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d125      	bne.n	800451e <UART_SetConfig+0x342>
 80044d2:	4b71      	ldr	r3, [pc, #452]	; (8004698 <UART_SetConfig+0x4bc>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044e0:	d017      	beq.n	8004512 <UART_SetConfig+0x336>
 80044e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044e6:	d817      	bhi.n	8004518 <UART_SetConfig+0x33c>
 80044e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ec:	d00b      	beq.n	8004506 <UART_SetConfig+0x32a>
 80044ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f2:	d811      	bhi.n	8004518 <UART_SetConfig+0x33c>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <UART_SetConfig+0x324>
 80044f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044fc:	d006      	beq.n	800450c <UART_SetConfig+0x330>
 80044fe:	e00b      	b.n	8004518 <UART_SetConfig+0x33c>
 8004500:	2300      	movs	r3, #0
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e00d      	b.n	8004522 <UART_SetConfig+0x346>
 8004506:	2302      	movs	r3, #2
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e00a      	b.n	8004522 <UART_SetConfig+0x346>
 800450c:	2304      	movs	r3, #4
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e007      	b.n	8004522 <UART_SetConfig+0x346>
 8004512:	2308      	movs	r3, #8
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e004      	b.n	8004522 <UART_SetConfig+0x346>
 8004518:	2310      	movs	r3, #16
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e001      	b.n	8004522 <UART_SetConfig+0x346>
 800451e:	2310      	movs	r3, #16
 8004520:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452a:	d15a      	bne.n	80045e2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800452c:	7ffb      	ldrb	r3, [r7, #31]
 800452e:	2b08      	cmp	r3, #8
 8004530:	d827      	bhi.n	8004582 <UART_SetConfig+0x3a6>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0x35c>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004565 	.word	0x08004565
 8004540:	0800456d 	.word	0x0800456d
 8004544:	08004583 	.word	0x08004583
 8004548:	08004573 	.word	0x08004573
 800454c:	08004583 	.word	0x08004583
 8004550:	08004583 	.word	0x08004583
 8004554:	08004583 	.word	0x08004583
 8004558:	0800457b 	.word	0x0800457b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800455c:	f7fe fe8e 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8004560:	61b8      	str	r0, [r7, #24]
        break;
 8004562:	e013      	b.n	800458c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7fe fe9e 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8004568:	61b8      	str	r0, [r7, #24]
        break;
 800456a:	e00f      	b.n	800458c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <UART_SetConfig+0x4c0>)
 800456e:	61bb      	str	r3, [r7, #24]
        break;
 8004570:	e00c      	b.n	800458c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe fd95 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 8004576:	61b8      	str	r0, [r7, #24]
        break;
 8004578:	e008      	b.n	800458c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457e:	61bb      	str	r3, [r7, #24]
        break;
 8004580:	e004      	b.n	800458c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	77bb      	strb	r3, [r7, #30]
        break;
 800458a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d074      	beq.n	800467c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	005a      	lsls	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b0f      	cmp	r3, #15
 80045ac:	d916      	bls.n	80045dc <UART_SetConfig+0x400>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d212      	bcs.n	80045dc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f023 030f 	bic.w	r3, r3, #15
 80045be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	89fb      	ldrh	r3, [r7, #14]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	89fa      	ldrh	r2, [r7, #14]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e04f      	b.n	800467c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	77bb      	strb	r3, [r7, #30]
 80045e0:	e04c      	b.n	800467c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045e2:	7ffb      	ldrb	r3, [r7, #31]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d828      	bhi.n	800463a <UART_SetConfig+0x45e>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x414>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004615 	.word	0x08004615
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004625 	.word	0x08004625
 80045fc:	0800463b 	.word	0x0800463b
 8004600:	0800462b 	.word	0x0800462b
 8004604:	0800463b 	.word	0x0800463b
 8004608:	0800463b 	.word	0x0800463b
 800460c:	0800463b 	.word	0x0800463b
 8004610:	08004633 	.word	0x08004633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004614:	f7fe fe32 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8004618:	61b8      	str	r0, [r7, #24]
        break;
 800461a:	e013      	b.n	8004644 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7fe fe42 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8004620:	61b8      	str	r0, [r7, #24]
        break;
 8004622:	e00f      	b.n	8004644 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <UART_SetConfig+0x4c0>)
 8004626:	61bb      	str	r3, [r7, #24]
        break;
 8004628:	e00c      	b.n	8004644 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462a:	f7fe fd39 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800462e:	61b8      	str	r0, [r7, #24]
        break;
 8004630:	e008      	b.n	8004644 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	61bb      	str	r3, [r7, #24]
        break;
 8004638:	e004      	b.n	8004644 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	77bb      	strb	r3, [r7, #30]
        break;
 8004642:	bf00      	nop
    }

    if (pclk != 0U)
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	085a      	lsrs	r2, r3, #1
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	441a      	add	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b0f      	cmp	r3, #15
 8004662:	d909      	bls.n	8004678 <UART_SetConfig+0x49c>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466a:	d205      	bcs.n	8004678 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	b29a      	uxth	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	e001      	b.n	800467c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004688:	7fbb      	ldrb	r3, [r7, #30]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40007c00 	.word	0x40007c00
 8004698:	40023800 	.word	0x40023800
 800469c:	00f42400 	.word	0x00f42400

080046a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01a      	beq.n	80047b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479e:	d10a      	bne.n	80047b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f4:	f7fc fbba 	bl	8000f6c <HAL_GetTick>
 80047f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b08      	cmp	r3, #8
 8004806:	d10e      	bne.n	8004826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f82d 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e023      	b.n	800486e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d10e      	bne.n	8004852 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f817 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e00d      	b.n	800486e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b09c      	sub	sp, #112	; 0x70
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004886:	e0a5      	b.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	f000 80a1 	beq.w	80049d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fc fb6b 	bl	8000f6c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80048a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d13e      	bne.n	8004926 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048bc:	667b      	str	r3, [r7, #100]	; 0x64
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e6      	bne.n	80048a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	663b      	str	r3, [r7, #96]	; 0x60
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80048fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e067      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d04f      	beq.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004942:	d147      	bne.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800494c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496c:	637b      	str	r3, [r7, #52]	; 0x34
 800496e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e6      	bne.n	800494e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	613b      	str	r3, [r7, #16]
   return(result);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	66bb      	str	r3, [r7, #104]	; 0x68
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049a0:	623a      	str	r2, [r7, #32]
 80049a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	69f9      	ldr	r1, [r7, #28]
 80049a6:	6a3a      	ldr	r2, [r7, #32]
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e010      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4013      	ands	r3, r2
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	f43f af4a 	beq.w	8004888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3770      	adds	r7, #112	; 0x70
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 001c 	add.w	r0, r7, #28
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d120      	bne.n	8004a5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <USB_CoreInit+0xac>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f001 fb38 	bl	80060c4 <USB_CoreReset>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e010      	b.n	8004a7c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f001 fb2c 	bl	80060c4 <USB_CoreReset>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10b      	bne.n	8004a9a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f043 0206 	orr.w	r2, r3, #6
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa6:	b004      	add	sp, #16
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	ffbdffbf 	.word	0xffbdffbf

08004ab0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d165      	bne.n	8004b90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a41      	ldr	r2, [pc, #260]	; (8004bcc <USB_SetTurnaroundTime+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d906      	bls.n	8004ada <USB_SetTurnaroundTime+0x2a>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <USB_SetTurnaroundTime+0x120>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d202      	bcs.n	8004ada <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ad4:	230f      	movs	r3, #15
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e062      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a3c      	ldr	r2, [pc, #240]	; (8004bd0 <USB_SetTurnaroundTime+0x120>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d306      	bcc.n	8004af0 <USB_SetTurnaroundTime+0x40>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a3b      	ldr	r2, [pc, #236]	; (8004bd4 <USB_SetTurnaroundTime+0x124>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d202      	bcs.n	8004af0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aea:	230e      	movs	r3, #14
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e057      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a38      	ldr	r2, [pc, #224]	; (8004bd4 <USB_SetTurnaroundTime+0x124>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d306      	bcc.n	8004b06 <USB_SetTurnaroundTime+0x56>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a37      	ldr	r2, [pc, #220]	; (8004bd8 <USB_SetTurnaroundTime+0x128>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d202      	bcs.n	8004b06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b00:	230d      	movs	r3, #13
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e04c      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a33      	ldr	r2, [pc, #204]	; (8004bd8 <USB_SetTurnaroundTime+0x128>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d306      	bcc.n	8004b1c <USB_SetTurnaroundTime+0x6c>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a32      	ldr	r2, [pc, #200]	; (8004bdc <USB_SetTurnaroundTime+0x12c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d802      	bhi.n	8004b1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b16:	230c      	movs	r3, #12
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e041      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <USB_SetTurnaroundTime+0x12c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d906      	bls.n	8004b32 <USB_SetTurnaroundTime+0x82>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a2e      	ldr	r2, [pc, #184]	; (8004be0 <USB_SetTurnaroundTime+0x130>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d802      	bhi.n	8004b32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b2c:	230b      	movs	r3, #11
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e036      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4a2a      	ldr	r2, [pc, #168]	; (8004be0 <USB_SetTurnaroundTime+0x130>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d906      	bls.n	8004b48 <USB_SetTurnaroundTime+0x98>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4a29      	ldr	r2, [pc, #164]	; (8004be4 <USB_SetTurnaroundTime+0x134>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d802      	bhi.n	8004b48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b42:	230a      	movs	r3, #10
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e02b      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <USB_SetTurnaroundTime+0x134>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d906      	bls.n	8004b5e <USB_SetTurnaroundTime+0xae>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4a25      	ldr	r2, [pc, #148]	; (8004be8 <USB_SetTurnaroundTime+0x138>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d202      	bcs.n	8004b5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b58:	2309      	movs	r3, #9
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e020      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <USB_SetTurnaroundTime+0x138>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d306      	bcc.n	8004b74 <USB_SetTurnaroundTime+0xc4>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4a20      	ldr	r2, [pc, #128]	; (8004bec <USB_SetTurnaroundTime+0x13c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d802      	bhi.n	8004b74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b6e:	2308      	movs	r3, #8
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	e015      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <USB_SetTurnaroundTime+0x13c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d906      	bls.n	8004b8a <USB_SetTurnaroundTime+0xda>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <USB_SetTurnaroundTime+0x140>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d202      	bcs.n	8004b8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b84:	2307      	movs	r3, #7
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e00a      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b8a:	2306      	movs	r3, #6
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e007      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b96:	2309      	movs	r3, #9
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e001      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b9c:	2309      	movs	r3, #9
 8004b9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	029b      	lsls	r3, r3, #10
 8004bb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	00d8acbf 	.word	0x00d8acbf
 8004bd0:	00e4e1c0 	.word	0x00e4e1c0
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	01067380 	.word	0x01067380
 8004bdc:	011a499f 	.word	0x011a499f
 8004be0:	01312cff 	.word	0x01312cff
 8004be4:	014ca43f 	.word	0x014ca43f
 8004be8:	016e3600 	.word	0x016e3600
 8004bec:	01a6ab1f 	.word	0x01a6ab1f
 8004bf0:	01e84800 	.word	0x01e84800

08004bf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f043 0201 	orr.w	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 0201 	bic.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d115      	bne.n	8004c86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c66:	2001      	movs	r0, #1
 8004c68:	f7fc f98c 	bl	8000f84 <HAL_Delay>
      ms++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 f995 	bl	8005fa2 <USB_GetMode>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d01e      	beq.n	8004cbc <USB_SetCurrentMode+0x84>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b31      	cmp	r3, #49	; 0x31
 8004c82:	d9f0      	bls.n	8004c66 <USB_SetCurrentMode+0x2e>
 8004c84:	e01a      	b.n	8004cbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d115      	bne.n	8004cb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c98:	2001      	movs	r0, #1
 8004c9a:	f7fc f973 	bl	8000f84 <HAL_Delay>
      ms++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 f97c 	bl	8005fa2 <USB_GetMode>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <USB_SetCurrentMode+0x84>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b31      	cmp	r3, #49	; 0x31
 8004cb4:	d9f0      	bls.n	8004c98 <USB_SetCurrentMode+0x60>
 8004cb6:	e001      	b.n	8004cbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e005      	b.n	8004cc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b32      	cmp	r3, #50	; 0x32
 8004cc0:	d101      	bne.n	8004cc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	e009      	b.n	8004d04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3340      	adds	r3, #64	; 0x40
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3301      	adds	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b0e      	cmp	r3, #14
 8004d08:	d9f2      	bls.n	8004cf0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d11c      	bne.n	8004d4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1e:	f043 0302 	orr.w	r3, r3, #2
 8004d22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e005      	b.n	8004d56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d70:	461a      	mov	r2, r3
 8004d72:	680b      	ldr	r3, [r1, #0]
 8004d74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10c      	bne.n	8004d96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d82:	2100      	movs	r1, #0
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f961 	bl	800504c <USB_SetDevSpeed>
 8004d8a:	e008      	b.n	8004d9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f95c 	bl	800504c <USB_SetDevSpeed>
 8004d94:	e003      	b.n	8004d9e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d96:	2103      	movs	r1, #3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f957 	bl	800504c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d9e:	2110      	movs	r1, #16
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8f3 	bl	8004f8c <USB_FlushTxFifo>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f91d 	bl	8004ff0 <USB_FlushRxFifo>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e043      	b.n	8004e72 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e00:	d118      	bne.n	8004e34 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	461a      	mov	r2, r3
 8004e16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e013      	b.n	8004e46 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e008      	b.n	8004e46 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	461a      	mov	r2, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	461a      	mov	r2, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	461a      	mov	r2, r3
 8004e66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3b7      	bcc.n	8004dea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e043      	b.n	8004f08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e96:	d118      	bne.n	8004eca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e013      	b.n	8004edc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e008      	b.n	8004edc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2300      	movs	r3, #0
 8004eec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	461a      	mov	r2, r3
 8004efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3301      	adds	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d3b7      	bcc.n	8004e80 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f043 0210 	orr.w	r2, r3, #16
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <USB_DevInit+0x2b4>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f043 0208 	orr.w	r2, r3, #8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <USB_DevInit+0x2b8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f80:	b004      	add	sp, #16
 8004f82:	4770      	bx	lr
 8004f84:	803c3800 	.word	0x803c3800
 8004f88:	40000004 	.word	0x40000004

08004f8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	4a12      	ldr	r2, [pc, #72]	; (8004fec <USB_FlushTxFifo+0x60>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e01a      	b.n	8004fe0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	daf3      	bge.n	8004f9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	4a08      	ldr	r2, [pc, #32]	; (8004fec <USB_FlushTxFifo+0x60>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e006      	b.n	8004fe0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d0f1      	beq.n	8004fc2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	00030d40 	.word	0x00030d40

08004ff0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	4a11      	ldr	r2, [pc, #68]	; (8005048 <USB_FlushRxFifo+0x58>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d901      	bls.n	800500c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e017      	b.n	800503c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	daf3      	bge.n	8004ffc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2210      	movs	r2, #16
 800501c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	4a08      	ldr	r2, [pc, #32]	; (8005048 <USB_FlushRxFifo+0x58>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e006      	b.n	800503c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b10      	cmp	r3, #16
 8005038:	d0f1      	beq.n	800501e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	00030d40 	.word	0x00030d40

0800504c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0306 	and.w	r3, r3, #6
 8005096:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800509e:	2300      	movs	r3, #0
 80050a0:	75fb      	strb	r3, [r7, #23]
 80050a2:	e00a      	b.n	80050ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d002      	beq.n	80050b0 <USB_GetDevSpeed+0x32>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d102      	bne.n	80050b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050b0:	2302      	movs	r3, #2
 80050b2:	75fb      	strb	r3, [r7, #23]
 80050b4:	e001      	b.n	80050ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050b6:	230f      	movs	r3, #15
 80050b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d139      	bne.n	8005158 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005102:	4313      	orrs	r3, r2
 8005104:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d153      	bne.n	80051c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	78db      	ldrb	r3, [r3, #3]
 8005136:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005138:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	059b      	lsls	r3, r3, #22
 800513e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005140:	431a      	orrs	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	0159      	lsls	r1, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	440b      	add	r3, r1
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	4619      	mov	r1, r3
 8005150:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <USB_ActivateEndpoint+0x10c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
 8005156:	e035      	b.n	80051c4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	2101      	movs	r1, #1
 800516a:	fa01 f303 	lsl.w	r3, r1, r3
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	68f9      	ldr	r1, [r7, #12]
 8005172:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005176:	4313      	orrs	r3, r2
 8005178:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d119      	bne.n	80051c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	78db      	ldrb	r3, [r3, #3]
 80051aa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051ac:	430b      	orrs	r3, r1
 80051ae:	431a      	orrs	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	0159      	lsls	r1, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	440b      	add	r3, r1
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	4619      	mov	r1, r3
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <USB_ActivateEndpoint+0x10c>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	10008000 	.word	0x10008000

080051d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d161      	bne.n	80052b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520a:	d11f      	bne.n	800524c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800522a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526c:	4013      	ands	r3, r2
 800526e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	b29b      	uxth	r3, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4013      	ands	r3, r2
 8005292:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	0159      	lsls	r1, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	440b      	add	r3, r1
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	4619      	mov	r1, r3
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <USB_DeactivateEndpoint+0x1b0>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]
 80052b6:	e060      	b.n	800537a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ce:	d11f      	bne.n	8005310 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	2101      	movs	r1, #1
 8005322:	fa01 f303 	lsl.w	r3, r1, r3
 8005326:	041b      	lsls	r3, r3, #16
 8005328:	43db      	mvns	r3, r3
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005330:	4013      	ands	r3, r2
 8005332:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	2101      	movs	r1, #1
 8005346:	fa01 f303 	lsl.w	r3, r1, r3
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	43db      	mvns	r3, r3
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005354:	4013      	ands	r3, r2
 8005356:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	0159      	lsls	r1, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	440b      	add	r3, r1
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	4619      	mov	r1, r3
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <USB_DeactivateEndpoint+0x1b4>)
 8005376:	4013      	ands	r3, r2
 8005378:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	ec337800 	.word	0xec337800
 800538c:	eff37800 	.word	0xeff37800

08005390 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	; 0x28
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 8163 	bne.w	8005678 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d132      	bne.n	8005420 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	0159      	lsls	r1, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	440b      	add	r3, r1
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	4619      	mov	r1, r3
 80053d6:	4ba5      	ldr	r3, [pc, #660]	; (800566c <USB_EPStartXfer+0x2dc>)
 80053d8:	4013      	ands	r3, r2
 80053da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	0159      	lsls	r1, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	440b      	add	r3, r1
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	4619      	mov	r1, r3
 8005418:	4b95      	ldr	r3, [pc, #596]	; (8005670 <USB_EPStartXfer+0x2e0>)
 800541a:	4013      	ands	r3, r2
 800541c:	610b      	str	r3, [r1, #16]
 800541e:	e074      	b.n	800550a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	0159      	lsls	r1, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	440b      	add	r3, r1
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	4619      	mov	r1, r3
 800543c:	4b8c      	ldr	r3, [pc, #560]	; (8005670 <USB_EPStartXfer+0x2e0>)
 800543e:	4013      	ands	r3, r2
 8005440:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	0159      	lsls	r1, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	440b      	add	r3, r1
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	4619      	mov	r1, r3
 800545e:	4b83      	ldr	r3, [pc, #524]	; (800566c <USB_EPStartXfer+0x2dc>)
 8005460:	4013      	ands	r3, r2
 8005462:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6959      	ldr	r1, [r3, #20]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	440b      	add	r3, r1
 800547c:	1e59      	subs	r1, r3, #1
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	fbb1 f3f3 	udiv	r3, r1, r3
 8005486:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005488:	4b7a      	ldr	r3, [pc, #488]	; (8005674 <USB_EPStartXfer+0x2e4>)
 800548a:	400b      	ands	r3, r1
 800548c:	69b9      	ldr	r1, [r7, #24]
 800548e:	0148      	lsls	r0, r1, #5
 8005490:	69f9      	ldr	r1, [r7, #28]
 8005492:	4401      	add	r1, r0
 8005494:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005498:	4313      	orrs	r3, r2
 800549a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b2:	69b9      	ldr	r1, [r7, #24]
 80054b4:	0148      	lsls	r0, r1, #5
 80054b6:	69f9      	ldr	r1, [r7, #28]
 80054b8:	4401      	add	r1, r0
 80054ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054be:	4313      	orrs	r3, r2
 80054c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	78db      	ldrb	r3, [r3, #3]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d11f      	bne.n	800550a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005508:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d14b      	bne.n	80055a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	461a      	mov	r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	78db      	ldrb	r3, [r3, #3]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d128      	bne.n	8005586 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d110      	bne.n	8005566 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e00f      	b.n	8005586 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e133      	b.n	8005810 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	78db      	ldrb	r3, [r3, #3]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d015      	beq.n	80055fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 811b 	beq.w	8005810 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	2101      	movs	r1, #1
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f6:	4313      	orrs	r3, r2
 80055f8:	634b      	str	r3, [r1, #52]	; 0x34
 80055fa:	e109      	b.n	8005810 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d110      	bne.n	800562e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005626:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	e00f      	b.n	800564e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	68d9      	ldr	r1, [r3, #12]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	b298      	uxth	r0, r3
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	4603      	mov	r3, r0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fa38 	bl	8005ad8 <USB_WritePacket>
 8005668:	e0d2      	b.n	8005810 <USB_EPStartXfer+0x480>
 800566a:	bf00      	nop
 800566c:	e007ffff 	.word	0xe007ffff
 8005670:	fff80000 	.word	0xfff80000
 8005674:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	0159      	lsls	r1, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	440b      	add	r3, r1
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	4619      	mov	r1, r3
 8005694:	4b61      	ldr	r3, [pc, #388]	; (800581c <USB_EPStartXfer+0x48c>)
 8005696:	4013      	ands	r3, r2
 8005698:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	0159      	lsls	r1, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	440b      	add	r3, r1
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	4619      	mov	r1, r3
 80056b6:	4b5a      	ldr	r3, [pc, #360]	; (8005820 <USB_EPStartXfer+0x490>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d123      	bne.n	800570c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056da:	69b9      	ldr	r1, [r7, #24]
 80056dc:	0148      	lsls	r0, r1, #5
 80056de:	69f9      	ldr	r1, [r7, #28]
 80056e0:	4401      	add	r1, r0
 80056e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005708:	6113      	str	r3, [r2, #16]
 800570a:	e033      	b.n	8005774 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4413      	add	r3, r2
 8005716:	1e5a      	subs	r2, r3, #1
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	8afb      	ldrh	r3, [r7, #22]
 8005732:	04d9      	lsls	r1, r3, #19
 8005734:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <USB_EPStartXfer+0x494>)
 8005736:	400b      	ands	r3, r1
 8005738:	69b9      	ldr	r1, [r7, #24]
 800573a:	0148      	lsls	r0, r1, #5
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	4401      	add	r1, r0
 8005740:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005744:	4313      	orrs	r3, r2
 8005746:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	8af9      	ldrh	r1, [r7, #22]
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	0148      	lsls	r0, r1, #5
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	4401      	add	r1, r0
 800576c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005770:	4313      	orrs	r3, r2
 8005772:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10d      	bne.n	8005796 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	68d9      	ldr	r1, [r3, #12]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005792:	460a      	mov	r2, r1
 8005794:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	78db      	ldrb	r3, [r3, #3]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d128      	bne.n	80057f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d110      	bne.n	80057d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e00f      	b.n	80057f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800580e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	fff80000 	.word	0xfff80000
 8005820:	e007ffff 	.word	0xe007ffff
 8005824:	1ff80000 	.word	0x1ff80000

08005828 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b01      	cmp	r3, #1
 8005846:	f040 80cd 	bne.w	80059e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d132      	bne.n	80058b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	0159      	lsls	r1, r3, #5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	440b      	add	r3, r1
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	4619      	mov	r1, r3
 800586e:	4b98      	ldr	r3, [pc, #608]	; (8005ad0 <USB_EP0StartXfer+0x2a8>)
 8005870:	4013      	ands	r3, r2
 8005872:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	0159      	lsls	r1, r3, #5
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	440b      	add	r3, r1
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	4619      	mov	r1, r3
 80058b0:	4b88      	ldr	r3, [pc, #544]	; (8005ad4 <USB_EP0StartXfer+0x2ac>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	610b      	str	r3, [r1, #16]
 80058b6:	e04e      	b.n	8005956 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	0159      	lsls	r1, r3, #5
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	440b      	add	r3, r1
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	4619      	mov	r1, r3
 80058d4:	4b7f      	ldr	r3, [pc, #508]	; (8005ad4 <USB_EP0StartXfer+0x2ac>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	0159      	lsls	r1, r3, #5
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	440b      	add	r3, r1
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	4619      	mov	r1, r3
 80058f6:	4b76      	ldr	r3, [pc, #472]	; (8005ad0 <USB_EP0StartXfer+0x2a8>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d903      	bls.n	8005910 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800592e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005946:	6939      	ldr	r1, [r7, #16]
 8005948:	0148      	lsls	r0, r1, #5
 800594a:	6979      	ldr	r1, [r7, #20]
 800594c:	4401      	add	r1, r0
 800594e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005952:	4313      	orrs	r3, r2
 8005954:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d11e      	bne.n	800599a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d009      	beq.n	8005978 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	440a      	add	r2, r1
 800598e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e092      	b.n	8005ac0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d07e      	beq.n	8005ac0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	2101      	movs	r1, #1
 80059d4:	fa01 f303 	lsl.w	r3, r1, r3
 80059d8:	6979      	ldr	r1, [r7, #20]
 80059da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059de:	4313      	orrs	r3, r2
 80059e0:	634b      	str	r3, [r1, #52]	; 0x34
 80059e2:	e06d      	b.n	8005ac0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	0159      	lsls	r1, r3, #5
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	440b      	add	r3, r1
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	4619      	mov	r1, r3
 8005a00:	4b34      	ldr	r3, [pc, #208]	; (8005ad4 <USB_EP0StartXfer+0x2ac>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	0159      	lsls	r1, r3, #5
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	440b      	add	r3, r1
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	4619      	mov	r1, r3
 8005a22:	4b2b      	ldr	r3, [pc, #172]	; (8005ad0 <USB_EP0StartXfer+0x2a8>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6e:	6939      	ldr	r1, [r7, #16]
 8005a70:	0148      	lsls	r0, r1, #5
 8005a72:	6979      	ldr	r1, [r7, #20]
 8005a74:	4401      	add	r1, r0
 8005a76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10d      	bne.n	8005aa0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	68d9      	ldr	r1, [r3, #12]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	460a      	mov	r2, r1
 8005a9e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005abe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e007ffff 	.word	0xe007ffff
 8005ad4:	fff80000 	.word	0xfff80000

08005ad8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b089      	sub	sp, #36	; 0x24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	71fb      	strb	r3, [r7, #7]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005af6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d123      	bne.n	8005b46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005afe:	88bb      	ldrh	r3, [r7, #4]
 8005b00:	3303      	adds	r3, #3
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	e018      	b.n	8005b3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	031a      	lsls	r2, r3, #12
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b18:	461a      	mov	r2, r3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	3301      	adds	r3, #1
 8005b36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d3e2      	bcc.n	8005b0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3724      	adds	r7, #36	; 0x24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b08b      	sub	sp, #44	; 0x2c
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	089b      	lsrs	r3, r3, #2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	e014      	b.n	8005baa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	3301      	adds	r3, #1
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	3301      	adds	r3, #1
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d3e6      	bcc.n	8005b80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bb2:	8bfb      	ldrh	r3, [r7, #30]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01e      	beq.n	8005bf6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f107 0310 	add.w	r3, r7, #16
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	701a      	strb	r2, [r3, #0]
      i++;
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	3301      	adds	r3, #1
 8005be2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	3301      	adds	r3, #1
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bea:	8bfb      	ldrh	r3, [r7, #30]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bf0:	8bfb      	ldrh	r3, [r7, #30]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1ea      	bne.n	8005bcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	372c      	adds	r7, #44	; 0x2c
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d12c      	bne.n	8005c7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	db12      	blt.n	8005c58 <USB_EPSetStall+0x54>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00f      	beq.n	8005c58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e02b      	b.n	8005cd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	db12      	blt.n	8005cb2 <USB_EPSetStall+0xae>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00f      	beq.n	8005cb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d128      	bne.n	8005d4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d003      	beq.n	8005d2c <USB_EPClearStall+0x4c>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	78db      	ldrb	r3, [r3, #3]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d138      	bne.n	8005d9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e027      	b.n	8005d9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	78db      	ldrb	r3, [r3, #3]
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d003      	beq.n	8005d7e <USB_EPClearStall+0x9e>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	78db      	ldrb	r3, [r3, #3]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d10f      	bne.n	8005d9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de6:	4313      	orrs	r3, r2
 8005de8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e26:	f023 0302 	bic.w	r3, r3, #2
 8005e2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e54:	f023 0303 	bic.w	r3, r3, #3
 8005e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e68:	f043 0302 	orr.w	r3, r3, #2
 8005e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e94:	68fb      	ldr	r3, [r7, #12]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	0c1b      	lsrs	r3, r3, #16
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	b29b      	uxth	r3, r3
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	4013      	ands	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f38:	68bb      	ldr	r3, [r7, #8]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b087      	sub	sp, #28
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f68:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	fa22 f303 	lsr.w	r3, r2, r3
 8005f76:	01db      	lsls	r3, r3, #7
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4013      	ands	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f94:	68bb      	ldr	r3, [r7, #8]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0301 	and.w	r3, r3, #1
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <USB_ActivateSetup+0x44>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	fffff800 	.word	0xfffff800

08006008 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	333c      	adds	r3, #60	; 0x3c
 800601e:	3304      	adds	r3, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4a26      	ldr	r2, [pc, #152]	; (80060c0 <USB_EP0_OutStart+0xb8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d90a      	bls.n	8006042 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800603c:	d101      	bne.n	8006042 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	e037      	b.n	80060b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	461a      	mov	r2, r3
 800604a:	2300      	movs	r3, #0
 800604c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f043 0318 	orr.w	r3, r3, #24
 8006074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006084:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006088:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800608a:	7afb      	ldrb	r3, [r7, #11]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d10f      	bne.n	80060b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80060ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	4f54300a 	.word	0x4f54300a

080060c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	4a13      	ldr	r2, [pc, #76]	; (8006124 <USB_CoreReset+0x60>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e01a      	b.n	8006116 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	daf3      	bge.n	80060d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f043 0201 	orr.w	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <USB_CoreReset+0x60>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e006      	b.n	8006116 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b01      	cmp	r3, #1
 8006112:	d0f1      	beq.n	80060f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	00030d40 	.word	0x00030d40

08006128 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006134:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006138:	f004 ff5c 	bl	800aff4 <malloc>
 800613c:	4603      	mov	r3, r0
 800613e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800614e:	2302      	movs	r3, #2
 8006150:	e066      	b.n	8006220 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7c1b      	ldrb	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d119      	bne.n	8006196 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006166:	2202      	movs	r2, #2
 8006168:	2181      	movs	r1, #129	; 0x81
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f004 fd75 	bl	800ac5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800617a:	2202      	movs	r2, #2
 800617c:	2101      	movs	r1, #1
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f004 fd6b 	bl	800ac5a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2210      	movs	r2, #16
 8006190:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006194:	e016      	b.n	80061c4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006196:	2340      	movs	r3, #64	; 0x40
 8006198:	2202      	movs	r2, #2
 800619a:	2181      	movs	r1, #129	; 0x81
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f004 fd5c 	bl	800ac5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	2202      	movs	r2, #2
 80061ac:	2101      	movs	r1, #1
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f004 fd53 	bl	800ac5a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2210      	movs	r2, #16
 80061c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061c4:	2308      	movs	r3, #8
 80061c6:	2203      	movs	r2, #3
 80061c8:	2182      	movs	r1, #130	; 0x82
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f004 fd45 	bl	800ac5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	7c1b      	ldrb	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006204:	2101      	movs	r1, #1
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f004 fe16 	bl	800ae38 <USBD_LL_PrepareReceive>
 800620c:	e007      	b.n	800621e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006214:	2340      	movs	r3, #64	; 0x40
 8006216:	2101      	movs	r1, #1
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f004 fe0d 	bl	800ae38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006238:	2181      	movs	r1, #129	; 0x81
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f004 fd33 	bl	800aca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006246:	2101      	movs	r1, #1
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f004 fd2c 	bl	800aca6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006256:	2182      	movs	r1, #130	; 0x82
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f004 fd24 	bl	800aca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00e      	beq.n	8006296 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006288:	4618      	mov	r0, r3
 800628a:	f004 febb 	bl	800b004 <free>
    pdev->pClassData = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006296:	7bfb      	ldrb	r3, [r7, #15]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d03a      	beq.n	8006340 <USBD_CDC_Setup+0xa0>
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	f040 8097 	bne.w	80063fe <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	88db      	ldrh	r3, [r3, #6]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d029      	beq.n	800632c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	b25b      	sxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	da11      	bge.n	8006306 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80062ee:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	88d2      	ldrh	r2, [r2, #6]
 80062f4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80062f6:	6939      	ldr	r1, [r7, #16]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	88db      	ldrh	r3, [r3, #6]
 80062fc:	461a      	mov	r2, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 faa6 	bl	8007850 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006304:	e082      	b.n	800640c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	785a      	ldrb	r2, [r3, #1]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	88db      	ldrh	r3, [r3, #6]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800631c:	6939      	ldr	r1, [r7, #16]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	88db      	ldrh	r3, [r3, #6]
 8006322:	461a      	mov	r2, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 fabf 	bl	80078a8 <USBD_CtlPrepareRx>
    break;
 800632a:	e06f      	b.n	800640c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	7850      	ldrb	r0, [r2, #1]
 8006338:	2200      	movs	r2, #0
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	4798      	blx	r3
    break;
 800633e:	e065      	b.n	800640c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b0b      	cmp	r3, #11
 8006346:	d84f      	bhi.n	80063e8 <USBD_CDC_Setup+0x148>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <USBD_CDC_Setup+0xb0>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006381 	.word	0x08006381
 8006354:	080063f7 	.word	0x080063f7
 8006358:	080063e9 	.word	0x080063e9
 800635c:	080063e9 	.word	0x080063e9
 8006360:	080063e9 	.word	0x080063e9
 8006364:	080063e9 	.word	0x080063e9
 8006368:	080063e9 	.word	0x080063e9
 800636c:	080063e9 	.word	0x080063e9
 8006370:	080063e9 	.word	0x080063e9
 8006374:	080063e9 	.word	0x080063e9
 8006378:	080063a9 	.word	0x080063a9
 800637c:	080063d1 	.word	0x080063d1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006386:	2b03      	cmp	r3, #3
 8006388:	d107      	bne.n	800639a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800638a:	f107 030c 	add.w	r3, r7, #12
 800638e:	2202      	movs	r2, #2
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fa5c 	bl	8007850 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006398:	e030      	b.n	80063fc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f9e6 	bl	800776e <USBD_CtlError>
        ret = USBD_FAIL;
 80063a2:	2303      	movs	r3, #3
 80063a4:	75fb      	strb	r3, [r7, #23]
      break;
 80063a6:	e029      	b.n	80063fc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d107      	bne.n	80063c2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063b2:	f107 030f 	add.w	r3, r7, #15
 80063b6:	2201      	movs	r2, #1
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 fa48 	bl	8007850 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80063c0:	e01c      	b.n	80063fc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 f9d2 	bl	800776e <USBD_CtlError>
        ret = USBD_FAIL;
 80063ca:	2303      	movs	r3, #3
 80063cc:	75fb      	strb	r3, [r7, #23]
      break;
 80063ce:	e015      	b.n	80063fc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d00f      	beq.n	80063fa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 f9c6 	bl	800776e <USBD_CtlError>
        ret = USBD_FAIL;
 80063e2:	2303      	movs	r3, #3
 80063e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80063e6:	e008      	b.n	80063fa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 f9bf 	bl	800776e <USBD_CtlError>
      ret = USBD_FAIL;
 80063f0:	2303      	movs	r3, #3
 80063f2:	75fb      	strb	r3, [r7, #23]
      break;
 80063f4:	e002      	b.n	80063fc <USBD_CDC_Setup+0x15c>
      break;
 80063f6:	bf00      	nop
 80063f8:	e008      	b.n	800640c <USBD_CDC_Setup+0x16c>
      break;
 80063fa:	bf00      	nop
    }
    break;
 80063fc:	e006      	b.n	800640c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 f9b4 	bl	800776e <USBD_CtlError>
    ret = USBD_FAIL;
 8006406:	2303      	movs	r3, #3
 8006408:	75fb      	strb	r3, [r7, #23]
    break;
 800640a:	bf00      	nop
  }

  return (uint8_t)ret;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop

08006418 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800642a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006436:	2303      	movs	r3, #3
 8006438:	e049      	b.n	80064ce <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	3318      	adds	r3, #24
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d029      	beq.n	80064ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	3318      	adds	r3, #24
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	78f9      	ldrb	r1, [r7, #3]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	460b      	mov	r3, r1
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	1a5b      	subs	r3, r3, r1
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4403      	add	r3, r0
 8006478:	3344      	adds	r3, #68	; 0x44
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006480:	fb03 f301 	mul.w	r3, r3, r1
 8006484:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006486:	2b00      	cmp	r3, #0
 8006488:	d110      	bne.n	80064ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800648a:	78fa      	ldrb	r2, [r7, #3]
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	3318      	adds	r3, #24
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800649e:	78f9      	ldrb	r1, [r7, #3]
 80064a0:	2300      	movs	r3, #0
 80064a2:	2200      	movs	r2, #0
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f004 fca6 	bl	800adf6 <USBD_LL_Transmit>
 80064aa:	e00f      	b.n	80064cc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80064c8:	78fa      	ldrb	r2, [r7, #3]
 80064ca:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e015      	b.n	8006524 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f004 fcbc 	bl	800ae7a <USBD_LL_GetRxDataSize>
 8006502:	4602      	mov	r2, r0
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800651e:	4611      	mov	r1, r2
 8006520:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800653a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d015      	beq.n	8006572 <USBD_CDC_EP0_RxReady+0x46>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800654c:	2bff      	cmp	r3, #255	; 0xff
 800654e:	d010      	beq.n	8006572 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800655e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006566:	b292      	uxth	r2, r2
 8006568:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	22ff      	movs	r2, #255	; 0xff
 800656e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2243      	movs	r2, #67	; 0x43
 8006588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800658a:	4b03      	ldr	r3, [pc, #12]	; (8006598 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	20000094 	.word	0x20000094

0800659c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2243      	movs	r2, #67	; 0x43
 80065a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80065aa:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	20000050 	.word	0x20000050

080065bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2243      	movs	r2, #67	; 0x43
 80065c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80065ca:	4b03      	ldr	r3, [pc, #12]	; (80065d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	200000d8 	.word	0x200000d8

080065dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	220a      	movs	r2, #10
 80065e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065ea:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	2000000c 	.word	0x2000000c

080065fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800660c:	2303      	movs	r3, #3
 800660e:	e004      	b.n	800661a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006626:	b480      	push	{r7}
 8006628:	b087      	sub	sp, #28
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006638:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006668:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800668e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800669a:	2303      	movs	r3, #3
 800669c:	e016      	b.n	80066cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7c1b      	ldrb	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b0:	2101      	movs	r1, #1
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f004 fbc0 	bl	800ae38 <USBD_LL_PrepareReceive>
 80066b8:	e007      	b.n	80066ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066c0:	2340      	movs	r3, #64	; 0x40
 80066c2:	2101      	movs	r1, #1
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f004 fbb7 	bl	800ae38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e025      	b.n	8006738 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	79fa      	ldrb	r2, [r7, #7]
 800672a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f004 fa2d 	bl	800ab8c <USBD_LL_Init>
 8006732:	4603      	mov	r3, r0
 8006734:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006754:	2303      	movs	r3, #3
 8006756:	e010      	b.n	800677a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f107 020e 	add.w	r2, r7, #14
 800676c:	4610      	mov	r0, r2
 800676e:	4798      	blx	r3
 8006770:	4602      	mov	r2, r0
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f004 fa4a 	bl	800ac24 <USBD_LL_Start>
 8006790:	4603      	mov	r3, r0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067bc:	2303      	movs	r3, #3
 80067be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	4611      	mov	r1, r2
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
 80067da:	4603      	mov	r3, r0
 80067dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	4611      	mov	r1, r2
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
  }

  return USBD_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 ff65 	bl	80076fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800683e:	461a      	mov	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	2b02      	cmp	r3, #2
 8006852:	d01a      	beq.n	800688a <USBD_LL_SetupStage+0x72>
 8006854:	2b02      	cmp	r3, #2
 8006856:	d822      	bhi.n	800689e <USBD_LL_SetupStage+0x86>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <USBD_LL_SetupStage+0x4a>
 800685c:	2b01      	cmp	r3, #1
 800685e:	d00a      	beq.n	8006876 <USBD_LL_SetupStage+0x5e>
 8006860:	e01d      	b.n	800689e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa18 	bl	8006ca0 <USBD_StdDevReq>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
      break;
 8006874:	e020      	b.n	80068b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa7c 	bl	8006d7c <USBD_StdItfReq>
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]
      break;
 8006888:	e016      	b.n	80068b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 faba 	bl	8006e0c <USBD_StdEPReq>
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e00c      	b.n	80068b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f004 fa19 	bl	800ace4 <USBD_LL_StallEP>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
      break;
 80068b6:	bf00      	nop
  }

  return ret;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b086      	sub	sp, #24
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	460b      	mov	r3, r1
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d137      	bne.n	8006946 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d14a      	bne.n	800697e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d913      	bls.n	800691c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	1ad2      	subs	r2, r2, r3
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	4293      	cmp	r3, r2
 800690c:	bf28      	it	cs
 800690e:	4613      	movcs	r3, r2
 8006910:	461a      	mov	r2, r3
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 ffe4 	bl	80078e2 <USBD_CtlContinueRx>
 800691a:	e030      	b.n	800697e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800692e:	2b03      	cmp	r3, #3
 8006930:	d105      	bne.n	800693e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 ffe0 	bl	8007904 <USBD_CtlSendStatus>
 8006944:	e01b      	b.n	800697e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d013      	beq.n	800697a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006958:	2b03      	cmp	r3, #3
 800695a:	d10e      	bne.n	800697a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	7afa      	ldrb	r2, [r7, #11]
 8006966:	4611      	mov	r1, r2
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	4798      	blx	r3
 800696c:	4603      	mov	r3, r0
 800696e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	e002      	b.n	8006980 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800697a:	2303      	movs	r3, #3
 800697c:	e000      	b.n	8006980 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	460b      	mov	r3, r1
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d16a      	bne.n	8006a72 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3314      	adds	r3, #20
 80069a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d155      	bne.n	8006a58 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d914      	bls.n	80069e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	1ad2      	subs	r2, r2, r3
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	461a      	mov	r2, r3
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 ff59 	bl	8007886 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069d4:	2300      	movs	r3, #0
 80069d6:	2200      	movs	r2, #0
 80069d8:	2100      	movs	r1, #0
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f004 fa2c 	bl	800ae38 <USBD_LL_PrepareReceive>
 80069e0:	e03a      	b.n	8006a58 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d11c      	bne.n	8006a28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d316      	bcc.n	8006a28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d20f      	bcs.n	8006a28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 ff3a 	bl	8007886 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f004 fa09 	bl	800ae38 <USBD_LL_PrepareReceive>
 8006a26:	e017      	b.n	8006a58 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d105      	bne.n	8006a4a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a4a:	2180      	movs	r1, #128	; 0x80
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f004 f949 	bl	800ace4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 ff69 	bl	800792a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d123      	bne.n	8006aaa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff fe99 	bl	800679a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a70:	e01b      	b.n	8006aaa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d013      	beq.n	8006aa6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d10e      	bne.n	8006aa6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	7afa      	ldrb	r2, [r7, #11]
 8006a92:	4611      	mov	r1, r2
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	4798      	blx	r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	e002      	b.n	8006aac <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e000      	b.n	8006aac <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6852      	ldr	r2, [r2, #4]
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	4611      	mov	r1, r2
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006af8:	2340      	movs	r3, #64	; 0x40
 8006afa:	2200      	movs	r2, #0
 8006afc:	2100      	movs	r1, #0
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f004 f8ab 	bl	800ac5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2240      	movs	r2, #64	; 0x40
 8006b10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b14:	2340      	movs	r3, #64	; 0x40
 8006b16:	2200      	movs	r2, #0
 8006b18:	2180      	movs	r1, #128	; 0x80
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f004 f89d 	bl	800ac5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2240      	movs	r2, #64	; 0x40
 8006b2a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d105      	bne.n	8006b9e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d10b      	bne.n	8006bd6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d009      	beq.n	8006c58 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6852      	ldr	r2, [r2, #4]
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	4611      	mov	r1, r2
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
  }

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b087      	sub	sp, #28
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	3301      	adds	r3, #1
 8006c78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c80:	8a3b      	ldrh	r3, [r7, #16]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	b21a      	sxth	r2, r3
 8006c86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	b21b      	sxth	r3, r3
 8006c8e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c90:	89fb      	ldrh	r3, [r7, #14]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d005      	beq.n	8006cc6 <USBD_StdDevReq+0x26>
 8006cba:	2b40      	cmp	r3, #64	; 0x40
 8006cbc:	d853      	bhi.n	8006d66 <USBD_StdDevReq+0xc6>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <USBD_StdDevReq+0x3a>
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d14f      	bne.n	8006d66 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	4798      	blx	r3
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd8:	e04a      	b.n	8006d70 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	785b      	ldrb	r3, [r3, #1]
 8006cde:	2b09      	cmp	r3, #9
 8006ce0:	d83b      	bhi.n	8006d5a <USBD_StdDevReq+0xba>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <USBD_StdDevReq+0x48>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d3d 	.word	0x08006d3d
 8006cec:	08006d51 	.word	0x08006d51
 8006cf0:	08006d5b 	.word	0x08006d5b
 8006cf4:	08006d47 	.word	0x08006d47
 8006cf8:	08006d5b 	.word	0x08006d5b
 8006cfc:	08006d1b 	.word	0x08006d1b
 8006d00:	08006d11 	.word	0x08006d11
 8006d04:	08006d5b 	.word	0x08006d5b
 8006d08:	08006d33 	.word	0x08006d33
 8006d0c:	08006d25 	.word	0x08006d25
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9d8 	bl	80070c8 <USBD_GetDescriptor>
      break;
 8006d18:	e024      	b.n	8006d64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fb67 	bl	80073f0 <USBD_SetAddress>
      break;
 8006d22:	e01f      	b.n	8006d64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fba6 	bl	8007478 <USBD_SetConfig>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d30:	e018      	b.n	8006d64 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fc43 	bl	80075c0 <USBD_GetConfig>
      break;
 8006d3a:	e013      	b.n	8006d64 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fc73 	bl	800762a <USBD_GetStatus>
      break;
 8006d44:	e00e      	b.n	8006d64 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fca1 	bl	8007690 <USBD_SetFeature>
      break;
 8006d4e:	e009      	b.n	8006d64 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fcb0 	bl	80076b8 <USBD_ClrFeature>
      break;
 8006d58:	e004      	b.n	8006d64 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fd06 	bl	800776e <USBD_CtlError>
      break;
 8006d62:	bf00      	nop
    }
    break;
 8006d64:	e004      	b.n	8006d70 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fd00 	bl	800776e <USBD_CtlError>
    break;
 8006d6e:	bf00      	nop
  }

  return ret;
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop

08006d7c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d005      	beq.n	8006da2 <USBD_StdItfReq+0x26>
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d82e      	bhi.n	8006df8 <USBD_StdItfReq+0x7c>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <USBD_StdItfReq+0x26>
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d12a      	bne.n	8006df8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	3b01      	subs	r3, #1
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d81d      	bhi.n	8006dea <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	889b      	ldrh	r3, [r3, #4]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d813      	bhi.n	8006de0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	88db      	ldrh	r3, [r3, #6]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d110      	bne.n	8006df4 <USBD_StdItfReq+0x78>
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10d      	bne.n	8006df4 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fd93 	bl	8007904 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006dde:	e009      	b.n	8006df4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fcc3 	bl	800776e <USBD_CtlError>
      break;
 8006de8:	e004      	b.n	8006df4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fcbe 	bl	800776e <USBD_CtlError>
      break;
 8006df2:	e000      	b.n	8006df6 <USBD_StdItfReq+0x7a>
      break;
 8006df4:	bf00      	nop
    }
    break;
 8006df6:	e004      	b.n	8006e02 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fcb7 	bl	800776e <USBD_CtlError>
    break;
 8006e00:	bf00      	nop
  }

  return ret;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	889b      	ldrh	r3, [r3, #4]
 8006e1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e28:	2b40      	cmp	r3, #64	; 0x40
 8006e2a:	d007      	beq.n	8006e3c <USBD_StdEPReq+0x30>
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	f200 8140 	bhi.w	80070b2 <USBD_StdEPReq+0x2a6>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00c      	beq.n	8006e50 <USBD_StdEPReq+0x44>
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	f040 813b 	bne.w	80070b2 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e4e:	e135      	b.n	80070bc <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d007      	beq.n	8006e68 <USBD_StdEPReq+0x5c>
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	f300 8124 	bgt.w	80070a6 <USBD_StdEPReq+0x29a>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d07b      	beq.n	8006f5a <USBD_StdEPReq+0x14e>
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d03b      	beq.n	8006ede <USBD_StdEPReq+0xd2>
 8006e66:	e11e      	b.n	80070a6 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d002      	beq.n	8006e78 <USBD_StdEPReq+0x6c>
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d016      	beq.n	8006ea4 <USBD_StdEPReq+0x98>
 8006e76:	e02c      	b.n	8006ed2 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00d      	beq.n	8006e9a <USBD_StdEPReq+0x8e>
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b80      	cmp	r3, #128	; 0x80
 8006e82:	d00a      	beq.n	8006e9a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f003 ff2b 	bl	800ace4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e8e:	2180      	movs	r1, #128	; 0x80
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f003 ff27 	bl	800ace4 <USBD_LL_StallEP>
 8006e96:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e98:	e020      	b.n	8006edc <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fc66 	bl	800776e <USBD_CtlError>
        break;
 8006ea2:	e01b      	b.n	8006edc <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	885b      	ldrh	r3, [r3, #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10e      	bne.n	8006eca <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <USBD_StdEPReq+0xbe>
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b80      	cmp	r3, #128	; 0x80
 8006eb6:	d008      	beq.n	8006eca <USBD_StdEPReq+0xbe>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	88db      	ldrh	r3, [r3, #6]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f003 ff0d 	bl	800ace4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fd1a 	bl	8007904 <USBD_CtlSendStatus>

        break;
 8006ed0:	e004      	b.n	8006edc <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fc4a 	bl	800776e <USBD_CtlError>
        break;
 8006eda:	bf00      	nop
      }
      break;
 8006edc:	e0e8      	b.n	80070b0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d002      	beq.n	8006eee <USBD_StdEPReq+0xe2>
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d016      	beq.n	8006f1a <USBD_StdEPReq+0x10e>
 8006eec:	e02e      	b.n	8006f4c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00d      	beq.n	8006f10 <USBD_StdEPReq+0x104>
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	2b80      	cmp	r3, #128	; 0x80
 8006ef8:	d00a      	beq.n	8006f10 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f003 fef0 	bl	800ace4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f04:	2180      	movs	r1, #128	; 0x80
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f003 feec 	bl	800ace4 <USBD_LL_StallEP>
 8006f0c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006f0e:	e023      	b.n	8006f58 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fc2b 	bl	800776e <USBD_CtlError>
        break;
 8006f18:	e01e      	b.n	8006f58 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d119      	bne.n	8006f56 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f003 fef6 	bl	800ad22 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fce4 	bl	8007904 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
        }
        break;
 8006f4a:	e004      	b.n	8006f56 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fc0d 	bl	800776e <USBD_CtlError>
        break;
 8006f54:	e000      	b.n	8006f58 <USBD_StdEPReq+0x14c>
        break;
 8006f56:	bf00      	nop
      }
      break;
 8006f58:	e0aa      	b.n	80070b0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d002      	beq.n	8006f6a <USBD_StdEPReq+0x15e>
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d032      	beq.n	8006fce <USBD_StdEPReq+0x1c2>
 8006f68:	e097      	b.n	800709a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <USBD_StdEPReq+0x174>
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	2b80      	cmp	r3, #128	; 0x80
 8006f74:	d004      	beq.n	8006f80 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fbf8 	bl	800776e <USBD_CtlError>
          break;
 8006f7e:	e091      	b.n	80070a4 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	da0b      	bge.n	8006fa0 <USBD_StdEPReq+0x194>
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	3310      	adds	r3, #16
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	e00b      	b.n	8006fb8 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fc42 	bl	8007850 <USBD_CtlSendData>
        break;
 8006fcc:	e06a      	b.n	80070a4 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	da11      	bge.n	8006ffa <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	f003 020f 	and.w	r2, r3, #15
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3324      	adds	r3, #36	; 0x24
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d117      	bne.n	8007020 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fbbb 	bl	800776e <USBD_CtlError>
            break;
 8006ff8:	e054      	b.n	80070a4 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fba8 	bl	800776e <USBD_CtlError>
            break;
 800701e:	e041      	b.n	80070a4 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007024:	2b00      	cmp	r3, #0
 8007026:	da0b      	bge.n	8007040 <USBD_StdEPReq+0x234>
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	3310      	adds	r3, #16
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4413      	add	r3, r2
 800703c:	3304      	adds	r3, #4
 800703e:	e00b      	b.n	8007058 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	3304      	adds	r3, #4
 8007058:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <USBD_StdEPReq+0x25a>
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d103      	bne.n	800706e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e00e      	b.n	800708c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f003 fe74 	bl	800ad60 <USBD_LL_IsStallEP>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2201      	movs	r2, #1
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e002      	b.n	800708c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2202      	movs	r2, #2
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fbdc 	bl	8007850 <USBD_CtlSendData>
          break;
 8007098:	e004      	b.n	80070a4 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fb66 	bl	800776e <USBD_CtlError>
        break;
 80070a2:	bf00      	nop
      }
      break;
 80070a4:	e004      	b.n	80070b0 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fb60 	bl	800776e <USBD_CtlError>
      break;
 80070ae:	bf00      	nop
    }
    break;
 80070b0:	e004      	b.n	80070bc <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fb5a 	bl	800776e <USBD_CtlError>
    break;
 80070ba:	bf00      	nop
  }

  return ret;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	885b      	ldrh	r3, [r3, #2]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	2b0e      	cmp	r3, #14
 80070ea:	f200 8152 	bhi.w	8007392 <USBD_GetDescriptor+0x2ca>
 80070ee:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <USBD_GetDescriptor+0x2c>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	08007165 	.word	0x08007165
 80070f8:	0800717d 	.word	0x0800717d
 80070fc:	080071bd 	.word	0x080071bd
 8007100:	08007393 	.word	0x08007393
 8007104:	08007393 	.word	0x08007393
 8007108:	08007333 	.word	0x08007333
 800710c:	0800735f 	.word	0x0800735f
 8007110:	08007393 	.word	0x08007393
 8007114:	08007393 	.word	0x08007393
 8007118:	08007393 	.word	0x08007393
 800711c:	08007393 	.word	0x08007393
 8007120:	08007393 	.word	0x08007393
 8007124:	08007393 	.word	0x08007393
 8007128:	08007393 	.word	0x08007393
 800712c:	08007131 	.word	0x08007131
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 0108 	add.w	r1, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007152:	e126      	b.n	80073a2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fb09 	bl	800776e <USBD_CtlError>
      err++;
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	3301      	adds	r3, #1
 8007160:	72fb      	strb	r3, [r7, #11]
    break;
 8007162:	e11e      	b.n	80073a2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	7c12      	ldrb	r2, [r2, #16]
 8007170:	f107 0108 	add.w	r1, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
    break;
 800717a:	e112      	b.n	80073a2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	7c1b      	ldrb	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10d      	bne.n	80071a0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	f107 0208 	add.w	r2, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	2202      	movs	r2, #2
 800719c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800719e:	e100      	b.n	80073a2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	f107 0208 	add.w	r2, r7, #8
 80071ac:	4610      	mov	r0, r2
 80071ae:	4798      	blx	r3
 80071b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	2202      	movs	r2, #2
 80071b8:	701a      	strb	r2, [r3, #0]
    break;
 80071ba:	e0f2      	b.n	80073a2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	885b      	ldrh	r3, [r3, #2]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	f200 80ac 	bhi.w	8007320 <USBD_GetDescriptor+0x258>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <USBD_GetDescriptor+0x108>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e9 	.word	0x080071e9
 80071d4:	0800721d 	.word	0x0800721d
 80071d8:	08007251 	.word	0x08007251
 80071dc:	08007285 	.word	0x08007285
 80071e0:	080072b9 	.word	0x080072b9
 80071e4:	080072ed 	.word	0x080072ed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800720a:	e091      	b.n	8007330 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 faad 	bl	800776e <USBD_CtlError>
        err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
      break;
 800721a:	e089      	b.n	8007330 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800723e:	e077      	b.n	8007330 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa93 	bl	800776e <USBD_CtlError>
        err++;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	3301      	adds	r3, #1
 800724c:	72fb      	strb	r3, [r7, #11]
      break;
 800724e:	e06f      	b.n	8007330 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7c12      	ldrb	r2, [r2, #16]
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007272:	e05d      	b.n	8007330 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa79 	bl	800776e <USBD_CtlError>
        err++;
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	3301      	adds	r3, #1
 8007280:	72fb      	strb	r3, [r7, #11]
      break;
 8007282:	e055      	b.n	8007330 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072a6:	e043      	b.n	8007330 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa5f 	bl	800776e <USBD_CtlError>
        err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
      break;
 80072b6:	e03b      	b.n	8007330 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072da:	e029      	b.n	8007330 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa45 	bl	800776e <USBD_CtlError>
        err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
      break;
 80072ea:	e021      	b.n	8007330 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7c12      	ldrb	r2, [r2, #16]
 8007304:	f107 0108 	add.w	r1, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800730e:	e00f      	b.n	8007330 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa2b 	bl	800776e <USBD_CtlError>
        err++;
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	3301      	adds	r3, #1
 800731c:	72fb      	strb	r3, [r7, #11]
      break;
 800731e:	e007      	b.n	8007330 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa23 	bl	800776e <USBD_CtlError>
      err++;
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	3301      	adds	r3, #1
 800732c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800732e:	bf00      	nop
    }
    break;
 8007330:	e037      	b.n	80073a2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	7c1b      	ldrb	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	f107 0208 	add.w	r2, r7, #8
 8007346:	4610      	mov	r0, r2
 8007348:	4798      	blx	r3
 800734a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800734c:	e029      	b.n	80073a2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa0c 	bl	800776e <USBD_CtlError>
      err++;
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	3301      	adds	r3, #1
 800735a:	72fb      	strb	r3, [r7, #11]
    break;
 800735c:	e021      	b.n	80073a2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	7c1b      	ldrb	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10d      	bne.n	8007382 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736e:	f107 0208 	add.w	r2, r7, #8
 8007372:	4610      	mov	r0, r2
 8007374:	4798      	blx	r3
 8007376:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	2207      	movs	r2, #7
 800737e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007380:	e00f      	b.n	80073a2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f9f2 	bl	800776e <USBD_CtlError>
      err++;
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	3301      	adds	r3, #1
 800738e:	72fb      	strb	r3, [r7, #11]
    break;
 8007390:	e007      	b.n	80073a2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f9ea 	bl	800776e <USBD_CtlError>
    err++;
 800739a:	7afb      	ldrb	r3, [r7, #11]
 800739c:	3301      	adds	r3, #1
 800739e:	72fb      	strb	r3, [r7, #11]
    break;
 80073a0:	bf00      	nop
  }

  if (err != 0U)
 80073a2:	7afb      	ldrb	r3, [r7, #11]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d11e      	bne.n	80073e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	88db      	ldrh	r3, [r3, #6]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d016      	beq.n	80073de <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80073b0:	893b      	ldrh	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00e      	beq.n	80073d4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88da      	ldrh	r2, [r3, #6]
 80073ba:	893b      	ldrh	r3, [r7, #8]
 80073bc:	4293      	cmp	r3, r2
 80073be:	bf28      	it	cs
 80073c0:	4613      	movcs	r3, r2
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80073c6:	893b      	ldrh	r3, [r7, #8]
 80073c8:	461a      	mov	r2, r3
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fa3f 	bl	8007850 <USBD_CtlSendData>
 80073d2:	e009      	b.n	80073e8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f9c9 	bl	800776e <USBD_CtlError>
 80073dc:	e004      	b.n	80073e8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa90 	bl	8007904 <USBD_CtlSendStatus>
 80073e4:	e000      	b.n	80073e8 <USBD_GetDescriptor+0x320>
    return;
 80073e6:	bf00      	nop
    }
  }
}
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop

080073f0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	889b      	ldrh	r3, [r3, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d130      	bne.n	8007464 <USBD_SetAddress+0x74>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	88db      	ldrh	r3, [r3, #6]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d12c      	bne.n	8007464 <USBD_SetAddress+0x74>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	885b      	ldrh	r3, [r3, #2]
 800740e:	2b7f      	cmp	r3, #127	; 0x7f
 8007410:	d828      	bhi.n	8007464 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800741c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007424:	2b03      	cmp	r3, #3
 8007426:	d104      	bne.n	8007432 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f99f 	bl	800776e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007430:	e01d      	b.n	800746e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	7bfa      	ldrb	r2, [r7, #15]
 8007436:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f003 fcba 	bl	800adb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa5d 	bl	8007904 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007458:	e009      	b.n	800746e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007462:	e004      	b.n	800746e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f981 	bl	800776e <USBD_CtlError>
  }
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	885b      	ldrh	r3, [r3, #2]
 800748a:	b2da      	uxtb	r2, r3
 800748c:	4b4b      	ldr	r3, [pc, #300]	; (80075bc <USBD_SetConfig+0x144>)
 800748e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007490:	4b4a      	ldr	r3, [pc, #296]	; (80075bc <USBD_SetConfig+0x144>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d905      	bls.n	80074a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f967 	bl	800776e <USBD_CtlError>
    return USBD_FAIL;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e087      	b.n	80075b4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d002      	beq.n	80074b4 <USBD_SetConfig+0x3c>
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d025      	beq.n	80074fe <USBD_SetConfig+0x86>
 80074b2:	e071      	b.n	8007598 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80074b4:	4b41      	ldr	r3, [pc, #260]	; (80075bc <USBD_SetConfig+0x144>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01c      	beq.n	80074f6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80074bc:	4b3f      	ldr	r3, [pc, #252]	; (80075bc <USBD_SetConfig+0x144>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80074c6:	4b3d      	ldr	r3, [pc, #244]	; (80075bc <USBD_SetConfig+0x144>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff f96f 	bl	80067b0 <USBD_SetClassConfig>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f945 	bl	800776e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80074e4:	e065      	b.n	80075b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa0c 	bl	8007904 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2203      	movs	r2, #3
 80074f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80074f4:	e05d      	b.n	80075b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa04 	bl	8007904 <USBD_CtlSendStatus>
    break;
 80074fc:	e059      	b.n	80075b2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80074fe:	4b2f      	ldr	r3, [pc, #188]	; (80075bc <USBD_SetConfig+0x144>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d112      	bne.n	800752c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800750e:	4b2b      	ldr	r3, [pc, #172]	; (80075bc <USBD_SetConfig+0x144>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007518:	4b28      	ldr	r3, [pc, #160]	; (80075bc <USBD_SetConfig+0x144>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff f962 	bl	80067e8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9ed 	bl	8007904 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800752a:	e042      	b.n	80075b2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800752c:	4b23      	ldr	r3, [pc, #140]	; (80075bc <USBD_SetConfig+0x144>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d02a      	beq.n	8007590 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff f950 	bl	80067e8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007548:	4b1c      	ldr	r3, [pc, #112]	; (80075bc <USBD_SetConfig+0x144>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007552:	4b1a      	ldr	r3, [pc, #104]	; (80075bc <USBD_SetConfig+0x144>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff f929 	bl	80067b0 <USBD_SetClassConfig>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00f      	beq.n	8007588 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f8ff 	bl	800776e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff f935 	bl	80067e8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007586:	e014      	b.n	80075b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f9bb 	bl	8007904 <USBD_CtlSendStatus>
    break;
 800758e:	e010      	b.n	80075b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f9b7 	bl	8007904 <USBD_CtlSendStatus>
    break;
 8007596:	e00c      	b.n	80075b2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f8e7 	bl	800776e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075a0:	4b06      	ldr	r3, [pc, #24]	; (80075bc <USBD_SetConfig+0x144>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff f91e 	bl	80067e8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	73fb      	strb	r3, [r7, #15]
    break;
 80075b0:	bf00      	nop
  }

  return ret;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000218 	.word	0x20000218

080075c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d004      	beq.n	80075dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f8ca 	bl	800776e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80075da:	e022      	b.n	8007622 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	dc02      	bgt.n	80075ec <USBD_GetConfig+0x2c>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dc03      	bgt.n	80075f2 <USBD_GetConfig+0x32>
 80075ea:	e015      	b.n	8007618 <USBD_GetConfig+0x58>
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d00b      	beq.n	8007608 <USBD_GetConfig+0x48>
 80075f0:	e012      	b.n	8007618 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3308      	adds	r3, #8
 80075fc:	2201      	movs	r2, #1
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f925 	bl	8007850 <USBD_CtlSendData>
      break;
 8007606:	e00c      	b.n	8007622 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	2201      	movs	r2, #1
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f91d 	bl	8007850 <USBD_CtlSendData>
      break;
 8007616:	e004      	b.n	8007622 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8a7 	bl	800776e <USBD_CtlError>
      break;
 8007620:	bf00      	nop
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763a:	3b01      	subs	r3, #1
 800763c:	2b02      	cmp	r3, #2
 800763e:	d81e      	bhi.n	800767e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	88db      	ldrh	r3, [r3, #6]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d004      	beq.n	8007652 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f88f 	bl	800776e <USBD_CtlError>
      break;
 8007650:	e01a      	b.n	8007688 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f043 0202 	orr.w	r2, r3, #2
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	330c      	adds	r3, #12
 8007672:	2202      	movs	r2, #2
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f8ea 	bl	8007850 <USBD_CtlSendData>
    break;
 800767c:	e004      	b.n	8007688 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f874 	bl	800776e <USBD_CtlError>
    break;
 8007686:	bf00      	nop
  }
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	885b      	ldrh	r3, [r3, #2]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d106      	bne.n	80076b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f92a 	bl	8007904 <USBD_CtlSendStatus>
  }
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c8:	3b01      	subs	r3, #1
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d80b      	bhi.n	80076e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d10c      	bne.n	80076f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f910 	bl	8007904 <USBD_CtlSendStatus>
      }
      break;
 80076e4:	e004      	b.n	80076f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f840 	bl	800776e <USBD_CtlError>
      break;
 80076ee:	e000      	b.n	80076f2 <USBD_ClrFeature+0x3a>
      break;
 80076f0:	bf00      	nop
  }
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f7ff fa9c 	bl	8006c62 <SWAPBYTE>
 800772a:	4603      	mov	r3, r0
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3301      	adds	r3, #1
 800773c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff fa8f 	bl	8006c62 <SWAPBYTE>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3301      	adds	r3, #1
 8007750:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fa82 	bl	8006c62 <SWAPBYTE>
 800775e:	4603      	mov	r3, r0
 8007760:	461a      	mov	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	80da      	strh	r2, [r3, #6]
}
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007778:	2180      	movs	r1, #128	; 0x80
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f003 fab2 	bl	800ace4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f003 faae 	bl	800ace4 <USBD_LL_StallEP>
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d036      	beq.n	8007814 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077aa:	6938      	ldr	r0, [r7, #16]
 80077ac:	f000 f836 	bl	800781c <USBD_GetLen>
 80077b0:	4603      	mov	r3, r0
 80077b2:	3301      	adds	r3, #1
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	4413      	add	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	3301      	adds	r3, #1
 80077ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	4413      	add	r3, r2
 80077d6:	2203      	movs	r2, #3
 80077d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	3301      	adds	r3, #1
 80077de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077e0:	e013      	b.n	800780a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	4413      	add	r3, r2
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	7812      	ldrb	r2, [r2, #0]
 80077ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	3301      	adds	r3, #1
 80077f2:	613b      	str	r3, [r7, #16]
    idx++;
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	3301      	adds	r3, #1
 80077f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	4413      	add	r3, r2
 8007800:	2200      	movs	r2, #0
 8007802:	701a      	strb	r2, [r3, #0]
    idx++;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	3301      	adds	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e7      	bne.n	80077e2 <USBD_GetString+0x52>
 8007812:	e000      	b.n	8007816 <USBD_GetString+0x86>
    return;
 8007814:	bf00      	nop
  }
}
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800782c:	e005      	b.n	800783a <USBD_GetLen+0x1e>
  {
    len++;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	3301      	adds	r3, #1
 8007832:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	3301      	adds	r3, #1
 8007838:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f5      	bne.n	800782e <USBD_GetLen+0x12>
  }

  return len;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2202      	movs	r2, #2
 8007860:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	2100      	movs	r1, #0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f003 fabd 	bl	800adf6 <USBD_LL_Transmit>

  return USBD_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	2100      	movs	r1, #0
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f003 faac 	bl	800adf6 <USBD_LL_Transmit>

  return USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2203      	movs	r2, #3
 80078b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	2100      	movs	r1, #0
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f003 fab0 	bl	800ae38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	2100      	movs	r1, #0
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f003 fa9f 	bl	800ae38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2204      	movs	r2, #4
 8007910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007914:	2300      	movs	r3, #0
 8007916:	2200      	movs	r2, #0
 8007918:	2100      	movs	r1, #0
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f003 fa6b 	bl	800adf6 <USBD_LL_Transmit>

  return USBD_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2205      	movs	r2, #5
 8007936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800793a:	2300      	movs	r3, #0
 800793c:	2200      	movs	r2, #0
 800793e:	2100      	movs	r1, #0
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f003 fa79 	bl	800ae38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007954:	bf00      	nop
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007966:	f3ef 8305 	mrs	r3, IPSR
 800796a:	60bb      	str	r3, [r7, #8]
  return(result);
 800796c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10f      	bne.n	8007992 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007972:	f3ef 8310 	mrs	r3, PRIMASK
 8007976:	607b      	str	r3, [r7, #4]
  return(result);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d105      	bne.n	800798a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800797e:	f3ef 8311 	mrs	r3, BASEPRI
 8007982:	603b      	str	r3, [r7, #0]
  return(result);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <osKernelInitialize+0x3a>
 800798a:	4b0e      	ldr	r3, [pc, #56]	; (80079c4 <osKernelInitialize+0x64>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d103      	bne.n	800799a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007992:	f06f 0305 	mvn.w	r3, #5
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	e00c      	b.n	80079b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800799a:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <osKernelInitialize+0x64>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d105      	bne.n	80079ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079a2:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <osKernelInitialize+0x64>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e002      	b.n	80079b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80079ae:	f04f 33ff 	mov.w	r3, #4294967295
 80079b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	2000021c 	.word	0x2000021c

080079c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ce:	f3ef 8305 	mrs	r3, IPSR
 80079d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80079d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10f      	bne.n	80079fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079da:	f3ef 8310 	mrs	r3, PRIMASK
 80079de:	607b      	str	r3, [r7, #4]
  return(result);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079e6:	f3ef 8311 	mrs	r3, BASEPRI
 80079ea:	603b      	str	r3, [r7, #0]
  return(result);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <osKernelStart+0x3a>
 80079f2:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <osKernelStart+0x68>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d103      	bne.n	8007a02 <osKernelStart+0x3a>
    stat = osErrorISR;
 80079fa:	f06f 0305 	mvn.w	r3, #5
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e010      	b.n	8007a24 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a02:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <osKernelStart+0x68>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d109      	bne.n	8007a1e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a0a:	f7ff ffa1 	bl	8007950 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a0e:	4b08      	ldr	r3, [pc, #32]	; (8007a30 <osKernelStart+0x68>)
 8007a10:	2202      	movs	r2, #2
 8007a12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a14:	f001 f8b4 	bl	8008b80 <vTaskStartScheduler>
      stat = osOK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e002      	b.n	8007a24 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007a24:	68fb      	ldr	r3, [r7, #12]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2000021c 	.word	0x2000021c

08007a34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b090      	sub	sp, #64	; 0x40
 8007a38:	af04      	add	r7, sp, #16
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a40:	2300      	movs	r3, #0
 8007a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a44:	f3ef 8305 	mrs	r3, IPSR
 8007a48:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a4a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 808f 	bne.w	8007b70 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a52:	f3ef 8310 	mrs	r3, PRIMASK
 8007a56:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d105      	bne.n	8007a6a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8007a62:	617b      	str	r3, [r7, #20]
  return(result);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <osThreadNew+0x3e>
 8007a6a:	4b44      	ldr	r3, [pc, #272]	; (8007b7c <osThreadNew+0x148>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d07e      	beq.n	8007b70 <osThreadNew+0x13c>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d07b      	beq.n	8007b70 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007a78:	2380      	movs	r3, #128	; 0x80
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007a7c:	2318      	movs	r3, #24
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295
 8007a88:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d045      	beq.n	8007b1c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <osThreadNew+0x6a>
        name = attr->name;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d008      	beq.n	8007ac4 <osThreadNew+0x90>
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	2b38      	cmp	r3, #56	; 0x38
 8007ab6:	d805      	bhi.n	8007ac4 <osThreadNew+0x90>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <osThreadNew+0x94>
        return (NULL);
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e054      	b.n	8007b72 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	089b      	lsrs	r3, r3, #2
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00e      	beq.n	8007afe <osThreadNew+0xca>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	2b5b      	cmp	r3, #91	; 0x5b
 8007ae6:	d90a      	bls.n	8007afe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d006      	beq.n	8007afe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <osThreadNew+0xca>
        mem = 1;
 8007af8:	2301      	movs	r3, #1
 8007afa:	623b      	str	r3, [r7, #32]
 8007afc:	e010      	b.n	8007b20 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10c      	bne.n	8007b20 <osThreadNew+0xec>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d108      	bne.n	8007b20 <osThreadNew+0xec>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d104      	bne.n	8007b20 <osThreadNew+0xec>
          mem = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	623b      	str	r3, [r7, #32]
 8007b1a:	e001      	b.n	8007b20 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d110      	bne.n	8007b48 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b2e:	9202      	str	r2, [sp, #8]
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 fe3f 	bl	80087c0 <xTaskCreateStatic>
 8007b42:	4603      	mov	r3, r0
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	e013      	b.n	8007b70 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d110      	bne.n	8007b70 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	f107 0310 	add.w	r3, r7, #16
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fe90 	bl	8008886 <xTaskCreate>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d001      	beq.n	8007b70 <osThreadNew+0x13c>
          hTask = NULL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b70:	693b      	ldr	r3, [r7, #16]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3730      	adds	r7, #48	; 0x30
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	2000021c 	.word	0x2000021c

08007b80 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b88:	f3ef 8305 	mrs	r3, IPSR
 8007b8c:	613b      	str	r3, [r7, #16]
  return(result);
 8007b8e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10f      	bne.n	8007bb4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b94:	f3ef 8310 	mrs	r3, PRIMASK
 8007b98:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d105      	bne.n	8007bac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ba4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d007      	beq.n	8007bbc <osDelay+0x3c>
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <osDelay+0x58>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d103      	bne.n	8007bbc <osDelay+0x3c>
    stat = osErrorISR;
 8007bb4:	f06f 0305 	mvn.w	r3, #5
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	e007      	b.n	8007bcc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <osDelay+0x4c>
      vTaskDelay(ticks);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 ffa4 	bl	8008b14 <vTaskDelay>
    }
  }

  return (stat);
 8007bcc:	697b      	ldr	r3, [r7, #20]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	2000021c 	.word	0x2000021c

08007bdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a07      	ldr	r2, [pc, #28]	; (8007c08 <vApplicationGetIdleTaskMemory+0x2c>)
 8007bec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4a06      	ldr	r2, [pc, #24]	; (8007c0c <vApplicationGetIdleTaskMemory+0x30>)
 8007bf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2280      	movs	r2, #128	; 0x80
 8007bf8:	601a      	str	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000220 	.word	0x20000220
 8007c0c:	2000027c 	.word	0x2000027c

08007c10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <vApplicationGetTimerTaskMemory+0x2c>)
 8007c20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a06      	ldr	r2, [pc, #24]	; (8007c40 <vApplicationGetTimerTaskMemory+0x30>)
 8007c26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c2e:	601a      	str	r2, [r3, #0]
}
 8007c30:	bf00      	nop
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	2000047c 	.word	0x2000047c
 8007c40:	200004d8 	.word	0x200004d8

08007c44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f103 0208 	add.w	r2, r3, #8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f103 0208 	add.w	r2, r3, #8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f103 0208 	add.w	r2, r3, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
}
 8007cda:	bf00      	nop
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d103      	bne.n	8007d06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e00c      	b.n	8007d20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	e002      	b.n	8007d14 <vListInsert+0x2e>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d2f6      	bcs.n	8007d0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	601a      	str	r2, [r3, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6892      	ldr	r2, [r2, #8]
 8007d6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6852      	ldr	r2, [r2, #4]
 8007d78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d103      	bne.n	8007d8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	1e5a      	subs	r2, r3, #1
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10c      	bne.n	8007dda <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	b672      	cpsid	i
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	b662      	cpsie	i
 8007dd4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007dda:	f002 f87f 	bl	8009edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007dea:	fb01 f303 	mul.w	r3, r1, r3
 8007dee:	441a      	add	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	68f9      	ldr	r1, [r7, #12]
 8007e0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e10:	fb01 f303 	mul.w	r3, r1, r3
 8007e14:	441a      	add	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	22ff      	movs	r2, #255	; 0xff
 8007e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	22ff      	movs	r2, #255	; 0xff
 8007e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d114      	bne.n	8007e5a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01a      	beq.n	8007e6e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3310      	adds	r3, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 f937 	bl	80090b0 <xTaskRemoveFromEventList>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d012      	beq.n	8007e6e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e48:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <xQueueGenericReset+0xd0>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	e009      	b.n	8007e6e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3310      	adds	r3, #16
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fef0 	bl	8007c44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3324      	adds	r3, #36	; 0x24
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff feeb 	bl	8007c44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e6e:	f002 f869 	bl	8009f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e72:	2301      	movs	r3, #1
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	e000ed04 	.word	0xe000ed04

08007e80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08e      	sub	sp, #56	; 0x38
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10c      	bne.n	8007eae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	b672      	cpsid	i
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	b662      	cpsie	i
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10c      	bne.n	8007ece <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	b672      	cpsid	i
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	b662      	cpsie	i
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <xQueueGenericCreateStatic+0x5a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <xQueueGenericCreateStatic+0x5e>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <xQueueGenericCreateStatic+0x60>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10c      	bne.n	8007efe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	b672      	cpsid	i
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	b662      	cpsie	i
 8007ef8:	623b      	str	r3, [r7, #32]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d102      	bne.n	8007f0a <xQueueGenericCreateStatic+0x8a>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <xQueueGenericCreateStatic+0x8e>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <xQueueGenericCreateStatic+0x90>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10c      	bne.n	8007f2e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	b672      	cpsid	i
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	b662      	cpsie	i
 8007f28:	61fb      	str	r3, [r7, #28]
}
 8007f2a:	bf00      	nop
 8007f2c:	e7fe      	b.n	8007f2c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f2e:	2350      	movs	r3, #80	; 0x50
 8007f30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b50      	cmp	r3, #80	; 0x50
 8007f36:	d00c      	beq.n	8007f52 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	b672      	cpsid	i
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	b662      	cpsie	i
 8007f4c:	61bb      	str	r3, [r7, #24]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00d      	beq.n	8007f7a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f805 	bl	8007f84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3730      	adds	r7, #48	; 0x30
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e002      	b.n	8007fa6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	69b8      	ldr	r0, [r7, #24]
 8007fb6:	f7ff fef9 	bl	8007dac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	78fa      	ldrb	r2, [r7, #3]
 8007fbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08e      	sub	sp, #56	; 0x38
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10c      	bne.n	8008002 <xQueueGenericSend+0x36>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fec:	b672      	cpsid	i
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	b662      	cpsie	i
 8007ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d103      	bne.n	8008010 <xQueueGenericSend+0x44>
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <xQueueGenericSend+0x48>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <xQueueGenericSend+0x4a>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10c      	bne.n	8008034 <xQueueGenericSend+0x68>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	b672      	cpsid	i
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	b662      	cpsie	i
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x76>
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <xQueueGenericSend+0x7a>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <xQueueGenericSend+0x7c>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10c      	bne.n	8008066 <xQueueGenericSend+0x9a>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	b672      	cpsid	i
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	b662      	cpsie	i
 8008060:	623b      	str	r3, [r7, #32]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008066:	f001 f9e9 	bl	800943c <xTaskGetSchedulerState>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <xQueueGenericSend+0xaa>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <xQueueGenericSend+0xae>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <xQueueGenericSend+0xb0>
 800807a:	2300      	movs	r3, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10c      	bne.n	800809a <xQueueGenericSend+0xce>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	b672      	cpsid	i
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	b662      	cpsie	i
 8008094:	61fb      	str	r3, [r7, #28]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800809a:	f001 ff1f 	bl	8009edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d302      	bcc.n	80080b0 <xQueueGenericSend+0xe4>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d129      	bne.n	8008104 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	68b9      	ldr	r1, [r7, #8]
 80080b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b6:	f000 fa15 	bl	80084e4 <prvCopyDataToQueue>
 80080ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d010      	beq.n	80080e6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	3324      	adds	r3, #36	; 0x24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fff1 	bl	80090b0 <xTaskRemoveFromEventList>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d013      	beq.n	80080fc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080d4:	4b3f      	ldr	r3, [pc, #252]	; (80081d4 <xQueueGenericSend+0x208>)
 80080d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	e00a      	b.n	80080fc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080ec:	4b39      	ldr	r3, [pc, #228]	; (80081d4 <xQueueGenericSend+0x208>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080fc:	f001 ff22 	bl	8009f44 <vPortExitCritical>
				return pdPASS;
 8008100:	2301      	movs	r3, #1
 8008102:	e063      	b.n	80081cc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d103      	bne.n	8008112 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800810a:	f001 ff1b 	bl	8009f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800810e:	2300      	movs	r3, #0
 8008110:	e05c      	b.n	80081cc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008114:	2b00      	cmp	r3, #0
 8008116:	d106      	bne.n	8008126 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008118:	f107 0314 	add.w	r3, r7, #20
 800811c:	4618      	mov	r0, r3
 800811e:	f001 f82d 	bl	800917c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008122:	2301      	movs	r3, #1
 8008124:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008126:	f001 ff0d 	bl	8009f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800812a:	f000 fd93 	bl	8008c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800812e:	f001 fed5 	bl	8009edc <vPortEnterCritical>
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008138:	b25b      	sxtb	r3, r3
 800813a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813e:	d103      	bne.n	8008148 <xQueueGenericSend+0x17c>
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800814e:	b25b      	sxtb	r3, r3
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008154:	d103      	bne.n	800815e <xQueueGenericSend+0x192>
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800815e:	f001 fef1 	bl	8009f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008162:	1d3a      	adds	r2, r7, #4
 8008164:	f107 0314 	add.w	r3, r7, #20
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f001 f81c 	bl	80091a8 <xTaskCheckForTimeOut>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d124      	bne.n	80081c0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008178:	f000 faac 	bl	80086d4 <prvIsQueueFull>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d018      	beq.n	80081b4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	3310      	adds	r3, #16
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f000 ff3c 	bl	8009008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008192:	f000 fa37 	bl	8008604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008196:	f000 fd6b 	bl	8008c70 <xTaskResumeAll>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	f47f af7c 	bne.w	800809a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80081a2:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <xQueueGenericSend+0x208>)
 80081a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	e772      	b.n	800809a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081b6:	f000 fa25 	bl	8008604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ba:	f000 fd59 	bl	8008c70 <xTaskResumeAll>
 80081be:	e76c      	b.n	800809a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c2:	f000 fa1f 	bl	8008604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081c6:	f000 fd53 	bl	8008c70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3738      	adds	r7, #56	; 0x38
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	e000ed04 	.word	0xe000ed04

080081d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08e      	sub	sp, #56	; 0x38
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10c      	bne.n	800820a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	b672      	cpsid	i
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	b662      	cpsie	i
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <xQueueGenericSendFromISR+0x40>
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <xQueueGenericSendFromISR+0x44>
 8008218:	2301      	movs	r3, #1
 800821a:	e000      	b.n	800821e <xQueueGenericSendFromISR+0x46>
 800821c:	2300      	movs	r3, #0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10c      	bne.n	800823c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	b672      	cpsid	i
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	b662      	cpsie	i
 8008236:	623b      	str	r3, [r7, #32]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d103      	bne.n	800824a <xQueueGenericSendFromISR+0x72>
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <xQueueGenericSendFromISR+0x76>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <xQueueGenericSendFromISR+0x78>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10c      	bne.n	800826e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	b672      	cpsid	i
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	b662      	cpsie	i
 8008268:	61fb      	str	r3, [r7, #28]
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800826e:	f001 ff1d 	bl	800a0ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008272:	f3ef 8211 	mrs	r2, BASEPRI
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	b672      	cpsid	i
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	b662      	cpsie	i
 800828a:	61ba      	str	r2, [r7, #24]
 800828c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800828e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008290:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <xQueueGenericSendFromISR+0xcc>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d12c      	bne.n	80082fe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082b4:	f000 f916 	bl	80084e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d112      	bne.n	80082e8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d016      	beq.n	80082f8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	3324      	adds	r3, #36	; 0x24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 feee 	bl	80090b0 <xTaskRemoveFromEventList>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00b      	beq.n	80082f8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	e007      	b.n	80082f8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082ec:	3301      	adds	r3, #1
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	b25a      	sxtb	r2, r3
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082f8:	2301      	movs	r3, #1
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80082fc:	e001      	b.n	8008302 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	637b      	str	r3, [r7, #52]	; 0x34
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800830c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800830e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008310:	4618      	mov	r0, r3
 8008312:	3738      	adds	r7, #56	; 0x38
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08c      	sub	sp, #48	; 0x30
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008324:	2300      	movs	r3, #0
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10c      	bne.n	800834c <xQueueReceive+0x34>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	b672      	cpsid	i
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	b662      	cpsie	i
 8008346:	623b      	str	r3, [r7, #32]
}
 8008348:	bf00      	nop
 800834a:	e7fe      	b.n	800834a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <xQueueReceive+0x42>
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <xQueueReceive+0x46>
 800835a:	2301      	movs	r3, #1
 800835c:	e000      	b.n	8008360 <xQueueReceive+0x48>
 800835e:	2300      	movs	r3, #0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10c      	bne.n	800837e <xQueueReceive+0x66>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	b672      	cpsid	i
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	b662      	cpsie	i
 8008378:	61fb      	str	r3, [r7, #28]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800837e:	f001 f85d 	bl	800943c <xTaskGetSchedulerState>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <xQueueReceive+0x76>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <xQueueReceive+0x7a>
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <xQueueReceive+0x7c>
 8008392:	2300      	movs	r3, #0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10c      	bne.n	80083b2 <xQueueReceive+0x9a>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	b672      	cpsid	i
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	b662      	cpsie	i
 80083ac:	61bb      	str	r3, [r7, #24]
}
 80083ae:	bf00      	nop
 80083b0:	e7fe      	b.n	80083b0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083b2:	f001 fd93 	bl	8009edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01f      	beq.n	8008402 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c6:	f000 f8f7 	bl	80085b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	1e5a      	subs	r2, r3, #1
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00f      	beq.n	80083fa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	3310      	adds	r3, #16
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fe66 	bl	80090b0 <xTaskRemoveFromEventList>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083ea:	4b3d      	ldr	r3, [pc, #244]	; (80084e0 <xQueueReceive+0x1c8>)
 80083ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083fa:	f001 fda3 	bl	8009f44 <vPortExitCritical>
				return pdPASS;
 80083fe:	2301      	movs	r3, #1
 8008400:	e069      	b.n	80084d6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008408:	f001 fd9c 	bl	8009f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800840c:	2300      	movs	r3, #0
 800840e:	e062      	b.n	80084d6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d106      	bne.n	8008424 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008416:	f107 0310 	add.w	r3, r7, #16
 800841a:	4618      	mov	r0, r3
 800841c:	f000 feae 	bl	800917c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008420:	2301      	movs	r3, #1
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008424:	f001 fd8e 	bl	8009f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008428:	f000 fc14 	bl	8008c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800842c:	f001 fd56 	bl	8009edc <vPortEnterCritical>
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008436:	b25b      	sxtb	r3, r3
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d103      	bne.n	8008446 <xQueueReceive+0x12e>
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800844c:	b25b      	sxtb	r3, r3
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	d103      	bne.n	800845c <xQueueReceive+0x144>
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800845c:	f001 fd72 	bl	8009f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008460:	1d3a      	adds	r2, r7, #4
 8008462:	f107 0310 	add.w	r3, r7, #16
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fe9d 	bl	80091a8 <xTaskCheckForTimeOut>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d123      	bne.n	80084bc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008476:	f000 f917 	bl	80086a8 <prvIsQueueEmpty>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d017      	beq.n	80084b0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	3324      	adds	r3, #36	; 0x24
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fdbd 	bl	8009008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800848e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008490:	f000 f8b8 	bl	8008604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008494:	f000 fbec 	bl	8008c70 <xTaskResumeAll>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d189      	bne.n	80083b2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800849e:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <xQueueReceive+0x1c8>)
 80084a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	e780      	b.n	80083b2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b2:	f000 f8a7 	bl	8008604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084b6:	f000 fbdb 	bl	8008c70 <xTaskResumeAll>
 80084ba:	e77a      	b.n	80083b2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084be:	f000 f8a1 	bl	8008604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084c2:	f000 fbd5 	bl	8008c70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c8:	f000 f8ee 	bl	80086a8 <prvIsQueueEmpty>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f43f af6f 	beq.w	80083b2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3730      	adds	r7, #48	; 0x30
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	e000ed04 	.word	0xe000ed04

080084e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10d      	bne.n	800851e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d14d      	bne.n	80085a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 ffb2 	bl	8009478 <xTaskPriorityDisinherit>
 8008514:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	609a      	str	r2, [r3, #8]
 800851c:	e043      	b.n	80085a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d119      	bne.n	8008558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6858      	ldr	r0, [r3, #4]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	461a      	mov	r2, r3
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	f002 fd70 	bl	800b014 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853c:	441a      	add	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	429a      	cmp	r2, r3
 800854c:	d32b      	bcc.n	80085a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	e026      	b.n	80085a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	68d8      	ldr	r0, [r3, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	461a      	mov	r2, r3
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	f002 fd56 	bl	800b014 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	425b      	negs	r3, r3
 8008572:	441a      	add	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d207      	bcs.n	8008594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	425b      	negs	r3, r3
 800858e:	441a      	add	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d105      	bne.n	80085a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085ae:	697b      	ldr	r3, [r7, #20]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d018      	beq.n	80085fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	441a      	add	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d303      	bcc.n	80085ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68d9      	ldr	r1, [r3, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	461a      	mov	r2, r3
 80085f6:	6838      	ldr	r0, [r7, #0]
 80085f8:	f002 fd0c 	bl	800b014 <memcpy>
	}
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800860c:	f001 fc66 	bl	8009edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008618:	e011      	b.n	800863e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	2b00      	cmp	r3, #0
 8008620:	d012      	beq.n	8008648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3324      	adds	r3, #36	; 0x24
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fd42 	bl	80090b0 <xTaskRemoveFromEventList>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008632:	f000 fe1f 	bl	8009274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	3b01      	subs	r3, #1
 800863a:	b2db      	uxtb	r3, r3
 800863c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800863e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008642:	2b00      	cmp	r3, #0
 8008644:	dce9      	bgt.n	800861a <prvUnlockQueue+0x16>
 8008646:	e000      	b.n	800864a <prvUnlockQueue+0x46>
					break;
 8008648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	22ff      	movs	r2, #255	; 0xff
 800864e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008652:	f001 fc77 	bl	8009f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008656:	f001 fc41 	bl	8009edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008662:	e011      	b.n	8008688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d012      	beq.n	8008692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3310      	adds	r3, #16
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fd1d 	bl	80090b0 <xTaskRemoveFromEventList>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800867c:	f000 fdfa 	bl	8009274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	3b01      	subs	r3, #1
 8008684:	b2db      	uxtb	r3, r3
 8008686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868c:	2b00      	cmp	r3, #0
 800868e:	dce9      	bgt.n	8008664 <prvUnlockQueue+0x60>
 8008690:	e000      	b.n	8008694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	22ff      	movs	r2, #255	; 0xff
 8008698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800869c:	f001 fc52 	bl	8009f44 <vPortExitCritical>
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086b0:	f001 fc14 	bl	8009edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e001      	b.n	80086c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086c6:	f001 fc3d 	bl	8009f44 <vPortExitCritical>

	return xReturn;
 80086ca:	68fb      	ldr	r3, [r7, #12]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086dc:	f001 fbfe 	bl	8009edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d102      	bne.n	80086f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e001      	b.n	80086f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086f6:	f001 fc25 	bl	8009f44 <vPortExitCritical>

	return xReturn;
 80086fa:	68fb      	ldr	r3, [r7, #12]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	e014      	b.n	800873e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008714:	4a0f      	ldr	r2, [pc, #60]	; (8008754 <vQueueAddToRegistry+0x50>)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10b      	bne.n	8008738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008720:	490c      	ldr	r1, [pc, #48]	; (8008754 <vQueueAddToRegistry+0x50>)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800872a:	4a0a      	ldr	r2, [pc, #40]	; (8008754 <vQueueAddToRegistry+0x50>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	4413      	add	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008736:	e006      	b.n	8008746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b07      	cmp	r3, #7
 8008742:	d9e7      	bls.n	8008714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20004d5c 	.word	0x20004d5c

08008758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008768:	f001 fbb8 	bl	8009edc <vPortEnterCritical>
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008772:	b25b      	sxtb	r3, r3
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d103      	bne.n	8008782 <vQueueWaitForMessageRestricted+0x2a>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008788:	b25b      	sxtb	r3, r3
 800878a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878e:	d103      	bne.n	8008798 <vQueueWaitForMessageRestricted+0x40>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008798:	f001 fbd4 	bl	8009f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	3324      	adds	r3, #36	; 0x24
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fc51 	bl	8009054 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087b2:	6978      	ldr	r0, [r7, #20]
 80087b4:	f7ff ff26 	bl	8008604 <prvUnlockQueue>
	}
 80087b8:	bf00      	nop
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08e      	sub	sp, #56	; 0x38
 80087c4:	af04      	add	r7, sp, #16
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
 80087cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10c      	bne.n	80087ee <xTaskCreateStatic+0x2e>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	b672      	cpsid	i
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	b662      	cpsie	i
 80087e8:	623b      	str	r3, [r7, #32]
}
 80087ea:	bf00      	nop
 80087ec:	e7fe      	b.n	80087ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10c      	bne.n	800880e <xTaskCreateStatic+0x4e>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	b672      	cpsid	i
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	b662      	cpsie	i
 8008808:	61fb      	str	r3, [r7, #28]
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800880e:	235c      	movs	r3, #92	; 0x5c
 8008810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b5c      	cmp	r3, #92	; 0x5c
 8008816:	d00c      	beq.n	8008832 <xTaskCreateStatic+0x72>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	b672      	cpsid	i
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	b662      	cpsie	i
 800882c:	61bb      	str	r3, [r7, #24]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008832:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d01e      	beq.n	8008878 <xTaskCreateStatic+0xb8>
 800883a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01b      	beq.n	8008878 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008848:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	2202      	movs	r2, #2
 800884e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008852:	2300      	movs	r3, #0
 8008854:	9303      	str	r3, [sp, #12]
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	9302      	str	r3, [sp, #8]
 800885a:	f107 0314 	add.w	r3, r7, #20
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	68b9      	ldr	r1, [r7, #8]
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f850 	bl	8008910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008872:	f000 f8df 	bl	8008a34 <prvAddNewTaskToReadyList>
 8008876:	e001      	b.n	800887c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800887c:	697b      	ldr	r3, [r7, #20]
	}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008886:	b580      	push	{r7, lr}
 8008888:	b08c      	sub	sp, #48	; 0x30
 800888a:	af04      	add	r7, sp, #16
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	603b      	str	r3, [r7, #0]
 8008892:	4613      	mov	r3, r2
 8008894:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4618      	mov	r0, r3
 800889c:	f001 fc4a 	bl	800a134 <pvPortMalloc>
 80088a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00e      	beq.n	80088c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088a8:	205c      	movs	r0, #92	; 0x5c
 80088aa:	f001 fc43 	bl	800a134 <pvPortMalloc>
 80088ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30
 80088bc:	e005      	b.n	80088ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088be:	6978      	ldr	r0, [r7, #20]
 80088c0:	f001 fd02 	bl	800a2c8 <vPortFree>
 80088c4:	e001      	b.n	80088ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d017      	beq.n	8008900 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088d8:	88fa      	ldrh	r2, [r7, #6]
 80088da:	2300      	movs	r3, #0
 80088dc:	9303      	str	r3, [sp, #12]
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	9302      	str	r3, [sp, #8]
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f80e 	bl	8008910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088f4:	69f8      	ldr	r0, [r7, #28]
 80088f6:	f000 f89d 	bl	8008a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088fa:	2301      	movs	r3, #1
 80088fc:	61bb      	str	r3, [r7, #24]
 80088fe:	e002      	b.n	8008906 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008900:	f04f 33ff 	mov.w	r3, #4294967295
 8008904:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008906:	69bb      	ldr	r3, [r7, #24]
	}
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	461a      	mov	r2, r3
 8008928:	21a5      	movs	r1, #165	; 0xa5
 800892a:	f002 fb81 	bl	800b030 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008938:	440b      	add	r3, r1
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f023 0307 	bic.w	r3, r3, #7
 8008946:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00c      	beq.n	800896c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	b672      	cpsid	i
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	b662      	cpsie	i
 8008966:	617b      	str	r3, [r7, #20]
}
 8008968:	bf00      	nop
 800896a:	e7fe      	b.n	800896a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01f      	beq.n	80089b2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008972:	2300      	movs	r3, #0
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	e012      	b.n	800899e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	7819      	ldrb	r1, [r3, #0]
 8008980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	4413      	add	r3, r2
 8008986:	3334      	adds	r3, #52	; 0x34
 8008988:	460a      	mov	r2, r1
 800898a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	4413      	add	r3, r2
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d006      	beq.n	80089a6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	3301      	adds	r3, #1
 800899c:	61fb      	str	r3, [r7, #28]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	2b0f      	cmp	r3, #15
 80089a2:	d9e9      	bls.n	8008978 <prvInitialiseNewTask+0x68>
 80089a4:	e000      	b.n	80089a8 <prvInitialiseNewTask+0x98>
			{
				break;
 80089a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089b0:	e003      	b.n	80089ba <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	2b37      	cmp	r3, #55	; 0x37
 80089be:	d901      	bls.n	80089c4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089c0:	2337      	movs	r3, #55	; 0x37
 80089c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	2200      	movs	r2, #0
 80089d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	3304      	adds	r3, #4
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff f952 	bl	8007c84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	3318      	adds	r3, #24
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff f94d 	bl	8007c84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	2200      	movs	r2, #0
 8008a04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	68f9      	ldr	r1, [r7, #12]
 8008a12:	69b8      	ldr	r0, [r7, #24]
 8008a14:	f001 f952 	bl	8009cbc <pxPortInitialiseStack>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a2a:	bf00      	nop
 8008a2c:	3720      	adds	r7, #32
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a3c:	f001 fa4e 	bl	8009edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a40:	4b2d      	ldr	r3, [pc, #180]	; (8008af8 <prvAddNewTaskToReadyList+0xc4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3301      	adds	r3, #1
 8008a46:	4a2c      	ldr	r2, [pc, #176]	; (8008af8 <prvAddNewTaskToReadyList+0xc4>)
 8008a48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a4a:	4b2c      	ldr	r3, [pc, #176]	; (8008afc <prvAddNewTaskToReadyList+0xc8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a52:	4a2a      	ldr	r2, [pc, #168]	; (8008afc <prvAddNewTaskToReadyList+0xc8>)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a58:	4b27      	ldr	r3, [pc, #156]	; (8008af8 <prvAddNewTaskToReadyList+0xc4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d110      	bne.n	8008a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a60:	f000 fc2c 	bl	80092bc <prvInitialiseTaskLists>
 8008a64:	e00d      	b.n	8008a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a66:	4b26      	ldr	r3, [pc, #152]	; (8008b00 <prvAddNewTaskToReadyList+0xcc>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a6e:	4b23      	ldr	r3, [pc, #140]	; (8008afc <prvAddNewTaskToReadyList+0xc8>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d802      	bhi.n	8008a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a7c:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <prvAddNewTaskToReadyList+0xc8>)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a82:	4b20      	ldr	r3, [pc, #128]	; (8008b04 <prvAddNewTaskToReadyList+0xd0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3301      	adds	r3, #1
 8008a88:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <prvAddNewTaskToReadyList+0xd0>)
 8008a8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <prvAddNewTaskToReadyList+0xd0>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a98:	4b1b      	ldr	r3, [pc, #108]	; (8008b08 <prvAddNewTaskToReadyList+0xd4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d903      	bls.n	8008aa8 <prvAddNewTaskToReadyList+0x74>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	4a18      	ldr	r2, [pc, #96]	; (8008b08 <prvAddNewTaskToReadyList+0xd4>)
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4a15      	ldr	r2, [pc, #84]	; (8008b0c <prvAddNewTaskToReadyList+0xd8>)
 8008ab6:	441a      	add	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f7ff f8ed 	bl	8007c9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ac4:	f001 fa3e 	bl	8009f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ac8:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <prvAddNewTaskToReadyList+0xcc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00e      	beq.n	8008aee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <prvAddNewTaskToReadyList+0xc8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d207      	bcs.n	8008aee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ade:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <prvAddNewTaskToReadyList+0xdc>)
 8008ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000dac 	.word	0x20000dac
 8008afc:	200008d8 	.word	0x200008d8
 8008b00:	20000db8 	.word	0x20000db8
 8008b04:	20000dc8 	.word	0x20000dc8
 8008b08:	20000db4 	.word	0x20000db4
 8008b0c:	200008dc 	.word	0x200008dc
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d019      	beq.n	8008b5a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b26:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <vTaskDelay+0x64>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00c      	beq.n	8008b48 <vTaskDelay+0x34>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	b672      	cpsid	i
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	b662      	cpsie	i
 8008b42:	60bb      	str	r3, [r7, #8]
}
 8008b44:	bf00      	nop
 8008b46:	e7fe      	b.n	8008b46 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008b48:	f000 f884 	bl	8008c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fd04 	bl	800955c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b54:	f000 f88c 	bl	8008c70 <xTaskResumeAll>
 8008b58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d107      	bne.n	8008b70 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008b60:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <vTaskDelay+0x68>)
 8008b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b70:	bf00      	nop
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20000dd4 	.word	0x20000dd4
 8008b7c:	e000ed04 	.word	0xe000ed04

08008b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08a      	sub	sp, #40	; 0x28
 8008b84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b8e:	463a      	mov	r2, r7
 8008b90:	1d39      	adds	r1, r7, #4
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff f820 	bl	8007bdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	9202      	str	r2, [sp, #8]
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	2300      	movs	r3, #0
 8008bac:	460a      	mov	r2, r1
 8008bae:	4923      	ldr	r1, [pc, #140]	; (8008c3c <vTaskStartScheduler+0xbc>)
 8008bb0:	4823      	ldr	r0, [pc, #140]	; (8008c40 <vTaskStartScheduler+0xc0>)
 8008bb2:	f7ff fe05 	bl	80087c0 <xTaskCreateStatic>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4a22      	ldr	r2, [pc, #136]	; (8008c44 <vTaskStartScheduler+0xc4>)
 8008bba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bbc:	4b21      	ldr	r3, [pc, #132]	; (8008c44 <vTaskStartScheduler+0xc4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e001      	b.n	8008bce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d102      	bne.n	8008bda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bd4:	f000 fd16 	bl	8009604 <xTimerCreateTimerTask>
 8008bd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d118      	bne.n	8008c12 <vTaskStartScheduler+0x92>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	b672      	cpsid	i
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	b662      	cpsie	i
 8008bf4:	613b      	str	r3, [r7, #16]
}
 8008bf6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bf8:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <vTaskStartScheduler+0xc8>)
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c00:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <vTaskStartScheduler+0xcc>)
 8008c02:	2201      	movs	r2, #1
 8008c04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c06:	4b12      	ldr	r3, [pc, #72]	; (8008c50 <vTaskStartScheduler+0xd0>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c0c:	f001 f8e8 	bl	8009de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c10:	e010      	b.n	8008c34 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c18:	d10c      	bne.n	8008c34 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	b672      	cpsid	i
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	b662      	cpsie	i
 8008c2e:	60fb      	str	r3, [r7, #12]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <vTaskStartScheduler+0xb2>
}
 8008c34:	bf00      	nop
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	0800bf2c 	.word	0x0800bf2c
 8008c40:	0800928d 	.word	0x0800928d
 8008c44:	20000dd0 	.word	0x20000dd0
 8008c48:	20000dcc 	.word	0x20000dcc
 8008c4c:	20000db8 	.word	0x20000db8
 8008c50:	20000db0 	.word	0x20000db0

08008c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008c58:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <vTaskSuspendAll+0x18>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	4a03      	ldr	r2, [pc, #12]	; (8008c6c <vTaskSuspendAll+0x18>)
 8008c60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008c62:	bf00      	nop
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000dd4 	.word	0x20000dd4

08008c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c7e:	4b43      	ldr	r3, [pc, #268]	; (8008d8c <xTaskResumeAll+0x11c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10c      	bne.n	8008ca0 <xTaskResumeAll+0x30>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	b672      	cpsid	i
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	b662      	cpsie	i
 8008c9a:	603b      	str	r3, [r7, #0]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ca0:	f001 f91c 	bl	8009edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ca4:	4b39      	ldr	r3, [pc, #228]	; (8008d8c <xTaskResumeAll+0x11c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	4a38      	ldr	r2, [pc, #224]	; (8008d8c <xTaskResumeAll+0x11c>)
 8008cac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cae:	4b37      	ldr	r3, [pc, #220]	; (8008d8c <xTaskResumeAll+0x11c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d162      	bne.n	8008d7c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cb6:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <xTaskResumeAll+0x120>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d05e      	beq.n	8008d7c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cbe:	e02f      	b.n	8008d20 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc0:	4b34      	ldr	r3, [pc, #208]	; (8008d94 <xTaskResumeAll+0x124>)
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3318      	adds	r3, #24
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff f843 	bl	8007d58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff f83e 	bl	8007d58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <xTaskResumeAll+0x128>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d903      	bls.n	8008cf0 <xTaskResumeAll+0x80>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	4a2a      	ldr	r2, [pc, #168]	; (8008d98 <xTaskResumeAll+0x128>)
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4a27      	ldr	r2, [pc, #156]	; (8008d9c <xTaskResumeAll+0x12c>)
 8008cfe:	441a      	add	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7fe ffc9 	bl	8007c9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d10:	4b23      	ldr	r3, [pc, #140]	; (8008da0 <xTaskResumeAll+0x130>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d302      	bcc.n	8008d20 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008d1a:	4b22      	ldr	r3, [pc, #136]	; (8008da4 <xTaskResumeAll+0x134>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d20:	4b1c      	ldr	r3, [pc, #112]	; (8008d94 <xTaskResumeAll+0x124>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1cb      	bne.n	8008cc0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d2e:	f000 fb65 	bl	80093fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008d32:	4b1d      	ldr	r3, [pc, #116]	; (8008da8 <xTaskResumeAll+0x138>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d010      	beq.n	8008d60 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d3e:	f000 f847 	bl	8008dd0 <xTaskIncrementTick>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008d48:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <xTaskResumeAll+0x134>)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1f1      	bne.n	8008d3e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008d5a:	4b13      	ldr	r3, [pc, #76]	; (8008da8 <xTaskResumeAll+0x138>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d60:	4b10      	ldr	r3, [pc, #64]	; (8008da4 <xTaskResumeAll+0x134>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d009      	beq.n	8008d7c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <xTaskResumeAll+0x13c>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d7c:	f001 f8e2 	bl	8009f44 <vPortExitCritical>

	return xAlreadyYielded;
 8008d80:	68bb      	ldr	r3, [r7, #8]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000dd4 	.word	0x20000dd4
 8008d90:	20000dac 	.word	0x20000dac
 8008d94:	20000d6c 	.word	0x20000d6c
 8008d98:	20000db4 	.word	0x20000db4
 8008d9c:	200008dc 	.word	0x200008dc
 8008da0:	200008d8 	.word	0x200008d8
 8008da4:	20000dc0 	.word	0x20000dc0
 8008da8:	20000dbc 	.word	0x20000dbc
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <xTaskGetTickCount+0x1c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008dbc:	687b      	ldr	r3, [r7, #4]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20000db0 	.word	0x20000db0

08008dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dda:	4b50      	ldr	r3, [pc, #320]	; (8008f1c <xTaskIncrementTick+0x14c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f040 808b 	bne.w	8008efa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008de4:	4b4e      	ldr	r3, [pc, #312]	; (8008f20 <xTaskIncrementTick+0x150>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dec:	4a4c      	ldr	r2, [pc, #304]	; (8008f20 <xTaskIncrementTick+0x150>)
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d122      	bne.n	8008e3e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008df8:	4b4a      	ldr	r3, [pc, #296]	; (8008f24 <xTaskIncrementTick+0x154>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00c      	beq.n	8008e1c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	b672      	cpsid	i
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	b662      	cpsie	i
 8008e16:	603b      	str	r3, [r7, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <xTaskIncrementTick+0x4a>
 8008e1c:	4b41      	ldr	r3, [pc, #260]	; (8008f24 <xTaskIncrementTick+0x154>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	4b41      	ldr	r3, [pc, #260]	; (8008f28 <xTaskIncrementTick+0x158>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a3f      	ldr	r2, [pc, #252]	; (8008f24 <xTaskIncrementTick+0x154>)
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	4a3f      	ldr	r2, [pc, #252]	; (8008f28 <xTaskIncrementTick+0x158>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	4b3e      	ldr	r3, [pc, #248]	; (8008f2c <xTaskIncrementTick+0x15c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	4a3d      	ldr	r2, [pc, #244]	; (8008f2c <xTaskIncrementTick+0x15c>)
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	f000 fadf 	bl	80093fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e3e:	4b3c      	ldr	r3, [pc, #240]	; (8008f30 <xTaskIncrementTick+0x160>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d349      	bcc.n	8008edc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e48:	4b36      	ldr	r3, [pc, #216]	; (8008f24 <xTaskIncrementTick+0x154>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d104      	bne.n	8008e5c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e52:	4b37      	ldr	r3, [pc, #220]	; (8008f30 <xTaskIncrementTick+0x160>)
 8008e54:	f04f 32ff 	mov.w	r2, #4294967295
 8008e58:	601a      	str	r2, [r3, #0]
					break;
 8008e5a:	e03f      	b.n	8008edc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e5c:	4b31      	ldr	r3, [pc, #196]	; (8008f24 <xTaskIncrementTick+0x154>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d203      	bcs.n	8008e7c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e74:	4a2e      	ldr	r2, [pc, #184]	; (8008f30 <xTaskIncrementTick+0x160>)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e7a:	e02f      	b.n	8008edc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe ff69 	bl	8007d58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d004      	beq.n	8008e98 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	3318      	adds	r3, #24
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe ff60 	bl	8007d58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	4b25      	ldr	r3, [pc, #148]	; (8008f34 <xTaskIncrementTick+0x164>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <xTaskIncrementTick+0xdc>
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	4a22      	ldr	r2, [pc, #136]	; (8008f34 <xTaskIncrementTick+0x164>)
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4a1f      	ldr	r2, [pc, #124]	; (8008f38 <xTaskIncrementTick+0x168>)
 8008eba:	441a      	add	r2, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f7fe feeb 	bl	8007c9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <xTaskIncrementTick+0x16c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d3b8      	bcc.n	8008e48 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eda:	e7b5      	b.n	8008e48 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008edc:	4b17      	ldr	r3, [pc, #92]	; (8008f3c <xTaskIncrementTick+0x16c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee2:	4915      	ldr	r1, [pc, #84]	; (8008f38 <xTaskIncrementTick+0x168>)
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d907      	bls.n	8008f04 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	e004      	b.n	8008f04 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008efa:	4b11      	ldr	r3, [pc, #68]	; (8008f40 <xTaskIncrementTick+0x170>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	4a0f      	ldr	r2, [pc, #60]	; (8008f40 <xTaskIncrementTick+0x170>)
 8008f02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008f04:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <xTaskIncrementTick+0x174>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008f10:	697b      	ldr	r3, [r7, #20]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20000dd4 	.word	0x20000dd4
 8008f20:	20000db0 	.word	0x20000db0
 8008f24:	20000d64 	.word	0x20000d64
 8008f28:	20000d68 	.word	0x20000d68
 8008f2c:	20000dc4 	.word	0x20000dc4
 8008f30:	20000dcc 	.word	0x20000dcc
 8008f34:	20000db4 	.word	0x20000db4
 8008f38:	200008dc 	.word	0x200008dc
 8008f3c:	200008d8 	.word	0x200008d8
 8008f40:	20000dbc 	.word	0x20000dbc
 8008f44:	20000dc0 	.word	0x20000dc0

08008f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f4e:	4b29      	ldr	r3, [pc, #164]	; (8008ff4 <vTaskSwitchContext+0xac>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f56:	4b28      	ldr	r3, [pc, #160]	; (8008ff8 <vTaskSwitchContext+0xb0>)
 8008f58:	2201      	movs	r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f5c:	e043      	b.n	8008fe6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008f5e:	4b26      	ldr	r3, [pc, #152]	; (8008ff8 <vTaskSwitchContext+0xb0>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f64:	4b25      	ldr	r3, [pc, #148]	; (8008ffc <vTaskSwitchContext+0xb4>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e012      	b.n	8008f92 <vTaskSwitchContext+0x4a>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10c      	bne.n	8008f8c <vTaskSwitchContext+0x44>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	b672      	cpsid	i
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	b662      	cpsie	i
 8008f86:	607b      	str	r3, [r7, #4]
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <vTaskSwitchContext+0x42>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	491b      	ldr	r1, [pc, #108]	; (8009000 <vTaskSwitchContext+0xb8>)
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0e2      	beq.n	8008f6c <vTaskSwitchContext+0x24>
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4a13      	ldr	r2, [pc, #76]	; (8009000 <vTaskSwitchContext+0xb8>)
 8008fb2:	4413      	add	r3, r2
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	605a      	str	r2, [r3, #4]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d104      	bne.n	8008fd6 <vTaskSwitchContext+0x8e>
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	605a      	str	r2, [r3, #4]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	4a09      	ldr	r2, [pc, #36]	; (8009004 <vTaskSwitchContext+0xbc>)
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	4a06      	ldr	r2, [pc, #24]	; (8008ffc <vTaskSwitchContext+0xb4>)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6013      	str	r3, [r2, #0]
}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20000dd4 	.word	0x20000dd4
 8008ff8:	20000dc0 	.word	0x20000dc0
 8008ffc:	20000db4 	.word	0x20000db4
 8009000:	200008dc 	.word	0x200008dc
 8009004:	200008d8 	.word	0x200008d8

08009008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10c      	bne.n	8009032 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	b672      	cpsid	i
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	b662      	cpsie	i
 800902c:	60fb      	str	r3, [r7, #12]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009032:	4b07      	ldr	r3, [pc, #28]	; (8009050 <vTaskPlaceOnEventList+0x48>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3318      	adds	r3, #24
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7fe fe53 	bl	8007ce6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009040:	2101      	movs	r1, #1
 8009042:	6838      	ldr	r0, [r7, #0]
 8009044:	f000 fa8a 	bl	800955c <prvAddCurrentTaskToDelayedList>
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	200008d8 	.word	0x200008d8

08009054 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10c      	bne.n	8009080 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	b672      	cpsid	i
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	b662      	cpsie	i
 800907a:	617b      	str	r3, [r7, #20]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <vTaskPlaceOnEventListRestricted+0x58>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3318      	adds	r3, #24
 8009086:	4619      	mov	r1, r3
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f7fe fe08 	bl	8007c9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009094:	f04f 33ff 	mov.w	r3, #4294967295
 8009098:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	68b8      	ldr	r0, [r7, #8]
 800909e:	f000 fa5d 	bl	800955c <prvAddCurrentTaskToDelayedList>
	}
 80090a2:	bf00      	nop
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	200008d8 	.word	0x200008d8

080090b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10c      	bne.n	80090e0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	b672      	cpsid	i
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	b662      	cpsie	i
 80090da:	60fb      	str	r3, [r7, #12]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	3318      	adds	r3, #24
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fe fe37 	bl	8007d58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ea:	4b1e      	ldr	r3, [pc, #120]	; (8009164 <xTaskRemoveFromEventList+0xb4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d11d      	bne.n	800912e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe fe2e 	bl	8007d58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	4b19      	ldr	r3, [pc, #100]	; (8009168 <xTaskRemoveFromEventList+0xb8>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d903      	bls.n	8009110 <xTaskRemoveFromEventList+0x60>
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	4a16      	ldr	r2, [pc, #88]	; (8009168 <xTaskRemoveFromEventList+0xb8>)
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4a13      	ldr	r2, [pc, #76]	; (800916c <xTaskRemoveFromEventList+0xbc>)
 800911e:	441a      	add	r2, r3
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	3304      	adds	r3, #4
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f7fe fdb9 	bl	8007c9e <vListInsertEnd>
 800912c:	e005      	b.n	800913a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3318      	adds	r3, #24
 8009132:	4619      	mov	r1, r3
 8009134:	480e      	ldr	r0, [pc, #56]	; (8009170 <xTaskRemoveFromEventList+0xc0>)
 8009136:	f7fe fdb2 	bl	8007c9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913e:	4b0d      	ldr	r3, [pc, #52]	; (8009174 <xTaskRemoveFromEventList+0xc4>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	429a      	cmp	r2, r3
 8009146:	d905      	bls.n	8009154 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <xTaskRemoveFromEventList+0xc8>)
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	e001      	b.n	8009158 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009158:	697b      	ldr	r3, [r7, #20]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20000dd4 	.word	0x20000dd4
 8009168:	20000db4 	.word	0x20000db4
 800916c:	200008dc 	.word	0x200008dc
 8009170:	20000d6c 	.word	0x20000d6c
 8009174:	200008d8 	.word	0x200008d8
 8009178:	20000dc0 	.word	0x20000dc0

0800917c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009184:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <vTaskInternalSetTimeOutState+0x24>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <vTaskInternalSetTimeOutState+0x28>)
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	605a      	str	r2, [r3, #4]
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20000dc4 	.word	0x20000dc4
 80091a4:	20000db0 	.word	0x20000db0

080091a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10c      	bne.n	80091d2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	b672      	cpsid	i
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	b662      	cpsie	i
 80091cc:	613b      	str	r3, [r7, #16]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10c      	bne.n	80091f2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	b672      	cpsid	i
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	b662      	cpsie	i
 80091ec:	60fb      	str	r3, [r7, #12]
}
 80091ee:	bf00      	nop
 80091f0:	e7fe      	b.n	80091f0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80091f2:	f000 fe73 	bl	8009edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091f6:	4b1d      	ldr	r3, [pc, #116]	; (800926c <xTaskCheckForTimeOut+0xc4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920e:	d102      	bne.n	8009216 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009210:	2300      	movs	r3, #0
 8009212:	61fb      	str	r3, [r7, #28]
 8009214:	e023      	b.n	800925e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	4b15      	ldr	r3, [pc, #84]	; (8009270 <xTaskCheckForTimeOut+0xc8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d007      	beq.n	8009232 <xTaskCheckForTimeOut+0x8a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	429a      	cmp	r2, r3
 800922a:	d302      	bcc.n	8009232 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800922c:	2301      	movs	r3, #1
 800922e:	61fb      	str	r3, [r7, #28]
 8009230:	e015      	b.n	800925e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	429a      	cmp	r2, r3
 800923a:	d20b      	bcs.n	8009254 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	1ad2      	subs	r2, r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff ff97 	bl	800917c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800924e:	2300      	movs	r3, #0
 8009250:	61fb      	str	r3, [r7, #28]
 8009252:	e004      	b.n	800925e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2200      	movs	r2, #0
 8009258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800925a:	2301      	movs	r3, #1
 800925c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800925e:	f000 fe71 	bl	8009f44 <vPortExitCritical>

	return xReturn;
 8009262:	69fb      	ldr	r3, [r7, #28]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3720      	adds	r7, #32
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000db0 	.word	0x20000db0
 8009270:	20000dc4 	.word	0x20000dc4

08009274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009274:	b480      	push	{r7}
 8009276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009278:	4b03      	ldr	r3, [pc, #12]	; (8009288 <vTaskMissedYield+0x14>)
 800927a:	2201      	movs	r2, #1
 800927c:	601a      	str	r2, [r3, #0]
}
 800927e:	bf00      	nop
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	20000dc0 	.word	0x20000dc0

0800928c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009294:	f000 f852 	bl	800933c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009298:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <prvIdleTask+0x28>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d9f9      	bls.n	8009294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092a0:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <prvIdleTask+0x2c>)
 80092a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092b0:	e7f0      	b.n	8009294 <prvIdleTask+0x8>
 80092b2:	bf00      	nop
 80092b4:	200008dc 	.word	0x200008dc
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092c2:	2300      	movs	r3, #0
 80092c4:	607b      	str	r3, [r7, #4]
 80092c6:	e00c      	b.n	80092e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4a12      	ldr	r2, [pc, #72]	; (800931c <prvInitialiseTaskLists+0x60>)
 80092d4:	4413      	add	r3, r2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fcb4 	bl	8007c44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3301      	adds	r3, #1
 80092e0:	607b      	str	r3, [r7, #4]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b37      	cmp	r3, #55	; 0x37
 80092e6:	d9ef      	bls.n	80092c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092e8:	480d      	ldr	r0, [pc, #52]	; (8009320 <prvInitialiseTaskLists+0x64>)
 80092ea:	f7fe fcab 	bl	8007c44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092ee:	480d      	ldr	r0, [pc, #52]	; (8009324 <prvInitialiseTaskLists+0x68>)
 80092f0:	f7fe fca8 	bl	8007c44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092f4:	480c      	ldr	r0, [pc, #48]	; (8009328 <prvInitialiseTaskLists+0x6c>)
 80092f6:	f7fe fca5 	bl	8007c44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092fa:	480c      	ldr	r0, [pc, #48]	; (800932c <prvInitialiseTaskLists+0x70>)
 80092fc:	f7fe fca2 	bl	8007c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009300:	480b      	ldr	r0, [pc, #44]	; (8009330 <prvInitialiseTaskLists+0x74>)
 8009302:	f7fe fc9f 	bl	8007c44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009306:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <prvInitialiseTaskLists+0x78>)
 8009308:	4a05      	ldr	r2, [pc, #20]	; (8009320 <prvInitialiseTaskLists+0x64>)
 800930a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800930c:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <prvInitialiseTaskLists+0x7c>)
 800930e:	4a05      	ldr	r2, [pc, #20]	; (8009324 <prvInitialiseTaskLists+0x68>)
 8009310:	601a      	str	r2, [r3, #0]
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	200008dc 	.word	0x200008dc
 8009320:	20000d3c 	.word	0x20000d3c
 8009324:	20000d50 	.word	0x20000d50
 8009328:	20000d6c 	.word	0x20000d6c
 800932c:	20000d80 	.word	0x20000d80
 8009330:	20000d98 	.word	0x20000d98
 8009334:	20000d64 	.word	0x20000d64
 8009338:	20000d68 	.word	0x20000d68

0800933c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009342:	e019      	b.n	8009378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009344:	f000 fdca 	bl	8009edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009348:	4b10      	ldr	r3, [pc, #64]	; (800938c <prvCheckTasksWaitingTermination+0x50>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3304      	adds	r3, #4
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fcff 	bl	8007d58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800935a:	4b0d      	ldr	r3, [pc, #52]	; (8009390 <prvCheckTasksWaitingTermination+0x54>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3b01      	subs	r3, #1
 8009360:	4a0b      	ldr	r2, [pc, #44]	; (8009390 <prvCheckTasksWaitingTermination+0x54>)
 8009362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009364:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <prvCheckTasksWaitingTermination+0x58>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3b01      	subs	r3, #1
 800936a:	4a0a      	ldr	r2, [pc, #40]	; (8009394 <prvCheckTasksWaitingTermination+0x58>)
 800936c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800936e:	f000 fde9 	bl	8009f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f810 	bl	8009398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009378:	4b06      	ldr	r3, [pc, #24]	; (8009394 <prvCheckTasksWaitingTermination+0x58>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e1      	bne.n	8009344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000d80 	.word	0x20000d80
 8009390:	20000dac 	.word	0x20000dac
 8009394:	20000d94 	.word	0x20000d94

08009398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d108      	bne.n	80093bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 ff8a 	bl	800a2c8 <vPortFree>
				vPortFree( pxTCB );
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 ff87 	bl	800a2c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093ba:	e01a      	b.n	80093f2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d103      	bne.n	80093ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 ff7e 	bl	800a2c8 <vPortFree>
	}
 80093cc:	e011      	b.n	80093f2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d00c      	beq.n	80093f2 <prvDeleteTCB+0x5a>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	b672      	cpsid	i
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	b662      	cpsie	i
 80093ec:	60fb      	str	r3, [r7, #12]
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <prvDeleteTCB+0x58>
	}
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009402:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <prvResetNextTaskUnblockTime+0x38>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800940c:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <prvResetNextTaskUnblockTime+0x3c>)
 800940e:	f04f 32ff 	mov.w	r2, #4294967295
 8009412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009414:	e008      	b.n	8009428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009416:	4b07      	ldr	r3, [pc, #28]	; (8009434 <prvResetNextTaskUnblockTime+0x38>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4a04      	ldr	r2, [pc, #16]	; (8009438 <prvResetNextTaskUnblockTime+0x3c>)
 8009426:	6013      	str	r3, [r2, #0]
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	20000d64 	.word	0x20000d64
 8009438:	20000dcc 	.word	0x20000dcc

0800943c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009442:	4b0b      	ldr	r3, [pc, #44]	; (8009470 <xTaskGetSchedulerState+0x34>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d102      	bne.n	8009450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800944a:	2301      	movs	r3, #1
 800944c:	607b      	str	r3, [r7, #4]
 800944e:	e008      	b.n	8009462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009450:	4b08      	ldr	r3, [pc, #32]	; (8009474 <xTaskGetSchedulerState+0x38>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d102      	bne.n	800945e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009458:	2302      	movs	r3, #2
 800945a:	607b      	str	r3, [r7, #4]
 800945c:	e001      	b.n	8009462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800945e:	2300      	movs	r3, #0
 8009460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009462:	687b      	ldr	r3, [r7, #4]
	}
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	20000db8 	.word	0x20000db8
 8009474:	20000dd4 	.word	0x20000dd4

08009478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d05a      	beq.n	8009544 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800948e:	4b30      	ldr	r3, [pc, #192]	; (8009550 <xTaskPriorityDisinherit+0xd8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	429a      	cmp	r2, r3
 8009496:	d00c      	beq.n	80094b2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	b672      	cpsid	i
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	b662      	cpsie	i
 80094ac:	60fb      	str	r3, [r7, #12]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10c      	bne.n	80094d4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	b672      	cpsid	i
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	b662      	cpsie	i
 80094ce:	60bb      	str	r3, [r7, #8]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d8:	1e5a      	subs	r2, r3, #1
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d02c      	beq.n	8009544 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d128      	bne.n	8009544 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fc2e 	bl	8007d58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	4b0f      	ldr	r3, [pc, #60]	; (8009554 <xTaskPriorityDisinherit+0xdc>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	429a      	cmp	r2, r3
 800951a:	d903      	bls.n	8009524 <xTaskPriorityDisinherit+0xac>
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	4a0c      	ldr	r2, [pc, #48]	; (8009554 <xTaskPriorityDisinherit+0xdc>)
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4a09      	ldr	r2, [pc, #36]	; (8009558 <xTaskPriorityDisinherit+0xe0>)
 8009532:	441a      	add	r2, r3
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	3304      	adds	r3, #4
 8009538:	4619      	mov	r1, r3
 800953a:	4610      	mov	r0, r2
 800953c:	f7fe fbaf 	bl	8007c9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009540:	2301      	movs	r3, #1
 8009542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009544:	697b      	ldr	r3, [r7, #20]
	}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200008d8 	.word	0x200008d8
 8009554:	20000db4 	.word	0x20000db4
 8009558:	200008dc 	.word	0x200008dc

0800955c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009566:	4b21      	ldr	r3, [pc, #132]	; (80095ec <prvAddCurrentTaskToDelayedList+0x90>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800956c:	4b20      	ldr	r3, [pc, #128]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3304      	adds	r3, #4
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fbf0 	bl	8007d58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957e:	d10a      	bne.n	8009596 <prvAddCurrentTaskToDelayedList+0x3a>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d007      	beq.n	8009596 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009586:	4b1a      	ldr	r3, [pc, #104]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3304      	adds	r3, #4
 800958c:	4619      	mov	r1, r3
 800958e:	4819      	ldr	r0, [pc, #100]	; (80095f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009590:	f7fe fb85 	bl	8007c9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009594:	e026      	b.n	80095e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4413      	add	r3, r2
 800959c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800959e:	4b14      	ldr	r3, [pc, #80]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d209      	bcs.n	80095c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ae:	4b12      	ldr	r3, [pc, #72]	; (80095f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b0f      	ldr	r3, [pc, #60]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f7fe fb93 	bl	8007ce6 <vListInsert>
}
 80095c0:	e010      	b.n	80095e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095c2:	4b0e      	ldr	r3, [pc, #56]	; (80095fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3304      	adds	r3, #4
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f7fe fb89 	bl	8007ce6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d202      	bcs.n	80095e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095de:	4a08      	ldr	r2, [pc, #32]	; (8009600 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6013      	str	r3, [r2, #0]
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20000db0 	.word	0x20000db0
 80095f0:	200008d8 	.word	0x200008d8
 80095f4:	20000d98 	.word	0x20000d98
 80095f8:	20000d68 	.word	0x20000d68
 80095fc:	20000d64 	.word	0x20000d64
 8009600:	20000dcc 	.word	0x20000dcc

08009604 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08a      	sub	sp, #40	; 0x28
 8009608:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800960e:	f000 fb15 	bl	8009c3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009612:	4b1d      	ldr	r3, [pc, #116]	; (8009688 <xTimerCreateTimerTask+0x84>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d021      	beq.n	800965e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009622:	1d3a      	adds	r2, r7, #4
 8009624:	f107 0108 	add.w	r1, r7, #8
 8009628:	f107 030c 	add.w	r3, r7, #12
 800962c:	4618      	mov	r0, r3
 800962e:	f7fe faef 	bl	8007c10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	9202      	str	r2, [sp, #8]
 800963a:	9301      	str	r3, [sp, #4]
 800963c:	2302      	movs	r3, #2
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	2300      	movs	r3, #0
 8009642:	460a      	mov	r2, r1
 8009644:	4911      	ldr	r1, [pc, #68]	; (800968c <xTimerCreateTimerTask+0x88>)
 8009646:	4812      	ldr	r0, [pc, #72]	; (8009690 <xTimerCreateTimerTask+0x8c>)
 8009648:	f7ff f8ba 	bl	80087c0 <xTaskCreateStatic>
 800964c:	4603      	mov	r3, r0
 800964e:	4a11      	ldr	r2, [pc, #68]	; (8009694 <xTimerCreateTimerTask+0x90>)
 8009650:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009652:	4b10      	ldr	r3, [pc, #64]	; (8009694 <xTimerCreateTimerTask+0x90>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800965a:	2301      	movs	r3, #1
 800965c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10c      	bne.n	800967e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	b672      	cpsid	i
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	b662      	cpsie	i
 8009678:	613b      	str	r3, [r7, #16]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800967e:	697b      	ldr	r3, [r7, #20]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20000e08 	.word	0x20000e08
 800968c:	0800bf34 	.word	0x0800bf34
 8009690:	080097d5 	.word	0x080097d5
 8009694:	20000e0c 	.word	0x20000e0c

08009698 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08a      	sub	sp, #40	; 0x28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10c      	bne.n	80096ca <xTimerGenericCommand+0x32>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	b672      	cpsid	i
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	b662      	cpsie	i
 80096c4:	623b      	str	r3, [r7, #32]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096ca:	4b1a      	ldr	r3, [pc, #104]	; (8009734 <xTimerGenericCommand+0x9c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d02a      	beq.n	8009728 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2b05      	cmp	r3, #5
 80096e2:	dc18      	bgt.n	8009716 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096e4:	f7ff feaa 	bl	800943c <xTaskGetSchedulerState>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d109      	bne.n	8009702 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096ee:	4b11      	ldr	r3, [pc, #68]	; (8009734 <xTimerGenericCommand+0x9c>)
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f107 0110 	add.w	r1, r7, #16
 80096f6:	2300      	movs	r3, #0
 80096f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fa:	f7fe fc67 	bl	8007fcc <xQueueGenericSend>
 80096fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009700:	e012      	b.n	8009728 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009702:	4b0c      	ldr	r3, [pc, #48]	; (8009734 <xTimerGenericCommand+0x9c>)
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f107 0110 	add.w	r1, r7, #16
 800970a:	2300      	movs	r3, #0
 800970c:	2200      	movs	r2, #0
 800970e:	f7fe fc5d 	bl	8007fcc <xQueueGenericSend>
 8009712:	6278      	str	r0, [r7, #36]	; 0x24
 8009714:	e008      	b.n	8009728 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009716:	4b07      	ldr	r3, [pc, #28]	; (8009734 <xTimerGenericCommand+0x9c>)
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	f107 0110 	add.w	r1, r7, #16
 800971e:	2300      	movs	r3, #0
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	f7fe fd59 	bl	80081d8 <xQueueGenericSendFromISR>
 8009726:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800972a:	4618      	mov	r0, r3
 800972c:	3728      	adds	r7, #40	; 0x28
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20000e08 	.word	0x20000e08

08009738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af02      	add	r7, sp, #8
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009742:	4b23      	ldr	r3, [pc, #140]	; (80097d0 <prvProcessExpiredTimer+0x98>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	3304      	adds	r3, #4
 8009750:	4618      	mov	r0, r3
 8009752:	f7fe fb01 	bl	8007d58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d024      	beq.n	80097ae <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	699a      	ldr	r2, [r3, #24]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	18d1      	adds	r1, r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	6978      	ldr	r0, [r7, #20]
 8009772:	f000 f8d3 	bl	800991c <prvInsertTimerInActiveList>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d021      	beq.n	80097c0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800977c:	2300      	movs	r3, #0
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	2300      	movs	r3, #0
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	2100      	movs	r1, #0
 8009786:	6978      	ldr	r0, [r7, #20]
 8009788:	f7ff ff86 	bl	8009698 <xTimerGenericCommand>
 800978c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d115      	bne.n	80097c0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009798:	b672      	cpsid	i
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	b662      	cpsie	i
 80097a8:	60fb      	str	r3, [r7, #12]
}
 80097aa:	bf00      	nop
 80097ac:	e7fe      	b.n	80097ac <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097b4:	f023 0301 	bic.w	r3, r3, #1
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	6978      	ldr	r0, [r7, #20]
 80097c6:	4798      	blx	r3
}
 80097c8:	bf00      	nop
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	20000e00 	.word	0x20000e00

080097d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097dc:	f107 0308 	add.w	r3, r7, #8
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 f857 	bl	8009894 <prvGetNextExpireTime>
 80097e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	4619      	mov	r1, r3
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 f803 	bl	80097f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097f2:	f000 f8d5 	bl	80099a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097f6:	e7f1      	b.n	80097dc <prvTimerTask+0x8>

080097f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009802:	f7ff fa27 	bl	8008c54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009806:	f107 0308 	add.w	r3, r7, #8
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f866 	bl	80098dc <prvSampleTimeNow>
 8009810:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d130      	bne.n	800987a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10a      	bne.n	8009834 <prvProcessTimerOrBlockTask+0x3c>
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	429a      	cmp	r2, r3
 8009824:	d806      	bhi.n	8009834 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009826:	f7ff fa23 	bl	8008c70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800982a:	68f9      	ldr	r1, [r7, #12]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff ff83 	bl	8009738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009832:	e024      	b.n	800987e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d008      	beq.n	800984c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800983a:	4b13      	ldr	r3, [pc, #76]	; (8009888 <prvProcessTimerOrBlockTask+0x90>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <prvProcessTimerOrBlockTask+0x50>
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <prvProcessTimerOrBlockTask+0x52>
 8009848:	2300      	movs	r3, #0
 800984a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800984c:	4b0f      	ldr	r3, [pc, #60]	; (800988c <prvProcessTimerOrBlockTask+0x94>)
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	4619      	mov	r1, r3
 800985a:	f7fe ff7d 	bl	8008758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800985e:	f7ff fa07 	bl	8008c70 <xTaskResumeAll>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009868:	4b09      	ldr	r3, [pc, #36]	; (8009890 <prvProcessTimerOrBlockTask+0x98>)
 800986a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	f3bf 8f6f 	isb	sy
}
 8009878:	e001      	b.n	800987e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800987a:	f7ff f9f9 	bl	8008c70 <xTaskResumeAll>
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000e04 	.word	0x20000e04
 800988c:	20000e08 	.word	0x20000e08
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800989c:	4b0e      	ldr	r3, [pc, #56]	; (80098d8 <prvGetNextExpireTime+0x44>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d101      	bne.n	80098aa <prvGetNextExpireTime+0x16>
 80098a6:	2201      	movs	r2, #1
 80098a8:	e000      	b.n	80098ac <prvGetNextExpireTime+0x18>
 80098aa:	2200      	movs	r2, #0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d105      	bne.n	80098c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098b8:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <prvGetNextExpireTime+0x44>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]
 80098c2:	e001      	b.n	80098c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098c8:	68fb      	ldr	r3, [r7, #12]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	20000e00 	.word	0x20000e00

080098dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098e4:	f7ff fa64 	bl	8008db0 <xTaskGetTickCount>
 80098e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <prvSampleTimeNow+0x3c>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d205      	bcs.n	8009900 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098f4:	f000 f93c 	bl	8009b70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e002      	b.n	8009906 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009906:	4a04      	ldr	r2, [pc, #16]	; (8009918 <prvSampleTimeNow+0x3c>)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800990c:	68fb      	ldr	r3, [r7, #12]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20000e10 	.word	0x20000e10

0800991c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	429a      	cmp	r2, r3
 8009940:	d812      	bhi.n	8009968 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	1ad2      	subs	r2, r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	429a      	cmp	r2, r3
 800994e:	d302      	bcc.n	8009956 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009950:	2301      	movs	r3, #1
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	e01b      	b.n	800998e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009956:	4b10      	ldr	r3, [pc, #64]	; (8009998 <prvInsertTimerInActiveList+0x7c>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3304      	adds	r3, #4
 800995e:	4619      	mov	r1, r3
 8009960:	4610      	mov	r0, r2
 8009962:	f7fe f9c0 	bl	8007ce6 <vListInsert>
 8009966:	e012      	b.n	800998e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	429a      	cmp	r2, r3
 800996e:	d206      	bcs.n	800997e <prvInsertTimerInActiveList+0x62>
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	429a      	cmp	r2, r3
 8009976:	d302      	bcc.n	800997e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009978:	2301      	movs	r3, #1
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	e007      	b.n	800998e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800997e:	4b07      	ldr	r3, [pc, #28]	; (800999c <prvInsertTimerInActiveList+0x80>)
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3304      	adds	r3, #4
 8009986:	4619      	mov	r1, r3
 8009988:	4610      	mov	r0, r2
 800998a:	f7fe f9ac 	bl	8007ce6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800998e:	697b      	ldr	r3, [r7, #20]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	20000e04 	.word	0x20000e04
 800999c:	20000e00 	.word	0x20000e00

080099a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08e      	sub	sp, #56	; 0x38
 80099a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099a6:	e0d0      	b.n	8009b4a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	da1a      	bge.n	80099e4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099ae:	1d3b      	adds	r3, r7, #4
 80099b0:	3304      	adds	r3, #4
 80099b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10c      	bne.n	80099d4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	b672      	cpsid	i
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	b662      	cpsie	i
 80099ce:	61fb      	str	r3, [r7, #28]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099da:	6850      	ldr	r0, [r2, #4]
 80099dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099de:	6892      	ldr	r2, [r2, #8]
 80099e0:	4611      	mov	r1, r2
 80099e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f2c0 80ae 	blt.w	8009b48 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	3304      	adds	r3, #4
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe f9ab 	bl	8007d58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a02:	463b      	mov	r3, r7
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7ff ff69 	bl	80098dc <prvSampleTimeNow>
 8009a0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b09      	cmp	r3, #9
 8009a10:	f200 809b 	bhi.w	8009b4a <prvProcessReceivedCommands+0x1aa>
 8009a14:	a201      	add	r2, pc, #4	; (adr r2, 8009a1c <prvProcessReceivedCommands+0x7c>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009a45 	.word	0x08009a45
 8009a20:	08009a45 	.word	0x08009a45
 8009a24:	08009a45 	.word	0x08009a45
 8009a28:	08009abd 	.word	0x08009abd
 8009a2c:	08009ad1 	.word	0x08009ad1
 8009a30:	08009b1f 	.word	0x08009b1f
 8009a34:	08009a45 	.word	0x08009a45
 8009a38:	08009a45 	.word	0x08009a45
 8009a3c:	08009abd 	.word	0x08009abd
 8009a40:	08009ad1 	.word	0x08009ad1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	18d1      	adds	r1, r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a64:	f7ff ff5a 	bl	800991c <prvInsertTimerInActiveList>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d06d      	beq.n	8009b4a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d062      	beq.n	8009b4a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	441a      	add	r2, r3
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	2300      	movs	r3, #0
 8009a92:	2100      	movs	r1, #0
 8009a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a96:	f7ff fdff 	bl	8009698 <xTimerGenericCommand>
 8009a9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d153      	bne.n	8009b4a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	61bb      	str	r3, [r7, #24]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ace:	e03c      	b.n	8009b4a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad6:	f043 0301 	orr.w	r3, r3, #1
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10c      	bne.n	8009b0a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	b672      	cpsid	i
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	b662      	cpsie	i
 8009b04:	617b      	str	r3, [r7, #20]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	18d1      	adds	r1, r2, r3
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b18:	f7ff ff00 	bl	800991c <prvInsertTimerInActiveList>
					break;
 8009b1c:	e015      	b.n	8009b4a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b2e:	f000 fbcb 	bl	800a2c8 <vPortFree>
 8009b32:	e00a      	b.n	8009b4a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b3a:	f023 0301 	bic.w	r3, r3, #1
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b46:	e000      	b.n	8009b4a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b4a:	4b08      	ldr	r3, [pc, #32]	; (8009b6c <prvProcessReceivedCommands+0x1cc>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	1d39      	adds	r1, r7, #4
 8009b50:	2200      	movs	r2, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fbe0 	bl	8008318 <xQueueReceive>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f47f af24 	bne.w	80099a8 <prvProcessReceivedCommands+0x8>
	}
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	3730      	adds	r7, #48	; 0x30
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000e08 	.word	0x20000e08

08009b70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b76:	e04a      	b.n	8009c0e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b78:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <prvSwitchTimerLists+0xc4>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b82:	4b2c      	ldr	r3, [pc, #176]	; (8009c34 <prvSwitchTimerLists+0xc4>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe f8e1 	bl	8007d58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ba4:	f003 0304 	and.w	r3, r3, #4
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d030      	beq.n	8009c0e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d90e      	bls.n	8009bdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bca:	4b1a      	ldr	r3, [pc, #104]	; (8009c34 <prvSwitchTimerLists+0xc4>)
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f7fe f886 	bl	8007ce6 <vListInsert>
 8009bda:	e018      	b.n	8009c0e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	2300      	movs	r3, #0
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	2100      	movs	r1, #0
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f7ff fd56 	bl	8009698 <xTimerGenericCommand>
 8009bec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10c      	bne.n	8009c0e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	b672      	cpsid	i
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	b662      	cpsie	i
 8009c08:	603b      	str	r3, [r7, #0]
}
 8009c0a:	bf00      	nop
 8009c0c:	e7fe      	b.n	8009c0c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c0e:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <prvSwitchTimerLists+0xc4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1af      	bne.n	8009b78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c18:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <prvSwitchTimerLists+0xc4>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c1e:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <prvSwitchTimerLists+0xc8>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a04      	ldr	r2, [pc, #16]	; (8009c34 <prvSwitchTimerLists+0xc4>)
 8009c24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c26:	4a04      	ldr	r2, [pc, #16]	; (8009c38 <prvSwitchTimerLists+0xc8>)
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	6013      	str	r3, [r2, #0]
}
 8009c2c:	bf00      	nop
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000e00 	.word	0x20000e00
 8009c38:	20000e04 	.word	0x20000e04

08009c3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c42:	f000 f94b 	bl	8009edc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c46:	4b15      	ldr	r3, [pc, #84]	; (8009c9c <prvCheckForValidListAndQueue+0x60>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d120      	bne.n	8009c90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c4e:	4814      	ldr	r0, [pc, #80]	; (8009ca0 <prvCheckForValidListAndQueue+0x64>)
 8009c50:	f7fd fff8 	bl	8007c44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c54:	4813      	ldr	r0, [pc, #76]	; (8009ca4 <prvCheckForValidListAndQueue+0x68>)
 8009c56:	f7fd fff5 	bl	8007c44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c5a:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <prvCheckForValidListAndQueue+0x6c>)
 8009c5c:	4a10      	ldr	r2, [pc, #64]	; (8009ca0 <prvCheckForValidListAndQueue+0x64>)
 8009c5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c60:	4b12      	ldr	r3, [pc, #72]	; (8009cac <prvCheckForValidListAndQueue+0x70>)
 8009c62:	4a10      	ldr	r2, [pc, #64]	; (8009ca4 <prvCheckForValidListAndQueue+0x68>)
 8009c64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c66:	2300      	movs	r3, #0
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <prvCheckForValidListAndQueue+0x74>)
 8009c6c:	4a11      	ldr	r2, [pc, #68]	; (8009cb4 <prvCheckForValidListAndQueue+0x78>)
 8009c6e:	2110      	movs	r1, #16
 8009c70:	200a      	movs	r0, #10
 8009c72:	f7fe f905 	bl	8007e80 <xQueueGenericCreateStatic>
 8009c76:	4603      	mov	r3, r0
 8009c78:	4a08      	ldr	r2, [pc, #32]	; (8009c9c <prvCheckForValidListAndQueue+0x60>)
 8009c7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c7c:	4b07      	ldr	r3, [pc, #28]	; (8009c9c <prvCheckForValidListAndQueue+0x60>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d005      	beq.n	8009c90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c84:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <prvCheckForValidListAndQueue+0x60>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	490b      	ldr	r1, [pc, #44]	; (8009cb8 <prvCheckForValidListAndQueue+0x7c>)
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fd3a 	bl	8008704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c90:	f000 f958 	bl	8009f44 <vPortExitCritical>
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000e08 	.word	0x20000e08
 8009ca0:	20000dd8 	.word	0x20000dd8
 8009ca4:	20000dec 	.word	0x20000dec
 8009ca8:	20000e00 	.word	0x20000e00
 8009cac:	20000e04 	.word	0x20000e04
 8009cb0:	20000eb4 	.word	0x20000eb4
 8009cb4:	20000e14 	.word	0x20000e14
 8009cb8:	0800bf3c 	.word	0x0800bf3c

08009cbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3b04      	subs	r3, #4
 8009ccc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f023 0201 	bic.w	r2, r3, #1
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3b04      	subs	r3, #4
 8009cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cec:	4a0c      	ldr	r2, [pc, #48]	; (8009d20 <pxPortInitialiseStack+0x64>)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3b14      	subs	r3, #20
 8009cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3b04      	subs	r3, #4
 8009d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f06f 0202 	mvn.w	r2, #2
 8009d0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3b20      	subs	r3, #32
 8009d10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d12:	68fb      	ldr	r3, [r7, #12]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	08009d25 	.word	0x08009d25

08009d24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d2e:	4b14      	ldr	r3, [pc, #80]	; (8009d80 <prvTaskExitError+0x5c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d36:	d00c      	beq.n	8009d52 <prvTaskExitError+0x2e>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	b672      	cpsid	i
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	b662      	cpsie	i
 8009d4c:	60fb      	str	r3, [r7, #12]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <prvTaskExitError+0x2c>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	b672      	cpsid	i
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	b662      	cpsie	i
 8009d66:	60bb      	str	r3, [r7, #8]
}
 8009d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d6a:	bf00      	nop
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0fc      	beq.n	8009d6c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d72:	bf00      	nop
 8009d74:	bf00      	nop
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	2000011c 	.word	0x2000011c
	...

08009d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d90:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <pxCurrentTCBConst2>)
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	6808      	ldr	r0, [r1, #0]
 8009d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	f380 8809 	msr	PSP, r0
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8811 	msr	BASEPRI, r0
 8009daa:	4770      	bx	lr
 8009dac:	f3af 8000 	nop.w

08009db0 <pxCurrentTCBConst2>:
 8009db0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop

08009db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009db8:	4808      	ldr	r0, [pc, #32]	; (8009ddc <prvPortStartFirstTask+0x24>)
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	6800      	ldr	r0, [r0, #0]
 8009dbe:	f380 8808 	msr	MSP, r0
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f380 8814 	msr	CONTROL, r0
 8009dca:	b662      	cpsie	i
 8009dcc:	b661      	cpsie	f
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	df00      	svc	0
 8009dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dda:	bf00      	nop
 8009ddc:	e000ed08 	.word	0xe000ed08

08009de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009de6:	4b37      	ldr	r3, [pc, #220]	; (8009ec4 <xPortStartScheduler+0xe4>)
 8009de8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	22ff      	movs	r2, #255	; 0xff
 8009df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	4b2f      	ldr	r3, [pc, #188]	; (8009ec8 <xPortStartScheduler+0xe8>)
 8009e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e0e:	4b2f      	ldr	r3, [pc, #188]	; (8009ecc <xPortStartScheduler+0xec>)
 8009e10:	2207      	movs	r2, #7
 8009e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e14:	e009      	b.n	8009e2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009e16:	4b2d      	ldr	r3, [pc, #180]	; (8009ecc <xPortStartScheduler+0xec>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	4a2b      	ldr	r2, [pc, #172]	; (8009ecc <xPortStartScheduler+0xec>)
 8009e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e20:	78fb      	ldrb	r3, [r7, #3]
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e32:	2b80      	cmp	r3, #128	; 0x80
 8009e34:	d0ef      	beq.n	8009e16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e36:	4b25      	ldr	r3, [pc, #148]	; (8009ecc <xPortStartScheduler+0xec>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f1c3 0307 	rsb	r3, r3, #7
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	d00c      	beq.n	8009e5c <xPortStartScheduler+0x7c>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	b672      	cpsid	i
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	b662      	cpsie	i
 8009e56:	60bb      	str	r3, [r7, #8]
}
 8009e58:	bf00      	nop
 8009e5a:	e7fe      	b.n	8009e5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e5c:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <xPortStartScheduler+0xec>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	4a1a      	ldr	r2, [pc, #104]	; (8009ecc <xPortStartScheduler+0xec>)
 8009e64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e66:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <xPortStartScheduler+0xec>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e6e:	4a17      	ldr	r2, [pc, #92]	; (8009ecc <xPortStartScheduler+0xec>)
 8009e70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e7a:	4b15      	ldr	r3, [pc, #84]	; (8009ed0 <xPortStartScheduler+0xf0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a14      	ldr	r2, [pc, #80]	; (8009ed0 <xPortStartScheduler+0xf0>)
 8009e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e86:	4b12      	ldr	r3, [pc, #72]	; (8009ed0 <xPortStartScheduler+0xf0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a11      	ldr	r2, [pc, #68]	; (8009ed0 <xPortStartScheduler+0xf0>)
 8009e8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e92:	f000 f8dd 	bl	800a050 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e96:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <xPortStartScheduler+0xf4>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e9c:	f000 f8fc 	bl	800a098 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ea0:	4b0d      	ldr	r3, [pc, #52]	; (8009ed8 <xPortStartScheduler+0xf8>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a0c      	ldr	r2, [pc, #48]	; (8009ed8 <xPortStartScheduler+0xf8>)
 8009ea6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009eaa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009eac:	f7ff ff84 	bl	8009db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009eb0:	f7ff f84a 	bl	8008f48 <vTaskSwitchContext>
	prvTaskExitError();
 8009eb4:	f7ff ff36 	bl	8009d24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	e000e400 	.word	0xe000e400
 8009ec8:	20000f04 	.word	0x20000f04
 8009ecc:	20000f08 	.word	0x20000f08
 8009ed0:	e000ed20 	.word	0xe000ed20
 8009ed4:	2000011c 	.word	0x2000011c
 8009ed8:	e000ef34 	.word	0xe000ef34

08009edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	b672      	cpsid	i
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	b662      	cpsie	i
 8009ef6:	607b      	str	r3, [r7, #4]
}
 8009ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009efa:	4b10      	ldr	r3, [pc, #64]	; (8009f3c <vPortEnterCritical+0x60>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3301      	adds	r3, #1
 8009f00:	4a0e      	ldr	r2, [pc, #56]	; (8009f3c <vPortEnterCritical+0x60>)
 8009f02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f04:	4b0d      	ldr	r3, [pc, #52]	; (8009f3c <vPortEnterCritical+0x60>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d111      	bne.n	8009f30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <vPortEnterCritical+0x64>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00c      	beq.n	8009f30 <vPortEnterCritical+0x54>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	b672      	cpsid	i
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	b662      	cpsie	i
 8009f2a:	603b      	str	r3, [r7, #0]
}
 8009f2c:	bf00      	nop
 8009f2e:	e7fe      	b.n	8009f2e <vPortEnterCritical+0x52>
	}
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	2000011c 	.word	0x2000011c
 8009f40:	e000ed04 	.word	0xe000ed04

08009f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f4a:	4b13      	ldr	r3, [pc, #76]	; (8009f98 <vPortExitCritical+0x54>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10c      	bne.n	8009f6c <vPortExitCritical+0x28>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	b672      	cpsid	i
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	b662      	cpsie	i
 8009f66:	607b      	str	r3, [r7, #4]
}
 8009f68:	bf00      	nop
 8009f6a:	e7fe      	b.n	8009f6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	; (8009f98 <vPortExitCritical+0x54>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	4a09      	ldr	r2, [pc, #36]	; (8009f98 <vPortExitCritical+0x54>)
 8009f74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f76:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <vPortExitCritical+0x54>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d105      	bne.n	8009f8a <vPortExitCritical+0x46>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	f383 8811 	msr	BASEPRI, r3
}
 8009f88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	2000011c 	.word	0x2000011c
 8009f9c:	00000000 	.word	0x00000000

08009fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fa0:	f3ef 8009 	mrs	r0, PSP
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	4b15      	ldr	r3, [pc, #84]	; (800a000 <pxCurrentTCBConst>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	f01e 0f10 	tst.w	lr, #16
 8009fb0:	bf08      	it	eq
 8009fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fba:	6010      	str	r0, [r2, #0]
 8009fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fc4:	b672      	cpsid	i
 8009fc6:	f380 8811 	msr	BASEPRI, r0
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	b662      	cpsie	i
 8009fd4:	f7fe ffb8 	bl	8008f48 <vTaskSwitchContext>
 8009fd8:	f04f 0000 	mov.w	r0, #0
 8009fdc:	f380 8811 	msr	BASEPRI, r0
 8009fe0:	bc09      	pop	{r0, r3}
 8009fe2:	6819      	ldr	r1, [r3, #0]
 8009fe4:	6808      	ldr	r0, [r1, #0]
 8009fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fea:	f01e 0f10 	tst.w	lr, #16
 8009fee:	bf08      	it	eq
 8009ff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ff4:	f380 8809 	msr	PSP, r0
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop

0800a000 <pxCurrentTCBConst>:
 800a000:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop

0800a008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	b672      	cpsid	i
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	b662      	cpsie	i
 800a022:	607b      	str	r3, [r7, #4]
}
 800a024:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a026:	f7fe fed3 	bl	8008dd0 <xTaskIncrementTick>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d003      	beq.n	800a038 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <SysTick_Handler+0x44>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	2300      	movs	r3, #0
 800a03a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	f383 8811 	msr	BASEPRI, r3
}
 800a042:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	e000ed04 	.word	0xe000ed04

0800a050 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a054:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <vPortSetupTimerInterrupt+0x34>)
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a05a:	4b0b      	ldr	r3, [pc, #44]	; (800a088 <vPortSetupTimerInterrupt+0x38>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a060:	4b0a      	ldr	r3, [pc, #40]	; (800a08c <vPortSetupTimerInterrupt+0x3c>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a0a      	ldr	r2, [pc, #40]	; (800a090 <vPortSetupTimerInterrupt+0x40>)
 800a066:	fba2 2303 	umull	r2, r3, r2, r3
 800a06a:	099b      	lsrs	r3, r3, #6
 800a06c:	4a09      	ldr	r2, [pc, #36]	; (800a094 <vPortSetupTimerInterrupt+0x44>)
 800a06e:	3b01      	subs	r3, #1
 800a070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a072:	4b04      	ldr	r3, [pc, #16]	; (800a084 <vPortSetupTimerInterrupt+0x34>)
 800a074:	2207      	movs	r2, #7
 800a076:	601a      	str	r2, [r3, #0]
}
 800a078:	bf00      	nop
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	e000e010 	.word	0xe000e010
 800a088:	e000e018 	.word	0xe000e018
 800a08c:	20000000 	.word	0x20000000
 800a090:	10624dd3 	.word	0x10624dd3
 800a094:	e000e014 	.word	0xe000e014

0800a098 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a098:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0a8 <vPortEnableVFP+0x10>
 800a09c:	6801      	ldr	r1, [r0, #0]
 800a09e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0a2:	6001      	str	r1, [r0, #0]
 800a0a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0a6:	bf00      	nop
 800a0a8:	e000ed88 	.word	0xe000ed88

0800a0ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0b2:	f3ef 8305 	mrs	r3, IPSR
 800a0b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b0f      	cmp	r3, #15
 800a0bc:	d916      	bls.n	800a0ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0be:	4a19      	ldr	r2, [pc, #100]	; (800a124 <vPortValidateInterruptPriority+0x78>)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0c8:	4b17      	ldr	r3, [pc, #92]	; (800a128 <vPortValidateInterruptPriority+0x7c>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	7afa      	ldrb	r2, [r7, #11]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d20c      	bcs.n	800a0ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	b672      	cpsid	i
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	b662      	cpsie	i
 800a0e6:	607b      	str	r3, [r7, #4]
}
 800a0e8:	bf00      	nop
 800a0ea:	e7fe      	b.n	800a0ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <vPortValidateInterruptPriority+0x80>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <vPortValidateInterruptPriority+0x84>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d90c      	bls.n	800a116 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	b672      	cpsid	i
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	b662      	cpsie	i
 800a110:	603b      	str	r3, [r7, #0]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <vPortValidateInterruptPriority+0x68>
	}
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	e000e3f0 	.word	0xe000e3f0
 800a128:	20000f04 	.word	0x20000f04
 800a12c:	e000ed0c 	.word	0xe000ed0c
 800a130:	20000f08 	.word	0x20000f08

0800a134 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08a      	sub	sp, #40	; 0x28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a140:	f7fe fd88 	bl	8008c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a144:	4b5b      	ldr	r3, [pc, #364]	; (800a2b4 <pvPortMalloc+0x180>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a14c:	f000 f91a 	bl	800a384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a150:	4b59      	ldr	r3, [pc, #356]	; (800a2b8 <pvPortMalloc+0x184>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4013      	ands	r3, r2
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f040 8092 	bne.w	800a282 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01f      	beq.n	800a1a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a164:	2208      	movs	r2, #8
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4413      	add	r3, r2
 800a16a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	2b00      	cmp	r3, #0
 800a174:	d016      	beq.n	800a1a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f023 0307 	bic.w	r3, r3, #7
 800a17c:	3308      	adds	r3, #8
 800a17e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00c      	beq.n	800a1a4 <pvPortMalloc+0x70>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	b672      	cpsid	i
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	b662      	cpsie	i
 800a19e:	617b      	str	r3, [r7, #20]
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d06b      	beq.n	800a282 <pvPortMalloc+0x14e>
 800a1aa:	4b44      	ldr	r3, [pc, #272]	; (800a2bc <pvPortMalloc+0x188>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d866      	bhi.n	800a282 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1b4:	4b42      	ldr	r3, [pc, #264]	; (800a2c0 <pvPortMalloc+0x18c>)
 800a1b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1b8:	4b41      	ldr	r3, [pc, #260]	; (800a2c0 <pvPortMalloc+0x18c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1be:	e004      	b.n	800a1ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d903      	bls.n	800a1dc <pvPortMalloc+0xa8>
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1f1      	bne.n	800a1c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1dc:	4b35      	ldr	r3, [pc, #212]	; (800a2b4 <pvPortMalloc+0x180>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d04d      	beq.n	800a282 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2208      	movs	r2, #8
 800a1ec:	4413      	add	r3, r2
 800a1ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	1ad2      	subs	r2, r2, r3
 800a200:	2308      	movs	r3, #8
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	429a      	cmp	r2, r3
 800a206:	d921      	bls.n	800a24c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4413      	add	r3, r2
 800a20e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00c      	beq.n	800a234 <pvPortMalloc+0x100>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	b672      	cpsid	i
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	b662      	cpsie	i
 800a22e:	613b      	str	r3, [r7, #16]
}
 800a230:	bf00      	nop
 800a232:	e7fe      	b.n	800a232 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a246:	69b8      	ldr	r0, [r7, #24]
 800a248:	f000 f8fe 	bl	800a448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a24c:	4b1b      	ldr	r3, [pc, #108]	; (800a2bc <pvPortMalloc+0x188>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	4a19      	ldr	r2, [pc, #100]	; (800a2bc <pvPortMalloc+0x188>)
 800a258:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a25a:	4b18      	ldr	r3, [pc, #96]	; (800a2bc <pvPortMalloc+0x188>)
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	4b19      	ldr	r3, [pc, #100]	; (800a2c4 <pvPortMalloc+0x190>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d203      	bcs.n	800a26e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a266:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <pvPortMalloc+0x188>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <pvPortMalloc+0x190>)
 800a26c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <pvPortMalloc+0x184>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	431a      	orrs	r2, r3
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	2200      	movs	r2, #0
 800a280:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a282:	f7fe fcf5 	bl	8008c70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	f003 0307 	and.w	r3, r3, #7
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00c      	beq.n	800a2aa <pvPortMalloc+0x176>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	b672      	cpsid	i
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	b662      	cpsie	i
 800a2a4:	60fb      	str	r3, [r7, #12]
}
 800a2a6:	bf00      	nop
 800a2a8:	e7fe      	b.n	800a2a8 <pvPortMalloc+0x174>
	return pvReturn;
 800a2aa:	69fb      	ldr	r3, [r7, #28]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3728      	adds	r7, #40	; 0x28
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	20004b14 	.word	0x20004b14
 800a2b8:	20004b20 	.word	0x20004b20
 800a2bc:	20004b18 	.word	0x20004b18
 800a2c0:	20004b0c 	.word	0x20004b0c
 800a2c4:	20004b1c 	.word	0x20004b1c

0800a2c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d04c      	beq.n	800a374 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2da:	2308      	movs	r3, #8
 800a2dc:	425b      	negs	r3, r3
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	4b23      	ldr	r3, [pc, #140]	; (800a37c <vPortFree+0xb4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10c      	bne.n	800a310 <vPortFree+0x48>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	b672      	cpsid	i
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	b662      	cpsie	i
 800a30a:	60fb      	str	r3, [r7, #12]
}
 800a30c:	bf00      	nop
 800a30e:	e7fe      	b.n	800a30e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00c      	beq.n	800a332 <vPortFree+0x6a>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	b672      	cpsid	i
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	b662      	cpsie	i
 800a32c:	60bb      	str	r3, [r7, #8]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	4b11      	ldr	r3, [pc, #68]	; (800a37c <vPortFree+0xb4>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4013      	ands	r3, r2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d019      	beq.n	800a374 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d115      	bne.n	800a374 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	4b0b      	ldr	r3, [pc, #44]	; (800a37c <vPortFree+0xb4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	43db      	mvns	r3, r3
 800a352:	401a      	ands	r2, r3
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a358:	f7fe fc7c 	bl	8008c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <vPortFree+0xb8>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4413      	add	r3, r2
 800a366:	4a06      	ldr	r2, [pc, #24]	; (800a380 <vPortFree+0xb8>)
 800a368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a36a:	6938      	ldr	r0, [r7, #16]
 800a36c:	f000 f86c 	bl	800a448 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a370:	f7fe fc7e 	bl	8008c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a374:	bf00      	nop
 800a376:	3718      	adds	r7, #24
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20004b20 	.word	0x20004b20
 800a380:	20004b18 	.word	0x20004b18

0800a384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a38a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a38e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a390:	4b27      	ldr	r3, [pc, #156]	; (800a430 <prvHeapInit+0xac>)
 800a392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f003 0307 	and.w	r3, r3, #7
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00c      	beq.n	800a3b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3307      	adds	r3, #7
 800a3a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0307 	bic.w	r3, r3, #7
 800a3aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	4a1f      	ldr	r2, [pc, #124]	; (800a430 <prvHeapInit+0xac>)
 800a3b4:	4413      	add	r3, r2
 800a3b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3bc:	4a1d      	ldr	r2, [pc, #116]	; (800a434 <prvHeapInit+0xb0>)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3c2:	4b1c      	ldr	r3, [pc, #112]	; (800a434 <prvHeapInit+0xb0>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3d0:	2208      	movs	r2, #8
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 0307 	bic.w	r3, r3, #7
 800a3de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4a15      	ldr	r2, [pc, #84]	; (800a438 <prvHeapInit+0xb4>)
 800a3e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3e6:	4b14      	ldr	r3, [pc, #80]	; (800a438 <prvHeapInit+0xb4>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <prvHeapInit+0xb4>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	1ad2      	subs	r2, r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a404:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <prvHeapInit+0xb4>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4a0a      	ldr	r2, [pc, #40]	; (800a43c <prvHeapInit+0xb8>)
 800a412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	4a09      	ldr	r2, [pc, #36]	; (800a440 <prvHeapInit+0xbc>)
 800a41a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a41c:	4b09      	ldr	r3, [pc, #36]	; (800a444 <prvHeapInit+0xc0>)
 800a41e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a422:	601a      	str	r2, [r3, #0]
}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	20000f0c 	.word	0x20000f0c
 800a434:	20004b0c 	.word	0x20004b0c
 800a438:	20004b14 	.word	0x20004b14
 800a43c:	20004b1c 	.word	0x20004b1c
 800a440:	20004b18 	.word	0x20004b18
 800a444:	20004b20 	.word	0x20004b20

0800a448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a450:	4b28      	ldr	r3, [pc, #160]	; (800a4f4 <prvInsertBlockIntoFreeList+0xac>)
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e002      	b.n	800a45c <prvInsertBlockIntoFreeList+0x14>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	429a      	cmp	r2, r3
 800a464:	d8f7      	bhi.n	800a456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	4413      	add	r3, r2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	429a      	cmp	r2, r3
 800a476:	d108      	bne.n	800a48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	441a      	add	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	441a      	add	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d118      	bne.n	800a4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b15      	ldr	r3, [pc, #84]	; (800a4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d00d      	beq.n	800a4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	441a      	add	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	e008      	b.n	800a4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4c6:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	e003      	b.n	800a4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d002      	beq.n	800a4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4e6:	bf00      	nop
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	20004b0c 	.word	0x20004b0c
 800a4f8:	20004b14 	.word	0x20004b14

0800a4fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a500:	2200      	movs	r2, #0
 800a502:	4912      	ldr	r1, [pc, #72]	; (800a54c <MX_USB_DEVICE_Init+0x50>)
 800a504:	4812      	ldr	r0, [pc, #72]	; (800a550 <MX_USB_DEVICE_Init+0x54>)
 800a506:	f7fc f8e5 	bl	80066d4 <USBD_Init>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a510:	f7f6 fab8 	bl	8000a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a514:	490f      	ldr	r1, [pc, #60]	; (800a554 <MX_USB_DEVICE_Init+0x58>)
 800a516:	480e      	ldr	r0, [pc, #56]	; (800a550 <MX_USB_DEVICE_Init+0x54>)
 800a518:	f7fc f912 	bl	8006740 <USBD_RegisterClass>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a522:	f7f6 faaf 	bl	8000a84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a526:	490c      	ldr	r1, [pc, #48]	; (800a558 <MX_USB_DEVICE_Init+0x5c>)
 800a528:	4809      	ldr	r0, [pc, #36]	; (800a550 <MX_USB_DEVICE_Init+0x54>)
 800a52a:	f7fc f867 	bl	80065fc <USBD_CDC_RegisterInterface>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d001      	beq.n	800a538 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a534:	f7f6 faa6 	bl	8000a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a538:	4805      	ldr	r0, [pc, #20]	; (800a550 <MX_USB_DEVICE_Init+0x54>)
 800a53a:	f7fc f922 	bl	8006782 <USBD_Start>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a544:	f7f6 fa9e 	bl	8000a84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a548:	bf00      	nop
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20000134 	.word	0x20000134
 800a550:	20004d9c 	.word	0x20004d9c
 800a554:	20000018 	.word	0x20000018
 800a558:	20000120 	.word	0x20000120

0800a55c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a560:	2200      	movs	r2, #0
 800a562:	4905      	ldr	r1, [pc, #20]	; (800a578 <CDC_Init_FS+0x1c>)
 800a564:	4805      	ldr	r0, [pc, #20]	; (800a57c <CDC_Init_FS+0x20>)
 800a566:	f7fc f85e 	bl	8006626 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a56a:	4905      	ldr	r1, [pc, #20]	; (800a580 <CDC_Init_FS+0x24>)
 800a56c:	4803      	ldr	r0, [pc, #12]	; (800a57c <CDC_Init_FS+0x20>)
 800a56e:	f7fc f873 	bl	8006658 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a572:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a574:	4618      	mov	r0, r3
 800a576:	bd80      	pop	{r7, pc}
 800a578:	2000586c 	.word	0x2000586c
 800a57c:	20004d9c 	.word	0x20004d9c
 800a580:	2000506c 	.word	0x2000506c

0800a584 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a588:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	6039      	str	r1, [r7, #0]
 800a59e:	71fb      	strb	r3, [r7, #7]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	2b23      	cmp	r3, #35	; 0x23
 800a5a8:	d84a      	bhi.n	800a640 <CDC_Control_FS+0xac>
 800a5aa:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <CDC_Control_FS+0x1c>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a641 	.word	0x0800a641
 800a5b4:	0800a641 	.word	0x0800a641
 800a5b8:	0800a641 	.word	0x0800a641
 800a5bc:	0800a641 	.word	0x0800a641
 800a5c0:	0800a641 	.word	0x0800a641
 800a5c4:	0800a641 	.word	0x0800a641
 800a5c8:	0800a641 	.word	0x0800a641
 800a5cc:	0800a641 	.word	0x0800a641
 800a5d0:	0800a641 	.word	0x0800a641
 800a5d4:	0800a641 	.word	0x0800a641
 800a5d8:	0800a641 	.word	0x0800a641
 800a5dc:	0800a641 	.word	0x0800a641
 800a5e0:	0800a641 	.word	0x0800a641
 800a5e4:	0800a641 	.word	0x0800a641
 800a5e8:	0800a641 	.word	0x0800a641
 800a5ec:	0800a641 	.word	0x0800a641
 800a5f0:	0800a641 	.word	0x0800a641
 800a5f4:	0800a641 	.word	0x0800a641
 800a5f8:	0800a641 	.word	0x0800a641
 800a5fc:	0800a641 	.word	0x0800a641
 800a600:	0800a641 	.word	0x0800a641
 800a604:	0800a641 	.word	0x0800a641
 800a608:	0800a641 	.word	0x0800a641
 800a60c:	0800a641 	.word	0x0800a641
 800a610:	0800a641 	.word	0x0800a641
 800a614:	0800a641 	.word	0x0800a641
 800a618:	0800a641 	.word	0x0800a641
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a641 	.word	0x0800a641
 800a624:	0800a641 	.word	0x0800a641
 800a628:	0800a641 	.word	0x0800a641
 800a62c:	0800a641 	.word	0x0800a641
 800a630:	0800a641 	.word	0x0800a641
 800a634:	0800a641 	.word	0x0800a641
 800a638:	0800a641 	.word	0x0800a641
 800a63c:	0800a641 	.word	0x0800a641
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a640:	bf00      	nop
  }

  return (USBD_OK);
 800a642:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	4805      	ldr	r0, [pc, #20]	; (800a674 <CDC_Receive_FS+0x24>)
 800a65e:	f7fb fffb 	bl	8006658 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a662:	4804      	ldr	r0, [pc, #16]	; (800a674 <CDC_Receive_FS+0x24>)
 800a664:	f7fc f80c 	bl	8006680 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a668:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20004d9c 	.word	0x20004d9c

0800a678 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a678:	b480      	push	{r7}
 800a67a:	b087      	sub	sp, #28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	4613      	mov	r3, r2
 800a684:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
	...

0800a69c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	6039      	str	r1, [r7, #0]
 800a6a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2212      	movs	r2, #18
 800a6ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a6ae:	4b03      	ldr	r3, [pc, #12]	; (800a6bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	20000154 	.word	0x20000154

0800a6c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	6039      	str	r1, [r7, #0]
 800a6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	2204      	movs	r2, #4
 800a6d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a6d2:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	20000174 	.word	0x20000174

0800a6e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	4907      	ldr	r1, [pc, #28]	; (800a718 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6fa:	4808      	ldr	r0, [pc, #32]	; (800a71c <USBD_FS_ProductStrDescriptor+0x38>)
 800a6fc:	f7fd f848 	bl	8007790 <USBD_GetString>
 800a700:	e004      	b.n	800a70c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	4904      	ldr	r1, [pc, #16]	; (800a718 <USBD_FS_ProductStrDescriptor+0x34>)
 800a706:	4805      	ldr	r0, [pc, #20]	; (800a71c <USBD_FS_ProductStrDescriptor+0x38>)
 800a708:	f7fd f842 	bl	8007790 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a70c:	4b02      	ldr	r3, [pc, #8]	; (800a718 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	2000606c 	.word	0x2000606c
 800a71c:	0800bf44 	.word	0x0800bf44

0800a720 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	6039      	str	r1, [r7, #0]
 800a72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	4904      	ldr	r1, [pc, #16]	; (800a740 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a730:	4804      	ldr	r0, [pc, #16]	; (800a744 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a732:	f7fd f82d 	bl	8007790 <USBD_GetString>
  return USBD_StrDesc;
 800a736:	4b02      	ldr	r3, [pc, #8]	; (800a740 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	2000606c 	.word	0x2000606c
 800a744:	0800bf5c 	.word	0x0800bf5c

0800a748 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	6039      	str	r1, [r7, #0]
 800a752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	221a      	movs	r2, #26
 800a758:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a75a:	f000 f855 	bl	800a808 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a75e:	4b02      	ldr	r3, [pc, #8]	; (800a768 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20000178 	.word	0x20000178

0800a76c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	6039      	str	r1, [r7, #0]
 800a776:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d105      	bne.n	800a78a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	4907      	ldr	r1, [pc, #28]	; (800a7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a782:	4808      	ldr	r0, [pc, #32]	; (800a7a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a784:	f7fd f804 	bl	8007790 <USBD_GetString>
 800a788:	e004      	b.n	800a794 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	4904      	ldr	r1, [pc, #16]	; (800a7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a78e:	4805      	ldr	r0, [pc, #20]	; (800a7a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a790:	f7fc fffe 	bl	8007790 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a794:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	2000606c 	.word	0x2000606c
 800a7a4:	0800bf70 	.word	0x0800bf70

0800a7a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	6039      	str	r1, [r7, #0]
 800a7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d105      	bne.n	800a7c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	4907      	ldr	r1, [pc, #28]	; (800a7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7be:	4808      	ldr	r0, [pc, #32]	; (800a7e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7c0:	f7fc ffe6 	bl	8007790 <USBD_GetString>
 800a7c4:	e004      	b.n	800a7d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4904      	ldr	r1, [pc, #16]	; (800a7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a7ca:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a7cc:	f7fc ffe0 	bl	8007790 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7d0:	4b02      	ldr	r3, [pc, #8]	; (800a7dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	2000606c 	.word	0x2000606c
 800a7e0:	0800bf7c 	.word	0x0800bf7c

0800a7e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	6039      	str	r1, [r7, #0]
 800a7ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	220c      	movs	r2, #12
 800a7f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a7f6:	4b03      	ldr	r3, [pc, #12]	; (800a804 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr
 800a804:	20000168 	.word	0x20000168

0800a808 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a80e:	4b0f      	ldr	r3, [pc, #60]	; (800a84c <Get_SerialNum+0x44>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a814:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <Get_SerialNum+0x48>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a81a:	4b0e      	ldr	r3, [pc, #56]	; (800a854 <Get_SerialNum+0x4c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4413      	add	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d009      	beq.n	800a842 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a82e:	2208      	movs	r2, #8
 800a830:	4909      	ldr	r1, [pc, #36]	; (800a858 <Get_SerialNum+0x50>)
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f000 f814 	bl	800a860 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a838:	2204      	movs	r2, #4
 800a83a:	4908      	ldr	r1, [pc, #32]	; (800a85c <Get_SerialNum+0x54>)
 800a83c:	68b8      	ldr	r0, [r7, #8]
 800a83e:	f000 f80f 	bl	800a860 <IntToUnicode>
  }
}
 800a842:	bf00      	nop
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	1ff0f420 	.word	0x1ff0f420
 800a850:	1ff0f424 	.word	0x1ff0f424
 800a854:	1ff0f428 	.word	0x1ff0f428
 800a858:	2000017a 	.word	0x2000017a
 800a85c:	2000018a 	.word	0x2000018a

0800a860 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a860:	b480      	push	{r7}
 800a862:	b087      	sub	sp, #28
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	4613      	mov	r3, r2
 800a86c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a872:	2300      	movs	r3, #0
 800a874:	75fb      	strb	r3, [r7, #23]
 800a876:	e027      	b.n	800a8c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	0f1b      	lsrs	r3, r3, #28
 800a87c:	2b09      	cmp	r3, #9
 800a87e:	d80b      	bhi.n	800a898 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	0f1b      	lsrs	r3, r3, #28
 800a884:	b2da      	uxtb	r2, r3
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	4619      	mov	r1, r3
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	440b      	add	r3, r1
 800a890:	3230      	adds	r2, #48	; 0x30
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	701a      	strb	r2, [r3, #0]
 800a896:	e00a      	b.n	800a8ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	0f1b      	lsrs	r3, r3, #28
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3237      	adds	r2, #55	; 0x37
 800a8aa:	b2d2      	uxtb	r2, r2
 800a8ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	4413      	add	r3, r2
 800a8be:	2200      	movs	r2, #0
 800a8c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	75fb      	strb	r3, [r7, #23]
 800a8c8:	7dfa      	ldrb	r2, [r7, #23]
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d3d3      	bcc.n	800a878 <IntToUnicode+0x18>
  }
}
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08a      	sub	sp, #40	; 0x28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8e8:	f107 0314 	add.w	r3, r7, #20
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	605a      	str	r2, [r3, #4]
 800a8f2:	609a      	str	r2, [r3, #8]
 800a8f4:	60da      	str	r2, [r3, #12]
 800a8f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a900:	d149      	bne.n	800a996 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a902:	4b27      	ldr	r3, [pc, #156]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a906:	4a26      	ldr	r2, [pc, #152]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a908:	f043 0301 	orr.w	r3, r3, #1
 800a90c:	6313      	str	r3, [r2, #48]	; 0x30
 800a90e:	4b24      	ldr	r3, [pc, #144]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a91a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a91e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a920:	2302      	movs	r3, #2
 800a922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a924:	2300      	movs	r3, #0
 800a926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a928:	2303      	movs	r3, #3
 800a92a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a92c:	230a      	movs	r3, #10
 800a92e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a930:	f107 0314 	add.w	r3, r7, #20
 800a934:	4619      	mov	r1, r3
 800a936:	481b      	ldr	r0, [pc, #108]	; (800a9a4 <HAL_PCD_MspInit+0xc4>)
 800a938:	f7f6 fc2a 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a93c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a942:	2300      	movs	r3, #0
 800a944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a946:	2300      	movs	r3, #0
 800a948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a94a:	f107 0314 	add.w	r3, r7, #20
 800a94e:	4619      	mov	r1, r3
 800a950:	4814      	ldr	r0, [pc, #80]	; (800a9a4 <HAL_PCD_MspInit+0xc4>)
 800a952:	f7f6 fc1d 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a956:	4b12      	ldr	r3, [pc, #72]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95a:	4a11      	ldr	r2, [pc, #68]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a960:	6353      	str	r3, [r2, #52]	; 0x34
 800a962:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4b0c      	ldr	r3, [pc, #48]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a972:	4a0b      	ldr	r2, [pc, #44]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a978:	6453      	str	r3, [r2, #68]	; 0x44
 800a97a:	4b09      	ldr	r3, [pc, #36]	; (800a9a0 <HAL_PCD_MspInit+0xc0>)
 800a97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a982:	60bb      	str	r3, [r7, #8]
 800a984:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a986:	2200      	movs	r2, #0
 800a988:	2105      	movs	r1, #5
 800a98a:	2043      	movs	r0, #67	; 0x43
 800a98c:	f7f6 fbd6 	bl	800113c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a990:	2043      	movs	r0, #67	; 0x43
 800a992:	f7f6 fbef 	bl	8001174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a996:	bf00      	nop
 800a998:	3728      	adds	r7, #40	; 0x28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	40023800 	.word	0x40023800
 800a9a4:	40020000 	.word	0x40020000

0800a9a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7fb ff2a 	bl	8006818 <USBD_LL_SetupStage>
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	6879      	ldr	r1, [r7, #4]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	1a9b      	subs	r3, r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	440b      	add	r3, r1
 800a9ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	f7fb ff64 	bl	80068c2 <USBD_LL_DataOutStage>
}
 800a9fa:	bf00      	nop
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	1a9b      	subs	r3, r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	440b      	add	r3, r1
 800aa22:	3348      	adds	r3, #72	; 0x48
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	78fb      	ldrb	r3, [r7, #3]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	f7fb ffad 	bl	8006988 <USBD_LL_DataInStage>
}
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fc f8b1 	bl	8006bac <USBD_LL_SOF>
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d102      	bne.n	800aa6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73fb      	strb	r3, [r7, #15]
 800aa6a:	e008      	b.n	800aa7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d102      	bne.n	800aa7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aa74:	2301      	movs	r3, #1
 800aa76:	73fb      	strb	r3, [r7, #15]
 800aa78:	e001      	b.n	800aa7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aa7a:	f7f6 f803 	bl	8000a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa84:	7bfa      	ldrb	r2, [r7, #15]
 800aa86:	4611      	mov	r1, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fc f854 	bl	8006b36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fc f80d 	bl	8006ab4 <USBD_LL_Reset>
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fc f84f 	bl	8006b56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d005      	beq.n	800aae4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aad8:	4b04      	ldr	r3, [pc, #16]	; (800aaec <HAL_PCD_SuspendCallback+0x48>)
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	4a03      	ldr	r2, [pc, #12]	; (800aaec <HAL_PCD_SuspendCallback+0x48>)
 800aade:	f043 0306 	orr.w	r3, r3, #6
 800aae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	e000ed00 	.word	0xe000ed00

0800aaf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fc f83e 	bl	8006b80 <USBD_LL_Resume>
}
 800ab04:	bf00      	nop
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	4611      	mov	r1, r2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fc f869 	bl	8006bfa <USBD_LL_IsoOUTIncomplete>
}
 800ab28:	bf00      	nop
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab42:	78fa      	ldrb	r2, [r7, #3]
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fc f84a 	bl	8006be0 <USBD_LL_IsoINIncomplete>
}
 800ab4c:	bf00      	nop
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fc f856 	bl	8006c14 <USBD_LL_DevConnected>
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fc f853 	bl	8006c2a <USBD_LL_DevDisconnected>
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d13c      	bne.n	800ac16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab9c:	4a20      	ldr	r2, [pc, #128]	; (800ac20 <USBD_LL_Init+0x94>)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a1e      	ldr	r2, [pc, #120]	; (800ac20 <USBD_LL_Init+0x94>)
 800aba8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abac:	4b1c      	ldr	r3, [pc, #112]	; (800ac20 <USBD_LL_Init+0x94>)
 800abae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800abb4:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <USBD_LL_Init+0x94>)
 800abb6:	2206      	movs	r2, #6
 800abb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800abba:	4b19      	ldr	r3, [pc, #100]	; (800ac20 <USBD_LL_Init+0x94>)
 800abbc:	2202      	movs	r2, #2
 800abbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abc0:	4b17      	ldr	r3, [pc, #92]	; (800ac20 <USBD_LL_Init+0x94>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abc6:	4b16      	ldr	r3, [pc, #88]	; (800ac20 <USBD_LL_Init+0x94>)
 800abc8:	2202      	movs	r2, #2
 800abca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800abcc:	4b14      	ldr	r3, [pc, #80]	; (800ac20 <USBD_LL_Init+0x94>)
 800abce:	2201      	movs	r2, #1
 800abd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abd2:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <USBD_LL_Init+0x94>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abd8:	4b11      	ldr	r3, [pc, #68]	; (800ac20 <USBD_LL_Init+0x94>)
 800abda:	2200      	movs	r2, #0
 800abdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800abde:	4b10      	ldr	r3, [pc, #64]	; (800ac20 <USBD_LL_Init+0x94>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abe4:	4b0e      	ldr	r3, [pc, #56]	; (800ac20 <USBD_LL_Init+0x94>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abea:	480d      	ldr	r0, [pc, #52]	; (800ac20 <USBD_LL_Init+0x94>)
 800abec:	f7f6 fcaf 	bl	800154e <HAL_PCD_Init>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800abf6:	f7f5 ff45 	bl	8000a84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800abfa:	2180      	movs	r1, #128	; 0x80
 800abfc:	4808      	ldr	r0, [pc, #32]	; (800ac20 <USBD_LL_Init+0x94>)
 800abfe:	f7f7 fe20 	bl	8002842 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac02:	2240      	movs	r2, #64	; 0x40
 800ac04:	2100      	movs	r1, #0
 800ac06:	4806      	ldr	r0, [pc, #24]	; (800ac20 <USBD_LL_Init+0x94>)
 800ac08:	f7f7 fdd4 	bl	80027b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac0c:	2280      	movs	r2, #128	; 0x80
 800ac0e:	2101      	movs	r1, #1
 800ac10:	4803      	ldr	r0, [pc, #12]	; (800ac20 <USBD_LL_Init+0x94>)
 800ac12:	f7f7 fdcf 	bl	80027b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	2000626c 	.word	0x2000626c

0800ac24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7f6 fdab 	bl	8001796 <HAL_PCD_Start>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 f97e 	bl	800af48 <USBD_Get_USB_Status>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	4608      	mov	r0, r1
 800ac64:	4611      	mov	r1, r2
 800ac66:	461a      	mov	r2, r3
 800ac68:	4603      	mov	r3, r0
 800ac6a:	70fb      	strb	r3, [r7, #3]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70bb      	strb	r3, [r7, #2]
 800ac70:	4613      	mov	r3, r2
 800ac72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ac82:	78bb      	ldrb	r3, [r7, #2]
 800ac84:	883a      	ldrh	r2, [r7, #0]
 800ac86:	78f9      	ldrb	r1, [r7, #3]
 800ac88:	f7f7 f99b 	bl	8001fc2 <HAL_PCD_EP_Open>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 f958 	bl	800af48 <USBD_Get_USB_Status>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acc0:	78fa      	ldrb	r2, [r7, #3]
 800acc2:	4611      	mov	r1, r2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7f7 f9e4 	bl	8002092 <HAL_PCD_EP_Close>
 800acca:	4603      	mov	r3, r0
 800accc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 f939 	bl	800af48 <USBD_Get_USB_Status>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acda:	7bbb      	ldrb	r3, [r7, #14]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acfe:	78fa      	ldrb	r2, [r7, #3]
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f7 fabc 	bl	8002280 <HAL_PCD_EP_SetStall>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 f91a 	bl	800af48 <USBD_Get_USB_Status>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad3c:	78fa      	ldrb	r2, [r7, #3]
 800ad3e:	4611      	mov	r1, r2
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7f7 fb01 	bl	8002348 <HAL_PCD_EP_ClrStall>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 f8fb 	bl	800af48 <USBD_Get_USB_Status>
 800ad52:	4603      	mov	r3, r0
 800ad54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	da0b      	bge.n	800ad94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad82:	68f9      	ldr	r1, [r7, #12]
 800ad84:	4613      	mov	r3, r2
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	1a9b      	subs	r3, r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	440b      	add	r3, r1
 800ad8e:	333e      	adds	r3, #62	; 0x3e
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	e00b      	b.n	800adac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	1a9b      	subs	r3, r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	440b      	add	r3, r1
 800ada6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800adaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800add2:	78fa      	ldrb	r2, [r7, #3]
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f7f7 f8ce 	bl	8001f78 <HAL_PCD_SetAddress>
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f8b0 	bl	800af48 <USBD_Get_USB_Status>
 800ade8:	4603      	mov	r3, r0
 800adea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adec:	7bbb      	ldrb	r3, [r7, #14]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b086      	sub	sp, #24
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
 800ae02:	460b      	mov	r3, r1
 800ae04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae14:	7af9      	ldrb	r1, [r7, #11]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	f7f7 f9e7 	bl	80021ec <HAL_PCD_EP_Transmit>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 f88f 	bl	800af48 <USBD_Get_USB_Status>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae2e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	460b      	mov	r3, r1
 800ae46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae56:	7af9      	ldrb	r1, [r7, #11]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	f7f7 f963 	bl	8002126 <HAL_PCD_EP_Receive>
 800ae60:	4603      	mov	r3, r0
 800ae62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f86e 	bl	800af48 <USBD_Get_USB_Status>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae70:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	4611      	mov	r1, r2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f7 f993 	bl	80021bc <HAL_PCD_EP_GetRxCount>
 800ae96:	4603      	mov	r3, r0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800aeac:	78fb      	ldrb	r3, [r7, #3]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d002      	beq.n	800aeb8 <HAL_PCDEx_LPM_Callback+0x18>
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d01f      	beq.n	800aef6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800aeb6:	e03b      	b.n	800af30 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d007      	beq.n	800aed0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aec0:	f000 f83c 	bl	800af3c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aec4:	4b1c      	ldr	r3, [pc, #112]	; (800af38 <HAL_PCDEx_LPM_Callback+0x98>)
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	4a1b      	ldr	r2, [pc, #108]	; (800af38 <HAL_PCDEx_LPM_Callback+0x98>)
 800aeca:	f023 0306 	bic.w	r3, r3, #6
 800aece:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	6812      	ldr	r2, [r2, #0]
 800aede:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aee2:	f023 0301 	bic.w	r3, r3, #1
 800aee6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fb fe46 	bl	8006b80 <USBD_LL_Resume>
    break;
 800aef4:	e01c      	b.n	800af30 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	6812      	ldr	r2, [r2, #0]
 800af04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af08:	f043 0301 	orr.w	r3, r3, #1
 800af0c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800af14:	4618      	mov	r0, r3
 800af16:	f7fb fe1e 	bl	8006b56 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a1b      	ldr	r3, [r3, #32]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <HAL_PCDEx_LPM_Callback+0x98>)
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	4a04      	ldr	r2, [pc, #16]	; (800af38 <HAL_PCDEx_LPM_Callback+0x98>)
 800af28:	f043 0306 	orr.w	r3, r3, #6
 800af2c:	6113      	str	r3, [r2, #16]
    break;
 800af2e:	bf00      	nop
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	e000ed00 	.word	0xe000ed00

0800af3c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800af40:	f7f5 fb88 	bl	8000654 <SystemClock_Config>
}
 800af44:	bf00      	nop
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	4603      	mov	r3, r0
 800af50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	2b03      	cmp	r3, #3
 800af5a:	d817      	bhi.n	800af8c <USBD_Get_USB_Status+0x44>
 800af5c:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <USBD_Get_USB_Status+0x1c>)
 800af5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af62:	bf00      	nop
 800af64:	0800af75 	.word	0x0800af75
 800af68:	0800af7b 	.word	0x0800af7b
 800af6c:	0800af81 	.word	0x0800af81
 800af70:	0800af87 	.word	0x0800af87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73fb      	strb	r3, [r7, #15]
    break;
 800af78:	e00b      	b.n	800af92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af7a:	2303      	movs	r3, #3
 800af7c:	73fb      	strb	r3, [r7, #15]
    break;
 800af7e:	e008      	b.n	800af92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af80:	2301      	movs	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]
    break;
 800af84:	e005      	b.n	800af92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af86:	2303      	movs	r3, #3
 800af88:	73fb      	strb	r3, [r7, #15]
    break;
 800af8a:	e002      	b.n	800af92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af8c:	2303      	movs	r3, #3
 800af8e:	73fb      	strb	r3, [r7, #15]
    break;
 800af90:	bf00      	nop
  }
  return usb_status;
 800af92:	7bfb      	ldrb	r3, [r7, #15]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <__errno>:
 800afa0:	4b01      	ldr	r3, [pc, #4]	; (800afa8 <__errno+0x8>)
 800afa2:	6818      	ldr	r0, [r3, #0]
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000194 	.word	0x20000194

0800afac <__libc_init_array>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	4d0d      	ldr	r5, [pc, #52]	; (800afe4 <__libc_init_array+0x38>)
 800afb0:	4c0d      	ldr	r4, [pc, #52]	; (800afe8 <__libc_init_array+0x3c>)
 800afb2:	1b64      	subs	r4, r4, r5
 800afb4:	10a4      	asrs	r4, r4, #2
 800afb6:	2600      	movs	r6, #0
 800afb8:	42a6      	cmp	r6, r4
 800afba:	d109      	bne.n	800afd0 <__libc_init_array+0x24>
 800afbc:	4d0b      	ldr	r5, [pc, #44]	; (800afec <__libc_init_array+0x40>)
 800afbe:	4c0c      	ldr	r4, [pc, #48]	; (800aff0 <__libc_init_array+0x44>)
 800afc0:	f000 ff94 	bl	800beec <_init>
 800afc4:	1b64      	subs	r4, r4, r5
 800afc6:	10a4      	asrs	r4, r4, #2
 800afc8:	2600      	movs	r6, #0
 800afca:	42a6      	cmp	r6, r4
 800afcc:	d105      	bne.n	800afda <__libc_init_array+0x2e>
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd4:	4798      	blx	r3
 800afd6:	3601      	adds	r6, #1
 800afd8:	e7ee      	b.n	800afb8 <__libc_init_array+0xc>
 800afda:	f855 3b04 	ldr.w	r3, [r5], #4
 800afde:	4798      	blx	r3
 800afe0:	3601      	adds	r6, #1
 800afe2:	e7f2      	b.n	800afca <__libc_init_array+0x1e>
 800afe4:	0800c0b0 	.word	0x0800c0b0
 800afe8:	0800c0b0 	.word	0x0800c0b0
 800afec:	0800c0b0 	.word	0x0800c0b0
 800aff0:	0800c0b4 	.word	0x0800c0b4

0800aff4 <malloc>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	; (800b000 <malloc+0xc>)
 800aff6:	4601      	mov	r1, r0
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	f000 b871 	b.w	800b0e0 <_malloc_r>
 800affe:	bf00      	nop
 800b000:	20000194 	.word	0x20000194

0800b004 <free>:
 800b004:	4b02      	ldr	r3, [pc, #8]	; (800b010 <free+0xc>)
 800b006:	4601      	mov	r1, r0
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	f000 b819 	b.w	800b040 <_free_r>
 800b00e:	bf00      	nop
 800b010:	20000194 	.word	0x20000194

0800b014 <memcpy>:
 800b014:	440a      	add	r2, r1
 800b016:	4291      	cmp	r1, r2
 800b018:	f100 33ff 	add.w	r3, r0, #4294967295
 800b01c:	d100      	bne.n	800b020 <memcpy+0xc>
 800b01e:	4770      	bx	lr
 800b020:	b510      	push	{r4, lr}
 800b022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b02a:	4291      	cmp	r1, r2
 800b02c:	d1f9      	bne.n	800b022 <memcpy+0xe>
 800b02e:	bd10      	pop	{r4, pc}

0800b030 <memset>:
 800b030:	4402      	add	r2, r0
 800b032:	4603      	mov	r3, r0
 800b034:	4293      	cmp	r3, r2
 800b036:	d100      	bne.n	800b03a <memset+0xa>
 800b038:	4770      	bx	lr
 800b03a:	f803 1b01 	strb.w	r1, [r3], #1
 800b03e:	e7f9      	b.n	800b034 <memset+0x4>

0800b040 <_free_r>:
 800b040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b042:	2900      	cmp	r1, #0
 800b044:	d048      	beq.n	800b0d8 <_free_r+0x98>
 800b046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b04a:	9001      	str	r0, [sp, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f1a1 0404 	sub.w	r4, r1, #4
 800b052:	bfb8      	it	lt
 800b054:	18e4      	addlt	r4, r4, r3
 800b056:	f000 f9bd 	bl	800b3d4 <__malloc_lock>
 800b05a:	4a20      	ldr	r2, [pc, #128]	; (800b0dc <_free_r+0x9c>)
 800b05c:	9801      	ldr	r0, [sp, #4]
 800b05e:	6813      	ldr	r3, [r2, #0]
 800b060:	4615      	mov	r5, r2
 800b062:	b933      	cbnz	r3, 800b072 <_free_r+0x32>
 800b064:	6063      	str	r3, [r4, #4]
 800b066:	6014      	str	r4, [r2, #0]
 800b068:	b003      	add	sp, #12
 800b06a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b06e:	f000 b9b7 	b.w	800b3e0 <__malloc_unlock>
 800b072:	42a3      	cmp	r3, r4
 800b074:	d90b      	bls.n	800b08e <_free_r+0x4e>
 800b076:	6821      	ldr	r1, [r4, #0]
 800b078:	1862      	adds	r2, r4, r1
 800b07a:	4293      	cmp	r3, r2
 800b07c:	bf04      	itt	eq
 800b07e:	681a      	ldreq	r2, [r3, #0]
 800b080:	685b      	ldreq	r3, [r3, #4]
 800b082:	6063      	str	r3, [r4, #4]
 800b084:	bf04      	itt	eq
 800b086:	1852      	addeq	r2, r2, r1
 800b088:	6022      	streq	r2, [r4, #0]
 800b08a:	602c      	str	r4, [r5, #0]
 800b08c:	e7ec      	b.n	800b068 <_free_r+0x28>
 800b08e:	461a      	mov	r2, r3
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	b10b      	cbz	r3, 800b098 <_free_r+0x58>
 800b094:	42a3      	cmp	r3, r4
 800b096:	d9fa      	bls.n	800b08e <_free_r+0x4e>
 800b098:	6811      	ldr	r1, [r2, #0]
 800b09a:	1855      	adds	r5, r2, r1
 800b09c:	42a5      	cmp	r5, r4
 800b09e:	d10b      	bne.n	800b0b8 <_free_r+0x78>
 800b0a0:	6824      	ldr	r4, [r4, #0]
 800b0a2:	4421      	add	r1, r4
 800b0a4:	1854      	adds	r4, r2, r1
 800b0a6:	42a3      	cmp	r3, r4
 800b0a8:	6011      	str	r1, [r2, #0]
 800b0aa:	d1dd      	bne.n	800b068 <_free_r+0x28>
 800b0ac:	681c      	ldr	r4, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	6053      	str	r3, [r2, #4]
 800b0b2:	4421      	add	r1, r4
 800b0b4:	6011      	str	r1, [r2, #0]
 800b0b6:	e7d7      	b.n	800b068 <_free_r+0x28>
 800b0b8:	d902      	bls.n	800b0c0 <_free_r+0x80>
 800b0ba:	230c      	movs	r3, #12
 800b0bc:	6003      	str	r3, [r0, #0]
 800b0be:	e7d3      	b.n	800b068 <_free_r+0x28>
 800b0c0:	6825      	ldr	r5, [r4, #0]
 800b0c2:	1961      	adds	r1, r4, r5
 800b0c4:	428b      	cmp	r3, r1
 800b0c6:	bf04      	itt	eq
 800b0c8:	6819      	ldreq	r1, [r3, #0]
 800b0ca:	685b      	ldreq	r3, [r3, #4]
 800b0cc:	6063      	str	r3, [r4, #4]
 800b0ce:	bf04      	itt	eq
 800b0d0:	1949      	addeq	r1, r1, r5
 800b0d2:	6021      	streq	r1, [r4, #0]
 800b0d4:	6054      	str	r4, [r2, #4]
 800b0d6:	e7c7      	b.n	800b068 <_free_r+0x28>
 800b0d8:	b003      	add	sp, #12
 800b0da:	bd30      	pop	{r4, r5, pc}
 800b0dc:	20004b24 	.word	0x20004b24

0800b0e0 <_malloc_r>:
 800b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e2:	1ccd      	adds	r5, r1, #3
 800b0e4:	f025 0503 	bic.w	r5, r5, #3
 800b0e8:	3508      	adds	r5, #8
 800b0ea:	2d0c      	cmp	r5, #12
 800b0ec:	bf38      	it	cc
 800b0ee:	250c      	movcc	r5, #12
 800b0f0:	2d00      	cmp	r5, #0
 800b0f2:	4606      	mov	r6, r0
 800b0f4:	db01      	blt.n	800b0fa <_malloc_r+0x1a>
 800b0f6:	42a9      	cmp	r1, r5
 800b0f8:	d903      	bls.n	800b102 <_malloc_r+0x22>
 800b0fa:	230c      	movs	r3, #12
 800b0fc:	6033      	str	r3, [r6, #0]
 800b0fe:	2000      	movs	r0, #0
 800b100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b102:	f000 f967 	bl	800b3d4 <__malloc_lock>
 800b106:	4921      	ldr	r1, [pc, #132]	; (800b18c <_malloc_r+0xac>)
 800b108:	680a      	ldr	r2, [r1, #0]
 800b10a:	4614      	mov	r4, r2
 800b10c:	b99c      	cbnz	r4, 800b136 <_malloc_r+0x56>
 800b10e:	4f20      	ldr	r7, [pc, #128]	; (800b190 <_malloc_r+0xb0>)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	b923      	cbnz	r3, 800b11e <_malloc_r+0x3e>
 800b114:	4621      	mov	r1, r4
 800b116:	4630      	mov	r0, r6
 800b118:	f000 f854 	bl	800b1c4 <_sbrk_r>
 800b11c:	6038      	str	r0, [r7, #0]
 800b11e:	4629      	mov	r1, r5
 800b120:	4630      	mov	r0, r6
 800b122:	f000 f84f 	bl	800b1c4 <_sbrk_r>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	d123      	bne.n	800b172 <_malloc_r+0x92>
 800b12a:	230c      	movs	r3, #12
 800b12c:	6033      	str	r3, [r6, #0]
 800b12e:	4630      	mov	r0, r6
 800b130:	f000 f956 	bl	800b3e0 <__malloc_unlock>
 800b134:	e7e3      	b.n	800b0fe <_malloc_r+0x1e>
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	1b5b      	subs	r3, r3, r5
 800b13a:	d417      	bmi.n	800b16c <_malloc_r+0x8c>
 800b13c:	2b0b      	cmp	r3, #11
 800b13e:	d903      	bls.n	800b148 <_malloc_r+0x68>
 800b140:	6023      	str	r3, [r4, #0]
 800b142:	441c      	add	r4, r3
 800b144:	6025      	str	r5, [r4, #0]
 800b146:	e004      	b.n	800b152 <_malloc_r+0x72>
 800b148:	6863      	ldr	r3, [r4, #4]
 800b14a:	42a2      	cmp	r2, r4
 800b14c:	bf0c      	ite	eq
 800b14e:	600b      	streq	r3, [r1, #0]
 800b150:	6053      	strne	r3, [r2, #4]
 800b152:	4630      	mov	r0, r6
 800b154:	f000 f944 	bl	800b3e0 <__malloc_unlock>
 800b158:	f104 000b 	add.w	r0, r4, #11
 800b15c:	1d23      	adds	r3, r4, #4
 800b15e:	f020 0007 	bic.w	r0, r0, #7
 800b162:	1ac2      	subs	r2, r0, r3
 800b164:	d0cc      	beq.n	800b100 <_malloc_r+0x20>
 800b166:	1a1b      	subs	r3, r3, r0
 800b168:	50a3      	str	r3, [r4, r2]
 800b16a:	e7c9      	b.n	800b100 <_malloc_r+0x20>
 800b16c:	4622      	mov	r2, r4
 800b16e:	6864      	ldr	r4, [r4, #4]
 800b170:	e7cc      	b.n	800b10c <_malloc_r+0x2c>
 800b172:	1cc4      	adds	r4, r0, #3
 800b174:	f024 0403 	bic.w	r4, r4, #3
 800b178:	42a0      	cmp	r0, r4
 800b17a:	d0e3      	beq.n	800b144 <_malloc_r+0x64>
 800b17c:	1a21      	subs	r1, r4, r0
 800b17e:	4630      	mov	r0, r6
 800b180:	f000 f820 	bl	800b1c4 <_sbrk_r>
 800b184:	3001      	adds	r0, #1
 800b186:	d1dd      	bne.n	800b144 <_malloc_r+0x64>
 800b188:	e7cf      	b.n	800b12a <_malloc_r+0x4a>
 800b18a:	bf00      	nop
 800b18c:	20004b24 	.word	0x20004b24
 800b190:	20004b28 	.word	0x20004b28

0800b194 <iprintf>:
 800b194:	b40f      	push	{r0, r1, r2, r3}
 800b196:	4b0a      	ldr	r3, [pc, #40]	; (800b1c0 <iprintf+0x2c>)
 800b198:	b513      	push	{r0, r1, r4, lr}
 800b19a:	681c      	ldr	r4, [r3, #0]
 800b19c:	b124      	cbz	r4, 800b1a8 <iprintf+0x14>
 800b19e:	69a3      	ldr	r3, [r4, #24]
 800b1a0:	b913      	cbnz	r3, 800b1a8 <iprintf+0x14>
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f000 f876 	bl	800b294 <__sinit>
 800b1a8:	ab05      	add	r3, sp, #20
 800b1aa:	9a04      	ldr	r2, [sp, #16]
 800b1ac:	68a1      	ldr	r1, [r4, #8]
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 f945 	bl	800b440 <_vfiprintf_r>
 800b1b6:	b002      	add	sp, #8
 800b1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1bc:	b004      	add	sp, #16
 800b1be:	4770      	bx	lr
 800b1c0:	20000194 	.word	0x20000194

0800b1c4 <_sbrk_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d06      	ldr	r5, [pc, #24]	; (800b1e0 <_sbrk_r+0x1c>)
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	602b      	str	r3, [r5, #0]
 800b1d0:	f7f5 fe3a 	bl	8000e48 <_sbrk>
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d102      	bne.n	800b1de <_sbrk_r+0x1a>
 800b1d8:	682b      	ldr	r3, [r5, #0]
 800b1da:	b103      	cbz	r3, 800b1de <_sbrk_r+0x1a>
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	bd38      	pop	{r3, r4, r5, pc}
 800b1e0:	2000667c 	.word	0x2000667c

0800b1e4 <std>:
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	b510      	push	{r4, lr}
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1f2:	6083      	str	r3, [r0, #8]
 800b1f4:	8181      	strh	r1, [r0, #12]
 800b1f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b1f8:	81c2      	strh	r2, [r0, #14]
 800b1fa:	6183      	str	r3, [r0, #24]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	2208      	movs	r2, #8
 800b200:	305c      	adds	r0, #92	; 0x5c
 800b202:	f7ff ff15 	bl	800b030 <memset>
 800b206:	4b05      	ldr	r3, [pc, #20]	; (800b21c <std+0x38>)
 800b208:	6263      	str	r3, [r4, #36]	; 0x24
 800b20a:	4b05      	ldr	r3, [pc, #20]	; (800b220 <std+0x3c>)
 800b20c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b20e:	4b05      	ldr	r3, [pc, #20]	; (800b224 <std+0x40>)
 800b210:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b212:	4b05      	ldr	r3, [pc, #20]	; (800b228 <std+0x44>)
 800b214:	6224      	str	r4, [r4, #32]
 800b216:	6323      	str	r3, [r4, #48]	; 0x30
 800b218:	bd10      	pop	{r4, pc}
 800b21a:	bf00      	nop
 800b21c:	0800b9c9 	.word	0x0800b9c9
 800b220:	0800b9eb 	.word	0x0800b9eb
 800b224:	0800ba23 	.word	0x0800ba23
 800b228:	0800ba47 	.word	0x0800ba47

0800b22c <_cleanup_r>:
 800b22c:	4901      	ldr	r1, [pc, #4]	; (800b234 <_cleanup_r+0x8>)
 800b22e:	f000 b8af 	b.w	800b390 <_fwalk_reent>
 800b232:	bf00      	nop
 800b234:	0800bd21 	.word	0x0800bd21

0800b238 <__sfmoreglue>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	1e4a      	subs	r2, r1, #1
 800b23c:	2568      	movs	r5, #104	; 0x68
 800b23e:	4355      	muls	r5, r2
 800b240:	460e      	mov	r6, r1
 800b242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b246:	f7ff ff4b 	bl	800b0e0 <_malloc_r>
 800b24a:	4604      	mov	r4, r0
 800b24c:	b140      	cbz	r0, 800b260 <__sfmoreglue+0x28>
 800b24e:	2100      	movs	r1, #0
 800b250:	e9c0 1600 	strd	r1, r6, [r0]
 800b254:	300c      	adds	r0, #12
 800b256:	60a0      	str	r0, [r4, #8]
 800b258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b25c:	f7ff fee8 	bl	800b030 <memset>
 800b260:	4620      	mov	r0, r4
 800b262:	bd70      	pop	{r4, r5, r6, pc}

0800b264 <__sfp_lock_acquire>:
 800b264:	4801      	ldr	r0, [pc, #4]	; (800b26c <__sfp_lock_acquire+0x8>)
 800b266:	f000 b8b3 	b.w	800b3d0 <__retarget_lock_acquire_recursive>
 800b26a:	bf00      	nop
 800b26c:	20006678 	.word	0x20006678

0800b270 <__sfp_lock_release>:
 800b270:	4801      	ldr	r0, [pc, #4]	; (800b278 <__sfp_lock_release+0x8>)
 800b272:	f000 b8ae 	b.w	800b3d2 <__retarget_lock_release_recursive>
 800b276:	bf00      	nop
 800b278:	20006678 	.word	0x20006678

0800b27c <__sinit_lock_acquire>:
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <__sinit_lock_acquire+0x8>)
 800b27e:	f000 b8a7 	b.w	800b3d0 <__retarget_lock_acquire_recursive>
 800b282:	bf00      	nop
 800b284:	20006673 	.word	0x20006673

0800b288 <__sinit_lock_release>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__sinit_lock_release+0x8>)
 800b28a:	f000 b8a2 	b.w	800b3d2 <__retarget_lock_release_recursive>
 800b28e:	bf00      	nop
 800b290:	20006673 	.word	0x20006673

0800b294 <__sinit>:
 800b294:	b510      	push	{r4, lr}
 800b296:	4604      	mov	r4, r0
 800b298:	f7ff fff0 	bl	800b27c <__sinit_lock_acquire>
 800b29c:	69a3      	ldr	r3, [r4, #24]
 800b29e:	b11b      	cbz	r3, 800b2a8 <__sinit+0x14>
 800b2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2a4:	f7ff bff0 	b.w	800b288 <__sinit_lock_release>
 800b2a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b2ac:	6523      	str	r3, [r4, #80]	; 0x50
 800b2ae:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <__sinit+0x68>)
 800b2b0:	4a13      	ldr	r2, [pc, #76]	; (800b300 <__sinit+0x6c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b2b6:	42a3      	cmp	r3, r4
 800b2b8:	bf04      	itt	eq
 800b2ba:	2301      	moveq	r3, #1
 800b2bc:	61a3      	streq	r3, [r4, #24]
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 f820 	bl	800b304 <__sfp>
 800b2c4:	6060      	str	r0, [r4, #4]
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f000 f81c 	bl	800b304 <__sfp>
 800b2cc:	60a0      	str	r0, [r4, #8]
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f000 f818 	bl	800b304 <__sfp>
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	60e0      	str	r0, [r4, #12]
 800b2d8:	2104      	movs	r1, #4
 800b2da:	6860      	ldr	r0, [r4, #4]
 800b2dc:	f7ff ff82 	bl	800b1e4 <std>
 800b2e0:	68a0      	ldr	r0, [r4, #8]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	2109      	movs	r1, #9
 800b2e6:	f7ff ff7d 	bl	800b1e4 <std>
 800b2ea:	68e0      	ldr	r0, [r4, #12]
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	2112      	movs	r1, #18
 800b2f0:	f7ff ff78 	bl	800b1e4 <std>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	61a3      	str	r3, [r4, #24]
 800b2f8:	e7d2      	b.n	800b2a0 <__sinit+0xc>
 800b2fa:	bf00      	nop
 800b2fc:	0800c010 	.word	0x0800c010
 800b300:	0800b22d 	.word	0x0800b22d

0800b304 <__sfp>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	4607      	mov	r7, r0
 800b308:	f7ff ffac 	bl	800b264 <__sfp_lock_acquire>
 800b30c:	4b1e      	ldr	r3, [pc, #120]	; (800b388 <__sfp+0x84>)
 800b30e:	681e      	ldr	r6, [r3, #0]
 800b310:	69b3      	ldr	r3, [r6, #24]
 800b312:	b913      	cbnz	r3, 800b31a <__sfp+0x16>
 800b314:	4630      	mov	r0, r6
 800b316:	f7ff ffbd 	bl	800b294 <__sinit>
 800b31a:	3648      	adds	r6, #72	; 0x48
 800b31c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b320:	3b01      	subs	r3, #1
 800b322:	d503      	bpl.n	800b32c <__sfp+0x28>
 800b324:	6833      	ldr	r3, [r6, #0]
 800b326:	b30b      	cbz	r3, 800b36c <__sfp+0x68>
 800b328:	6836      	ldr	r6, [r6, #0]
 800b32a:	e7f7      	b.n	800b31c <__sfp+0x18>
 800b32c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b330:	b9d5      	cbnz	r5, 800b368 <__sfp+0x64>
 800b332:	4b16      	ldr	r3, [pc, #88]	; (800b38c <__sfp+0x88>)
 800b334:	60e3      	str	r3, [r4, #12]
 800b336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b33a:	6665      	str	r5, [r4, #100]	; 0x64
 800b33c:	f000 f847 	bl	800b3ce <__retarget_lock_init_recursive>
 800b340:	f7ff ff96 	bl	800b270 <__sfp_lock_release>
 800b344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b34c:	6025      	str	r5, [r4, #0]
 800b34e:	61a5      	str	r5, [r4, #24]
 800b350:	2208      	movs	r2, #8
 800b352:	4629      	mov	r1, r5
 800b354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b358:	f7ff fe6a 	bl	800b030 <memset>
 800b35c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b364:	4620      	mov	r0, r4
 800b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b368:	3468      	adds	r4, #104	; 0x68
 800b36a:	e7d9      	b.n	800b320 <__sfp+0x1c>
 800b36c:	2104      	movs	r1, #4
 800b36e:	4638      	mov	r0, r7
 800b370:	f7ff ff62 	bl	800b238 <__sfmoreglue>
 800b374:	4604      	mov	r4, r0
 800b376:	6030      	str	r0, [r6, #0]
 800b378:	2800      	cmp	r0, #0
 800b37a:	d1d5      	bne.n	800b328 <__sfp+0x24>
 800b37c:	f7ff ff78 	bl	800b270 <__sfp_lock_release>
 800b380:	230c      	movs	r3, #12
 800b382:	603b      	str	r3, [r7, #0]
 800b384:	e7ee      	b.n	800b364 <__sfp+0x60>
 800b386:	bf00      	nop
 800b388:	0800c010 	.word	0x0800c010
 800b38c:	ffff0001 	.word	0xffff0001

0800b390 <_fwalk_reent>:
 800b390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b394:	4606      	mov	r6, r0
 800b396:	4688      	mov	r8, r1
 800b398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b39c:	2700      	movs	r7, #0
 800b39e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3a2:	f1b9 0901 	subs.w	r9, r9, #1
 800b3a6:	d505      	bpl.n	800b3b4 <_fwalk_reent+0x24>
 800b3a8:	6824      	ldr	r4, [r4, #0]
 800b3aa:	2c00      	cmp	r4, #0
 800b3ac:	d1f7      	bne.n	800b39e <_fwalk_reent+0xe>
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3b4:	89ab      	ldrh	r3, [r5, #12]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d907      	bls.n	800b3ca <_fwalk_reent+0x3a>
 800b3ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	d003      	beq.n	800b3ca <_fwalk_reent+0x3a>
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	47c0      	blx	r8
 800b3c8:	4307      	orrs	r7, r0
 800b3ca:	3568      	adds	r5, #104	; 0x68
 800b3cc:	e7e9      	b.n	800b3a2 <_fwalk_reent+0x12>

0800b3ce <__retarget_lock_init_recursive>:
 800b3ce:	4770      	bx	lr

0800b3d0 <__retarget_lock_acquire_recursive>:
 800b3d0:	4770      	bx	lr

0800b3d2 <__retarget_lock_release_recursive>:
 800b3d2:	4770      	bx	lr

0800b3d4 <__malloc_lock>:
 800b3d4:	4801      	ldr	r0, [pc, #4]	; (800b3dc <__malloc_lock+0x8>)
 800b3d6:	f7ff bffb 	b.w	800b3d0 <__retarget_lock_acquire_recursive>
 800b3da:	bf00      	nop
 800b3dc:	20006674 	.word	0x20006674

0800b3e0 <__malloc_unlock>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	; (800b3e8 <__malloc_unlock+0x8>)
 800b3e2:	f7ff bff6 	b.w	800b3d2 <__retarget_lock_release_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	20006674 	.word	0x20006674

0800b3ec <__sfputc_r>:
 800b3ec:	6893      	ldr	r3, [r2, #8]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	b410      	push	{r4}
 800b3f4:	6093      	str	r3, [r2, #8]
 800b3f6:	da08      	bge.n	800b40a <__sfputc_r+0x1e>
 800b3f8:	6994      	ldr	r4, [r2, #24]
 800b3fa:	42a3      	cmp	r3, r4
 800b3fc:	db01      	blt.n	800b402 <__sfputc_r+0x16>
 800b3fe:	290a      	cmp	r1, #10
 800b400:	d103      	bne.n	800b40a <__sfputc_r+0x1e>
 800b402:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b406:	f000 bb23 	b.w	800ba50 <__swbuf_r>
 800b40a:	6813      	ldr	r3, [r2, #0]
 800b40c:	1c58      	adds	r0, r3, #1
 800b40e:	6010      	str	r0, [r2, #0]
 800b410:	7019      	strb	r1, [r3, #0]
 800b412:	4608      	mov	r0, r1
 800b414:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <__sfputs_r>:
 800b41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41c:	4606      	mov	r6, r0
 800b41e:	460f      	mov	r7, r1
 800b420:	4614      	mov	r4, r2
 800b422:	18d5      	adds	r5, r2, r3
 800b424:	42ac      	cmp	r4, r5
 800b426:	d101      	bne.n	800b42c <__sfputs_r+0x12>
 800b428:	2000      	movs	r0, #0
 800b42a:	e007      	b.n	800b43c <__sfputs_r+0x22>
 800b42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b430:	463a      	mov	r2, r7
 800b432:	4630      	mov	r0, r6
 800b434:	f7ff ffda 	bl	800b3ec <__sfputc_r>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d1f3      	bne.n	800b424 <__sfputs_r+0xa>
 800b43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b440 <_vfiprintf_r>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	460d      	mov	r5, r1
 800b446:	b09d      	sub	sp, #116	; 0x74
 800b448:	4614      	mov	r4, r2
 800b44a:	4698      	mov	r8, r3
 800b44c:	4606      	mov	r6, r0
 800b44e:	b118      	cbz	r0, 800b458 <_vfiprintf_r+0x18>
 800b450:	6983      	ldr	r3, [r0, #24]
 800b452:	b90b      	cbnz	r3, 800b458 <_vfiprintf_r+0x18>
 800b454:	f7ff ff1e 	bl	800b294 <__sinit>
 800b458:	4b89      	ldr	r3, [pc, #548]	; (800b680 <_vfiprintf_r+0x240>)
 800b45a:	429d      	cmp	r5, r3
 800b45c:	d11b      	bne.n	800b496 <_vfiprintf_r+0x56>
 800b45e:	6875      	ldr	r5, [r6, #4]
 800b460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b462:	07d9      	lsls	r1, r3, #31
 800b464:	d405      	bmi.n	800b472 <_vfiprintf_r+0x32>
 800b466:	89ab      	ldrh	r3, [r5, #12]
 800b468:	059a      	lsls	r2, r3, #22
 800b46a:	d402      	bmi.n	800b472 <_vfiprintf_r+0x32>
 800b46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b46e:	f7ff ffaf 	bl	800b3d0 <__retarget_lock_acquire_recursive>
 800b472:	89ab      	ldrh	r3, [r5, #12]
 800b474:	071b      	lsls	r3, r3, #28
 800b476:	d501      	bpl.n	800b47c <_vfiprintf_r+0x3c>
 800b478:	692b      	ldr	r3, [r5, #16]
 800b47a:	b9eb      	cbnz	r3, 800b4b8 <_vfiprintf_r+0x78>
 800b47c:	4629      	mov	r1, r5
 800b47e:	4630      	mov	r0, r6
 800b480:	f000 fb4a 	bl	800bb18 <__swsetup_r>
 800b484:	b1c0      	cbz	r0, 800b4b8 <_vfiprintf_r+0x78>
 800b486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b488:	07dc      	lsls	r4, r3, #31
 800b48a:	d50e      	bpl.n	800b4aa <_vfiprintf_r+0x6a>
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	b01d      	add	sp, #116	; 0x74
 800b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b496:	4b7b      	ldr	r3, [pc, #492]	; (800b684 <_vfiprintf_r+0x244>)
 800b498:	429d      	cmp	r5, r3
 800b49a:	d101      	bne.n	800b4a0 <_vfiprintf_r+0x60>
 800b49c:	68b5      	ldr	r5, [r6, #8]
 800b49e:	e7df      	b.n	800b460 <_vfiprintf_r+0x20>
 800b4a0:	4b79      	ldr	r3, [pc, #484]	; (800b688 <_vfiprintf_r+0x248>)
 800b4a2:	429d      	cmp	r5, r3
 800b4a4:	bf08      	it	eq
 800b4a6:	68f5      	ldreq	r5, [r6, #12]
 800b4a8:	e7da      	b.n	800b460 <_vfiprintf_r+0x20>
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	0598      	lsls	r0, r3, #22
 800b4ae:	d4ed      	bmi.n	800b48c <_vfiprintf_r+0x4c>
 800b4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b2:	f7ff ff8e 	bl	800b3d2 <__retarget_lock_release_recursive>
 800b4b6:	e7e9      	b.n	800b48c <_vfiprintf_r+0x4c>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b4bc:	2320      	movs	r3, #32
 800b4be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4c6:	2330      	movs	r3, #48	; 0x30
 800b4c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b68c <_vfiprintf_r+0x24c>
 800b4cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4d0:	f04f 0901 	mov.w	r9, #1
 800b4d4:	4623      	mov	r3, r4
 800b4d6:	469a      	mov	sl, r3
 800b4d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4dc:	b10a      	cbz	r2, 800b4e2 <_vfiprintf_r+0xa2>
 800b4de:	2a25      	cmp	r2, #37	; 0x25
 800b4e0:	d1f9      	bne.n	800b4d6 <_vfiprintf_r+0x96>
 800b4e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b4e6:	d00b      	beq.n	800b500 <_vfiprintf_r+0xc0>
 800b4e8:	465b      	mov	r3, fp
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	f7ff ff93 	bl	800b41a <__sfputs_r>
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f000 80aa 	beq.w	800b64e <_vfiprintf_r+0x20e>
 800b4fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4fc:	445a      	add	r2, fp
 800b4fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b500:	f89a 3000 	ldrb.w	r3, [sl]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 80a2 	beq.w	800b64e <_vfiprintf_r+0x20e>
 800b50a:	2300      	movs	r3, #0
 800b50c:	f04f 32ff 	mov.w	r2, #4294967295
 800b510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b514:	f10a 0a01 	add.w	sl, sl, #1
 800b518:	9304      	str	r3, [sp, #16]
 800b51a:	9307      	str	r3, [sp, #28]
 800b51c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b520:	931a      	str	r3, [sp, #104]	; 0x68
 800b522:	4654      	mov	r4, sl
 800b524:	2205      	movs	r2, #5
 800b526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b52a:	4858      	ldr	r0, [pc, #352]	; (800b68c <_vfiprintf_r+0x24c>)
 800b52c:	f7f4 fe88 	bl	8000240 <memchr>
 800b530:	9a04      	ldr	r2, [sp, #16]
 800b532:	b9d8      	cbnz	r0, 800b56c <_vfiprintf_r+0x12c>
 800b534:	06d1      	lsls	r1, r2, #27
 800b536:	bf44      	itt	mi
 800b538:	2320      	movmi	r3, #32
 800b53a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b53e:	0713      	lsls	r3, r2, #28
 800b540:	bf44      	itt	mi
 800b542:	232b      	movmi	r3, #43	; 0x2b
 800b544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b548:	f89a 3000 	ldrb.w	r3, [sl]
 800b54c:	2b2a      	cmp	r3, #42	; 0x2a
 800b54e:	d015      	beq.n	800b57c <_vfiprintf_r+0x13c>
 800b550:	9a07      	ldr	r2, [sp, #28]
 800b552:	4654      	mov	r4, sl
 800b554:	2000      	movs	r0, #0
 800b556:	f04f 0c0a 	mov.w	ip, #10
 800b55a:	4621      	mov	r1, r4
 800b55c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b560:	3b30      	subs	r3, #48	; 0x30
 800b562:	2b09      	cmp	r3, #9
 800b564:	d94e      	bls.n	800b604 <_vfiprintf_r+0x1c4>
 800b566:	b1b0      	cbz	r0, 800b596 <_vfiprintf_r+0x156>
 800b568:	9207      	str	r2, [sp, #28]
 800b56a:	e014      	b.n	800b596 <_vfiprintf_r+0x156>
 800b56c:	eba0 0308 	sub.w	r3, r0, r8
 800b570:	fa09 f303 	lsl.w	r3, r9, r3
 800b574:	4313      	orrs	r3, r2
 800b576:	9304      	str	r3, [sp, #16]
 800b578:	46a2      	mov	sl, r4
 800b57a:	e7d2      	b.n	800b522 <_vfiprintf_r+0xe2>
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	1d19      	adds	r1, r3, #4
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	9103      	str	r1, [sp, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	bfbb      	ittet	lt
 800b588:	425b      	neglt	r3, r3
 800b58a:	f042 0202 	orrlt.w	r2, r2, #2
 800b58e:	9307      	strge	r3, [sp, #28]
 800b590:	9307      	strlt	r3, [sp, #28]
 800b592:	bfb8      	it	lt
 800b594:	9204      	strlt	r2, [sp, #16]
 800b596:	7823      	ldrb	r3, [r4, #0]
 800b598:	2b2e      	cmp	r3, #46	; 0x2e
 800b59a:	d10c      	bne.n	800b5b6 <_vfiprintf_r+0x176>
 800b59c:	7863      	ldrb	r3, [r4, #1]
 800b59e:	2b2a      	cmp	r3, #42	; 0x2a
 800b5a0:	d135      	bne.n	800b60e <_vfiprintf_r+0x1ce>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	1d1a      	adds	r2, r3, #4
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	9203      	str	r2, [sp, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	bfb8      	it	lt
 800b5ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5b2:	3402      	adds	r4, #2
 800b5b4:	9305      	str	r3, [sp, #20]
 800b5b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b69c <_vfiprintf_r+0x25c>
 800b5ba:	7821      	ldrb	r1, [r4, #0]
 800b5bc:	2203      	movs	r2, #3
 800b5be:	4650      	mov	r0, sl
 800b5c0:	f7f4 fe3e 	bl	8000240 <memchr>
 800b5c4:	b140      	cbz	r0, 800b5d8 <_vfiprintf_r+0x198>
 800b5c6:	2340      	movs	r3, #64	; 0x40
 800b5c8:	eba0 000a 	sub.w	r0, r0, sl
 800b5cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	4303      	orrs	r3, r0
 800b5d4:	3401      	adds	r4, #1
 800b5d6:	9304      	str	r3, [sp, #16]
 800b5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5dc:	482c      	ldr	r0, [pc, #176]	; (800b690 <_vfiprintf_r+0x250>)
 800b5de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5e2:	2206      	movs	r2, #6
 800b5e4:	f7f4 fe2c 	bl	8000240 <memchr>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d03f      	beq.n	800b66c <_vfiprintf_r+0x22c>
 800b5ec:	4b29      	ldr	r3, [pc, #164]	; (800b694 <_vfiprintf_r+0x254>)
 800b5ee:	bb1b      	cbnz	r3, 800b638 <_vfiprintf_r+0x1f8>
 800b5f0:	9b03      	ldr	r3, [sp, #12]
 800b5f2:	3307      	adds	r3, #7
 800b5f4:	f023 0307 	bic.w	r3, r3, #7
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	9303      	str	r3, [sp, #12]
 800b5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fe:	443b      	add	r3, r7
 800b600:	9309      	str	r3, [sp, #36]	; 0x24
 800b602:	e767      	b.n	800b4d4 <_vfiprintf_r+0x94>
 800b604:	fb0c 3202 	mla	r2, ip, r2, r3
 800b608:	460c      	mov	r4, r1
 800b60a:	2001      	movs	r0, #1
 800b60c:	e7a5      	b.n	800b55a <_vfiprintf_r+0x11a>
 800b60e:	2300      	movs	r3, #0
 800b610:	3401      	adds	r4, #1
 800b612:	9305      	str	r3, [sp, #20]
 800b614:	4619      	mov	r1, r3
 800b616:	f04f 0c0a 	mov.w	ip, #10
 800b61a:	4620      	mov	r0, r4
 800b61c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b620:	3a30      	subs	r2, #48	; 0x30
 800b622:	2a09      	cmp	r2, #9
 800b624:	d903      	bls.n	800b62e <_vfiprintf_r+0x1ee>
 800b626:	2b00      	cmp	r3, #0
 800b628:	d0c5      	beq.n	800b5b6 <_vfiprintf_r+0x176>
 800b62a:	9105      	str	r1, [sp, #20]
 800b62c:	e7c3      	b.n	800b5b6 <_vfiprintf_r+0x176>
 800b62e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b632:	4604      	mov	r4, r0
 800b634:	2301      	movs	r3, #1
 800b636:	e7f0      	b.n	800b61a <_vfiprintf_r+0x1da>
 800b638:	ab03      	add	r3, sp, #12
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	462a      	mov	r2, r5
 800b63e:	4b16      	ldr	r3, [pc, #88]	; (800b698 <_vfiprintf_r+0x258>)
 800b640:	a904      	add	r1, sp, #16
 800b642:	4630      	mov	r0, r6
 800b644:	f3af 8000 	nop.w
 800b648:	4607      	mov	r7, r0
 800b64a:	1c78      	adds	r0, r7, #1
 800b64c:	d1d6      	bne.n	800b5fc <_vfiprintf_r+0x1bc>
 800b64e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b650:	07d9      	lsls	r1, r3, #31
 800b652:	d405      	bmi.n	800b660 <_vfiprintf_r+0x220>
 800b654:	89ab      	ldrh	r3, [r5, #12]
 800b656:	059a      	lsls	r2, r3, #22
 800b658:	d402      	bmi.n	800b660 <_vfiprintf_r+0x220>
 800b65a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b65c:	f7ff feb9 	bl	800b3d2 <__retarget_lock_release_recursive>
 800b660:	89ab      	ldrh	r3, [r5, #12]
 800b662:	065b      	lsls	r3, r3, #25
 800b664:	f53f af12 	bmi.w	800b48c <_vfiprintf_r+0x4c>
 800b668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b66a:	e711      	b.n	800b490 <_vfiprintf_r+0x50>
 800b66c:	ab03      	add	r3, sp, #12
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	462a      	mov	r2, r5
 800b672:	4b09      	ldr	r3, [pc, #36]	; (800b698 <_vfiprintf_r+0x258>)
 800b674:	a904      	add	r1, sp, #16
 800b676:	4630      	mov	r0, r6
 800b678:	f000 f880 	bl	800b77c <_printf_i>
 800b67c:	e7e4      	b.n	800b648 <_vfiprintf_r+0x208>
 800b67e:	bf00      	nop
 800b680:	0800c034 	.word	0x0800c034
 800b684:	0800c054 	.word	0x0800c054
 800b688:	0800c014 	.word	0x0800c014
 800b68c:	0800c074 	.word	0x0800c074
 800b690:	0800c07e 	.word	0x0800c07e
 800b694:	00000000 	.word	0x00000000
 800b698:	0800b41b 	.word	0x0800b41b
 800b69c:	0800c07a 	.word	0x0800c07a

0800b6a0 <_printf_common>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	4699      	mov	r9, r3
 800b6a8:	688a      	ldr	r2, [r1, #8]
 800b6aa:	690b      	ldr	r3, [r1, #16]
 800b6ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bfb8      	it	lt
 800b6b4:	4613      	movlt	r3, r2
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6bc:	4607      	mov	r7, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	b10a      	cbz	r2, 800b6c6 <_printf_common+0x26>
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	6033      	str	r3, [r6, #0]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	0699      	lsls	r1, r3, #26
 800b6ca:	bf42      	ittt	mi
 800b6cc:	6833      	ldrmi	r3, [r6, #0]
 800b6ce:	3302      	addmi	r3, #2
 800b6d0:	6033      	strmi	r3, [r6, #0]
 800b6d2:	6825      	ldr	r5, [r4, #0]
 800b6d4:	f015 0506 	ands.w	r5, r5, #6
 800b6d8:	d106      	bne.n	800b6e8 <_printf_common+0x48>
 800b6da:	f104 0a19 	add.w	sl, r4, #25
 800b6de:	68e3      	ldr	r3, [r4, #12]
 800b6e0:	6832      	ldr	r2, [r6, #0]
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	42ab      	cmp	r3, r5
 800b6e6:	dc26      	bgt.n	800b736 <_printf_common+0x96>
 800b6e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6ec:	1e13      	subs	r3, r2, #0
 800b6ee:	6822      	ldr	r2, [r4, #0]
 800b6f0:	bf18      	it	ne
 800b6f2:	2301      	movne	r3, #1
 800b6f4:	0692      	lsls	r2, r2, #26
 800b6f6:	d42b      	bmi.n	800b750 <_printf_common+0xb0>
 800b6f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c0      	blx	r8
 800b702:	3001      	adds	r0, #1
 800b704:	d01e      	beq.n	800b744 <_printf_common+0xa4>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	68e5      	ldr	r5, [r4, #12]
 800b70a:	6832      	ldr	r2, [r6, #0]
 800b70c:	f003 0306 	and.w	r3, r3, #6
 800b710:	2b04      	cmp	r3, #4
 800b712:	bf08      	it	eq
 800b714:	1aad      	subeq	r5, r5, r2
 800b716:	68a3      	ldr	r3, [r4, #8]
 800b718:	6922      	ldr	r2, [r4, #16]
 800b71a:	bf0c      	ite	eq
 800b71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b720:	2500      	movne	r5, #0
 800b722:	4293      	cmp	r3, r2
 800b724:	bfc4      	itt	gt
 800b726:	1a9b      	subgt	r3, r3, r2
 800b728:	18ed      	addgt	r5, r5, r3
 800b72a:	2600      	movs	r6, #0
 800b72c:	341a      	adds	r4, #26
 800b72e:	42b5      	cmp	r5, r6
 800b730:	d11a      	bne.n	800b768 <_printf_common+0xc8>
 800b732:	2000      	movs	r0, #0
 800b734:	e008      	b.n	800b748 <_printf_common+0xa8>
 800b736:	2301      	movs	r3, #1
 800b738:	4652      	mov	r2, sl
 800b73a:	4649      	mov	r1, r9
 800b73c:	4638      	mov	r0, r7
 800b73e:	47c0      	blx	r8
 800b740:	3001      	adds	r0, #1
 800b742:	d103      	bne.n	800b74c <_printf_common+0xac>
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	3501      	adds	r5, #1
 800b74e:	e7c6      	b.n	800b6de <_printf_common+0x3e>
 800b750:	18e1      	adds	r1, r4, r3
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	2030      	movs	r0, #48	; 0x30
 800b756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b75a:	4422      	add	r2, r4
 800b75c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b764:	3302      	adds	r3, #2
 800b766:	e7c7      	b.n	800b6f8 <_printf_common+0x58>
 800b768:	2301      	movs	r3, #1
 800b76a:	4622      	mov	r2, r4
 800b76c:	4649      	mov	r1, r9
 800b76e:	4638      	mov	r0, r7
 800b770:	47c0      	blx	r8
 800b772:	3001      	adds	r0, #1
 800b774:	d0e6      	beq.n	800b744 <_printf_common+0xa4>
 800b776:	3601      	adds	r6, #1
 800b778:	e7d9      	b.n	800b72e <_printf_common+0x8e>
	...

0800b77c <_printf_i>:
 800b77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	460c      	mov	r4, r1
 800b782:	4691      	mov	r9, r2
 800b784:	7e27      	ldrb	r7, [r4, #24]
 800b786:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b788:	2f78      	cmp	r7, #120	; 0x78
 800b78a:	4680      	mov	r8, r0
 800b78c:	469a      	mov	sl, r3
 800b78e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b792:	d807      	bhi.n	800b7a4 <_printf_i+0x28>
 800b794:	2f62      	cmp	r7, #98	; 0x62
 800b796:	d80a      	bhi.n	800b7ae <_printf_i+0x32>
 800b798:	2f00      	cmp	r7, #0
 800b79a:	f000 80d8 	beq.w	800b94e <_printf_i+0x1d2>
 800b79e:	2f58      	cmp	r7, #88	; 0x58
 800b7a0:	f000 80a3 	beq.w	800b8ea <_printf_i+0x16e>
 800b7a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7ac:	e03a      	b.n	800b824 <_printf_i+0xa8>
 800b7ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7b2:	2b15      	cmp	r3, #21
 800b7b4:	d8f6      	bhi.n	800b7a4 <_printf_i+0x28>
 800b7b6:	a001      	add	r0, pc, #4	; (adr r0, 800b7bc <_printf_i+0x40>)
 800b7b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b7bc:	0800b815 	.word	0x0800b815
 800b7c0:	0800b829 	.word	0x0800b829
 800b7c4:	0800b7a5 	.word	0x0800b7a5
 800b7c8:	0800b7a5 	.word	0x0800b7a5
 800b7cc:	0800b7a5 	.word	0x0800b7a5
 800b7d0:	0800b7a5 	.word	0x0800b7a5
 800b7d4:	0800b829 	.word	0x0800b829
 800b7d8:	0800b7a5 	.word	0x0800b7a5
 800b7dc:	0800b7a5 	.word	0x0800b7a5
 800b7e0:	0800b7a5 	.word	0x0800b7a5
 800b7e4:	0800b7a5 	.word	0x0800b7a5
 800b7e8:	0800b935 	.word	0x0800b935
 800b7ec:	0800b859 	.word	0x0800b859
 800b7f0:	0800b917 	.word	0x0800b917
 800b7f4:	0800b7a5 	.word	0x0800b7a5
 800b7f8:	0800b7a5 	.word	0x0800b7a5
 800b7fc:	0800b957 	.word	0x0800b957
 800b800:	0800b7a5 	.word	0x0800b7a5
 800b804:	0800b859 	.word	0x0800b859
 800b808:	0800b7a5 	.word	0x0800b7a5
 800b80c:	0800b7a5 	.word	0x0800b7a5
 800b810:	0800b91f 	.word	0x0800b91f
 800b814:	680b      	ldr	r3, [r1, #0]
 800b816:	1d1a      	adds	r2, r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	600a      	str	r2, [r1, #0]
 800b81c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b824:	2301      	movs	r3, #1
 800b826:	e0a3      	b.n	800b970 <_printf_i+0x1f4>
 800b828:	6825      	ldr	r5, [r4, #0]
 800b82a:	6808      	ldr	r0, [r1, #0]
 800b82c:	062e      	lsls	r6, r5, #24
 800b82e:	f100 0304 	add.w	r3, r0, #4
 800b832:	d50a      	bpl.n	800b84a <_printf_i+0xce>
 800b834:	6805      	ldr	r5, [r0, #0]
 800b836:	600b      	str	r3, [r1, #0]
 800b838:	2d00      	cmp	r5, #0
 800b83a:	da03      	bge.n	800b844 <_printf_i+0xc8>
 800b83c:	232d      	movs	r3, #45	; 0x2d
 800b83e:	426d      	negs	r5, r5
 800b840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b844:	485e      	ldr	r0, [pc, #376]	; (800b9c0 <_printf_i+0x244>)
 800b846:	230a      	movs	r3, #10
 800b848:	e019      	b.n	800b87e <_printf_i+0x102>
 800b84a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b84e:	6805      	ldr	r5, [r0, #0]
 800b850:	600b      	str	r3, [r1, #0]
 800b852:	bf18      	it	ne
 800b854:	b22d      	sxthne	r5, r5
 800b856:	e7ef      	b.n	800b838 <_printf_i+0xbc>
 800b858:	680b      	ldr	r3, [r1, #0]
 800b85a:	6825      	ldr	r5, [r4, #0]
 800b85c:	1d18      	adds	r0, r3, #4
 800b85e:	6008      	str	r0, [r1, #0]
 800b860:	0628      	lsls	r0, r5, #24
 800b862:	d501      	bpl.n	800b868 <_printf_i+0xec>
 800b864:	681d      	ldr	r5, [r3, #0]
 800b866:	e002      	b.n	800b86e <_printf_i+0xf2>
 800b868:	0669      	lsls	r1, r5, #25
 800b86a:	d5fb      	bpl.n	800b864 <_printf_i+0xe8>
 800b86c:	881d      	ldrh	r5, [r3, #0]
 800b86e:	4854      	ldr	r0, [pc, #336]	; (800b9c0 <_printf_i+0x244>)
 800b870:	2f6f      	cmp	r7, #111	; 0x6f
 800b872:	bf0c      	ite	eq
 800b874:	2308      	moveq	r3, #8
 800b876:	230a      	movne	r3, #10
 800b878:	2100      	movs	r1, #0
 800b87a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b87e:	6866      	ldr	r6, [r4, #4]
 800b880:	60a6      	str	r6, [r4, #8]
 800b882:	2e00      	cmp	r6, #0
 800b884:	bfa2      	ittt	ge
 800b886:	6821      	ldrge	r1, [r4, #0]
 800b888:	f021 0104 	bicge.w	r1, r1, #4
 800b88c:	6021      	strge	r1, [r4, #0]
 800b88e:	b90d      	cbnz	r5, 800b894 <_printf_i+0x118>
 800b890:	2e00      	cmp	r6, #0
 800b892:	d04d      	beq.n	800b930 <_printf_i+0x1b4>
 800b894:	4616      	mov	r6, r2
 800b896:	fbb5 f1f3 	udiv	r1, r5, r3
 800b89a:	fb03 5711 	mls	r7, r3, r1, r5
 800b89e:	5dc7      	ldrb	r7, [r0, r7]
 800b8a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8a4:	462f      	mov	r7, r5
 800b8a6:	42bb      	cmp	r3, r7
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	d9f4      	bls.n	800b896 <_printf_i+0x11a>
 800b8ac:	2b08      	cmp	r3, #8
 800b8ae:	d10b      	bne.n	800b8c8 <_printf_i+0x14c>
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	07df      	lsls	r7, r3, #31
 800b8b4:	d508      	bpl.n	800b8c8 <_printf_i+0x14c>
 800b8b6:	6923      	ldr	r3, [r4, #16]
 800b8b8:	6861      	ldr	r1, [r4, #4]
 800b8ba:	4299      	cmp	r1, r3
 800b8bc:	bfde      	ittt	le
 800b8be:	2330      	movle	r3, #48	; 0x30
 800b8c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8c8:	1b92      	subs	r2, r2, r6
 800b8ca:	6122      	str	r2, [r4, #16]
 800b8cc:	f8cd a000 	str.w	sl, [sp]
 800b8d0:	464b      	mov	r3, r9
 800b8d2:	aa03      	add	r2, sp, #12
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	f7ff fee2 	bl	800b6a0 <_printf_common>
 800b8dc:	3001      	adds	r0, #1
 800b8de:	d14c      	bne.n	800b97a <_printf_i+0x1fe>
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e4:	b004      	add	sp, #16
 800b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ea:	4835      	ldr	r0, [pc, #212]	; (800b9c0 <_printf_i+0x244>)
 800b8ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	680e      	ldr	r6, [r1, #0]
 800b8f4:	061f      	lsls	r7, r3, #24
 800b8f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b8fa:	600e      	str	r6, [r1, #0]
 800b8fc:	d514      	bpl.n	800b928 <_printf_i+0x1ac>
 800b8fe:	07d9      	lsls	r1, r3, #31
 800b900:	bf44      	itt	mi
 800b902:	f043 0320 	orrmi.w	r3, r3, #32
 800b906:	6023      	strmi	r3, [r4, #0]
 800b908:	b91d      	cbnz	r5, 800b912 <_printf_i+0x196>
 800b90a:	6823      	ldr	r3, [r4, #0]
 800b90c:	f023 0320 	bic.w	r3, r3, #32
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	2310      	movs	r3, #16
 800b914:	e7b0      	b.n	800b878 <_printf_i+0xfc>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	f043 0320 	orr.w	r3, r3, #32
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	2378      	movs	r3, #120	; 0x78
 800b920:	4828      	ldr	r0, [pc, #160]	; (800b9c4 <_printf_i+0x248>)
 800b922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b926:	e7e3      	b.n	800b8f0 <_printf_i+0x174>
 800b928:	065e      	lsls	r6, r3, #25
 800b92a:	bf48      	it	mi
 800b92c:	b2ad      	uxthmi	r5, r5
 800b92e:	e7e6      	b.n	800b8fe <_printf_i+0x182>
 800b930:	4616      	mov	r6, r2
 800b932:	e7bb      	b.n	800b8ac <_printf_i+0x130>
 800b934:	680b      	ldr	r3, [r1, #0]
 800b936:	6826      	ldr	r6, [r4, #0]
 800b938:	6960      	ldr	r0, [r4, #20]
 800b93a:	1d1d      	adds	r5, r3, #4
 800b93c:	600d      	str	r5, [r1, #0]
 800b93e:	0635      	lsls	r5, r6, #24
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	d501      	bpl.n	800b948 <_printf_i+0x1cc>
 800b944:	6018      	str	r0, [r3, #0]
 800b946:	e002      	b.n	800b94e <_printf_i+0x1d2>
 800b948:	0671      	lsls	r1, r6, #25
 800b94a:	d5fb      	bpl.n	800b944 <_printf_i+0x1c8>
 800b94c:	8018      	strh	r0, [r3, #0]
 800b94e:	2300      	movs	r3, #0
 800b950:	6123      	str	r3, [r4, #16]
 800b952:	4616      	mov	r6, r2
 800b954:	e7ba      	b.n	800b8cc <_printf_i+0x150>
 800b956:	680b      	ldr	r3, [r1, #0]
 800b958:	1d1a      	adds	r2, r3, #4
 800b95a:	600a      	str	r2, [r1, #0]
 800b95c:	681e      	ldr	r6, [r3, #0]
 800b95e:	6862      	ldr	r2, [r4, #4]
 800b960:	2100      	movs	r1, #0
 800b962:	4630      	mov	r0, r6
 800b964:	f7f4 fc6c 	bl	8000240 <memchr>
 800b968:	b108      	cbz	r0, 800b96e <_printf_i+0x1f2>
 800b96a:	1b80      	subs	r0, r0, r6
 800b96c:	6060      	str	r0, [r4, #4]
 800b96e:	6863      	ldr	r3, [r4, #4]
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	2300      	movs	r3, #0
 800b974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b978:	e7a8      	b.n	800b8cc <_printf_i+0x150>
 800b97a:	6923      	ldr	r3, [r4, #16]
 800b97c:	4632      	mov	r2, r6
 800b97e:	4649      	mov	r1, r9
 800b980:	4640      	mov	r0, r8
 800b982:	47d0      	blx	sl
 800b984:	3001      	adds	r0, #1
 800b986:	d0ab      	beq.n	800b8e0 <_printf_i+0x164>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	079b      	lsls	r3, r3, #30
 800b98c:	d413      	bmi.n	800b9b6 <_printf_i+0x23a>
 800b98e:	68e0      	ldr	r0, [r4, #12]
 800b990:	9b03      	ldr	r3, [sp, #12]
 800b992:	4298      	cmp	r0, r3
 800b994:	bfb8      	it	lt
 800b996:	4618      	movlt	r0, r3
 800b998:	e7a4      	b.n	800b8e4 <_printf_i+0x168>
 800b99a:	2301      	movs	r3, #1
 800b99c:	4632      	mov	r2, r6
 800b99e:	4649      	mov	r1, r9
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	47d0      	blx	sl
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d09b      	beq.n	800b8e0 <_printf_i+0x164>
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	68e3      	ldr	r3, [r4, #12]
 800b9ac:	9903      	ldr	r1, [sp, #12]
 800b9ae:	1a5b      	subs	r3, r3, r1
 800b9b0:	42ab      	cmp	r3, r5
 800b9b2:	dcf2      	bgt.n	800b99a <_printf_i+0x21e>
 800b9b4:	e7eb      	b.n	800b98e <_printf_i+0x212>
 800b9b6:	2500      	movs	r5, #0
 800b9b8:	f104 0619 	add.w	r6, r4, #25
 800b9bc:	e7f5      	b.n	800b9aa <_printf_i+0x22e>
 800b9be:	bf00      	nop
 800b9c0:	0800c085 	.word	0x0800c085
 800b9c4:	0800c096 	.word	0x0800c096

0800b9c8 <__sread>:
 800b9c8:	b510      	push	{r4, lr}
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d0:	f000 fa58 	bl	800be84 <_read_r>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	bfab      	itete	ge
 800b9d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9da:	89a3      	ldrhlt	r3, [r4, #12]
 800b9dc:	181b      	addge	r3, r3, r0
 800b9de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9e2:	bfac      	ite	ge
 800b9e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9e6:	81a3      	strhlt	r3, [r4, #12]
 800b9e8:	bd10      	pop	{r4, pc}

0800b9ea <__swrite>:
 800b9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ee:	461f      	mov	r7, r3
 800b9f0:	898b      	ldrh	r3, [r1, #12]
 800b9f2:	05db      	lsls	r3, r3, #23
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	4616      	mov	r6, r2
 800b9fa:	d505      	bpl.n	800ba08 <__swrite+0x1e>
 800b9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba00:	2302      	movs	r3, #2
 800ba02:	2200      	movs	r2, #0
 800ba04:	f000 f9c8 	bl	800bd98 <_lseek_r>
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba12:	81a3      	strh	r3, [r4, #12]
 800ba14:	4632      	mov	r2, r6
 800ba16:	463b      	mov	r3, r7
 800ba18:	4628      	mov	r0, r5
 800ba1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1e:	f000 b869 	b.w	800baf4 <_write_r>

0800ba22 <__sseek>:
 800ba22:	b510      	push	{r4, lr}
 800ba24:	460c      	mov	r4, r1
 800ba26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2a:	f000 f9b5 	bl	800bd98 <_lseek_r>
 800ba2e:	1c43      	adds	r3, r0, #1
 800ba30:	89a3      	ldrh	r3, [r4, #12]
 800ba32:	bf15      	itete	ne
 800ba34:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba3e:	81a3      	strheq	r3, [r4, #12]
 800ba40:	bf18      	it	ne
 800ba42:	81a3      	strhne	r3, [r4, #12]
 800ba44:	bd10      	pop	{r4, pc}

0800ba46 <__sclose>:
 800ba46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4a:	f000 b8d3 	b.w	800bbf4 <_close_r>
	...

0800ba50 <__swbuf_r>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	460e      	mov	r6, r1
 800ba54:	4614      	mov	r4, r2
 800ba56:	4605      	mov	r5, r0
 800ba58:	b118      	cbz	r0, 800ba62 <__swbuf_r+0x12>
 800ba5a:	6983      	ldr	r3, [r0, #24]
 800ba5c:	b90b      	cbnz	r3, 800ba62 <__swbuf_r+0x12>
 800ba5e:	f7ff fc19 	bl	800b294 <__sinit>
 800ba62:	4b21      	ldr	r3, [pc, #132]	; (800bae8 <__swbuf_r+0x98>)
 800ba64:	429c      	cmp	r4, r3
 800ba66:	d12b      	bne.n	800bac0 <__swbuf_r+0x70>
 800ba68:	686c      	ldr	r4, [r5, #4]
 800ba6a:	69a3      	ldr	r3, [r4, #24]
 800ba6c:	60a3      	str	r3, [r4, #8]
 800ba6e:	89a3      	ldrh	r3, [r4, #12]
 800ba70:	071a      	lsls	r2, r3, #28
 800ba72:	d52f      	bpl.n	800bad4 <__swbuf_r+0x84>
 800ba74:	6923      	ldr	r3, [r4, #16]
 800ba76:	b36b      	cbz	r3, 800bad4 <__swbuf_r+0x84>
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	6820      	ldr	r0, [r4, #0]
 800ba7c:	1ac0      	subs	r0, r0, r3
 800ba7e:	6963      	ldr	r3, [r4, #20]
 800ba80:	b2f6      	uxtb	r6, r6
 800ba82:	4283      	cmp	r3, r0
 800ba84:	4637      	mov	r7, r6
 800ba86:	dc04      	bgt.n	800ba92 <__swbuf_r+0x42>
 800ba88:	4621      	mov	r1, r4
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f000 f948 	bl	800bd20 <_fflush_r>
 800ba90:	bb30      	cbnz	r0, 800bae0 <__swbuf_r+0x90>
 800ba92:	68a3      	ldr	r3, [r4, #8]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	60a3      	str	r3, [r4, #8]
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	6022      	str	r2, [r4, #0]
 800ba9e:	701e      	strb	r6, [r3, #0]
 800baa0:	6963      	ldr	r3, [r4, #20]
 800baa2:	3001      	adds	r0, #1
 800baa4:	4283      	cmp	r3, r0
 800baa6:	d004      	beq.n	800bab2 <__swbuf_r+0x62>
 800baa8:	89a3      	ldrh	r3, [r4, #12]
 800baaa:	07db      	lsls	r3, r3, #31
 800baac:	d506      	bpl.n	800babc <__swbuf_r+0x6c>
 800baae:	2e0a      	cmp	r6, #10
 800bab0:	d104      	bne.n	800babc <__swbuf_r+0x6c>
 800bab2:	4621      	mov	r1, r4
 800bab4:	4628      	mov	r0, r5
 800bab6:	f000 f933 	bl	800bd20 <_fflush_r>
 800baba:	b988      	cbnz	r0, 800bae0 <__swbuf_r+0x90>
 800babc:	4638      	mov	r0, r7
 800babe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <__swbuf_r+0x9c>)
 800bac2:	429c      	cmp	r4, r3
 800bac4:	d101      	bne.n	800baca <__swbuf_r+0x7a>
 800bac6:	68ac      	ldr	r4, [r5, #8]
 800bac8:	e7cf      	b.n	800ba6a <__swbuf_r+0x1a>
 800baca:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <__swbuf_r+0xa0>)
 800bacc:	429c      	cmp	r4, r3
 800bace:	bf08      	it	eq
 800bad0:	68ec      	ldreq	r4, [r5, #12]
 800bad2:	e7ca      	b.n	800ba6a <__swbuf_r+0x1a>
 800bad4:	4621      	mov	r1, r4
 800bad6:	4628      	mov	r0, r5
 800bad8:	f000 f81e 	bl	800bb18 <__swsetup_r>
 800badc:	2800      	cmp	r0, #0
 800bade:	d0cb      	beq.n	800ba78 <__swbuf_r+0x28>
 800bae0:	f04f 37ff 	mov.w	r7, #4294967295
 800bae4:	e7ea      	b.n	800babc <__swbuf_r+0x6c>
 800bae6:	bf00      	nop
 800bae8:	0800c034 	.word	0x0800c034
 800baec:	0800c054 	.word	0x0800c054
 800baf0:	0800c014 	.word	0x0800c014

0800baf4 <_write_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4d07      	ldr	r5, [pc, #28]	; (800bb14 <_write_r+0x20>)
 800baf8:	4604      	mov	r4, r0
 800bafa:	4608      	mov	r0, r1
 800bafc:	4611      	mov	r1, r2
 800bafe:	2200      	movs	r2, #0
 800bb00:	602a      	str	r2, [r5, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	f7f5 f94f 	bl	8000da6 <_write>
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	d102      	bne.n	800bb12 <_write_r+0x1e>
 800bb0c:	682b      	ldr	r3, [r5, #0]
 800bb0e:	b103      	cbz	r3, 800bb12 <_write_r+0x1e>
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	2000667c 	.word	0x2000667c

0800bb18 <__swsetup_r>:
 800bb18:	4b32      	ldr	r3, [pc, #200]	; (800bbe4 <__swsetup_r+0xcc>)
 800bb1a:	b570      	push	{r4, r5, r6, lr}
 800bb1c:	681d      	ldr	r5, [r3, #0]
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460c      	mov	r4, r1
 800bb22:	b125      	cbz	r5, 800bb2e <__swsetup_r+0x16>
 800bb24:	69ab      	ldr	r3, [r5, #24]
 800bb26:	b913      	cbnz	r3, 800bb2e <__swsetup_r+0x16>
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f7ff fbb3 	bl	800b294 <__sinit>
 800bb2e:	4b2e      	ldr	r3, [pc, #184]	; (800bbe8 <__swsetup_r+0xd0>)
 800bb30:	429c      	cmp	r4, r3
 800bb32:	d10f      	bne.n	800bb54 <__swsetup_r+0x3c>
 800bb34:	686c      	ldr	r4, [r5, #4]
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb3c:	0719      	lsls	r1, r3, #28
 800bb3e:	d42c      	bmi.n	800bb9a <__swsetup_r+0x82>
 800bb40:	06dd      	lsls	r5, r3, #27
 800bb42:	d411      	bmi.n	800bb68 <__swsetup_r+0x50>
 800bb44:	2309      	movs	r3, #9
 800bb46:	6033      	str	r3, [r6, #0]
 800bb48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb4c:	81a3      	strh	r3, [r4, #12]
 800bb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb52:	e03e      	b.n	800bbd2 <__swsetup_r+0xba>
 800bb54:	4b25      	ldr	r3, [pc, #148]	; (800bbec <__swsetup_r+0xd4>)
 800bb56:	429c      	cmp	r4, r3
 800bb58:	d101      	bne.n	800bb5e <__swsetup_r+0x46>
 800bb5a:	68ac      	ldr	r4, [r5, #8]
 800bb5c:	e7eb      	b.n	800bb36 <__swsetup_r+0x1e>
 800bb5e:	4b24      	ldr	r3, [pc, #144]	; (800bbf0 <__swsetup_r+0xd8>)
 800bb60:	429c      	cmp	r4, r3
 800bb62:	bf08      	it	eq
 800bb64:	68ec      	ldreq	r4, [r5, #12]
 800bb66:	e7e6      	b.n	800bb36 <__swsetup_r+0x1e>
 800bb68:	0758      	lsls	r0, r3, #29
 800bb6a:	d512      	bpl.n	800bb92 <__swsetup_r+0x7a>
 800bb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb6e:	b141      	cbz	r1, 800bb82 <__swsetup_r+0x6a>
 800bb70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb74:	4299      	cmp	r1, r3
 800bb76:	d002      	beq.n	800bb7e <__swsetup_r+0x66>
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff fa61 	bl	800b040 <_free_r>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6363      	str	r3, [r4, #52]	; 0x34
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	6063      	str	r3, [r4, #4]
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	f043 0308 	orr.w	r3, r3, #8
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	b94b      	cbnz	r3, 800bbb2 <__swsetup_r+0x9a>
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bba8:	d003      	beq.n	800bbb2 <__swsetup_r+0x9a>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4630      	mov	r0, r6
 800bbae:	f000 f929 	bl	800be04 <__smakebuf_r>
 800bbb2:	89a0      	ldrh	r0, [r4, #12]
 800bbb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbb8:	f010 0301 	ands.w	r3, r0, #1
 800bbbc:	d00a      	beq.n	800bbd4 <__swsetup_r+0xbc>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60a3      	str	r3, [r4, #8]
 800bbc2:	6963      	ldr	r3, [r4, #20]
 800bbc4:	425b      	negs	r3, r3
 800bbc6:	61a3      	str	r3, [r4, #24]
 800bbc8:	6923      	ldr	r3, [r4, #16]
 800bbca:	b943      	cbnz	r3, 800bbde <__swsetup_r+0xc6>
 800bbcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbd0:	d1ba      	bne.n	800bb48 <__swsetup_r+0x30>
 800bbd2:	bd70      	pop	{r4, r5, r6, pc}
 800bbd4:	0781      	lsls	r1, r0, #30
 800bbd6:	bf58      	it	pl
 800bbd8:	6963      	ldrpl	r3, [r4, #20]
 800bbda:	60a3      	str	r3, [r4, #8]
 800bbdc:	e7f4      	b.n	800bbc8 <__swsetup_r+0xb0>
 800bbde:	2000      	movs	r0, #0
 800bbe0:	e7f7      	b.n	800bbd2 <__swsetup_r+0xba>
 800bbe2:	bf00      	nop
 800bbe4:	20000194 	.word	0x20000194
 800bbe8:	0800c034 	.word	0x0800c034
 800bbec:	0800c054 	.word	0x0800c054
 800bbf0:	0800c014 	.word	0x0800c014

0800bbf4 <_close_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d06      	ldr	r5, [pc, #24]	; (800bc10 <_close_r+0x1c>)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	602b      	str	r3, [r5, #0]
 800bc00:	f7f5 f8ed 	bl	8000dde <_close>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_close_r+0x1a>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_close_r+0x1a>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	2000667c 	.word	0x2000667c

0800bc14 <__sflush_r>:
 800bc14:	898a      	ldrh	r2, [r1, #12]
 800bc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	0710      	lsls	r0, r2, #28
 800bc1e:	460c      	mov	r4, r1
 800bc20:	d458      	bmi.n	800bcd4 <__sflush_r+0xc0>
 800bc22:	684b      	ldr	r3, [r1, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	dc05      	bgt.n	800bc34 <__sflush_r+0x20>
 800bc28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	dc02      	bgt.n	800bc34 <__sflush_r+0x20>
 800bc2e:	2000      	movs	r0, #0
 800bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc36:	2e00      	cmp	r6, #0
 800bc38:	d0f9      	beq.n	800bc2e <__sflush_r+0x1a>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc40:	682f      	ldr	r7, [r5, #0]
 800bc42:	602b      	str	r3, [r5, #0]
 800bc44:	d032      	beq.n	800bcac <__sflush_r+0x98>
 800bc46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	075a      	lsls	r2, r3, #29
 800bc4c:	d505      	bpl.n	800bc5a <__sflush_r+0x46>
 800bc4e:	6863      	ldr	r3, [r4, #4]
 800bc50:	1ac0      	subs	r0, r0, r3
 800bc52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc54:	b10b      	cbz	r3, 800bc5a <__sflush_r+0x46>
 800bc56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc58:	1ac0      	subs	r0, r0, r3
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc60:	6a21      	ldr	r1, [r4, #32]
 800bc62:	4628      	mov	r0, r5
 800bc64:	47b0      	blx	r6
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	d106      	bne.n	800bc7a <__sflush_r+0x66>
 800bc6c:	6829      	ldr	r1, [r5, #0]
 800bc6e:	291d      	cmp	r1, #29
 800bc70:	d82c      	bhi.n	800bccc <__sflush_r+0xb8>
 800bc72:	4a2a      	ldr	r2, [pc, #168]	; (800bd1c <__sflush_r+0x108>)
 800bc74:	40ca      	lsrs	r2, r1
 800bc76:	07d6      	lsls	r6, r2, #31
 800bc78:	d528      	bpl.n	800bccc <__sflush_r+0xb8>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	6062      	str	r2, [r4, #4]
 800bc7e:	04d9      	lsls	r1, r3, #19
 800bc80:	6922      	ldr	r2, [r4, #16]
 800bc82:	6022      	str	r2, [r4, #0]
 800bc84:	d504      	bpl.n	800bc90 <__sflush_r+0x7c>
 800bc86:	1c42      	adds	r2, r0, #1
 800bc88:	d101      	bne.n	800bc8e <__sflush_r+0x7a>
 800bc8a:	682b      	ldr	r3, [r5, #0]
 800bc8c:	b903      	cbnz	r3, 800bc90 <__sflush_r+0x7c>
 800bc8e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc92:	602f      	str	r7, [r5, #0]
 800bc94:	2900      	cmp	r1, #0
 800bc96:	d0ca      	beq.n	800bc2e <__sflush_r+0x1a>
 800bc98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc9c:	4299      	cmp	r1, r3
 800bc9e:	d002      	beq.n	800bca6 <__sflush_r+0x92>
 800bca0:	4628      	mov	r0, r5
 800bca2:	f7ff f9cd 	bl	800b040 <_free_r>
 800bca6:	2000      	movs	r0, #0
 800bca8:	6360      	str	r0, [r4, #52]	; 0x34
 800bcaa:	e7c1      	b.n	800bc30 <__sflush_r+0x1c>
 800bcac:	6a21      	ldr	r1, [r4, #32]
 800bcae:	2301      	movs	r3, #1
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	47b0      	blx	r6
 800bcb4:	1c41      	adds	r1, r0, #1
 800bcb6:	d1c7      	bne.n	800bc48 <__sflush_r+0x34>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d0c4      	beq.n	800bc48 <__sflush_r+0x34>
 800bcbe:	2b1d      	cmp	r3, #29
 800bcc0:	d001      	beq.n	800bcc6 <__sflush_r+0xb2>
 800bcc2:	2b16      	cmp	r3, #22
 800bcc4:	d101      	bne.n	800bcca <__sflush_r+0xb6>
 800bcc6:	602f      	str	r7, [r5, #0]
 800bcc8:	e7b1      	b.n	800bc2e <__sflush_r+0x1a>
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd0:	81a3      	strh	r3, [r4, #12]
 800bcd2:	e7ad      	b.n	800bc30 <__sflush_r+0x1c>
 800bcd4:	690f      	ldr	r7, [r1, #16]
 800bcd6:	2f00      	cmp	r7, #0
 800bcd8:	d0a9      	beq.n	800bc2e <__sflush_r+0x1a>
 800bcda:	0793      	lsls	r3, r2, #30
 800bcdc:	680e      	ldr	r6, [r1, #0]
 800bcde:	bf08      	it	eq
 800bce0:	694b      	ldreq	r3, [r1, #20]
 800bce2:	600f      	str	r7, [r1, #0]
 800bce4:	bf18      	it	ne
 800bce6:	2300      	movne	r3, #0
 800bce8:	eba6 0807 	sub.w	r8, r6, r7
 800bcec:	608b      	str	r3, [r1, #8]
 800bcee:	f1b8 0f00 	cmp.w	r8, #0
 800bcf2:	dd9c      	ble.n	800bc2e <__sflush_r+0x1a>
 800bcf4:	6a21      	ldr	r1, [r4, #32]
 800bcf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcf8:	4643      	mov	r3, r8
 800bcfa:	463a      	mov	r2, r7
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b0      	blx	r6
 800bd00:	2800      	cmp	r0, #0
 800bd02:	dc06      	bgt.n	800bd12 <__sflush_r+0xfe>
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd0a:	81a3      	strh	r3, [r4, #12]
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	e78e      	b.n	800bc30 <__sflush_r+0x1c>
 800bd12:	4407      	add	r7, r0
 800bd14:	eba8 0800 	sub.w	r8, r8, r0
 800bd18:	e7e9      	b.n	800bcee <__sflush_r+0xda>
 800bd1a:	bf00      	nop
 800bd1c:	20400001 	.word	0x20400001

0800bd20 <_fflush_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	690b      	ldr	r3, [r1, #16]
 800bd24:	4605      	mov	r5, r0
 800bd26:	460c      	mov	r4, r1
 800bd28:	b913      	cbnz	r3, 800bd30 <_fflush_r+0x10>
 800bd2a:	2500      	movs	r5, #0
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	b118      	cbz	r0, 800bd3a <_fflush_r+0x1a>
 800bd32:	6983      	ldr	r3, [r0, #24]
 800bd34:	b90b      	cbnz	r3, 800bd3a <_fflush_r+0x1a>
 800bd36:	f7ff faad 	bl	800b294 <__sinit>
 800bd3a:	4b14      	ldr	r3, [pc, #80]	; (800bd8c <_fflush_r+0x6c>)
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	d11b      	bne.n	800bd78 <_fflush_r+0x58>
 800bd40:	686c      	ldr	r4, [r5, #4]
 800bd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0ef      	beq.n	800bd2a <_fflush_r+0xa>
 800bd4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd4c:	07d0      	lsls	r0, r2, #31
 800bd4e:	d404      	bmi.n	800bd5a <_fflush_r+0x3a>
 800bd50:	0599      	lsls	r1, r3, #22
 800bd52:	d402      	bmi.n	800bd5a <_fflush_r+0x3a>
 800bd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd56:	f7ff fb3b 	bl	800b3d0 <__retarget_lock_acquire_recursive>
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	f7ff ff59 	bl	800bc14 <__sflush_r>
 800bd62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd64:	07da      	lsls	r2, r3, #31
 800bd66:	4605      	mov	r5, r0
 800bd68:	d4e0      	bmi.n	800bd2c <_fflush_r+0xc>
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	059b      	lsls	r3, r3, #22
 800bd6e:	d4dd      	bmi.n	800bd2c <_fflush_r+0xc>
 800bd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd72:	f7ff fb2e 	bl	800b3d2 <__retarget_lock_release_recursive>
 800bd76:	e7d9      	b.n	800bd2c <_fflush_r+0xc>
 800bd78:	4b05      	ldr	r3, [pc, #20]	; (800bd90 <_fflush_r+0x70>)
 800bd7a:	429c      	cmp	r4, r3
 800bd7c:	d101      	bne.n	800bd82 <_fflush_r+0x62>
 800bd7e:	68ac      	ldr	r4, [r5, #8]
 800bd80:	e7df      	b.n	800bd42 <_fflush_r+0x22>
 800bd82:	4b04      	ldr	r3, [pc, #16]	; (800bd94 <_fflush_r+0x74>)
 800bd84:	429c      	cmp	r4, r3
 800bd86:	bf08      	it	eq
 800bd88:	68ec      	ldreq	r4, [r5, #12]
 800bd8a:	e7da      	b.n	800bd42 <_fflush_r+0x22>
 800bd8c:	0800c034 	.word	0x0800c034
 800bd90:	0800c054 	.word	0x0800c054
 800bd94:	0800c014 	.word	0x0800c014

0800bd98 <_lseek_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d07      	ldr	r5, [pc, #28]	; (800bdb8 <_lseek_r+0x20>)
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	4608      	mov	r0, r1
 800bda0:	4611      	mov	r1, r2
 800bda2:	2200      	movs	r2, #0
 800bda4:	602a      	str	r2, [r5, #0]
 800bda6:	461a      	mov	r2, r3
 800bda8:	f7f5 f840 	bl	8000e2c <_lseek>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	d102      	bne.n	800bdb6 <_lseek_r+0x1e>
 800bdb0:	682b      	ldr	r3, [r5, #0]
 800bdb2:	b103      	cbz	r3, 800bdb6 <_lseek_r+0x1e>
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	bd38      	pop	{r3, r4, r5, pc}
 800bdb8:	2000667c 	.word	0x2000667c

0800bdbc <__swhatbuf_r>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	460e      	mov	r6, r1
 800bdc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc4:	2900      	cmp	r1, #0
 800bdc6:	b096      	sub	sp, #88	; 0x58
 800bdc8:	4614      	mov	r4, r2
 800bdca:	461d      	mov	r5, r3
 800bdcc:	da07      	bge.n	800bdde <__swhatbuf_r+0x22>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	89b3      	ldrh	r3, [r6, #12]
 800bdd4:	061a      	lsls	r2, r3, #24
 800bdd6:	d410      	bmi.n	800bdfa <__swhatbuf_r+0x3e>
 800bdd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bddc:	e00e      	b.n	800bdfc <__swhatbuf_r+0x40>
 800bdde:	466a      	mov	r2, sp
 800bde0:	f000 f862 	bl	800bea8 <_fstat_r>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	dbf2      	blt.n	800bdce <__swhatbuf_r+0x12>
 800bde8:	9a01      	ldr	r2, [sp, #4]
 800bdea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdf2:	425a      	negs	r2, r3
 800bdf4:	415a      	adcs	r2, r3
 800bdf6:	602a      	str	r2, [r5, #0]
 800bdf8:	e7ee      	b.n	800bdd8 <__swhatbuf_r+0x1c>
 800bdfa:	2340      	movs	r3, #64	; 0x40
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	6023      	str	r3, [r4, #0]
 800be00:	b016      	add	sp, #88	; 0x58
 800be02:	bd70      	pop	{r4, r5, r6, pc}

0800be04 <__smakebuf_r>:
 800be04:	898b      	ldrh	r3, [r1, #12]
 800be06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be08:	079d      	lsls	r5, r3, #30
 800be0a:	4606      	mov	r6, r0
 800be0c:	460c      	mov	r4, r1
 800be0e:	d507      	bpl.n	800be20 <__smakebuf_r+0x1c>
 800be10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	6123      	str	r3, [r4, #16]
 800be18:	2301      	movs	r3, #1
 800be1a:	6163      	str	r3, [r4, #20]
 800be1c:	b002      	add	sp, #8
 800be1e:	bd70      	pop	{r4, r5, r6, pc}
 800be20:	ab01      	add	r3, sp, #4
 800be22:	466a      	mov	r2, sp
 800be24:	f7ff ffca 	bl	800bdbc <__swhatbuf_r>
 800be28:	9900      	ldr	r1, [sp, #0]
 800be2a:	4605      	mov	r5, r0
 800be2c:	4630      	mov	r0, r6
 800be2e:	f7ff f957 	bl	800b0e0 <_malloc_r>
 800be32:	b948      	cbnz	r0, 800be48 <__smakebuf_r+0x44>
 800be34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be38:	059a      	lsls	r2, r3, #22
 800be3a:	d4ef      	bmi.n	800be1c <__smakebuf_r+0x18>
 800be3c:	f023 0303 	bic.w	r3, r3, #3
 800be40:	f043 0302 	orr.w	r3, r3, #2
 800be44:	81a3      	strh	r3, [r4, #12]
 800be46:	e7e3      	b.n	800be10 <__smakebuf_r+0xc>
 800be48:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <__smakebuf_r+0x7c>)
 800be4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	6020      	str	r0, [r4, #0]
 800be50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be54:	81a3      	strh	r3, [r4, #12]
 800be56:	9b00      	ldr	r3, [sp, #0]
 800be58:	6163      	str	r3, [r4, #20]
 800be5a:	9b01      	ldr	r3, [sp, #4]
 800be5c:	6120      	str	r0, [r4, #16]
 800be5e:	b15b      	cbz	r3, 800be78 <__smakebuf_r+0x74>
 800be60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be64:	4630      	mov	r0, r6
 800be66:	f000 f831 	bl	800becc <_isatty_r>
 800be6a:	b128      	cbz	r0, 800be78 <__smakebuf_r+0x74>
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	f023 0303 	bic.w	r3, r3, #3
 800be72:	f043 0301 	orr.w	r3, r3, #1
 800be76:	81a3      	strh	r3, [r4, #12]
 800be78:	89a0      	ldrh	r0, [r4, #12]
 800be7a:	4305      	orrs	r5, r0
 800be7c:	81a5      	strh	r5, [r4, #12]
 800be7e:	e7cd      	b.n	800be1c <__smakebuf_r+0x18>
 800be80:	0800b22d 	.word	0x0800b22d

0800be84 <_read_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4d07      	ldr	r5, [pc, #28]	; (800bea4 <_read_r+0x20>)
 800be88:	4604      	mov	r4, r0
 800be8a:	4608      	mov	r0, r1
 800be8c:	4611      	mov	r1, r2
 800be8e:	2200      	movs	r2, #0
 800be90:	602a      	str	r2, [r5, #0]
 800be92:	461a      	mov	r2, r3
 800be94:	f7f4 ff6a 	bl	8000d6c <_read>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d102      	bne.n	800bea2 <_read_r+0x1e>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	b103      	cbz	r3, 800bea2 <_read_r+0x1e>
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	2000667c 	.word	0x2000667c

0800bea8 <_fstat_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4d07      	ldr	r5, [pc, #28]	; (800bec8 <_fstat_r+0x20>)
 800beac:	2300      	movs	r3, #0
 800beae:	4604      	mov	r4, r0
 800beb0:	4608      	mov	r0, r1
 800beb2:	4611      	mov	r1, r2
 800beb4:	602b      	str	r3, [r5, #0]
 800beb6:	f7f4 ff9e 	bl	8000df6 <_fstat>
 800beba:	1c43      	adds	r3, r0, #1
 800bebc:	d102      	bne.n	800bec4 <_fstat_r+0x1c>
 800bebe:	682b      	ldr	r3, [r5, #0]
 800bec0:	b103      	cbz	r3, 800bec4 <_fstat_r+0x1c>
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	bd38      	pop	{r3, r4, r5, pc}
 800bec6:	bf00      	nop
 800bec8:	2000667c 	.word	0x2000667c

0800becc <_isatty_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d06      	ldr	r5, [pc, #24]	; (800bee8 <_isatty_r+0x1c>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	602b      	str	r3, [r5, #0]
 800bed8:	f7f4 ff9d 	bl	8000e16 <_isatty>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_isatty_r+0x1a>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_isatty_r+0x1a>
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	2000667c 	.word	0x2000667c

0800beec <_init>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	bf00      	nop
 800bef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef2:	bc08      	pop	{r3}
 800bef4:	469e      	mov	lr, r3
 800bef6:	4770      	bx	lr

0800bef8 <_fini>:
 800bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befa:	bf00      	nop
 800befc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befe:	bc08      	pop	{r3}
 800bf00:	469e      	mov	lr, r3
 800bf02:	4770      	bx	lr
